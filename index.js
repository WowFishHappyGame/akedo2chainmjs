/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


function __awaiter$1(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}
function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray(r);
}
function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function asyncGeneratorStep(n, t, e, r, o, a, c) {
  try {
    var i = n[a](c),
      u = i.value;
  } catch (n) {
    return void e(n);
  }
  i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function () {
    var t = this,
      e = arguments;
    return new Promise(function (r, o) {
      var a = n.apply(t, e);
      function _next(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
      }
      function _throw(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
      }
      _next(void 0);
    });
  };
}
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _construct(t, e, r) {
  if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
  var o = [null];
  o.push.apply(o, e);
  var p = new (t.bind.apply(t, o))();
  return r && _setPrototypeOf(p, r.prototype), p;
}
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
function _createForOfIteratorHelper(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (!t) {
    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {
      t && (r = t);
      var n = 0,
        F = function () {};
      return {
        s: F,
        n: function () {
          return n >= r.length ? {
            done: !0
          } : {
            done: !1,
            value: r[n++]
          };
        },
        e: function (r) {
          throw r;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o,
    a = !0,
    u = !1;
  return {
    s: function () {
      t = t.call(r);
    },
    n: function () {
      var r = t.next();
      return a = r.done, r;
    },
    e: function (r) {
      u = !0, o = r;
    },
    f: function () {
      try {
        a || null == t.return || t.return();
      } finally {
        if (u) throw o;
      }
    }
  };
}
function _defineAccessor(e, r, n, t) {
  var c = {
    configurable: !0,
    enumerable: !0
  };
  return c[e] = t, Object.defineProperty(r, n, c);
}
function _defineProperty$1(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}
function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, _getPrototypeOf(t);
}
function _inherits(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: !0,
      configurable: !0
    }
  }), Object.defineProperty(t, "prototype", {
    writable: !1
  }), e && _setPrototypeOf(t, e);
}
function _isNativeFunction(t) {
  try {
    return -1 !== Function.toString.call(t).indexOf("[native code]");
  } catch (n) {
    return "function" == typeof t;
  }
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function () {
    return !!t;
  })();
}
function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys$2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) {
      _defineProperty$1(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
function _possibleConstructorReturn(t, e) {
  if (e && ("object" == typeof e || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t);
}
function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function (t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function (t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(typeof e + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function (e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function () {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function (e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function (t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function (t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    catch: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw Error("illegal catch attempt");
    },
    delegateYield: function (e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf(t, e);
}
function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _taggedTemplateLiteral(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, {
    raw: {
      value: Object.freeze(t)
    }
  }));
}
function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _wrapNativeSuper(t) {
  var r = "function" == typeof Map ? new Map() : void 0;
  return _wrapNativeSuper = function (t) {
    if (null === t || !_isNativeFunction(t)) return t;
    if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== r) {
      if (r.has(t)) return r.get(t);
      r.set(t, Wrapper);
    }
    function Wrapper() {
      return _construct(t, arguments, _getPrototypeOf(this).constructor);
    }
    return Wrapper.prototype = Object.create(t.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), _setPrototypeOf(Wrapper, t);
  }, _wrapNativeSuper(t);
}

var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

var lookup$1 = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var inited = false;
function init() {
  inited = true;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup$1[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }
  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
}
function toByteArray(b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

  // base64 is 4/3 + up to two characters of the original data
  arr = new Arr(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;
  var L = 0;
  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }
  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup$1[num >> 18 & 0x3F] + lookup$1[num >> 12 & 0x3F] + lookup$1[num >> 6 & 0x3F] + lookup$1[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}
function fromByteArray(uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup$1[tmp >> 2];
    output += lookup$1[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup$1[tmp >> 10];
    output += lookup$1[tmp >> 4 & 0x3F];
    output += lookup$1[tmp << 2 & 0x3F];
    output += '=';
  }
  parts.push(output);
  return parts.join('');
}

function read(buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
}
function write(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
  buffer[offset + i - d] |= s * 128;
}

var toString = {}.toString;
var isArray$1 = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

var INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;

/*
 * Export kMaxLength after typed array support is determined.
 */
var _kMaxLength = kMaxLength();
function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}
function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }
  return that;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return allocUnsafe(this, arg);
  }
  return from$2(this, arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};
function from$2(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }
  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }
  return fromObject(that, value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from$2(null, value, encodingOrOffset, length);
};
if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) ;
}
function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}
function alloc(that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }
  return createBuffer(that, size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};
function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};
function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }
  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }
  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);
  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }
  return that;
}
function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}
function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }
  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }
  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that;
}
function fromObject(that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);
    if (that.length === 0) {
      return that;
    }
    obj.copy(that, 0, 0, len);
    return that;
  }
  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }
    if (obj.type === 'Buffer' && isArray$1(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }
  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}
function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }
  return length | 0;
}
function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length);
}
Buffer.isBuffer = isBuffer;
function internalIsBuffer(b) {
  return !!(b != null && b._isBuffer);
}
Buffer.compare = function compare(a, b) {
  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }
  if (a === b) return 0;
  var x = a.length;
  var y = b.length;
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }
  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};
Buffer.concat = function concat(list, length) {
  if (!isArray$1(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }
  if (list.length === 0) {
    return Buffer.alloc(0);
  }
  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }
  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};
function byteLength(string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }
  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes$5(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }
  if (end === undefined || end > this.length) {
    end = this.length;
  }
  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;
  if (end <= start) {
    return '';
  }
  if (!encoding) encoding = 'utf8';
  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);
      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);
      case 'ascii':
        return asciiSlice(this, start, end);
      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);
      case 'base64':
        return base64Slice(this, start, end);
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);
      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};
Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};
Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};
Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};
Buffer.prototype.equals = function equals(b) {
  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!internalIsBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }
  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }
  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }
  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }
  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);
  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }
  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (internalIsBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }
  throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;
  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }
  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }
  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }
  return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}
function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}
function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes$5(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
    // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }
  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;
  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }
  if (!encoding) encoding = 'utf8';
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);
      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);
      case 'ascii':
        return asciiWrite(this, string, offset, length);
      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);
      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);
      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};
Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};
function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray(buf);
  } else {
    return fromByteArray(buf.slice(start, end));
  }
}
function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;
      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }
    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }
    res.push(codePoint);
    i += bytesPerSequence;
  }
  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}
function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}
function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}
function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}
function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}
Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;
  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }
  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }
  if (end < start) end = start;
  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }
  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  return val;
};
Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }
  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }
  return val;
};
Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};
Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }
  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }
  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};
function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}
Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};
Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};
function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}
Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};
Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }
  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }
  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4);
  }
  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8);
  }
  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }
  var len = end - start;
  var i;
  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }
  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }
  if (end <= start) {
    return this;
  }
  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }
  return this;
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}
function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}
function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}
function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];
  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;
        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }
    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }
  return bytes;
}
function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}
function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }
  return byteArray;
}
function base64ToBytes$5(str) {
  return toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}
function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}

// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
}
function isFastBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));
}

var bufferEs6 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Buffer: Buffer,
    INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
    SlowBuffer: SlowBuffer,
    isBuffer: isBuffer,
    kMaxLength: _kMaxLength
});

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var naclUtil = {exports: {}};

(function (module) {
  // Written in 2014-2016 by Dmitry Chestnykh and Devi Mandiri.
  // Public domain.
  (function (root, f) {

    if (module.exports) module.exports = f();else if (root.nacl) root.nacl.util = f();else {
      root.nacl = {};
      root.nacl.util = f();
    }
  })(commonjsGlobal, function () {

    var util = {};
    function validateBase64(s) {
      if (!/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(s)) {
        throw new TypeError('invalid encoding');
      }
    }
    util.decodeUTF8 = function (s) {
      if (typeof s !== 'string') throw new TypeError('expected string');
      var i,
        d = unescape(encodeURIComponent(s)),
        b = new Uint8Array(d.length);
      for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);
      return b;
    };
    util.encodeUTF8 = function (arr) {
      var i,
        s = [];
      for (i = 0; i < arr.length; i++) s.push(String.fromCharCode(arr[i]));
      return decodeURIComponent(escape(s.join('')));
    };
    if (typeof atob === 'undefined') {
      // Node.js

      if (typeof Buffer.from !== 'undefined') {
        // Node v6 and later
        util.encodeBase64 = function (arr) {
          // v6 and later
          return Buffer.from(arr).toString('base64');
        };
        util.decodeBase64 = function (s) {
          validateBase64(s);
          return new Uint8Array(Array.prototype.slice.call(Buffer.from(s, 'base64'), 0));
        };
      } else {
        // Node earlier than v6
        util.encodeBase64 = function (arr) {
          // v6 and later
          return new Buffer(arr).toString('base64');
        };
        util.decodeBase64 = function (s) {
          validateBase64(s);
          return new Uint8Array(Array.prototype.slice.call(new Buffer(s, 'base64'), 0));
        };
      }
    } else {
      // Browsers

      util.encodeBase64 = function (arr) {
        var i,
          s = [],
          len = arr.length;
        for (i = 0; i < len; i++) s.push(String.fromCharCode(arr[i]));
        return btoa(s.join(''));
      };
      util.decodeBase64 = function (s) {
        validateBase64(s);
        var i,
          d = atob(s),
          b = new Uint8Array(d.length);
        for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);
        return b;
      };
    }
    return util;
  });
})(naclUtil);
var naclUtilExports = naclUtil.exports;
var nacl$5 = /*@__PURE__*/getDefaultExportFromCjs(naclUtilExports);

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var naclFast = {exports: {}};

var empty$1 = {};

var empty$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: empty$1
});

var require$$0$3 = /*@__PURE__*/getAugmentedNamespace(empty$2);

(function (module) {
  (function (nacl) {

    // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
    // Public domain.
    //
    // Implementation derived from TweetNaCl version 20140427.
    // See for details: http://tweetnacl.cr.yp.to/
    var gf = function gf(init) {
      var i,
        r = new Float64Array(16);
      if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
      return r;
    };

    //  Pluggable, initialized in high-level API below.
    var randombytes = function randombytes(/* x, n */) {
      throw new Error('no PRNG');
    };
    var _0 = new Uint8Array(16);
    var _9 = new Uint8Array(32);
    _9[0] = 9;
    var gf0 = gf(),
      gf1 = gf([1]),
      _121665 = gf([0xdb41, 1]),
      D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
      D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
      X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
      Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
      I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);
    function ts64(x, i, h, l) {
      x[i] = h >> 24 & 0xff;
      x[i + 1] = h >> 16 & 0xff;
      x[i + 2] = h >> 8 & 0xff;
      x[i + 3] = h & 0xff;
      x[i + 4] = l >> 24 & 0xff;
      x[i + 5] = l >> 16 & 0xff;
      x[i + 6] = l >> 8 & 0xff;
      x[i + 7] = l & 0xff;
    }
    function vn(x, xi, y, yi, n) {
      var i,
        d = 0;
      for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];
      return (1 & d - 1 >>> 8) - 1;
    }
    function crypto_verify_16(x, xi, y, yi) {
      return vn(x, xi, y, yi, 16);
    }
    function crypto_verify_32(x, xi, y, yi) {
      return vn(x, xi, y, yi, 32);
    }
    function core_salsa20(o, p, k, c) {
      var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
        j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
        j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
        j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
        j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
        j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
        j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
        j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
        j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
        j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
        j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
        j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
        j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
        j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
        j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
        j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
      var x0 = j0,
        x1 = j1,
        x2 = j2,
        x3 = j3,
        x4 = j4,
        x5 = j5,
        x6 = j6,
        x7 = j7,
        x8 = j8,
        x9 = j9,
        x10 = j10,
        x11 = j11,
        x12 = j12,
        x13 = j13,
        x14 = j14,
        x15 = j15,
        u;
      for (var i = 0; i < 20; i += 2) {
        u = x0 + x12 | 0;
        x4 ^= u << 7 | u >>> 32 - 7;
        u = x4 + x0 | 0;
        x8 ^= u << 9 | u >>> 32 - 9;
        u = x8 + x4 | 0;
        x12 ^= u << 13 | u >>> 32 - 13;
        u = x12 + x8 | 0;
        x0 ^= u << 18 | u >>> 32 - 18;
        u = x5 + x1 | 0;
        x9 ^= u << 7 | u >>> 32 - 7;
        u = x9 + x5 | 0;
        x13 ^= u << 9 | u >>> 32 - 9;
        u = x13 + x9 | 0;
        x1 ^= u << 13 | u >>> 32 - 13;
        u = x1 + x13 | 0;
        x5 ^= u << 18 | u >>> 32 - 18;
        u = x10 + x6 | 0;
        x14 ^= u << 7 | u >>> 32 - 7;
        u = x14 + x10 | 0;
        x2 ^= u << 9 | u >>> 32 - 9;
        u = x2 + x14 | 0;
        x6 ^= u << 13 | u >>> 32 - 13;
        u = x6 + x2 | 0;
        x10 ^= u << 18 | u >>> 32 - 18;
        u = x15 + x11 | 0;
        x3 ^= u << 7 | u >>> 32 - 7;
        u = x3 + x15 | 0;
        x7 ^= u << 9 | u >>> 32 - 9;
        u = x7 + x3 | 0;
        x11 ^= u << 13 | u >>> 32 - 13;
        u = x11 + x7 | 0;
        x15 ^= u << 18 | u >>> 32 - 18;
        u = x0 + x3 | 0;
        x1 ^= u << 7 | u >>> 32 - 7;
        u = x1 + x0 | 0;
        x2 ^= u << 9 | u >>> 32 - 9;
        u = x2 + x1 | 0;
        x3 ^= u << 13 | u >>> 32 - 13;
        u = x3 + x2 | 0;
        x0 ^= u << 18 | u >>> 32 - 18;
        u = x5 + x4 | 0;
        x6 ^= u << 7 | u >>> 32 - 7;
        u = x6 + x5 | 0;
        x7 ^= u << 9 | u >>> 32 - 9;
        u = x7 + x6 | 0;
        x4 ^= u << 13 | u >>> 32 - 13;
        u = x4 + x7 | 0;
        x5 ^= u << 18 | u >>> 32 - 18;
        u = x10 + x9 | 0;
        x11 ^= u << 7 | u >>> 32 - 7;
        u = x11 + x10 | 0;
        x8 ^= u << 9 | u >>> 32 - 9;
        u = x8 + x11 | 0;
        x9 ^= u << 13 | u >>> 32 - 13;
        u = x9 + x8 | 0;
        x10 ^= u << 18 | u >>> 32 - 18;
        u = x15 + x14 | 0;
        x12 ^= u << 7 | u >>> 32 - 7;
        u = x12 + x15 | 0;
        x13 ^= u << 9 | u >>> 32 - 9;
        u = x13 + x12 | 0;
        x14 ^= u << 13 | u >>> 32 - 13;
        u = x14 + x13 | 0;
        x15 ^= u << 18 | u >>> 32 - 18;
      }
      x0 = x0 + j0 | 0;
      x1 = x1 + j1 | 0;
      x2 = x2 + j2 | 0;
      x3 = x3 + j3 | 0;
      x4 = x4 + j4 | 0;
      x5 = x5 + j5 | 0;
      x6 = x6 + j6 | 0;
      x7 = x7 + j7 | 0;
      x8 = x8 + j8 | 0;
      x9 = x9 + j9 | 0;
      x10 = x10 + j10 | 0;
      x11 = x11 + j11 | 0;
      x12 = x12 + j12 | 0;
      x13 = x13 + j13 | 0;
      x14 = x14 + j14 | 0;
      x15 = x15 + j15 | 0;
      o[0] = x0 >>> 0 & 0xff;
      o[1] = x0 >>> 8 & 0xff;
      o[2] = x0 >>> 16 & 0xff;
      o[3] = x0 >>> 24 & 0xff;
      o[4] = x1 >>> 0 & 0xff;
      o[5] = x1 >>> 8 & 0xff;
      o[6] = x1 >>> 16 & 0xff;
      o[7] = x1 >>> 24 & 0xff;
      o[8] = x2 >>> 0 & 0xff;
      o[9] = x2 >>> 8 & 0xff;
      o[10] = x2 >>> 16 & 0xff;
      o[11] = x2 >>> 24 & 0xff;
      o[12] = x3 >>> 0 & 0xff;
      o[13] = x3 >>> 8 & 0xff;
      o[14] = x3 >>> 16 & 0xff;
      o[15] = x3 >>> 24 & 0xff;
      o[16] = x4 >>> 0 & 0xff;
      o[17] = x4 >>> 8 & 0xff;
      o[18] = x4 >>> 16 & 0xff;
      o[19] = x4 >>> 24 & 0xff;
      o[20] = x5 >>> 0 & 0xff;
      o[21] = x5 >>> 8 & 0xff;
      o[22] = x5 >>> 16 & 0xff;
      o[23] = x5 >>> 24 & 0xff;
      o[24] = x6 >>> 0 & 0xff;
      o[25] = x6 >>> 8 & 0xff;
      o[26] = x6 >>> 16 & 0xff;
      o[27] = x6 >>> 24 & 0xff;
      o[28] = x7 >>> 0 & 0xff;
      o[29] = x7 >>> 8 & 0xff;
      o[30] = x7 >>> 16 & 0xff;
      o[31] = x7 >>> 24 & 0xff;
      o[32] = x8 >>> 0 & 0xff;
      o[33] = x8 >>> 8 & 0xff;
      o[34] = x8 >>> 16 & 0xff;
      o[35] = x8 >>> 24 & 0xff;
      o[36] = x9 >>> 0 & 0xff;
      o[37] = x9 >>> 8 & 0xff;
      o[38] = x9 >>> 16 & 0xff;
      o[39] = x9 >>> 24 & 0xff;
      o[40] = x10 >>> 0 & 0xff;
      o[41] = x10 >>> 8 & 0xff;
      o[42] = x10 >>> 16 & 0xff;
      o[43] = x10 >>> 24 & 0xff;
      o[44] = x11 >>> 0 & 0xff;
      o[45] = x11 >>> 8 & 0xff;
      o[46] = x11 >>> 16 & 0xff;
      o[47] = x11 >>> 24 & 0xff;
      o[48] = x12 >>> 0 & 0xff;
      o[49] = x12 >>> 8 & 0xff;
      o[50] = x12 >>> 16 & 0xff;
      o[51] = x12 >>> 24 & 0xff;
      o[52] = x13 >>> 0 & 0xff;
      o[53] = x13 >>> 8 & 0xff;
      o[54] = x13 >>> 16 & 0xff;
      o[55] = x13 >>> 24 & 0xff;
      o[56] = x14 >>> 0 & 0xff;
      o[57] = x14 >>> 8 & 0xff;
      o[58] = x14 >>> 16 & 0xff;
      o[59] = x14 >>> 24 & 0xff;
      o[60] = x15 >>> 0 & 0xff;
      o[61] = x15 >>> 8 & 0xff;
      o[62] = x15 >>> 16 & 0xff;
      o[63] = x15 >>> 24 & 0xff;
    }
    function core_hsalsa20(o, p, k, c) {
      var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
        j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
        j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
        j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
        j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
        j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
        j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
        j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
        j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
        j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
        j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
        j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
        j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
        j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
        j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
        j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
      var x0 = j0,
        x1 = j1,
        x2 = j2,
        x3 = j3,
        x4 = j4,
        x5 = j5,
        x6 = j6,
        x7 = j7,
        x8 = j8,
        x9 = j9,
        x10 = j10,
        x11 = j11,
        x12 = j12,
        x13 = j13,
        x14 = j14,
        x15 = j15,
        u;
      for (var i = 0; i < 20; i += 2) {
        u = x0 + x12 | 0;
        x4 ^= u << 7 | u >>> 32 - 7;
        u = x4 + x0 | 0;
        x8 ^= u << 9 | u >>> 32 - 9;
        u = x8 + x4 | 0;
        x12 ^= u << 13 | u >>> 32 - 13;
        u = x12 + x8 | 0;
        x0 ^= u << 18 | u >>> 32 - 18;
        u = x5 + x1 | 0;
        x9 ^= u << 7 | u >>> 32 - 7;
        u = x9 + x5 | 0;
        x13 ^= u << 9 | u >>> 32 - 9;
        u = x13 + x9 | 0;
        x1 ^= u << 13 | u >>> 32 - 13;
        u = x1 + x13 | 0;
        x5 ^= u << 18 | u >>> 32 - 18;
        u = x10 + x6 | 0;
        x14 ^= u << 7 | u >>> 32 - 7;
        u = x14 + x10 | 0;
        x2 ^= u << 9 | u >>> 32 - 9;
        u = x2 + x14 | 0;
        x6 ^= u << 13 | u >>> 32 - 13;
        u = x6 + x2 | 0;
        x10 ^= u << 18 | u >>> 32 - 18;
        u = x15 + x11 | 0;
        x3 ^= u << 7 | u >>> 32 - 7;
        u = x3 + x15 | 0;
        x7 ^= u << 9 | u >>> 32 - 9;
        u = x7 + x3 | 0;
        x11 ^= u << 13 | u >>> 32 - 13;
        u = x11 + x7 | 0;
        x15 ^= u << 18 | u >>> 32 - 18;
        u = x0 + x3 | 0;
        x1 ^= u << 7 | u >>> 32 - 7;
        u = x1 + x0 | 0;
        x2 ^= u << 9 | u >>> 32 - 9;
        u = x2 + x1 | 0;
        x3 ^= u << 13 | u >>> 32 - 13;
        u = x3 + x2 | 0;
        x0 ^= u << 18 | u >>> 32 - 18;
        u = x5 + x4 | 0;
        x6 ^= u << 7 | u >>> 32 - 7;
        u = x6 + x5 | 0;
        x7 ^= u << 9 | u >>> 32 - 9;
        u = x7 + x6 | 0;
        x4 ^= u << 13 | u >>> 32 - 13;
        u = x4 + x7 | 0;
        x5 ^= u << 18 | u >>> 32 - 18;
        u = x10 + x9 | 0;
        x11 ^= u << 7 | u >>> 32 - 7;
        u = x11 + x10 | 0;
        x8 ^= u << 9 | u >>> 32 - 9;
        u = x8 + x11 | 0;
        x9 ^= u << 13 | u >>> 32 - 13;
        u = x9 + x8 | 0;
        x10 ^= u << 18 | u >>> 32 - 18;
        u = x15 + x14 | 0;
        x12 ^= u << 7 | u >>> 32 - 7;
        u = x12 + x15 | 0;
        x13 ^= u << 9 | u >>> 32 - 9;
        u = x13 + x12 | 0;
        x14 ^= u << 13 | u >>> 32 - 13;
        u = x14 + x13 | 0;
        x15 ^= u << 18 | u >>> 32 - 18;
      }
      o[0] = x0 >>> 0 & 0xff;
      o[1] = x0 >>> 8 & 0xff;
      o[2] = x0 >>> 16 & 0xff;
      o[3] = x0 >>> 24 & 0xff;
      o[4] = x5 >>> 0 & 0xff;
      o[5] = x5 >>> 8 & 0xff;
      o[6] = x5 >>> 16 & 0xff;
      o[7] = x5 >>> 24 & 0xff;
      o[8] = x10 >>> 0 & 0xff;
      o[9] = x10 >>> 8 & 0xff;
      o[10] = x10 >>> 16 & 0xff;
      o[11] = x10 >>> 24 & 0xff;
      o[12] = x15 >>> 0 & 0xff;
      o[13] = x15 >>> 8 & 0xff;
      o[14] = x15 >>> 16 & 0xff;
      o[15] = x15 >>> 24 & 0xff;
      o[16] = x6 >>> 0 & 0xff;
      o[17] = x6 >>> 8 & 0xff;
      o[18] = x6 >>> 16 & 0xff;
      o[19] = x6 >>> 24 & 0xff;
      o[20] = x7 >>> 0 & 0xff;
      o[21] = x7 >>> 8 & 0xff;
      o[22] = x7 >>> 16 & 0xff;
      o[23] = x7 >>> 24 & 0xff;
      o[24] = x8 >>> 0 & 0xff;
      o[25] = x8 >>> 8 & 0xff;
      o[26] = x8 >>> 16 & 0xff;
      o[27] = x8 >>> 24 & 0xff;
      o[28] = x9 >>> 0 & 0xff;
      o[29] = x9 >>> 8 & 0xff;
      o[30] = x9 >>> 16 & 0xff;
      o[31] = x9 >>> 24 & 0xff;
    }
    function crypto_core_salsa20(out, inp, k, c) {
      core_salsa20(out, inp, k, c);
    }
    function crypto_core_hsalsa20(out, inp, k, c) {
      core_hsalsa20(out, inp, k, c);
    }
    var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
    // "expand 32-byte k"

    function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
      var z = new Uint8Array(16),
        x = new Uint8Array(64);
      var u, i;
      for (i = 0; i < 16; i++) z[i] = 0;
      for (i = 0; i < 8; i++) z[i] = n[i];
      while (b >= 64) {
        crypto_core_salsa20(x, z, k, sigma);
        for (i = 0; i < 64; i++) c[cpos + i] = m[mpos + i] ^ x[i];
        u = 1;
        for (i = 8; i < 16; i++) {
          u = u + (z[i] & 0xff) | 0;
          z[i] = u & 0xff;
          u >>>= 8;
        }
        b -= 64;
        cpos += 64;
        mpos += 64;
      }
      if (b > 0) {
        crypto_core_salsa20(x, z, k, sigma);
        for (i = 0; i < b; i++) c[cpos + i] = m[mpos + i] ^ x[i];
      }
      return 0;
    }
    function crypto_stream_salsa20(c, cpos, b, n, k) {
      var z = new Uint8Array(16),
        x = new Uint8Array(64);
      var u, i;
      for (i = 0; i < 16; i++) z[i] = 0;
      for (i = 0; i < 8; i++) z[i] = n[i];
      while (b >= 64) {
        crypto_core_salsa20(x, z, k, sigma);
        for (i = 0; i < 64; i++) c[cpos + i] = x[i];
        u = 1;
        for (i = 8; i < 16; i++) {
          u = u + (z[i] & 0xff) | 0;
          z[i] = u & 0xff;
          u >>>= 8;
        }
        b -= 64;
        cpos += 64;
      }
      if (b > 0) {
        crypto_core_salsa20(x, z, k, sigma);
        for (i = 0; i < b; i++) c[cpos + i] = x[i];
      }
      return 0;
    }
    function crypto_stream(c, cpos, d, n, k) {
      var s = new Uint8Array(32);
      crypto_core_hsalsa20(s, n, k, sigma);
      var sn = new Uint8Array(8);
      for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
      return crypto_stream_salsa20(c, cpos, d, sn, s);
    }
    function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
      var s = new Uint8Array(32);
      crypto_core_hsalsa20(s, n, k, sigma);
      var sn = new Uint8Array(8);
      for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
      return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
    }

    /*
    * Port of Andrew Moon's Poly1305-donna-16. Public domain.
    * https://github.com/floodyberry/poly1305-donna
    */

    var poly1305 = function poly1305(key) {
      this.buffer = new Uint8Array(16);
      this.r = new Uint16Array(10);
      this.h = new Uint16Array(10);
      this.pad = new Uint16Array(8);
      this.leftover = 0;
      this.fin = 0;
      var t0, t1, t2, t3, t4, t5, t6, t7;
      t0 = key[0] & 0xff | (key[1] & 0xff) << 8;
      this.r[0] = t0 & 0x1fff;
      t1 = key[2] & 0xff | (key[3] & 0xff) << 8;
      this.r[1] = (t0 >>> 13 | t1 << 3) & 0x1fff;
      t2 = key[4] & 0xff | (key[5] & 0xff) << 8;
      this.r[2] = (t1 >>> 10 | t2 << 6) & 0x1f03;
      t3 = key[6] & 0xff | (key[7] & 0xff) << 8;
      this.r[3] = (t2 >>> 7 | t3 << 9) & 0x1fff;
      t4 = key[8] & 0xff | (key[9] & 0xff) << 8;
      this.r[4] = (t3 >>> 4 | t4 << 12) & 0x00ff;
      this.r[5] = t4 >>> 1 & 0x1ffe;
      t5 = key[10] & 0xff | (key[11] & 0xff) << 8;
      this.r[6] = (t4 >>> 14 | t5 << 2) & 0x1fff;
      t6 = key[12] & 0xff | (key[13] & 0xff) << 8;
      this.r[7] = (t5 >>> 11 | t6 << 5) & 0x1f81;
      t7 = key[14] & 0xff | (key[15] & 0xff) << 8;
      this.r[8] = (t6 >>> 8 | t7 << 8) & 0x1fff;
      this.r[9] = t7 >>> 5 & 0x007f;
      this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
      this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
      this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
      this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
      this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
      this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
      this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
      this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
    };
    poly1305.prototype.blocks = function (m, mpos, bytes) {
      var hibit = this.fin ? 0 : 1 << 11;
      var t0, t1, t2, t3, t4, t5, t6, t7, c;
      var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
      var h0 = this.h[0],
        h1 = this.h[1],
        h2 = this.h[2],
        h3 = this.h[3],
        h4 = this.h[4],
        h5 = this.h[5],
        h6 = this.h[6],
        h7 = this.h[7],
        h8 = this.h[8],
        h9 = this.h[9];
      var r0 = this.r[0],
        r1 = this.r[1],
        r2 = this.r[2],
        r3 = this.r[3],
        r4 = this.r[4],
        r5 = this.r[5],
        r6 = this.r[6],
        r7 = this.r[7],
        r8 = this.r[8],
        r9 = this.r[9];
      while (bytes >= 16) {
        t0 = m[mpos + 0] & 0xff | (m[mpos + 1] & 0xff) << 8;
        h0 += t0 & 0x1fff;
        t1 = m[mpos + 2] & 0xff | (m[mpos + 3] & 0xff) << 8;
        h1 += (t0 >>> 13 | t1 << 3) & 0x1fff;
        t2 = m[mpos + 4] & 0xff | (m[mpos + 5] & 0xff) << 8;
        h2 += (t1 >>> 10 | t2 << 6) & 0x1fff;
        t3 = m[mpos + 6] & 0xff | (m[mpos + 7] & 0xff) << 8;
        h3 += (t2 >>> 7 | t3 << 9) & 0x1fff;
        t4 = m[mpos + 8] & 0xff | (m[mpos + 9] & 0xff) << 8;
        h4 += (t3 >>> 4 | t4 << 12) & 0x1fff;
        h5 += t4 >>> 1 & 0x1fff;
        t5 = m[mpos + 10] & 0xff | (m[mpos + 11] & 0xff) << 8;
        h6 += (t4 >>> 14 | t5 << 2) & 0x1fff;
        t6 = m[mpos + 12] & 0xff | (m[mpos + 13] & 0xff) << 8;
        h7 += (t5 >>> 11 | t6 << 5) & 0x1fff;
        t7 = m[mpos + 14] & 0xff | (m[mpos + 15] & 0xff) << 8;
        h8 += (t6 >>> 8 | t7 << 8) & 0x1fff;
        h9 += t7 >>> 5 | hibit;
        c = 0;
        d0 = c;
        d0 += h0 * r0;
        d0 += h1 * (5 * r9);
        d0 += h2 * (5 * r8);
        d0 += h3 * (5 * r7);
        d0 += h4 * (5 * r6);
        c = d0 >>> 13;
        d0 &= 0x1fff;
        d0 += h5 * (5 * r5);
        d0 += h6 * (5 * r4);
        d0 += h7 * (5 * r3);
        d0 += h8 * (5 * r2);
        d0 += h9 * (5 * r1);
        c += d0 >>> 13;
        d0 &= 0x1fff;
        d1 = c;
        d1 += h0 * r1;
        d1 += h1 * r0;
        d1 += h2 * (5 * r9);
        d1 += h3 * (5 * r8);
        d1 += h4 * (5 * r7);
        c = d1 >>> 13;
        d1 &= 0x1fff;
        d1 += h5 * (5 * r6);
        d1 += h6 * (5 * r5);
        d1 += h7 * (5 * r4);
        d1 += h8 * (5 * r3);
        d1 += h9 * (5 * r2);
        c += d1 >>> 13;
        d1 &= 0x1fff;
        d2 = c;
        d2 += h0 * r2;
        d2 += h1 * r1;
        d2 += h2 * r0;
        d2 += h3 * (5 * r9);
        d2 += h4 * (5 * r8);
        c = d2 >>> 13;
        d2 &= 0x1fff;
        d2 += h5 * (5 * r7);
        d2 += h6 * (5 * r6);
        d2 += h7 * (5 * r5);
        d2 += h8 * (5 * r4);
        d2 += h9 * (5 * r3);
        c += d2 >>> 13;
        d2 &= 0x1fff;
        d3 = c;
        d3 += h0 * r3;
        d3 += h1 * r2;
        d3 += h2 * r1;
        d3 += h3 * r0;
        d3 += h4 * (5 * r9);
        c = d3 >>> 13;
        d3 &= 0x1fff;
        d3 += h5 * (5 * r8);
        d3 += h6 * (5 * r7);
        d3 += h7 * (5 * r6);
        d3 += h8 * (5 * r5);
        d3 += h9 * (5 * r4);
        c += d3 >>> 13;
        d3 &= 0x1fff;
        d4 = c;
        d4 += h0 * r4;
        d4 += h1 * r3;
        d4 += h2 * r2;
        d4 += h3 * r1;
        d4 += h4 * r0;
        c = d4 >>> 13;
        d4 &= 0x1fff;
        d4 += h5 * (5 * r9);
        d4 += h6 * (5 * r8);
        d4 += h7 * (5 * r7);
        d4 += h8 * (5 * r6);
        d4 += h9 * (5 * r5);
        c += d4 >>> 13;
        d4 &= 0x1fff;
        d5 = c;
        d5 += h0 * r5;
        d5 += h1 * r4;
        d5 += h2 * r3;
        d5 += h3 * r2;
        d5 += h4 * r1;
        c = d5 >>> 13;
        d5 &= 0x1fff;
        d5 += h5 * r0;
        d5 += h6 * (5 * r9);
        d5 += h7 * (5 * r8);
        d5 += h8 * (5 * r7);
        d5 += h9 * (5 * r6);
        c += d5 >>> 13;
        d5 &= 0x1fff;
        d6 = c;
        d6 += h0 * r6;
        d6 += h1 * r5;
        d6 += h2 * r4;
        d6 += h3 * r3;
        d6 += h4 * r2;
        c = d6 >>> 13;
        d6 &= 0x1fff;
        d6 += h5 * r1;
        d6 += h6 * r0;
        d6 += h7 * (5 * r9);
        d6 += h8 * (5 * r8);
        d6 += h9 * (5 * r7);
        c += d6 >>> 13;
        d6 &= 0x1fff;
        d7 = c;
        d7 += h0 * r7;
        d7 += h1 * r6;
        d7 += h2 * r5;
        d7 += h3 * r4;
        d7 += h4 * r3;
        c = d7 >>> 13;
        d7 &= 0x1fff;
        d7 += h5 * r2;
        d7 += h6 * r1;
        d7 += h7 * r0;
        d7 += h8 * (5 * r9);
        d7 += h9 * (5 * r8);
        c += d7 >>> 13;
        d7 &= 0x1fff;
        d8 = c;
        d8 += h0 * r8;
        d8 += h1 * r7;
        d8 += h2 * r6;
        d8 += h3 * r5;
        d8 += h4 * r4;
        c = d8 >>> 13;
        d8 &= 0x1fff;
        d8 += h5 * r3;
        d8 += h6 * r2;
        d8 += h7 * r1;
        d8 += h8 * r0;
        d8 += h9 * (5 * r9);
        c += d8 >>> 13;
        d8 &= 0x1fff;
        d9 = c;
        d9 += h0 * r9;
        d9 += h1 * r8;
        d9 += h2 * r7;
        d9 += h3 * r6;
        d9 += h4 * r5;
        c = d9 >>> 13;
        d9 &= 0x1fff;
        d9 += h5 * r4;
        d9 += h6 * r3;
        d9 += h7 * r2;
        d9 += h8 * r1;
        d9 += h9 * r0;
        c += d9 >>> 13;
        d9 &= 0x1fff;
        c = (c << 2) + c | 0;
        c = c + d0 | 0;
        d0 = c & 0x1fff;
        c = c >>> 13;
        d1 += c;
        h0 = d0;
        h1 = d1;
        h2 = d2;
        h3 = d3;
        h4 = d4;
        h5 = d5;
        h6 = d6;
        h7 = d7;
        h8 = d8;
        h9 = d9;
        mpos += 16;
        bytes -= 16;
      }
      this.h[0] = h0;
      this.h[1] = h1;
      this.h[2] = h2;
      this.h[3] = h3;
      this.h[4] = h4;
      this.h[5] = h5;
      this.h[6] = h6;
      this.h[7] = h7;
      this.h[8] = h8;
      this.h[9] = h9;
    };
    poly1305.prototype.finish = function (mac, macpos) {
      var g = new Uint16Array(10);
      var c, mask, f, i;
      if (this.leftover) {
        i = this.leftover;
        this.buffer[i++] = 1;
        for (; i < 16; i++) this.buffer[i] = 0;
        this.fin = 1;
        this.blocks(this.buffer, 0, 16);
      }
      c = this.h[1] >>> 13;
      this.h[1] &= 0x1fff;
      for (i = 2; i < 10; i++) {
        this.h[i] += c;
        c = this.h[i] >>> 13;
        this.h[i] &= 0x1fff;
      }
      this.h[0] += c * 5;
      c = this.h[0] >>> 13;
      this.h[0] &= 0x1fff;
      this.h[1] += c;
      c = this.h[1] >>> 13;
      this.h[1] &= 0x1fff;
      this.h[2] += c;
      g[0] = this.h[0] + 5;
      c = g[0] >>> 13;
      g[0] &= 0x1fff;
      for (i = 1; i < 10; i++) {
        g[i] = this.h[i] + c;
        c = g[i] >>> 13;
        g[i] &= 0x1fff;
      }
      g[9] -= 1 << 13;
      mask = (c ^ 1) - 1;
      for (i = 0; i < 10; i++) g[i] &= mask;
      mask = ~mask;
      for (i = 0; i < 10; i++) this.h[i] = this.h[i] & mask | g[i];
      this.h[0] = (this.h[0] | this.h[1] << 13) & 0xffff;
      this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 0xffff;
      this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 0xffff;
      this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 0xffff;
      this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 0xffff;
      this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 0xffff;
      this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 0xffff;
      this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 0xffff;
      f = this.h[0] + this.pad[0];
      this.h[0] = f & 0xffff;
      for (i = 1; i < 8; i++) {
        f = (this.h[i] + this.pad[i] | 0) + (f >>> 16) | 0;
        this.h[i] = f & 0xffff;
      }
      mac[macpos + 0] = this.h[0] >>> 0 & 0xff;
      mac[macpos + 1] = this.h[0] >>> 8 & 0xff;
      mac[macpos + 2] = this.h[1] >>> 0 & 0xff;
      mac[macpos + 3] = this.h[1] >>> 8 & 0xff;
      mac[macpos + 4] = this.h[2] >>> 0 & 0xff;
      mac[macpos + 5] = this.h[2] >>> 8 & 0xff;
      mac[macpos + 6] = this.h[3] >>> 0 & 0xff;
      mac[macpos + 7] = this.h[3] >>> 8 & 0xff;
      mac[macpos + 8] = this.h[4] >>> 0 & 0xff;
      mac[macpos + 9] = this.h[4] >>> 8 & 0xff;
      mac[macpos + 10] = this.h[5] >>> 0 & 0xff;
      mac[macpos + 11] = this.h[5] >>> 8 & 0xff;
      mac[macpos + 12] = this.h[6] >>> 0 & 0xff;
      mac[macpos + 13] = this.h[6] >>> 8 & 0xff;
      mac[macpos + 14] = this.h[7] >>> 0 & 0xff;
      mac[macpos + 15] = this.h[7] >>> 8 & 0xff;
    };
    poly1305.prototype.update = function (m, mpos, bytes) {
      var i, want;
      if (this.leftover) {
        want = 16 - this.leftover;
        if (want > bytes) want = bytes;
        for (i = 0; i < want; i++) this.buffer[this.leftover + i] = m[mpos + i];
        bytes -= want;
        mpos += want;
        this.leftover += want;
        if (this.leftover < 16) return;
        this.blocks(this.buffer, 0, 16);
        this.leftover = 0;
      }
      if (bytes >= 16) {
        want = bytes - bytes % 16;
        this.blocks(m, mpos, want);
        mpos += want;
        bytes -= want;
      }
      if (bytes) {
        for (i = 0; i < bytes; i++) this.buffer[this.leftover + i] = m[mpos + i];
        this.leftover += bytes;
      }
    };
    function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
      var s = new poly1305(k);
      s.update(m, mpos, n);
      s.finish(out, outpos);
      return 0;
    }
    function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
      var x = new Uint8Array(16);
      crypto_onetimeauth(x, 0, m, mpos, n, k);
      return crypto_verify_16(h, hpos, x, 0);
    }
    function crypto_secretbox(c, m, d, n, k) {
      var i;
      if (d < 32) return -1;
      crypto_stream_xor(c, 0, m, 0, d, n, k);
      crypto_onetimeauth(c, 16, c, 32, d - 32, c);
      for (i = 0; i < 16; i++) c[i] = 0;
      return 0;
    }
    function crypto_secretbox_open(m, c, d, n, k) {
      var i;
      var x = new Uint8Array(32);
      if (d < 32) return -1;
      crypto_stream(x, 0, 32, n, k);
      if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
      crypto_stream_xor(m, 0, c, 0, d, n, k);
      for (i = 0; i < 32; i++) m[i] = 0;
      return 0;
    }
    function set25519(r, a) {
      var i;
      for (i = 0; i < 16; i++) r[i] = a[i] | 0;
    }
    function car25519(o) {
      var i,
        v,
        c = 1;
      for (i = 0; i < 16; i++) {
        v = o[i] + c + 65535;
        c = Math.floor(v / 65536);
        o[i] = v - c * 65536;
      }
      o[0] += c - 1 + 37 * (c - 1);
    }
    function sel25519(p, q, b) {
      var t,
        c = ~(b - 1);
      for (var i = 0; i < 16; i++) {
        t = c & (p[i] ^ q[i]);
        p[i] ^= t;
        q[i] ^= t;
      }
    }
    function pack25519(o, n) {
      var i, j, b;
      var m = gf(),
        t = gf();
      for (i = 0; i < 16; i++) t[i] = n[i];
      car25519(t);
      car25519(t);
      car25519(t);
      for (j = 0; j < 2; j++) {
        m[0] = t[0] - 0xffed;
        for (i = 1; i < 15; i++) {
          m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);
          m[i - 1] &= 0xffff;
        }
        m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);
        b = m[15] >> 16 & 1;
        m[14] &= 0xffff;
        sel25519(t, m, 1 - b);
      }
      for (i = 0; i < 16; i++) {
        o[2 * i] = t[i] & 0xff;
        o[2 * i + 1] = t[i] >> 8;
      }
    }
    function neq25519(a, b) {
      var c = new Uint8Array(32),
        d = new Uint8Array(32);
      pack25519(c, a);
      pack25519(d, b);
      return crypto_verify_32(c, 0, d, 0);
    }
    function par25519(a) {
      var d = new Uint8Array(32);
      pack25519(d, a);
      return d[0] & 1;
    }
    function unpack25519(o, n) {
      var i;
      for (i = 0; i < 16; i++) o[i] = n[2 * i] + (n[2 * i + 1] << 8);
      o[15] &= 0x7fff;
    }
    function A(o, a, b) {
      for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
    }
    function Z(o, a, b) {
      for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
    }
    function M(o, a, b) {
      var v,
        c,
        t0 = 0,
        t1 = 0,
        t2 = 0,
        t3 = 0,
        t4 = 0,
        t5 = 0,
        t6 = 0,
        t7 = 0,
        t8 = 0,
        t9 = 0,
        t10 = 0,
        t11 = 0,
        t12 = 0,
        t13 = 0,
        t14 = 0,
        t15 = 0,
        t16 = 0,
        t17 = 0,
        t18 = 0,
        t19 = 0,
        t20 = 0,
        t21 = 0,
        t22 = 0,
        t23 = 0,
        t24 = 0,
        t25 = 0,
        t26 = 0,
        t27 = 0,
        t28 = 0,
        t29 = 0,
        t30 = 0,
        b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3],
        b4 = b[4],
        b5 = b[5],
        b6 = b[6],
        b7 = b[7],
        b8 = b[8],
        b9 = b[9],
        b10 = b[10],
        b11 = b[11],
        b12 = b[12],
        b13 = b[13],
        b14 = b[14],
        b15 = b[15];
      v = a[0];
      t0 += v * b0;
      t1 += v * b1;
      t2 += v * b2;
      t3 += v * b3;
      t4 += v * b4;
      t5 += v * b5;
      t6 += v * b6;
      t7 += v * b7;
      t8 += v * b8;
      t9 += v * b9;
      t10 += v * b10;
      t11 += v * b11;
      t12 += v * b12;
      t13 += v * b13;
      t14 += v * b14;
      t15 += v * b15;
      v = a[1];
      t1 += v * b0;
      t2 += v * b1;
      t3 += v * b2;
      t4 += v * b3;
      t5 += v * b4;
      t6 += v * b5;
      t7 += v * b6;
      t8 += v * b7;
      t9 += v * b8;
      t10 += v * b9;
      t11 += v * b10;
      t12 += v * b11;
      t13 += v * b12;
      t14 += v * b13;
      t15 += v * b14;
      t16 += v * b15;
      v = a[2];
      t2 += v * b0;
      t3 += v * b1;
      t4 += v * b2;
      t5 += v * b3;
      t6 += v * b4;
      t7 += v * b5;
      t8 += v * b6;
      t9 += v * b7;
      t10 += v * b8;
      t11 += v * b9;
      t12 += v * b10;
      t13 += v * b11;
      t14 += v * b12;
      t15 += v * b13;
      t16 += v * b14;
      t17 += v * b15;
      v = a[3];
      t3 += v * b0;
      t4 += v * b1;
      t5 += v * b2;
      t6 += v * b3;
      t7 += v * b4;
      t8 += v * b5;
      t9 += v * b6;
      t10 += v * b7;
      t11 += v * b8;
      t12 += v * b9;
      t13 += v * b10;
      t14 += v * b11;
      t15 += v * b12;
      t16 += v * b13;
      t17 += v * b14;
      t18 += v * b15;
      v = a[4];
      t4 += v * b0;
      t5 += v * b1;
      t6 += v * b2;
      t7 += v * b3;
      t8 += v * b4;
      t9 += v * b5;
      t10 += v * b6;
      t11 += v * b7;
      t12 += v * b8;
      t13 += v * b9;
      t14 += v * b10;
      t15 += v * b11;
      t16 += v * b12;
      t17 += v * b13;
      t18 += v * b14;
      t19 += v * b15;
      v = a[5];
      t5 += v * b0;
      t6 += v * b1;
      t7 += v * b2;
      t8 += v * b3;
      t9 += v * b4;
      t10 += v * b5;
      t11 += v * b6;
      t12 += v * b7;
      t13 += v * b8;
      t14 += v * b9;
      t15 += v * b10;
      t16 += v * b11;
      t17 += v * b12;
      t18 += v * b13;
      t19 += v * b14;
      t20 += v * b15;
      v = a[6];
      t6 += v * b0;
      t7 += v * b1;
      t8 += v * b2;
      t9 += v * b3;
      t10 += v * b4;
      t11 += v * b5;
      t12 += v * b6;
      t13 += v * b7;
      t14 += v * b8;
      t15 += v * b9;
      t16 += v * b10;
      t17 += v * b11;
      t18 += v * b12;
      t19 += v * b13;
      t20 += v * b14;
      t21 += v * b15;
      v = a[7];
      t7 += v * b0;
      t8 += v * b1;
      t9 += v * b2;
      t10 += v * b3;
      t11 += v * b4;
      t12 += v * b5;
      t13 += v * b6;
      t14 += v * b7;
      t15 += v * b8;
      t16 += v * b9;
      t17 += v * b10;
      t18 += v * b11;
      t19 += v * b12;
      t20 += v * b13;
      t21 += v * b14;
      t22 += v * b15;
      v = a[8];
      t8 += v * b0;
      t9 += v * b1;
      t10 += v * b2;
      t11 += v * b3;
      t12 += v * b4;
      t13 += v * b5;
      t14 += v * b6;
      t15 += v * b7;
      t16 += v * b8;
      t17 += v * b9;
      t18 += v * b10;
      t19 += v * b11;
      t20 += v * b12;
      t21 += v * b13;
      t22 += v * b14;
      t23 += v * b15;
      v = a[9];
      t9 += v * b0;
      t10 += v * b1;
      t11 += v * b2;
      t12 += v * b3;
      t13 += v * b4;
      t14 += v * b5;
      t15 += v * b6;
      t16 += v * b7;
      t17 += v * b8;
      t18 += v * b9;
      t19 += v * b10;
      t20 += v * b11;
      t21 += v * b12;
      t22 += v * b13;
      t23 += v * b14;
      t24 += v * b15;
      v = a[10];
      t10 += v * b0;
      t11 += v * b1;
      t12 += v * b2;
      t13 += v * b3;
      t14 += v * b4;
      t15 += v * b5;
      t16 += v * b6;
      t17 += v * b7;
      t18 += v * b8;
      t19 += v * b9;
      t20 += v * b10;
      t21 += v * b11;
      t22 += v * b12;
      t23 += v * b13;
      t24 += v * b14;
      t25 += v * b15;
      v = a[11];
      t11 += v * b0;
      t12 += v * b1;
      t13 += v * b2;
      t14 += v * b3;
      t15 += v * b4;
      t16 += v * b5;
      t17 += v * b6;
      t18 += v * b7;
      t19 += v * b8;
      t20 += v * b9;
      t21 += v * b10;
      t22 += v * b11;
      t23 += v * b12;
      t24 += v * b13;
      t25 += v * b14;
      t26 += v * b15;
      v = a[12];
      t12 += v * b0;
      t13 += v * b1;
      t14 += v * b2;
      t15 += v * b3;
      t16 += v * b4;
      t17 += v * b5;
      t18 += v * b6;
      t19 += v * b7;
      t20 += v * b8;
      t21 += v * b9;
      t22 += v * b10;
      t23 += v * b11;
      t24 += v * b12;
      t25 += v * b13;
      t26 += v * b14;
      t27 += v * b15;
      v = a[13];
      t13 += v * b0;
      t14 += v * b1;
      t15 += v * b2;
      t16 += v * b3;
      t17 += v * b4;
      t18 += v * b5;
      t19 += v * b6;
      t20 += v * b7;
      t21 += v * b8;
      t22 += v * b9;
      t23 += v * b10;
      t24 += v * b11;
      t25 += v * b12;
      t26 += v * b13;
      t27 += v * b14;
      t28 += v * b15;
      v = a[14];
      t14 += v * b0;
      t15 += v * b1;
      t16 += v * b2;
      t17 += v * b3;
      t18 += v * b4;
      t19 += v * b5;
      t20 += v * b6;
      t21 += v * b7;
      t22 += v * b8;
      t23 += v * b9;
      t24 += v * b10;
      t25 += v * b11;
      t26 += v * b12;
      t27 += v * b13;
      t28 += v * b14;
      t29 += v * b15;
      v = a[15];
      t15 += v * b0;
      t16 += v * b1;
      t17 += v * b2;
      t18 += v * b3;
      t19 += v * b4;
      t20 += v * b5;
      t21 += v * b6;
      t22 += v * b7;
      t23 += v * b8;
      t24 += v * b9;
      t25 += v * b10;
      t26 += v * b11;
      t27 += v * b12;
      t28 += v * b13;
      t29 += v * b14;
      t30 += v * b15;
      t0 += 38 * t16;
      t1 += 38 * t17;
      t2 += 38 * t18;
      t3 += 38 * t19;
      t4 += 38 * t20;
      t5 += 38 * t21;
      t6 += 38 * t22;
      t7 += 38 * t23;
      t8 += 38 * t24;
      t9 += 38 * t25;
      t10 += 38 * t26;
      t11 += 38 * t27;
      t12 += 38 * t28;
      t13 += 38 * t29;
      t14 += 38 * t30;
      // t15 left as is

      // first car
      c = 1;
      v = t0 + c + 65535;
      c = Math.floor(v / 65536);
      t0 = v - c * 65536;
      v = t1 + c + 65535;
      c = Math.floor(v / 65536);
      t1 = v - c * 65536;
      v = t2 + c + 65535;
      c = Math.floor(v / 65536);
      t2 = v - c * 65536;
      v = t3 + c + 65535;
      c = Math.floor(v / 65536);
      t3 = v - c * 65536;
      v = t4 + c + 65535;
      c = Math.floor(v / 65536);
      t4 = v - c * 65536;
      v = t5 + c + 65535;
      c = Math.floor(v / 65536);
      t5 = v - c * 65536;
      v = t6 + c + 65535;
      c = Math.floor(v / 65536);
      t6 = v - c * 65536;
      v = t7 + c + 65535;
      c = Math.floor(v / 65536);
      t7 = v - c * 65536;
      v = t8 + c + 65535;
      c = Math.floor(v / 65536);
      t8 = v - c * 65536;
      v = t9 + c + 65535;
      c = Math.floor(v / 65536);
      t9 = v - c * 65536;
      v = t10 + c + 65535;
      c = Math.floor(v / 65536);
      t10 = v - c * 65536;
      v = t11 + c + 65535;
      c = Math.floor(v / 65536);
      t11 = v - c * 65536;
      v = t12 + c + 65535;
      c = Math.floor(v / 65536);
      t12 = v - c * 65536;
      v = t13 + c + 65535;
      c = Math.floor(v / 65536);
      t13 = v - c * 65536;
      v = t14 + c + 65535;
      c = Math.floor(v / 65536);
      t14 = v - c * 65536;
      v = t15 + c + 65535;
      c = Math.floor(v / 65536);
      t15 = v - c * 65536;
      t0 += c - 1 + 37 * (c - 1);

      // second car
      c = 1;
      v = t0 + c + 65535;
      c = Math.floor(v / 65536);
      t0 = v - c * 65536;
      v = t1 + c + 65535;
      c = Math.floor(v / 65536);
      t1 = v - c * 65536;
      v = t2 + c + 65535;
      c = Math.floor(v / 65536);
      t2 = v - c * 65536;
      v = t3 + c + 65535;
      c = Math.floor(v / 65536);
      t3 = v - c * 65536;
      v = t4 + c + 65535;
      c = Math.floor(v / 65536);
      t4 = v - c * 65536;
      v = t5 + c + 65535;
      c = Math.floor(v / 65536);
      t5 = v - c * 65536;
      v = t6 + c + 65535;
      c = Math.floor(v / 65536);
      t6 = v - c * 65536;
      v = t7 + c + 65535;
      c = Math.floor(v / 65536);
      t7 = v - c * 65536;
      v = t8 + c + 65535;
      c = Math.floor(v / 65536);
      t8 = v - c * 65536;
      v = t9 + c + 65535;
      c = Math.floor(v / 65536);
      t9 = v - c * 65536;
      v = t10 + c + 65535;
      c = Math.floor(v / 65536);
      t10 = v - c * 65536;
      v = t11 + c + 65535;
      c = Math.floor(v / 65536);
      t11 = v - c * 65536;
      v = t12 + c + 65535;
      c = Math.floor(v / 65536);
      t12 = v - c * 65536;
      v = t13 + c + 65535;
      c = Math.floor(v / 65536);
      t13 = v - c * 65536;
      v = t14 + c + 65535;
      c = Math.floor(v / 65536);
      t14 = v - c * 65536;
      v = t15 + c + 65535;
      c = Math.floor(v / 65536);
      t15 = v - c * 65536;
      t0 += c - 1 + 37 * (c - 1);
      o[0] = t0;
      o[1] = t1;
      o[2] = t2;
      o[3] = t3;
      o[4] = t4;
      o[5] = t5;
      o[6] = t6;
      o[7] = t7;
      o[8] = t8;
      o[9] = t9;
      o[10] = t10;
      o[11] = t11;
      o[12] = t12;
      o[13] = t13;
      o[14] = t14;
      o[15] = t15;
    }
    function S(o, a) {
      M(o, a, a);
    }
    function inv25519(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++) c[a] = i[a];
      for (a = 253; a >= 0; a--) {
        S(c, c);
        if (a !== 2 && a !== 4) M(c, c, i);
      }
      for (a = 0; a < 16; a++) o[a] = c[a];
    }
    function pow2523(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++) c[a] = i[a];
      for (a = 250; a >= 0; a--) {
        S(c, c);
        if (a !== 1) M(c, c, i);
      }
      for (a = 0; a < 16; a++) o[a] = c[a];
    }
    function crypto_scalarmult(q, n, p) {
      var z = new Uint8Array(32);
      var x = new Float64Array(80),
        r,
        i;
      var a = gf(),
        b = gf(),
        c = gf(),
        d = gf(),
        e = gf(),
        f = gf();
      for (i = 0; i < 31; i++) z[i] = n[i];
      z[31] = n[31] & 127 | 64;
      z[0] &= 248;
      unpack25519(x, p);
      for (i = 0; i < 16; i++) {
        b[i] = x[i];
        d[i] = a[i] = c[i] = 0;
      }
      a[0] = d[0] = 1;
      for (i = 254; i >= 0; --i) {
        r = z[i >>> 3] >>> (i & 7) & 1;
        sel25519(a, b, r);
        sel25519(c, d, r);
        A(e, a, c);
        Z(a, a, c);
        A(c, b, d);
        Z(b, b, d);
        S(d, e);
        S(f, a);
        M(a, c, a);
        M(c, b, e);
        A(e, a, c);
        Z(a, a, c);
        S(b, a);
        Z(c, d, f);
        M(a, c, _121665);
        A(a, a, d);
        M(c, c, a);
        M(a, d, f);
        M(d, b, x);
        S(b, e);
        sel25519(a, b, r);
        sel25519(c, d, r);
      }
      for (i = 0; i < 16; i++) {
        x[i + 16] = a[i];
        x[i + 32] = c[i];
        x[i + 48] = b[i];
        x[i + 64] = d[i];
      }
      var x32 = x.subarray(32);
      var x16 = x.subarray(16);
      inv25519(x32, x32);
      M(x16, x16, x32);
      pack25519(q, x16);
      return 0;
    }
    function crypto_scalarmult_base(q, n) {
      return crypto_scalarmult(q, n, _9);
    }
    function crypto_box_keypair(y, x) {
      randombytes(x, 32);
      return crypto_scalarmult_base(y, x);
    }
    function crypto_box_beforenm(k, y, x) {
      var s = new Uint8Array(32);
      crypto_scalarmult(s, x, y);
      return crypto_core_hsalsa20(k, _0, s, sigma);
    }
    var crypto_box_afternm = crypto_secretbox;
    var crypto_box_open_afternm = crypto_secretbox_open;
    function crypto_box(c, m, d, n, y, x) {
      var k = new Uint8Array(32);
      crypto_box_beforenm(k, y, x);
      return crypto_box_afternm(c, m, d, n, k);
    }
    function crypto_box_open(m, c, d, n, y, x) {
      var k = new Uint8Array(32);
      crypto_box_beforenm(k, y, x);
      return crypto_box_open_afternm(m, c, d, n, k);
    }
    var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
    function crypto_hashblocks_hl(hh, hl, m, n) {
      var wh = new Int32Array(16),
        wl = new Int32Array(16),
        bh0,
        bh1,
        bh2,
        bh3,
        bh4,
        bh5,
        bh6,
        bh7,
        bl0,
        bl1,
        bl2,
        bl3,
        bl4,
        bl5,
        bl6,
        bl7,
        th,
        tl,
        i,
        j,
        h,
        l,
        a,
        b,
        c,
        d;
      var ah0 = hh[0],
        ah1 = hh[1],
        ah2 = hh[2],
        ah3 = hh[3],
        ah4 = hh[4],
        ah5 = hh[5],
        ah6 = hh[6],
        ah7 = hh[7],
        al0 = hl[0],
        al1 = hl[1],
        al2 = hl[2],
        al3 = hl[3],
        al4 = hl[4],
        al5 = hl[5],
        al6 = hl[6],
        al7 = hl[7];
      var pos = 0;
      while (n >= 128) {
        for (i = 0; i < 16; i++) {
          j = 8 * i + pos;
          wh[i] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
          wl[i] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
        }
        for (i = 0; i < 80; i++) {
          bh0 = ah0;
          bh1 = ah1;
          bh2 = ah2;
          bh3 = ah3;
          bh4 = ah4;
          bh5 = ah5;
          bh6 = ah6;
          bh7 = ah7;
          bl0 = al0;
          bl1 = al1;
          bl2 = al2;
          bl3 = al3;
          bl4 = al4;
          bl5 = al5;
          bl6 = al6;
          bl7 = al7;

          // add
          h = ah7;
          l = al7;
          a = l & 0xffff;
          b = l >>> 16;
          c = h & 0xffff;
          d = h >>> 16;

          // Sigma1
          h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
          l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;

          // Ch
          h = ah4 & ah5 ^ ~ah4 & ah6;
          l = al4 & al5 ^ ~al4 & al6;
          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;

          // K
          h = K[i * 2];
          l = K[i * 2 + 1];
          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;

          // w
          h = wh[i % 16];
          l = wl[i % 16];
          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          th = c & 0xffff | d << 16;
          tl = a & 0xffff | b << 16;

          // add
          h = th;
          l = tl;
          a = l & 0xffff;
          b = l >>> 16;
          c = h & 0xffff;
          d = h >>> 16;

          // Sigma0
          h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
          l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;

          // Maj
          h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
          l = al0 & al1 ^ al0 & al2 ^ al1 & al2;
          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          bh7 = c & 0xffff | d << 16;
          bl7 = a & 0xffff | b << 16;

          // add
          h = bh3;
          l = bl3;
          a = l & 0xffff;
          b = l >>> 16;
          c = h & 0xffff;
          d = h >>> 16;
          h = th;
          l = tl;
          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          bh3 = c & 0xffff | d << 16;
          bl3 = a & 0xffff | b << 16;
          ah1 = bh0;
          ah2 = bh1;
          ah3 = bh2;
          ah4 = bh3;
          ah5 = bh4;
          ah6 = bh5;
          ah7 = bh6;
          ah0 = bh7;
          al1 = bl0;
          al2 = bl1;
          al3 = bl2;
          al4 = bl3;
          al5 = bl4;
          al6 = bl5;
          al7 = bl6;
          al0 = bl7;
          if (i % 16 === 15) {
            for (j = 0; j < 16; j++) {
              // add
              h = wh[j];
              l = wl[j];
              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;
              h = wh[(j + 9) % 16];
              l = wl[(j + 9) % 16];
              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;

              // sigma0
              th = wh[(j + 1) % 16];
              tl = wl[(j + 1) % 16];
              h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
              l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;

              // sigma1
              th = wh[(j + 14) % 16];
              tl = wl[(j + 14) % 16];
              h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
              l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              wh[j] = c & 0xffff | d << 16;
              wl[j] = a & 0xffff | b << 16;
            }
          }
        }

        // add
        h = ah0;
        l = al0;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[0];
        l = hl[0];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[0] = ah0 = c & 0xffff | d << 16;
        hl[0] = al0 = a & 0xffff | b << 16;
        h = ah1;
        l = al1;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[1];
        l = hl[1];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[1] = ah1 = c & 0xffff | d << 16;
        hl[1] = al1 = a & 0xffff | b << 16;
        h = ah2;
        l = al2;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[2];
        l = hl[2];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[2] = ah2 = c & 0xffff | d << 16;
        hl[2] = al2 = a & 0xffff | b << 16;
        h = ah3;
        l = al3;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[3];
        l = hl[3];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[3] = ah3 = c & 0xffff | d << 16;
        hl[3] = al3 = a & 0xffff | b << 16;
        h = ah4;
        l = al4;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[4];
        l = hl[4];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[4] = ah4 = c & 0xffff | d << 16;
        hl[4] = al4 = a & 0xffff | b << 16;
        h = ah5;
        l = al5;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[5];
        l = hl[5];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[5] = ah5 = c & 0xffff | d << 16;
        hl[5] = al5 = a & 0xffff | b << 16;
        h = ah6;
        l = al6;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[6];
        l = hl[6];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[6] = ah6 = c & 0xffff | d << 16;
        hl[6] = al6 = a & 0xffff | b << 16;
        h = ah7;
        l = al7;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[7];
        l = hl[7];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[7] = ah7 = c & 0xffff | d << 16;
        hl[7] = al7 = a & 0xffff | b << 16;
        pos += 128;
        n -= 128;
      }
      return n;
    }
    function crypto_hash(out, m, n) {
      var hh = new Int32Array(8),
        hl = new Int32Array(8),
        x = new Uint8Array(256),
        i,
        b = n;
      hh[0] = 0x6a09e667;
      hh[1] = 0xbb67ae85;
      hh[2] = 0x3c6ef372;
      hh[3] = 0xa54ff53a;
      hh[4] = 0x510e527f;
      hh[5] = 0x9b05688c;
      hh[6] = 0x1f83d9ab;
      hh[7] = 0x5be0cd19;
      hl[0] = 0xf3bcc908;
      hl[1] = 0x84caa73b;
      hl[2] = 0xfe94f82b;
      hl[3] = 0x5f1d36f1;
      hl[4] = 0xade682d1;
      hl[5] = 0x2b3e6c1f;
      hl[6] = 0xfb41bd6b;
      hl[7] = 0x137e2179;
      crypto_hashblocks_hl(hh, hl, m, n);
      n %= 128;
      for (i = 0; i < n; i++) x[i] = m[b - n + i];
      x[n] = 128;
      n = 256 - 128 * (n < 112 ? 1 : 0);
      x[n - 9] = 0;
      ts64(x, n - 8, b / 0x20000000 | 0, b << 3);
      crypto_hashblocks_hl(hh, hl, x, n);
      for (i = 0; i < 8; i++) ts64(out, 8 * i, hh[i], hl[i]);
      return 0;
    }
    function add(p, q) {
      var a = gf(),
        b = gf(),
        c = gf(),
        d = gf(),
        e = gf(),
        f = gf(),
        g = gf(),
        h = gf(),
        t = gf();
      Z(a, p[1], p[0]);
      Z(t, q[1], q[0]);
      M(a, a, t);
      A(b, p[0], p[1]);
      A(t, q[0], q[1]);
      M(b, b, t);
      M(c, p[3], q[3]);
      M(c, c, D2);
      M(d, p[2], q[2]);
      A(d, d, d);
      Z(e, b, a);
      Z(f, d, c);
      A(g, d, c);
      A(h, b, a);
      M(p[0], e, f);
      M(p[1], h, g);
      M(p[2], g, f);
      M(p[3], e, h);
    }
    function cswap(p, q, b) {
      var i;
      for (i = 0; i < 4; i++) {
        sel25519(p[i], q[i], b);
      }
    }
    function pack(r, p) {
      var tx = gf(),
        ty = gf(),
        zi = gf();
      inv25519(zi, p[2]);
      M(tx, p[0], zi);
      M(ty, p[1], zi);
      pack25519(r, ty);
      r[31] ^= par25519(tx) << 7;
    }
    function scalarmult(p, q, s) {
      var b, i;
      set25519(p[0], gf0);
      set25519(p[1], gf1);
      set25519(p[2], gf1);
      set25519(p[3], gf0);
      for (i = 255; i >= 0; --i) {
        b = s[i / 8 | 0] >> (i & 7) & 1;
        cswap(p, q, b);
        add(q, p);
        add(p, p);
        cswap(p, q, b);
      }
    }
    function scalarbase(p, s) {
      var q = [gf(), gf(), gf(), gf()];
      set25519(q[0], X);
      set25519(q[1], Y);
      set25519(q[2], gf1);
      M(q[3], X, Y);
      scalarmult(p, q, s);
    }
    function crypto_sign_keypair(pk, sk, seeded) {
      var d = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()];
      var i;
      if (!seeded) randombytes(sk, 32);
      crypto_hash(d, sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;
      scalarbase(p, d);
      pack(pk, p);
      for (i = 0; i < 32; i++) sk[i + 32] = pk[i];
      return 0;
    }
    var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);
    function modL(r, x) {
      var carry, i, j, k;
      for (i = 63; i >= 32; --i) {
        carry = 0;
        for (j = i - 32, k = i - 12; j < k; ++j) {
          x[j] += carry - 16 * x[i] * L[j - (i - 32)];
          carry = Math.floor((x[j] + 128) / 256);
          x[j] -= carry * 256;
        }
        x[j] += carry;
        x[i] = 0;
      }
      carry = 0;
      for (j = 0; j < 32; j++) {
        x[j] += carry - (x[31] >> 4) * L[j];
        carry = x[j] >> 8;
        x[j] &= 255;
      }
      for (j = 0; j < 32; j++) x[j] -= carry * L[j];
      for (i = 0; i < 32; i++) {
        x[i + 1] += x[i] >> 8;
        r[i] = x[i] & 255;
      }
    }
    function reduce(r) {
      var x = new Float64Array(64),
        i;
      for (i = 0; i < 64; i++) x[i] = r[i];
      for (i = 0; i < 64; i++) r[i] = 0;
      modL(r, x);
    }

    // Note: difference from C - smlen returned, not passed as argument.
    function crypto_sign(sm, m, n, sk) {
      var d = new Uint8Array(64),
        h = new Uint8Array(64),
        r = new Uint8Array(64);
      var i,
        j,
        x = new Float64Array(64);
      var p = [gf(), gf(), gf(), gf()];
      crypto_hash(d, sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;
      var smlen = n + 64;
      for (i = 0; i < n; i++) sm[64 + i] = m[i];
      for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];
      crypto_hash(r, sm.subarray(32), n + 32);
      reduce(r);
      scalarbase(p, r);
      pack(sm, p);
      for (i = 32; i < 64; i++) sm[i] = sk[i];
      crypto_hash(h, sm, n + 64);
      reduce(h);
      for (i = 0; i < 64; i++) x[i] = 0;
      for (i = 0; i < 32; i++) x[i] = r[i];
      for (i = 0; i < 32; i++) {
        for (j = 0; j < 32; j++) {
          x[i + j] += h[i] * d[j];
        }
      }
      modL(sm.subarray(32), x);
      return smlen;
    }
    function unpackneg(r, p) {
      var t = gf(),
        chk = gf(),
        num = gf(),
        den = gf(),
        den2 = gf(),
        den4 = gf(),
        den6 = gf();
      set25519(r[2], gf1);
      unpack25519(r[1], p);
      S(num, r[1]);
      M(den, num, D);
      Z(num, num, r[2]);
      A(den, r[2], den);
      S(den2, den);
      S(den4, den2);
      M(den6, den4, den2);
      M(t, den6, num);
      M(t, t, den);
      pow2523(t, t);
      M(t, t, num);
      M(t, t, den);
      M(t, t, den);
      M(r[0], t, den);
      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num)) M(r[0], r[0], I);
      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num)) return -1;
      if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);
      M(r[3], r[0], r[1]);
      return 0;
    }
    function crypto_sign_open(m, sm, n, pk) {
      var i;
      var t = new Uint8Array(32),
        h = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()],
        q = [gf(), gf(), gf(), gf()];
      if (n < 64) return -1;
      if (unpackneg(q, pk)) return -1;
      for (i = 0; i < n; i++) m[i] = sm[i];
      for (i = 0; i < 32; i++) m[i + 32] = pk[i];
      crypto_hash(h, m, n);
      reduce(h);
      scalarmult(p, q, h);
      scalarbase(q, sm.subarray(32));
      add(p, q);
      pack(t, p);
      n -= 64;
      if (crypto_verify_32(sm, 0, t, 0)) {
        for (i = 0; i < n; i++) m[i] = 0;
        return -1;
      }
      for (i = 0; i < n; i++) m[i] = sm[i + 64];
      return n;
    }
    var crypto_secretbox_KEYBYTES = 32,
      crypto_secretbox_NONCEBYTES = 24,
      crypto_secretbox_ZEROBYTES = 32,
      crypto_secretbox_BOXZEROBYTES = 16,
      crypto_scalarmult_BYTES = 32,
      crypto_scalarmult_SCALARBYTES = 32,
      crypto_box_PUBLICKEYBYTES = 32,
      crypto_box_SECRETKEYBYTES = 32,
      crypto_box_BEFORENMBYTES = 32,
      crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
      crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
      crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
      crypto_sign_BYTES = 64,
      crypto_sign_PUBLICKEYBYTES = 32,
      crypto_sign_SECRETKEYBYTES = 64,
      crypto_sign_SEEDBYTES = 32,
      crypto_hash_BYTES = 64;
    nacl.lowlevel = {
      crypto_core_hsalsa20: crypto_core_hsalsa20,
      crypto_stream_xor: crypto_stream_xor,
      crypto_stream: crypto_stream,
      crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
      crypto_stream_salsa20: crypto_stream_salsa20,
      crypto_onetimeauth: crypto_onetimeauth,
      crypto_onetimeauth_verify: crypto_onetimeauth_verify,
      crypto_verify_16: crypto_verify_16,
      crypto_verify_32: crypto_verify_32,
      crypto_secretbox: crypto_secretbox,
      crypto_secretbox_open: crypto_secretbox_open,
      crypto_scalarmult: crypto_scalarmult,
      crypto_scalarmult_base: crypto_scalarmult_base,
      crypto_box_beforenm: crypto_box_beforenm,
      crypto_box_afternm: crypto_box_afternm,
      crypto_box: crypto_box,
      crypto_box_open: crypto_box_open,
      crypto_box_keypair: crypto_box_keypair,
      crypto_hash: crypto_hash,
      crypto_sign: crypto_sign,
      crypto_sign_keypair: crypto_sign_keypair,
      crypto_sign_open: crypto_sign_open,
      crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
      crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
      crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
      crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
      crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
      crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
      crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
      crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
      crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
      crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
      crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
      crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
      crypto_sign_BYTES: crypto_sign_BYTES,
      crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
      crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
      crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
      crypto_hash_BYTES: crypto_hash_BYTES,
      gf: gf,
      D: D,
      L: L,
      pack25519: pack25519,
      unpack25519: unpack25519,
      M: M,
      A: A,
      S: S,
      Z: Z,
      pow2523: pow2523,
      add: add,
      set25519: set25519,
      modL: modL,
      scalarmult: scalarmult,
      scalarbase: scalarbase
    };

    /* High-level API */

    function checkLengths(k, n) {
      if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
      if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
    }
    function checkBoxLengths(pk, sk) {
      if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
      if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
    }
    function checkArrayTypes() {
      for (var i = 0; i < arguments.length; i++) {
        if (!(arguments[i] instanceof Uint8Array)) throw new TypeError('unexpected type, use Uint8Array');
      }
    }
    function cleanup(arr) {
      for (var i = 0; i < arr.length; i++) arr[i] = 0;
    }
    nacl.randomBytes = function (n) {
      var b = new Uint8Array(n);
      randombytes(b, n);
      return b;
    };
    nacl.secretbox = function (msg, nonce, key) {
      checkArrayTypes(msg, nonce, key);
      checkLengths(key, nonce);
      var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
      var c = new Uint8Array(m.length);
      for (var i = 0; i < msg.length; i++) m[i + crypto_secretbox_ZEROBYTES] = msg[i];
      crypto_secretbox(c, m, m.length, nonce, key);
      return c.subarray(crypto_secretbox_BOXZEROBYTES);
    };
    nacl.secretbox.open = function (box, nonce, key) {
      checkArrayTypes(box, nonce, key);
      checkLengths(key, nonce);
      var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
      var m = new Uint8Array(c.length);
      for (var i = 0; i < box.length; i++) c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
      if (c.length < 32) return null;
      if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
      return m.subarray(crypto_secretbox_ZEROBYTES);
    };
    nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
    nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
    nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
    nacl.scalarMult = function (n, p) {
      checkArrayTypes(n, p);
      if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
      if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
      var q = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult(q, n, p);
      return q;
    };
    nacl.scalarMult.base = function (n) {
      checkArrayTypes(n);
      if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
      var q = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult_base(q, n);
      return q;
    };
    nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
    nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
    nacl.box = function (msg, nonce, publicKey, secretKey) {
      var k = nacl.box.before(publicKey, secretKey);
      return nacl.secretbox(msg, nonce, k);
    };
    nacl.box.before = function (publicKey, secretKey) {
      checkArrayTypes(publicKey, secretKey);
      checkBoxLengths(publicKey, secretKey);
      var k = new Uint8Array(crypto_box_BEFORENMBYTES);
      crypto_box_beforenm(k, publicKey, secretKey);
      return k;
    };
    nacl.box.after = nacl.secretbox;
    nacl.box.open = function (msg, nonce, publicKey, secretKey) {
      var k = nacl.box.before(publicKey, secretKey);
      return nacl.secretbox.open(msg, nonce, k);
    };
    nacl.box.open.after = nacl.secretbox.open;
    nacl.box.keyPair = function () {
      var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
      crypto_box_keypair(pk, sk);
      return {
        publicKey: pk,
        secretKey: sk
      };
    };
    nacl.box.keyPair.fromSecretKey = function (secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
      var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      crypto_scalarmult_base(pk, secretKey);
      return {
        publicKey: pk,
        secretKey: new Uint8Array(secretKey)
      };
    };
    nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
    nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
    nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
    nacl.box.nonceLength = crypto_box_NONCEBYTES;
    nacl.box.overheadLength = nacl.secretbox.overheadLength;
    nacl.sign = function (msg, secretKey) {
      checkArrayTypes(msg, secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
      var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
      crypto_sign(signedMsg, msg, msg.length, secretKey);
      return signedMsg;
    };
    nacl.sign.open = function (signedMsg, publicKey) {
      checkArrayTypes(signedMsg, publicKey);
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
      var tmp = new Uint8Array(signedMsg.length);
      var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
      if (mlen < 0) return null;
      var m = new Uint8Array(mlen);
      for (var i = 0; i < m.length; i++) m[i] = tmp[i];
      return m;
    };
    nacl.sign.detached = function (msg, secretKey) {
      var signedMsg = nacl.sign(msg, secretKey);
      var sig = new Uint8Array(crypto_sign_BYTES);
      for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
      return sig;
    };
    nacl.sign.detached.verify = function (msg, sig, publicKey) {
      checkArrayTypes(msg, sig, publicKey);
      if (sig.length !== crypto_sign_BYTES) throw new Error('bad signature size');
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
      var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
      var m = new Uint8Array(crypto_sign_BYTES + msg.length);
      var i;
      for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
      for (i = 0; i < msg.length; i++) sm[i + crypto_sign_BYTES] = msg[i];
      return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
    };
    nacl.sign.keyPair = function () {
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      crypto_sign_keypair(pk, sk);
      return {
        publicKey: pk,
        secretKey: sk
      };
    };
    nacl.sign.keyPair.fromSecretKey = function (secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32 + i];
      return {
        publicKey: pk,
        secretKey: new Uint8Array(secretKey)
      };
    };
    nacl.sign.keyPair.fromSeed = function (seed) {
      checkArrayTypes(seed);
      if (seed.length !== crypto_sign_SEEDBYTES) throw new Error('bad seed size');
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      for (var i = 0; i < 32; i++) sk[i] = seed[i];
      crypto_sign_keypair(pk, sk, true);
      return {
        publicKey: pk,
        secretKey: sk
      };
    };
    nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
    nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
    nacl.sign.seedLength = crypto_sign_SEEDBYTES;
    nacl.sign.signatureLength = crypto_sign_BYTES;
    nacl.hash = function (msg) {
      checkArrayTypes(msg);
      var h = new Uint8Array(crypto_hash_BYTES);
      crypto_hash(h, msg, msg.length);
      return h;
    };
    nacl.hash.hashLength = crypto_hash_BYTES;
    nacl.verify = function (x, y) {
      checkArrayTypes(x, y);
      // Zero length arguments are considered not equal.
      if (x.length === 0 || y.length === 0) return false;
      if (x.length !== y.length) return false;
      return vn(x, 0, y, 0, x.length) === 0 ? true : false;
    };
    nacl.setPRNG = function (fn) {
      randombytes = fn;
    };
    (function () {
      // Initialize PRNG if environment provides CSPRNG.
      // If not, methods calling randombytes will throw.
      var crypto = typeof self !== 'undefined' ? self.crypto || self.msCrypto : null;
      if (crypto && crypto.getRandomValues) {
        // Browsers.
        var QUOTA = 65536;
        nacl.setPRNG(function (x, n) {
          var i,
            v = new Uint8Array(n);
          for (i = 0; i < n; i += QUOTA) {
            crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
          }
          for (i = 0; i < n; i++) x[i] = v[i];
          cleanup(v);
        });
      } else if (typeof commonjsRequire !== 'undefined') {
        // Node.js.
        crypto = require$$0$3;
        if (crypto && crypto.randomBytes) {
          nacl.setPRNG(function (x, n) {
            var i,
              v = crypto.randomBytes(n);
            for (i = 0; i < n; i++) x[i] = v[i];
            cleanup(v);
          });
        }
      }
    })();
  })(module.exports ? module.exports : self.nacl = self.nacl || {});
})(naclFast);
var naclFastExports = naclFast.exports;
var nacl$1$1 = /*@__PURE__*/getDefaultExportFromCjs(naclFastExports);

var CONNECT_EVENT_ERROR_CODES;
(function (CONNECT_EVENT_ERROR_CODES) {
  CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
  CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
  CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES["MANIFEST_NOT_FOUND_ERROR"] = 2] = "MANIFEST_NOT_FOUND_ERROR";
  CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES["MANIFEST_CONTENT_ERROR"] = 3] = "MANIFEST_CONTENT_ERROR";
  CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
  CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES["USER_REJECTS_ERROR"] = 300] = "USER_REJECTS_ERROR";
  CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(CONNECT_EVENT_ERROR_CODES || (CONNECT_EVENT_ERROR_CODES = {}));
var CONNECT_ITEM_ERROR_CODES;
(function (CONNECT_ITEM_ERROR_CODES) {
  CONNECT_ITEM_ERROR_CODES[CONNECT_ITEM_ERROR_CODES["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
  CONNECT_ITEM_ERROR_CODES[CONNECT_ITEM_ERROR_CODES["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(CONNECT_ITEM_ERROR_CODES || (CONNECT_ITEM_ERROR_CODES = {}));
var SEND_TRANSACTION_ERROR_CODES;
(function (SEND_TRANSACTION_ERROR_CODES) {
  SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
  SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
  SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
  SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES["USER_REJECTS_ERROR"] = 300] = "USER_REJECTS_ERROR";
  SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(SEND_TRANSACTION_ERROR_CODES || (SEND_TRANSACTION_ERROR_CODES = {}));
var SIGN_DATA_ERROR_CODES;
(function (SIGN_DATA_ERROR_CODES) {
  SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
  SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
  SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
  SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES["USER_REJECTS_ERROR"] = 300] = "USER_REJECTS_ERROR";
  SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(SIGN_DATA_ERROR_CODES || (SIGN_DATA_ERROR_CODES = {}));
var DISCONNECT_ERROR_CODES;
(function (DISCONNECT_ERROR_CODES) {
  DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
  DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
  DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
  DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(DISCONNECT_ERROR_CODES || (DISCONNECT_ERROR_CODES = {}));
var CHAIN;
(function (CHAIN) {
  CHAIN["MAINNET"] = "-239";
  CHAIN["TESTNET"] = "-3";
})(CHAIN || (CHAIN = {}));
function encodeUint8Array(value, urlSafe) {
  var encoded = nacl$5.encodeBase64(value);
  if (!urlSafe) {
    return encoded;
  }
  return encodeURIComponent(encoded);
}
function decodeToUint8Array(value, urlSafe) {
  if (urlSafe) {
    value = decodeURIComponent(value);
  }
  return nacl$5.decodeBase64(value);
}
function encode(value) {
  var urlSafe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var uint8Array;
  if (value instanceof Uint8Array) {
    uint8Array = value;
  } else {
    if (typeof value !== 'string') {
      value = JSON.stringify(value);
    }
    uint8Array = nacl$5.decodeUTF8(value);
  }
  return encodeUint8Array(uint8Array, urlSafe);
}
function decode(value) {
  var urlSafe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var decodedUint8Array = decodeToUint8Array(value, urlSafe);
  return {
    toString: function toString() {
      return nacl$5.encodeUTF8(decodedUint8Array);
    },
    toObject: function toObject() {
      try {
        return JSON.parse(nacl$5.encodeUTF8(decodedUint8Array));
      } catch (e) {
        return null;
      }
    },
    toUint8Array: function toUint8Array() {
      return decodedUint8Array;
    }
  };
}
var Base64 = {
  encode: encode,
  decode: decode
};
function concatUint8Arrays(buffer1, buffer2) {
  var mergedArray = new Uint8Array(buffer1.length + buffer2.length);
  mergedArray.set(buffer1);
  mergedArray.set(buffer2, buffer1.length);
  return mergedArray;
}
function splitToUint8Arrays(array, index) {
  if (index >= array.length) {
    throw new Error('Index is out of buffer');
  }
  var subArray1 = array.slice(0, index);
  var subArray2 = array.slice(index);
  return [subArray1, subArray2];
}
function toHexString(byteArray) {
  var hexString = '';
  byteArray.forEach(function (_byte) {
    hexString += ('0' + (_byte & 0xff).toString(16)).slice(-2);
  });
  return hexString;
}
function hexToByteArray(hexString) {
  if (hexString.length % 2 !== 0) {
    throw new Error("Cannot convert ".concat(hexString, " to bytesArray"));
  }
  var result = new Uint8Array(hexString.length / 2);
  for (var i = 0; i < hexString.length; i += 2) {
    result[i / 2] = parseInt(hexString.slice(i, i + 2), 16);
  }
  return result;
}
var SessionCrypto = /*#__PURE__*/function () {
  function SessionCrypto(keyPair) {
    _classCallCheck(this, SessionCrypto);
    this.nonceLength = 24;
    this.keyPair = keyPair ? this.createKeypairFromString(keyPair) : this.createKeypair();
    this.sessionId = toHexString(this.keyPair.publicKey);
  }
  return _createClass(SessionCrypto, [{
    key: "createKeypair",
    value: function createKeypair() {
      return nacl$1$1.box.keyPair();
    }
  }, {
    key: "createKeypairFromString",
    value: function createKeypairFromString(keyPair) {
      return {
        publicKey: hexToByteArray(keyPair.publicKey),
        secretKey: hexToByteArray(keyPair.secretKey)
      };
    }
  }, {
    key: "createNonce",
    value: function createNonce() {
      return nacl$1$1.randomBytes(this.nonceLength);
    }
  }, {
    key: "encrypt",
    value: function encrypt(message, receiverPublicKey) {
      var encodedMessage = new TextEncoder().encode(message);
      var nonce = this.createNonce();
      var encrypted = nacl$1$1.box(encodedMessage, nonce, receiverPublicKey, this.keyPair.secretKey);
      return concatUint8Arrays(nonce, encrypted);
    }
  }, {
    key: "decrypt",
    value: function decrypt(message, senderPublicKey) {
      var _splitToUint8Arrays = splitToUint8Arrays(message, this.nonceLength),
        _splitToUint8Arrays2 = _slicedToArray(_splitToUint8Arrays, 2),
        nonce = _splitToUint8Arrays2[0],
        internalMessage = _splitToUint8Arrays2[1];
      var decrypted = nacl$1$1.box.open(internalMessage, nonce, senderPublicKey, this.keyPair.secretKey);
      if (!decrypted) {
        throw new Error("Decryption error: \n message: ".concat(message.toString(), " \n sender pubkey: ").concat(senderPublicKey.toString(), " \n keypair pubkey: ").concat(this.keyPair.publicKey.toString(), " \n keypair secretkey: ").concat(this.keyPair.secretKey.toString()));
      }
      return new TextDecoder().decode(decrypted);
    }
  }, {
    key: "stringifyKeypair",
    value: function stringifyKeypair() {
      return {
        publicKey: toHexString(this.keyPair.publicKey),
        secretKey: toHexString(this.keyPair.secretKey)
      };
    }
  }]);
}();

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, [])).next());
  });
}

/**
 * Base class for TonConnect errors. You can check if the error was triggered by the @tonconnect/sdk using `err instanceof TonConnectError`.
 */
var TonConnectError = /*#__PURE__*/function (_Error) {
  function TonConnectError(message, options) {
    var _this;
    _classCallCheck(this, TonConnectError);
    _this = _callSuper(this, TonConnectError, [message, options]);
    _this.message = "".concat(TonConnectError.prefix, " ").concat(_this.constructor.name).concat(_this.info ? ': ' + _this.info : '').concat(message ? '\n' + message : '');
    Object.setPrototypeOf(_this, TonConnectError.prototype);
    return _this;
  }
  _inherits(TonConnectError, _Error);
  return _createClass(TonConnectError, [{
    key: "info",
    get: function get() {
      return '';
    }
  }]);
}(/*#__PURE__*/_wrapNativeSuper(Error));
TonConnectError.prefix = '[TON_CONNECT_SDK_ERROR]';

/**
 * Thrown when passed DappMetadata is in incorrect format.
 */
var DappMetadataError = /*#__PURE__*/function (_TonConnectError) {
  function DappMetadataError() {
    var _this2;
    _classCallCheck(this, DappMetadataError);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _callSuper(this, DappMetadataError, [].concat(args));
    Object.setPrototypeOf(_this2, DappMetadataError.prototype);
    return _this2;
  }
  _inherits(DappMetadataError, _TonConnectError);
  return _createClass(DappMetadataError, [{
    key: "info",
    get: function get() {
      return 'Passed DappMetadata is in incorrect format.';
    }
  }]);
}(TonConnectError);
/**
 * Thrown when passed manifest contains errors.
 */
var ManifestContentErrorError = /*#__PURE__*/function (_TonConnectError2) {
  function ManifestContentErrorError() {
    var _this3;
    _classCallCheck(this, ManifestContentErrorError);
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    _this3 = _callSuper(this, ManifestContentErrorError, [].concat(args));
    Object.setPrototypeOf(_this3, ManifestContentErrorError.prototype);
    return _this3;
  }
  _inherits(ManifestContentErrorError, _TonConnectError2);
  return _createClass(ManifestContentErrorError, [{
    key: "info",
    get: function get() {
      return 'Passed `tonconnect-manifest.json` contains errors. Check format of your manifest. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest';
    }
  }]);
}(TonConnectError);
/**
 * Thrown when wallet can't get manifest by passed manifestUrl.
 */
var ManifestNotFoundError = /*#__PURE__*/function (_TonConnectError3) {
  function ManifestNotFoundError() {
    var _this4;
    _classCallCheck(this, ManifestNotFoundError);
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    _this4 = _callSuper(this, ManifestNotFoundError, [].concat(args));
    Object.setPrototypeOf(_this4, ManifestNotFoundError.prototype);
    return _this4;
  }
  _inherits(ManifestNotFoundError, _TonConnectError3);
  return _createClass(ManifestNotFoundError, [{
    key: "info",
    get: function get() {
      return 'Manifest not found. Make sure you added `tonconnect-manifest.json` to the root of your app or passed correct manifestUrl. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest';
    }
  }]);
}(TonConnectError);
/**
 * Thrown when wallet connection called but wallet already connected. To avoid the error, disconnect the wallet before doing a new connection.
 */
var WalletAlreadyConnectedError = /*#__PURE__*/function (_TonConnectError4) {
  function WalletAlreadyConnectedError() {
    var _this5;
    _classCallCheck(this, WalletAlreadyConnectedError);
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    _this5 = _callSuper(this, WalletAlreadyConnectedError, [].concat(args));
    Object.setPrototypeOf(_this5, WalletAlreadyConnectedError.prototype);
    return _this5;
  }
  _inherits(WalletAlreadyConnectedError, _TonConnectError4);
  return _createClass(WalletAlreadyConnectedError, [{
    key: "info",
    get: function get() {
      return 'Wallet connection called but wallet already connected. To avoid the error, disconnect the wallet before doing a new connection.';
    }
  }]);
}(TonConnectError);
/**
 * Thrown when send transaction or other protocol methods called while wallet is not connected.
 */
var WalletNotConnectedError = /*#__PURE__*/function (_TonConnectError5) {
  function WalletNotConnectedError() {
    var _this6;
    _classCallCheck(this, WalletNotConnectedError);
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }
    _this6 = _callSuper(this, WalletNotConnectedError, [].concat(args));
    Object.setPrototypeOf(_this6, WalletNotConnectedError.prototype);
    return _this6;
  }
  _inherits(WalletNotConnectedError, _TonConnectError5);
  return _createClass(WalletNotConnectedError, [{
    key: "info",
    get: function get() {
      return 'Send transaction or other protocol methods called while wallet is not connected.';
    }
  }]);
}(TonConnectError);
function isWalletConnectionSourceJS(value) {
  return 'jsBridgeKey' in value;
}

/**
 * Thrown when user rejects the action in the wallet.
 */
var UserRejectsError = /*#__PURE__*/function (_TonConnectError6) {
  function UserRejectsError() {
    var _this7;
    _classCallCheck(this, UserRejectsError);
    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      args[_key6] = arguments[_key6];
    }
    _this7 = _callSuper(this, UserRejectsError, [].concat(args));
    Object.setPrototypeOf(_this7, UserRejectsError.prototype);
    return _this7;
  }
  _inherits(UserRejectsError, _TonConnectError6);
  return _createClass(UserRejectsError, [{
    key: "info",
    get: function get() {
      return 'User rejects the action in the wallet.';
    }
  }]);
}(TonConnectError);
/**
 * Thrown when request to the wallet contains errors.
 */
var BadRequestError = /*#__PURE__*/function (_TonConnectError7) {
  function BadRequestError() {
    var _this8;
    _classCallCheck(this, BadRequestError);
    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      args[_key7] = arguments[_key7];
    }
    _this8 = _callSuper(this, BadRequestError, [].concat(args));
    Object.setPrototypeOf(_this8, BadRequestError.prototype);
    return _this8;
  }
  _inherits(BadRequestError, _TonConnectError7);
  return _createClass(BadRequestError, [{
    key: "info",
    get: function get() {
      return 'Request to the wallet contains errors.';
    }
  }]);
}(TonConnectError);
/**
 * Thrown when app tries to send rpc request to the injected wallet while not connected.
 */
var UnknownAppError = /*#__PURE__*/function (_TonConnectError8) {
  function UnknownAppError() {
    var _this9;
    _classCallCheck(this, UnknownAppError);
    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
      args[_key8] = arguments[_key8];
    }
    _this9 = _callSuper(this, UnknownAppError, [].concat(args));
    Object.setPrototypeOf(_this9, UnknownAppError.prototype);
    return _this9;
  }
  _inherits(UnknownAppError, _TonConnectError8);
  return _createClass(UnknownAppError, [{
    key: "info",
    get: function get() {
      return 'App tries to send rpc request to the injected wallet while not connected.';
    }
  }]);
}(TonConnectError);
/**
 * Thrown when there is an attempt to connect to the injected wallet while it is not exists in the webpage.
 */
var WalletNotInjectedError = /*#__PURE__*/function (_TonConnectError9) {
  function WalletNotInjectedError() {
    var _this10;
    _classCallCheck(this, WalletNotInjectedError);
    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
      args[_key9] = arguments[_key9];
    }
    _this10 = _callSuper(this, WalletNotInjectedError, [].concat(args));
    Object.setPrototypeOf(_this10, WalletNotInjectedError.prototype);
    return _this10;
  }
  _inherits(WalletNotInjectedError, _TonConnectError9);
  return _createClass(WalletNotInjectedError, [{
    key: "info",
    get: function get() {
      return 'There is an attempt to connect to the injected wallet while it is not exists in the webpage.';
    }
  }]);
}(TonConnectError);
/**
 * Thrown when an error occurred while fetching the wallets list.
 */
var FetchWalletsError = /*#__PURE__*/function (_TonConnectError11) {
  function FetchWalletsError() {
    var _this12;
    _classCallCheck(this, FetchWalletsError);
    for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
      args[_key11] = arguments[_key11];
    }
    _this12 = _callSuper(this, FetchWalletsError, [].concat(args));
    Object.setPrototypeOf(_this12, FetchWalletsError.prototype);
    return _this12;
  }
  _inherits(FetchWalletsError, _TonConnectError11);
  return _createClass(FetchWalletsError, [{
    key: "info",
    get: function get() {
      return 'An error occurred while fetching the wallets list.';
    }
  }]);
}(TonConnectError);
/**
 * Thrown when passed address is in incorrect format.
 */
var WrongAddressError = /*#__PURE__*/function (_TonConnectError12) {
  function WrongAddressError() {
    var _this13;
    _classCallCheck(this, WrongAddressError);
    for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
      args[_key12] = arguments[_key12];
    }
    _this13 = _callSuper(this, WrongAddressError, [].concat(args));
    Object.setPrototypeOf(_this13, WrongAddressError.prototype);
    return _this13;
  }
  _inherits(WrongAddressError, _TonConnectError12);
  return _createClass(WrongAddressError, [{
    key: "info",
    get: function get() {
      return 'Passed address is in incorrect format.';
    }
  }]);
}(TonConnectError);
/**
 * Thrown when passed hex is in incorrect format.
 */
var ParseHexError = /*#__PURE__*/function (_TonConnectError13) {
  function ParseHexError() {
    var _this14;
    _classCallCheck(this, ParseHexError);
    for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
      args[_key13] = arguments[_key13];
    }
    _this14 = _callSuper(this, ParseHexError, [].concat(args));
    Object.setPrototypeOf(_this14, ParseHexError.prototype);
    return _this14;
  }
  _inherits(ParseHexError, _TonConnectError13);
  return _createClass(ParseHexError, [{
    key: "info",
    get: function get() {
      return 'Passed hex is in incorrect format.';
    }
  }]);
}(TonConnectError);
/**
 * Unhanded unknown error.
 */
var UnknownError = /*#__PURE__*/function (_TonConnectError14) {
  function UnknownError() {
    var _this15;
    _classCallCheck(this, UnknownError);
    for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
      args[_key14] = arguments[_key14];
    }
    _this15 = _callSuper(this, UnknownError, [].concat(args));
    Object.setPrototypeOf(_this15, UnknownError.prototype);
    return _this15;
  }
  _inherits(UnknownError, _TonConnectError14);
  return _createClass(UnknownError);
}(TonConnectError);
var connectEventErrorsCodes = _defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1({}, CONNECT_EVENT_ERROR_CODES.UNKNOWN_ERROR, UnknownError), CONNECT_EVENT_ERROR_CODES.USER_REJECTS_ERROR, UserRejectsError), CONNECT_EVENT_ERROR_CODES.BAD_REQUEST_ERROR, BadRequestError), CONNECT_EVENT_ERROR_CODES.UNKNOWN_APP_ERROR, UnknownAppError), CONNECT_EVENT_ERROR_CODES.MANIFEST_NOT_FOUND_ERROR, ManifestNotFoundError), CONNECT_EVENT_ERROR_CODES.MANIFEST_CONTENT_ERROR, ManifestContentErrorError);
var ConnectErrorsParser = /*#__PURE__*/function () {
  function ConnectErrorsParser() {
    _classCallCheck(this, ConnectErrorsParser);
  }
  return _createClass(ConnectErrorsParser, [{
    key: "parseError",
    value: function parseError(error) {
      var ErrorConstructor = UnknownError;
      if (error.code in connectEventErrorsCodes) {
        ErrorConstructor = connectEventErrorsCodes[error.code] || UnknownError;
      }
      return new ErrorConstructor(error.message);
    }
  }]);
}();
var connectErrorsParser = new ConnectErrorsParser();
var RpcParser = /*#__PURE__*/function () {
  function RpcParser() {
    _classCallCheck(this, RpcParser);
  }
  return _createClass(RpcParser, [{
    key: "isError",
    value: function isError(response) {
      return 'error' in response;
    }
  }]);
}();
var sendTransactionErrors = _defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1({}, SEND_TRANSACTION_ERROR_CODES.UNKNOWN_ERROR, UnknownError), SEND_TRANSACTION_ERROR_CODES.USER_REJECTS_ERROR, UserRejectsError), SEND_TRANSACTION_ERROR_CODES.BAD_REQUEST_ERROR, BadRequestError), SEND_TRANSACTION_ERROR_CODES.UNKNOWN_APP_ERROR, UnknownAppError);
var SendTransactionParser = /*#__PURE__*/function (_RpcParser) {
  function SendTransactionParser() {
    _classCallCheck(this, SendTransactionParser);
    return _callSuper(this, SendTransactionParser, arguments);
  }
  _inherits(SendTransactionParser, _RpcParser);
  return _createClass(SendTransactionParser, [{
    key: "convertToRpcRequest",
    value: function convertToRpcRequest(request) {
      return {
        method: 'sendTransaction',
        params: [JSON.stringify(request)]
      };
    }
  }, {
    key: "parseAndThrowError",
    value: function parseAndThrowError(response) {
      var ErrorConstructor = UnknownError;
      if (response.error.code in sendTransactionErrors) {
        ErrorConstructor = sendTransactionErrors[response.error.code] || UnknownError;
      }
      throw new ErrorConstructor(response.error.message);
    }
  }, {
    key: "convertFromRpcResponse",
    value: function convertFromRpcResponse(rpcResponse) {
      return {
        boc: rpcResponse.result
      };
    }
  }]);
}(RpcParser);
var sendTransactionParser = new SendTransactionParser();
var HttpBridgeGatewayStorage = /*#__PURE__*/function () {
  function HttpBridgeGatewayStorage(storage, bridgeUrl) {
    _classCallCheck(this, HttpBridgeGatewayStorage);
    this.storage = storage;
    this.storeKey = 'ton-connect-storage_http-bridge-gateway::' + bridgeUrl;
  }
  return _createClass(HttpBridgeGatewayStorage, [{
    key: "storeLastEventId",
    value: function storeLastEventId(lastEventId) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this.storage.setItem(this.storeKey, lastEventId));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
    }
  }, {
    key: "removeLastEventId",
    value: function removeLastEventId() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.storage.removeItem(this.storeKey));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
    }
  }, {
    key: "getLastEventId",
    value: function getLastEventId() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var stored;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.storage.getItem(this.storeKey);
            case 2:
              stored = _context3.sent;
              if (stored) {
                _context3.next = 5;
                break;
              }
              return _context3.abrupt("return", null);
            case 5:
              return _context3.abrupt("return", stored);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
    }
  }]);
}();
function removeUrlLastSlash(url) {
  if (url.slice(-1) === '/') {
    return url.slice(0, -1);
  }
  return url;
}
function addPathToUrl(url, path) {
  return removeUrlLastSlash(url) + '/' + path;
}
function isTelegramUrl(link) {
  if (!link) {
    return false;
  }
  var url = new URL(link);
  return url.protocol === 'tg:' || url.hostname === 't.me';
}
function encodeTelegramUrlParameters(parameters) {
  return parameters.replaceAll('.', '%2E').replaceAll('-', '%2D').replaceAll('_', '%5F').replaceAll('&', '-').replaceAll('=', '__').replaceAll('%', '--');
}

/**
 * Delays the execution of code for a specified number of milliseconds.
 * @param {number} timeout - The number of milliseconds to delay the execution.
 * @param {DelayOptions} [options] - Optional configuration options for the delay.
 * @return {Promise<void>} - A promise that resolves after the specified delay, or rejects if the delay is aborted.
 */
function delay$2(timeout, options) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          return _context4.abrupt("return", new Promise(function (resolve, reject) {
            var _a, _b;
            if ((_a = void 0 ) === null || _a === void 0 ? void 0 : _a.aborted) {
              reject(new TonConnectError('Delay aborted'));
              return;
            }
            var timeoutId = setTimeout(function () {
              return resolve();
            }, timeout);
            (_b = void 0 ) === null || _b === void 0 ? void 0 : _b.addEventListener('abort', function () {
              clearTimeout(timeoutId);
              reject(new TonConnectError('Delay aborted'));
            });
          }));
        case 1:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
}

/**
 * Creates an AbortController instance with an optional AbortSignal.
 *
 * @param {AbortSignal} [signal] - An optional AbortSignal to use for aborting the controller.
 * @returns {AbortController} - An instance of AbortController.
 */
function createAbortController(signal) {
  var abortController = new AbortController();
  if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
    abortController.abort();
  } else {
    signal === null || signal === void 0 ? void 0 : signal.addEventListener('abort', function () {
      return abortController.abort();
    }, {
      once: true
    });
  }
  return abortController;
}

/**
 * Function to call ton api until we get response.
 * Because ton network is pretty unstable we need to make sure response is final.
 * @param {T} fn - function to call
 * @param {CallForSuccessOptions} [options] - optional configuration options
 */
function callForSuccess(fn, options) {
  var _a, _b;
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
    var attempts, delayMs, abortController, i, lastError;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          attempts = (_a = options === null || options === void 0 ? void 0 : options.attempts) !== null && _a !== void 0 ? _a : 10;
          delayMs = (_b = options === null || options === void 0 ? void 0 : options.delayMs) !== null && _b !== void 0 ? _b : 200;
          abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
          if (!(typeof fn !== 'function')) {
            _context5.next = 5;
            break;
          }
          throw new TonConnectError("Expected a function, got ".concat(_typeof(fn)));
        case 5:
          i = 0;
        case 6:
          if (!(i < attempts)) {
            _context5.next = 24;
            break;
          }
          if (!abortController.signal.aborted) {
            _context5.next = 9;
            break;
          }
          throw new TonConnectError("Aborted after attempts ".concat(i));
        case 9:
          _context5.prev = 9;
          _context5.next = 12;
          return fn({
            signal: abortController.signal
          });
        case 12:
          return _context5.abrupt("return", _context5.sent);
        case 15:
          _context5.prev = 15;
          _context5.t0 = _context5["catch"](9);
          lastError = _context5.t0;
          i++;
          if (!(i < attempts)) {
            _context5.next = 22;
            break;
          }
          _context5.next = 22;
          return delay$2(delayMs);
        case 22:
          _context5.next = 6;
          break;
        case 24:
          throw lastError;
        case 25:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[9, 15]]);
  }));
}
function logDebug$1() {
  {
    try {
      var _console;
      for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
        args[_key15] = arguments[_key15];
      }
      (_console = console).debug.apply(_console, ['[TON_CONNECT_SDK]'].concat(args));
    } catch (_a) {}
  }
}
function logError$1() {
  {
    try {
      var _console2;
      for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
        args[_key16] = arguments[_key16];
      }
      (_console2 = console).error.apply(_console2, ['[TON_CONNECT_SDK]'].concat(args));
    } catch (_a) {}
  }
}
function logWarning$1() {
  {
    try {
      var _console3;
      for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
        args[_key17] = arguments[_key17];
      }
      (_console3 = console).warn.apply(_console3, ['[TON_CONNECT_SDK]'].concat(args));
    } catch (_a) {}
  }
}

/**
 * Create a resource.
 *
 * @template T - The type of the resource.
 * @template Args - The type of the arguments for creating the resource.
 *
 * @param {(...args: Args) => Promise<T>} createFn - A function that creates the resource.
 * @param {(resource: T) => Promise<void>} [disposeFn] - An optional function that disposes the resource.
 */
function createResource$1(createFn, disposeFn) {
  var _this16 = this;
  var currentResource = null;
  var currentArgs = null;
  var currentPromise = null;
  var currentSignal = null;
  var abortController = null;
  // create a new resource
  var create = function create(signal) {
    for (var _len18 = arguments.length, args = new Array(_len18 > 1 ? _len18 - 1 : 0), _key18 = 1; _key18 < _len18; _key18++) {
      args[_key18 - 1] = arguments[_key18];
    }
    return __awaiter(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      var promise, resource;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            currentSignal = signal !== null && signal !== void 0 ? signal : null;
            abortController === null || abortController === void 0 ? void 0 : abortController.abort();
            abortController = createAbortController(signal);
            if (!abortController.signal.aborted) {
              _context6.next = 5;
              break;
            }
            throw new TonConnectError('Resource creation was aborted');
          case 5:
            currentArgs = args !== null && args !== void 0 ? args : null;
            promise = createFn.apply(void 0, [abortController.signal].concat(args));
            currentPromise = promise;
            _context6.next = 10;
            return promise;
          case 10:
            resource = _context6.sent;
            if (!(currentPromise !== promise && resource !== currentResource)) {
              _context6.next = 15;
              break;
            }
            _context6.next = 14;
            return disposeFn(resource);
          case 14:
            throw new TonConnectError('Resource creation was aborted by a new resource creation');
          case 15:
            currentResource = resource;
            return _context6.abrupt("return", currentResource);
          case 17:
          case "end":
            return _context6.stop();
        }
      }, _callee6);
    }));
  };
  // get the current resource
  var current = function current() {
    return currentResource !== null && currentResource !== void 0 ? currentResource : null;
  };
  // dispose the current resource
  var dispose = function dispose() {
    return __awaiter(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
      var resource, promise;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            _context7.prev = 0;
            resource = currentResource;
            currentResource = null;
            promise = currentPromise;
            currentPromise = null;
            try {
              abortController === null || abortController === void 0 ? void 0 : abortController.abort();
            } catch (e) {}
            _context7.t0 = Promise;
            _context7.t1 = resource ? disposeFn(resource) : Promise.resolve();
            if (!promise) {
              _context7.next = 16;
              break;
            }
            _context7.t3 = disposeFn;
            _context7.next = 12;
            return promise;
          case 12:
            _context7.t4 = _context7.sent;
            _context7.t2 = (0, _context7.t3)(_context7.t4);
            _context7.next = 17;
            break;
          case 16:
            _context7.t2 = Promise.resolve();
          case 17:
            _context7.t5 = _context7.t2;
            _context7.t6 = [_context7.t1, _context7.t5];
            _context7.next = 21;
            return _context7.t0.allSettled.call(_context7.t0, _context7.t6);
          case 21:
            _context7.next = 25;
            break;
          case 23:
            _context7.prev = 23;
            _context7.t7 = _context7["catch"](0);
          case 25:
          case "end":
            return _context7.stop();
        }
      }, _callee7, null, [[0, 23]]);
    }));
  };
  // recreate the current resource
  var recreate = function recreate(delayMs) {
    return __awaiter(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      var resource, promise, args, signal;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            resource = currentResource;
            promise = currentPromise;
            args = currentArgs;
            signal = currentSignal;
            _context8.next = 6;
            return delay$2(delayMs);
          case 6:
            if (!(resource === currentResource && promise === currentPromise && args === currentArgs && signal === currentSignal)) {
              _context8.next = 10;
              break;
            }
            _context8.next = 9;
            return create.apply(void 0, [currentSignal].concat(_toConsumableArray(args !== null && args !== void 0 ? args : [])));
          case 9:
            return _context8.abrupt("return", _context8.sent);
          case 10:
            throw new TonConnectError('Resource recreation was aborted by a new resource creation');
          case 11:
          case "end":
            return _context8.stop();
        }
      }, _callee8);
    }));
  };
  return {
    create: create,
    current: current,
    dispose: dispose,
    recreate: recreate
  };
}

/**
 * Executes a function and provides deferred behavior, allowing for a timeout and abort functionality.
 *
 * @param {Deferrable<T>} fn - The function to execute. It should return a promise that resolves with the desired result.
 * @param {DeferOptions} options - Optional configuration options for the defer behavior.
 * @returns {Promise<T>} - A promise that resolves with the result of the executed function, or rejects with an error if it times out or is aborted.
 */
function timeout$2(fn, options) {
  var _this17 = this;
  var timeout = options === null || options === void 0 ? void 0 : options.timeout;
  var signal = options === null || options === void 0 ? void 0 : options.signal;
  var abortController = createAbortController(signal);
  return new Promise(function (resolve, reject) {
    return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
      var timeoutId, deferOptions;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            if (!abortController.signal.aborted) {
              _context9.next = 3;
              break;
            }
            reject(new TonConnectError('Operation aborted'));
            return _context9.abrupt("return");
          case 3:
            if (typeof timeout !== 'undefined') {
              timeoutId = setTimeout(function () {
                abortController.abort();
                reject(new TonConnectError("Timeout after ".concat(timeout, "ms")));
              }, timeout);
            }
            abortController.signal.addEventListener('abort', function () {
              clearTimeout(timeoutId);
              reject(new TonConnectError('Operation aborted'));
            }, {
              once: true
            });
            deferOptions = {
              timeout: timeout,
              abort: abortController.signal
            };
            _context9.next = 8;
            return fn(function () {
              clearTimeout(timeoutId);
              resolve.apply(void 0, arguments);
            }, function () {
              clearTimeout(timeoutId);
              reject();
            }, deferOptions);
          case 8:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    }));
  });
}
var BridgeGateway = /*#__PURE__*/function () {
  function BridgeGateway(storage, bridgeUrl, sessionId, listener, errorsListener) {
    var _this18 = this;
    _classCallCheck(this, BridgeGateway);
    this.bridgeUrl = bridgeUrl;
    this.sessionId = sessionId;
    this.listener = listener;
    this.errorsListener = errorsListener;
    this.ssePath = 'events';
    this.postPath = 'message';
    this.heartbeatMessage = 'heartbeat';
    this.defaultTtl = 300;
    this.defaultReconnectDelay = 2000;
    this.defaultResendDelay = 5000;
    this.eventSource = createResource$1(function (signal, openingDeadlineMS) {
      return __awaiter(_this18, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        var eventSourceConfig;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              eventSourceConfig = {
                bridgeUrl: this.bridgeUrl,
                ssePath: this.ssePath,
                sessionId: this.sessionId,
                bridgeGatewayStorage: this.bridgeGatewayStorage,
                errorHandler: this.errorsHandler.bind(this),
                messageHandler: this.messagesHandler.bind(this),
                signal: signal,
                openingDeadlineMS: openingDeadlineMS
              };
              _context10.next = 3;
              return createEventSource(eventSourceConfig);
            case 3:
              return _context10.abrupt("return", _context10.sent);
            case 4:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
    }, function (resource) {
      return __awaiter(_this18, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              resource.close();
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
    });
    this.bridgeGatewayStorage = new HttpBridgeGatewayStorage(storage, bridgeUrl);
  }
  return _createClass(BridgeGateway, [{
    key: "isReady",
    get: function get() {
      var eventSource = this.eventSource.current();
      return (eventSource === null || eventSource === void 0 ? void 0 : eventSource.readyState) === EventSource.OPEN;
    }
  }, {
    key: "isClosed",
    get: function get() {
      var eventSource = this.eventSource.current();
      return (eventSource === null || eventSource === void 0 ? void 0 : eventSource.readyState) !== EventSource.OPEN;
    }
  }, {
    key: "isConnecting",
    get: function get() {
      var eventSource = this.eventSource.current();
      return (eventSource === null || eventSource === void 0 ? void 0 : eventSource.readyState) === EventSource.CONNECTING;
    }
  }, {
    key: "registerSession",
    value: function registerSession(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.eventSource.create(options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.openingDeadlineMS);
            case 2:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
    }
  }, {
    key: "send",
    value: function send(message, receiver, topic, ttlOrOptions) {
      var _a;
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
        var _this19 = this;
        var options, url, body;
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              // TODO: remove deprecated method
              options = {};
              if (typeof ttlOrOptions === 'number') {
                options.ttl = ttlOrOptions;
              } else {
                options.ttl = ttlOrOptions === null || ttlOrOptions === void 0 ? void 0 : ttlOrOptions.ttl;
                options.signal = ttlOrOptions === null || ttlOrOptions === void 0 ? void 0 : ttlOrOptions.signal;
                options.attempts = ttlOrOptions === null || ttlOrOptions === void 0 ? void 0 : ttlOrOptions.attempts;
              }
              url = new URL(addPathToUrl(this.bridgeUrl, this.postPath));
              url.searchParams.append('client_id', this.sessionId);
              url.searchParams.append('to', receiver);
              url.searchParams.append('ttl', ((options === null || options === void 0 ? void 0 : options.ttl) || this.defaultTtl).toString());
              url.searchParams.append('topic', topic);
              body = Base64.encode(message);
              _context14.next = 10;
              return callForSuccess(function (options) {
                return __awaiter(_this19, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
                  var response;
                  return _regeneratorRuntime().wrap(function _callee13$(_context13) {
                    while (1) switch (_context13.prev = _context13.next) {
                      case 0:
                        _context13.next = 2;
                        return this.post(url, body, options.signal);
                      case 2:
                        response = _context13.sent;
                        if (response.ok) {
                          _context13.next = 5;
                          break;
                        }
                        throw new TonConnectError("Bridge send failed, status ".concat(response.status));
                      case 5:
                      case "end":
                        return _context13.stop();
                    }
                  }, _callee13, this);
                }));
              }, {
                attempts: (_a = options === null || options === void 0 ? void 0 : options.attempts) !== null && _a !== void 0 ? _a : Number.MAX_SAFE_INTEGER,
                delayMs: this.defaultResendDelay,
                signal: options === null || options === void 0 ? void 0 : options.signal
              });
            case 10:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
    }
  }, {
    key: "pause",
    value: function pause() {
      this.eventSource.dispose()["catch"](function (e) {
        return logError$1("Bridge pause failed, ".concat(e));
      });
    }
  }, {
    key: "unPause",
    value: function unPause() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
        var RECREATE_WITHOUT_DELAY;
        return _regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              RECREATE_WITHOUT_DELAY = 0;
              _context15.next = 3;
              return this.eventSource.recreate(RECREATE_WITHOUT_DELAY);
            case 3:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
    }
  }, {
    key: "close",
    value: function close() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.eventSource.dispose()["catch"](function (e) {
                return logError$1("Bridge close failed, ".concat(e));
              });
            case 2:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
    }
  }, {
    key: "setListener",
    value: function setListener(listener) {
      this.listener = listener;
    }
  }, {
    key: "setErrorsListener",
    value: function setErrorsListener(errorsListener) {
      this.errorsListener = errorsListener;
    }
  }, {
    key: "post",
    value: function post(url, body, signal) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
        var response;
        return _regeneratorRuntime().wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return fetch(url, {
                method: 'post',
                body: body,
                signal: signal
              });
            case 2:
              response = _context17.sent;
              if (response.ok) {
                _context17.next = 5;
                break;
              }
              throw new TonConnectError("Bridge send failed, status ".concat(response.status));
            case 5:
              return _context17.abrupt("return", response);
            case 6:
            case "end":
              return _context17.stop();
          }
        }, _callee17);
      }));
    }
  }, {
    key: "errorsHandler",
    value: function errorsHandler(eventSource, e) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
        return _regeneratorRuntime().wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              if (!this.isConnecting) {
                _context18.next = 3;
                break;
              }
              eventSource.close();
              throw new TonConnectError('Bridge error, failed to connect');
            case 3:
              if (!this.isReady) {
                _context18.next = 6;
                break;
              }
              try {
                this.errorsListener(e);
              } catch (e) {}
              return _context18.abrupt("return");
            case 6:
              if (!this.isClosed) {
                _context18.next = 12;
                break;
              }
              eventSource.close();
              logDebug$1("Bridge reconnecting, ".concat(this.defaultReconnectDelay, "ms delay"));
              _context18.next = 11;
              return this.eventSource.recreate(this.defaultReconnectDelay);
            case 11:
              return _context18.abrupt("return", _context18.sent);
            case 12:
              throw new TonConnectError('Bridge error, unknown state');
            case 13:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
    }
  }, {
    key: "messagesHandler",
    value: function messagesHandler(e) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
        var bridgeIncomingMessage;
        return _regeneratorRuntime().wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              if (!(e.data === this.heartbeatMessage)) {
                _context19.next = 2;
                break;
              }
              return _context19.abrupt("return");
            case 2:
              _context19.next = 4;
              return this.bridgeGatewayStorage.storeLastEventId(e.lastEventId);
            case 4:
              if (!this.isClosed) {
                _context19.next = 6;
                break;
              }
              return _context19.abrupt("return");
            case 6:
              _context19.prev = 6;
              bridgeIncomingMessage = JSON.parse(e.data);
              _context19.next = 13;
              break;
            case 10:
              _context19.prev = 10;
              _context19.t0 = _context19["catch"](6);
              throw new TonConnectError("Bridge message parse failed, message ".concat(_context19.t0.data));
            case 13:
              this.listener(bridgeIncomingMessage);
            case 14:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this, [[6, 10]]);
      }));
    }
  }]);
}();
/**
 * Creates an event source.
 * @param {CreateEventSourceConfig} config - Configuration for creating an event source.
 */
function createEventSource(config) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
    var _this20 = this;
    return _regeneratorRuntime().wrap(function _callee22$(_context22) {
      while (1) switch (_context22.prev = _context22.next) {
        case 0:
          _context22.next = 2;
          return timeout$2(function (resolve, reject, deferOptions) {
            return __awaiter(_this20, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
              var _this21 = this;
              var _a, abortController, signal, url, lastEventId, eventSource;
              return _regeneratorRuntime().wrap(function _callee21$(_context21) {
                while (1) switch (_context21.prev = _context21.next) {
                  case 0:
                    abortController = createAbortController(deferOptions.signal);
                    signal = abortController.signal;
                    if (!signal.aborted) {
                      _context21.next = 5;
                      break;
                    }
                    reject(new TonConnectError('Bridge connection aborted'));
                    return _context21.abrupt("return");
                  case 5:
                    url = new URL(addPathToUrl(config.bridgeUrl, config.ssePath));
                    url.searchParams.append('client_id', config.sessionId);
                    _context21.next = 9;
                    return config.bridgeGatewayStorage.getLastEventId();
                  case 9:
                    lastEventId = _context21.sent;
                    if (lastEventId) {
                      url.searchParams.append('last_event_id', lastEventId);
                    }
                    if (!signal.aborted) {
                      _context21.next = 14;
                      break;
                    }
                    reject(new TonConnectError('Bridge connection aborted'));
                    return _context21.abrupt("return");
                  case 14:
                    eventSource = new EventSource(url.toString());
                    eventSource.onerror = function (reason) {
                      return __awaiter(_this21, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
                        var newInstance;
                        return _regeneratorRuntime().wrap(function _callee20$(_context20) {
                          while (1) switch (_context20.prev = _context20.next) {
                            case 0:
                              if (!signal.aborted) {
                                _context20.next = 4;
                                break;
                              }
                              eventSource.close();
                              reject(new TonConnectError('Bridge connection aborted'));
                              return _context20.abrupt("return");
                            case 4:
                              _context20.prev = 4;
                              _context20.next = 7;
                              return config.errorHandler(eventSource, reason);
                            case 7:
                              newInstance = _context20.sent;
                              if (newInstance !== eventSource) {
                                eventSource.close();
                              }
                              if (newInstance && newInstance !== eventSource) {
                                resolve(newInstance);
                              }
                              _context20.next = 16;
                              break;
                            case 12:
                              _context20.prev = 12;
                              _context20.t0 = _context20["catch"](4);
                              eventSource.close();
                              reject(_context20.t0);
                            case 16:
                            case "end":
                              return _context20.stop();
                          }
                        }, _callee20, null, [[4, 12]]);
                      }));
                    };
                    eventSource.onopen = function () {
                      if (signal.aborted) {
                        eventSource.close();
                        reject(new TonConnectError('Bridge connection aborted'));
                        return;
                      }
                      resolve(eventSource);
                    };
                    eventSource.onmessage = function (event) {
                      if (signal.aborted) {
                        eventSource.close();
                        reject(new TonConnectError('Bridge connection aborted'));
                        return;
                      }
                      config.messageHandler(event);
                    };
                    (_a = config.signal) === null || _a === void 0 ? void 0 : _a.addEventListener('abort', function () {
                      eventSource.close();
                      reject(new TonConnectError('Bridge connection aborted'));
                    });
                  case 19:
                  case "end":
                    return _context21.stop();
                }
              }, _callee21);
            }));
          }, {
            timeout: config.openingDeadlineMS,
            signal: config.signal
          });
        case 2:
          return _context22.abrupt("return", _context22.sent);
        case 3:
        case "end":
          return _context22.stop();
      }
    }, _callee22);
  }));
}
function isPendingConnectionHttp(connection) {
  return !('connectEvent' in connection);
}
var BridgeConnectionStorage = /*#__PURE__*/function () {
  function BridgeConnectionStorage(storage) {
    _classCallCheck(this, BridgeConnectionStorage);
    this.storage = storage;
    this.storeKey = 'ton-connect-storage_bridge-connection';
  }
  return _createClass(BridgeConnectionStorage, [{
    key: "storeConnection",
    value: function storeConnection(connection) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {
        var rawSession, _rawConnection, rawConnection;
        return _regeneratorRuntime().wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              if (!(connection.type === 'injected')) {
                _context23.next = 2;
                break;
              }
              return _context23.abrupt("return", this.storage.setItem(this.storeKey, JSON.stringify(connection)));
            case 2:
              if (isPendingConnectionHttp(connection)) {
                _context23.next = 6;
                break;
              }
              rawSession = {
                sessionKeyPair: connection.session.sessionCrypto.stringifyKeypair(),
                walletPublicKey: connection.session.walletPublicKey,
                bridgeUrl: connection.session.bridgeUrl
              };
              _rawConnection = {
                type: 'http',
                connectEvent: connection.connectEvent,
                session: rawSession,
                lastWalletEventId: connection.lastWalletEventId,
                nextRpcRequestId: connection.nextRpcRequestId
              };
              return _context23.abrupt("return", this.storage.setItem(this.storeKey, JSON.stringify(_rawConnection)));
            case 6:
              rawConnection = {
                type: 'http',
                connectionSource: connection.connectionSource,
                sessionCrypto: connection.sessionCrypto.stringifyKeypair()
              };
              return _context23.abrupt("return", this.storage.setItem(this.storeKey, JSON.stringify(rawConnection)));
            case 8:
            case "end":
              return _context23.stop();
          }
        }, _callee23, this);
      }));
    }
  }, {
    key: "removeConnection",
    value: function removeConnection() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {
        return _regeneratorRuntime().wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              return _context24.abrupt("return", this.storage.removeItem(this.storeKey));
            case 1:
            case "end":
              return _context24.stop();
          }
        }, _callee24, this);
      }));
    }
  }, {
    key: "getConnection",
    value: function getConnection() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {
        var stored, connection, sessionCrypto;
        return _regeneratorRuntime().wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              _context25.next = 2;
              return this.storage.getItem(this.storeKey);
            case 2:
              stored = _context25.sent;
              if (stored) {
                _context25.next = 5;
                break;
              }
              return _context25.abrupt("return", null);
            case 5:
              connection = JSON.parse(stored);
              if (!(connection.type === 'injected')) {
                _context25.next = 8;
                break;
              }
              return _context25.abrupt("return", connection);
            case 8:
              if (!('connectEvent' in connection)) {
                _context25.next = 11;
                break;
              }
              sessionCrypto = new SessionCrypto(connection.session.sessionKeyPair);
              return _context25.abrupt("return", {
                type: 'http',
                connectEvent: connection.connectEvent,
                lastWalletEventId: connection.lastWalletEventId,
                nextRpcRequestId: connection.nextRpcRequestId,
                session: {
                  sessionCrypto: sessionCrypto,
                  bridgeUrl: connection.session.bridgeUrl,
                  walletPublicKey: connection.session.walletPublicKey
                }
              });
            case 11:
              return _context25.abrupt("return", {
                type: 'http',
                sessionCrypto: new SessionCrypto(connection.sessionCrypto),
                connectionSource: connection.connectionSource
              });
            case 12:
            case "end":
              return _context25.stop();
          }
        }, _callee25, this);
      }));
    }
  }, {
    key: "getHttpConnection",
    value: function getHttpConnection() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {
        var connection;
        return _regeneratorRuntime().wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              _context26.next = 2;
              return this.getConnection();
            case 2:
              connection = _context26.sent;
              if (connection) {
                _context26.next = 5;
                break;
              }
              throw new TonConnectError('Trying to read HTTP connection source while nothing is stored');
            case 5:
              if (!(connection.type === 'injected')) {
                _context26.next = 7;
                break;
              }
              throw new TonConnectError('Trying to read HTTP connection source while injected connection is stored');
            case 7:
              return _context26.abrupt("return", connection);
            case 8:
            case "end":
              return _context26.stop();
          }
        }, _callee26, this);
      }));
    }
  }, {
    key: "getHttpPendingConnection",
    value: function getHttpPendingConnection() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {
        var connection;
        return _regeneratorRuntime().wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              _context27.next = 2;
              return this.getConnection();
            case 2:
              connection = _context27.sent;
              if (connection) {
                _context27.next = 5;
                break;
              }
              throw new TonConnectError('Trying to read HTTP connection source while nothing is stored');
            case 5:
              if (!(connection.type === 'injected')) {
                _context27.next = 7;
                break;
              }
              throw new TonConnectError('Trying to read HTTP connection source while injected connection is stored');
            case 7:
              if (isPendingConnectionHttp(connection)) {
                _context27.next = 9;
                break;
              }
              throw new TonConnectError('Trying to read HTTP-pending connection while http connection is stored');
            case 9:
              return _context27.abrupt("return", connection);
            case 10:
            case "end":
              return _context27.stop();
          }
        }, _callee27, this);
      }));
    }
  }, {
    key: "getInjectedConnection",
    value: function getInjectedConnection() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {
        var connection;
        return _regeneratorRuntime().wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              _context28.next = 2;
              return this.getConnection();
            case 2:
              connection = _context28.sent;
              if (connection) {
                _context28.next = 5;
                break;
              }
              throw new TonConnectError('Trying to read Injected bridge connection source while nothing is stored');
            case 5:
              if (!((connection === null || connection === void 0 ? void 0 : connection.type) === 'http')) {
                _context28.next = 7;
                break;
              }
              throw new TonConnectError('Trying to read Injected bridge connection source while HTTP connection is stored');
            case 7:
              return _context28.abrupt("return", connection);
            case 8:
            case "end":
              return _context28.stop();
          }
        }, _callee28, this);
      }));
    }
  }, {
    key: "storedConnectionType",
    value: function storedConnectionType() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {
        var stored, connection;
        return _regeneratorRuntime().wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              _context29.next = 2;
              return this.storage.getItem(this.storeKey);
            case 2:
              stored = _context29.sent;
              if (stored) {
                _context29.next = 5;
                break;
              }
              return _context29.abrupt("return", null);
            case 5:
              connection = JSON.parse(stored);
              return _context29.abrupt("return", connection.type);
            case 7:
            case "end":
              return _context29.stop();
          }
        }, _callee29, this);
      }));
    }
  }, {
    key: "storeLastWalletEventId",
    value: function storeLastWalletEventId(id) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {
        var connection;
        return _regeneratorRuntime().wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              _context30.next = 2;
              return this.getConnection();
            case 2:
              connection = _context30.sent;
              if (!(connection && connection.type === 'http' && !isPendingConnectionHttp(connection))) {
                _context30.next = 6;
                break;
              }
              connection.lastWalletEventId = id;
              return _context30.abrupt("return", this.storeConnection(connection));
            case 6:
            case "end":
              return _context30.stop();
          }
        }, _callee30, this);
      }));
    }
  }, {
    key: "getLastWalletEventId",
    value: function getLastWalletEventId() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {
        var connection;
        return _regeneratorRuntime().wrap(function _callee31$(_context31) {
          while (1) switch (_context31.prev = _context31.next) {
            case 0:
              _context31.next = 2;
              return this.getConnection();
            case 2:
              connection = _context31.sent;
              if (!(connection && 'lastWalletEventId' in connection)) {
                _context31.next = 5;
                break;
              }
              return _context31.abrupt("return", connection.lastWalletEventId);
            case 5:
              return _context31.abrupt("return", undefined);
            case 6:
            case "end":
              return _context31.stop();
          }
        }, _callee31, this);
      }));
    }
  }, {
    key: "increaseNextRpcRequestId",
    value: function increaseNextRpcRequestId() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {
        var connection, lastId;
        return _regeneratorRuntime().wrap(function _callee32$(_context32) {
          while (1) switch (_context32.prev = _context32.next) {
            case 0:
              _context32.next = 2;
              return this.getConnection();
            case 2:
              connection = _context32.sent;
              if (!(connection && 'nextRpcRequestId' in connection)) {
                _context32.next = 7;
                break;
              }
              lastId = connection.nextRpcRequestId || 0;
              connection.nextRpcRequestId = lastId + 1;
              return _context32.abrupt("return", this.storeConnection(connection));
            case 7:
            case "end":
              return _context32.stop();
          }
        }, _callee32, this);
      }));
    }
  }, {
    key: "getNextRpcRequestId",
    value: function getNextRpcRequestId() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {
        var connection;
        return _regeneratorRuntime().wrap(function _callee33$(_context33) {
          while (1) switch (_context33.prev = _context33.next) {
            case 0:
              _context33.next = 2;
              return this.getConnection();
            case 2:
              connection = _context33.sent;
              if (!(connection && 'nextRpcRequestId' in connection)) {
                _context33.next = 5;
                break;
              }
              return _context33.abrupt("return", connection.nextRpcRequestId || 0);
            case 5:
              return _context33.abrupt("return", 0);
            case 6:
            case "end":
              return _context33.stop();
          }
        }, _callee33, this);
      }));
    }
  }]);
}();
var PROTOCOL_VERSION = 2;
var BridgeProvider = /*#__PURE__*/function () {
  function BridgeProvider(storage, walletConnectionSource) {
    _classCallCheck(this, BridgeProvider);
    this.storage = storage;
    this.walletConnectionSource = walletConnectionSource;
    this.type = 'http';
    this.standardUniversalLink = 'tc://';
    this.pendingRequests = new Map();
    this.session = null;
    this.gateway = null;
    this.pendingGateways = [];
    this.listeners = [];
    this.defaultOpeningDeadlineMS = 12000;
    this.defaultRetryTimeoutMS = 2000;
    this.connectionStorage = new BridgeConnectionStorage(storage);
  }
  return _createClass(BridgeProvider, [{
    key: "connect",
    value: function connect(message, options) {
      var _this22 = this;
      var _a;
      var abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
      (_a = this.abortController) === null || _a === void 0 ? void 0 : _a.abort();
      this.abortController = abortController;
      this.closeGateways();
      var sessionCrypto = new SessionCrypto();
      this.session = {
        sessionCrypto: sessionCrypto,
        bridgeUrl: 'bridgeUrl' in this.walletConnectionSource ? this.walletConnectionSource.bridgeUrl : ''
      };
      this.connectionStorage.storeConnection({
        type: 'http',
        connectionSource: this.walletConnectionSource,
        sessionCrypto: sessionCrypto
      }).then(function () {
        return __awaiter(_this22, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {
          var _this23 = this;
          return _regeneratorRuntime().wrap(function _callee34$(_context34) {
            while (1) switch (_context34.prev = _context34.next) {
              case 0:
                if (!abortController.signal.aborted) {
                  _context34.next = 2;
                  break;
                }
                return _context34.abrupt("return");
              case 2:
                _context34.next = 4;
                return callForSuccess(function (_options) {
                  var _a;
                  return _this23.openGateways(sessionCrypto, {
                    openingDeadlineMS: (_a = options === null || options === void 0 ? void 0 : options.openingDeadlineMS) !== null && _a !== void 0 ? _a : _this23.defaultOpeningDeadlineMS,
                    signal: _options === null || _options === void 0 ? void 0 : _options.signal
                  });
                }, {
                  attempts: Number.MAX_SAFE_INTEGER,
                  delayMs: this.defaultRetryTimeoutMS,
                  signal: abortController.signal
                });
              case 4:
              case "end":
                return _context34.stop();
            }
          }, _callee34, this);
        }));
      });
      var universalLink = 'universalLink' in this.walletConnectionSource && this.walletConnectionSource.universalLink ? this.walletConnectionSource.universalLink : this.standardUniversalLink;
      return this.generateUniversalLink(universalLink, message);
    }
  }, {
    key: "restoreConnection",
    value: function restoreConnection(options) {
      var _a, _b;
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {
        var _this24 = this;
        var abortController, storedConnection, openingDeadlineMS;
        return _regeneratorRuntime().wrap(function _callee35$(_context35) {
          while (1) switch (_context35.prev = _context35.next) {
            case 0:
              abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
              (_a = this.abortController) === null || _a === void 0 ? void 0 : _a.abort();
              this.abortController = abortController;
              if (!abortController.signal.aborted) {
                _context35.next = 5;
                break;
              }
              return _context35.abrupt("return");
            case 5:
              this.closeGateways();
              _context35.next = 8;
              return this.connectionStorage.getHttpConnection();
            case 8:
              storedConnection = _context35.sent;
              if (storedConnection) {
                _context35.next = 11;
                break;
              }
              return _context35.abrupt("return");
            case 11:
              if (!abortController.signal.aborted) {
                _context35.next = 13;
                break;
              }
              return _context35.abrupt("return");
            case 13:
              openingDeadlineMS = (_b = options === null || options === void 0 ? void 0 : options.openingDeadlineMS) !== null && _b !== void 0 ? _b : this.defaultOpeningDeadlineMS;
              if (!isPendingConnectionHttp(storedConnection)) {
                _context35.next = 19;
                break;
              }
              this.session = {
                sessionCrypto: storedConnection.sessionCrypto,
                bridgeUrl: 'bridgeUrl' in this.walletConnectionSource ? this.walletConnectionSource.bridgeUrl : ''
              };
              _context35.next = 18;
              return this.openGateways(storedConnection.sessionCrypto, {
                openingDeadlineMS: openingDeadlineMS,
                signal: abortController === null || abortController === void 0 ? void 0 : abortController.signal
              });
            case 18:
              return _context35.abrupt("return", _context35.sent);
            case 19:
              if (!Array.isArray(this.walletConnectionSource)) {
                _context35.next = 21;
                break;
              }
              throw new TonConnectError('Internal error. Connection source is array while WalletConnectionSourceHTTP was expected.');
            case 21:
              this.session = storedConnection.session;
              if (!this.gateway) {
                _context35.next = 26;
                break;
              }
              logDebug$1('Gateway is already opened, closing previous gateway');
              _context35.next = 26;
              return this.gateway.close();
            case 26:
              this.gateway = new BridgeGateway(this.storage, this.walletConnectionSource.bridgeUrl, storedConnection.session.sessionCrypto.sessionId, this.gatewayListener.bind(this), this.gatewayErrorsListener.bind(this));
              if (!abortController.signal.aborted) {
                _context35.next = 29;
                break;
              }
              return _context35.abrupt("return");
            case 29:
              // notify listeners about stored connection
              this.listeners.forEach(function (listener) {
                return listener(storedConnection.connectEvent);
              });
              // wait for the connection to be opened
              _context35.prev = 30;
              _context35.next = 33;
              return callForSuccess(function (options) {
                return _this24.gateway.registerSession({
                  openingDeadlineMS: openingDeadlineMS,
                  signal: options.signal
                });
              }, {
                attempts: Number.MAX_SAFE_INTEGER,
                delayMs: this.defaultRetryTimeoutMS,
                signal: abortController.signal
              });
            case 33:
              _context35.next = 40;
              break;
            case 35:
              _context35.prev = 35;
              _context35.t0 = _context35["catch"](30);
              _context35.next = 39;
              return this.disconnect({
                signal: abortController.signal
              });
            case 39:
              return _context35.abrupt("return");
            case 40:
            case "end":
              return _context35.stop();
          }
        }, _callee35, this, [[30, 35]]);
      }));
    }
  }, {
    key: "sendRequest",
    value: function sendRequest(request, optionsOrOnRequestSent) {
      var _this25 = this;
      // TODO: remove deprecated method
      var options = {};
      if (typeof optionsOrOnRequestSent === 'function') {
        options.onRequestSent = optionsOrOnRequestSent;
      } else {
        options.onRequestSent = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.onRequestSent;
        options.signal = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.signal;
        options.attempts = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.attempts;
      }
      return new Promise(function (resolve, reject) {
        return __awaiter(_this25, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {
          var _a, id, encodedRequest;
          return _regeneratorRuntime().wrap(function _callee36$(_context36) {
            while (1) switch (_context36.prev = _context36.next) {
              case 0:
                if (!(!this.gateway || !this.session || !('walletPublicKey' in this.session))) {
                  _context36.next = 2;
                  break;
                }
                throw new TonConnectError('Trying to send bridge request without session');
              case 2:
                _context36.next = 4;
                return this.connectionStorage.getNextRpcRequestId();
              case 4:
                id = _context36.sent.toString();
                _context36.next = 7;
                return this.connectionStorage.increaseNextRpcRequestId();
              case 7:
                logDebug$1('Send http-bridge request:', Object.assign(Object.assign({}, request), {
                  id: id
                }));
                encodedRequest = this.session.sessionCrypto.encrypt(JSON.stringify(Object.assign(Object.assign({}, request), {
                  id: id
                })), hexToByteArray(this.session.walletPublicKey));
                _context36.prev = 9;
                _context36.next = 12;
                return this.gateway.send(encodedRequest, this.session.walletPublicKey, request.method, {
                  attempts: options === null || options === void 0 ? void 0 : options.attempts,
                  signal: options === null || options === void 0 ? void 0 : options.signal
                });
              case 12:
                (_a = options === null || options === void 0 ? void 0 : options.onRequestSent) === null || _a === void 0 ? void 0 : _a.call(options);
                this.pendingRequests.set(id.toString(), resolve);
                _context36.next = 19;
                break;
              case 16:
                _context36.prev = 16;
                _context36.t0 = _context36["catch"](9);
                reject(_context36.t0);
              case 19:
              case "end":
                return _context36.stop();
            }
          }, _callee36, this, [[9, 16]]);
        }));
      });
    }
  }, {
    key: "closeConnection",
    value: function closeConnection() {
      this.closeGateways();
      this.listeners = [];
      this.session = null;
      this.gateway = null;
    }
  }, {
    key: "disconnect",
    value: function disconnect(options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {
        var _this26 = this;
        return _regeneratorRuntime().wrap(function _callee38$(_context38) {
          while (1) switch (_context38.prev = _context38.next) {
            case 0:
              return _context38.abrupt("return", new Promise(function (resolve) {
                return __awaiter(_this26, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {
                  var _this27 = this;
                  var called, timeoutId, onRequestSent, abortController;
                  return _regeneratorRuntime().wrap(function _callee37$(_context37) {
                    while (1) switch (_context37.prev = _context37.next) {
                      case 0:
                        called = false;
                        timeoutId = null;
                        onRequestSent = function onRequestSent() {
                          if (!called) {
                            called = true;
                            _this27.removeBridgeAndSession().then(resolve);
                          }
                        };
                        _context37.prev = 3;
                        this.closeGateways();
                        abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
                        timeoutId = setTimeout(function () {
                          abortController.abort();
                        }, this.defaultOpeningDeadlineMS);
                        _context37.next = 9;
                        return this.sendRequest({
                          method: 'disconnect',
                          params: []
                        }, {
                          onRequestSent: onRequestSent,
                          signal: abortController.signal,
                          attempts: 1
                        });
                      case 9:
                        _context37.next = 15;
                        break;
                      case 11:
                        _context37.prev = 11;
                        _context37.t0 = _context37["catch"](3);
                        logDebug$1('Disconnect error:', _context37.t0);
                        if (!called) {
                          this.removeBridgeAndSession().then(resolve);
                        }
                      case 15:
                        _context37.prev = 15;
                        if (timeoutId) {
                          clearTimeout(timeoutId);
                        }
                        onRequestSent();
                        return _context37.finish(15);
                      case 19:
                      case "end":
                        return _context37.stop();
                    }
                  }, _callee37, this, [[3, 11, 15, 19]]);
                }));
              }));
            case 1:
            case "end":
              return _context38.stop();
          }
        }, _callee38);
      }));
    }
  }, {
    key: "listen",
    value: function listen(callback) {
      var _this28 = this;
      this.listeners.push(callback);
      return function () {
        return _this28.listeners = _this28.listeners.filter(function (listener) {
          return listener !== callback;
        });
      };
    }
  }, {
    key: "pause",
    value: function pause() {
      var _a;
      (_a = this.gateway) === null || _a === void 0 ? void 0 : _a.pause();
      this.pendingGateways.forEach(function (bridge) {
        return bridge.pause();
      });
    }
  }, {
    key: "unPause",
    value: function unPause() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {
        var promises;
        return _regeneratorRuntime().wrap(function _callee39$(_context39) {
          while (1) switch (_context39.prev = _context39.next) {
            case 0:
              promises = this.pendingGateways.map(function (bridge) {
                return bridge.unPause();
              });
              if (this.gateway) {
                promises.push(this.gateway.unPause());
              }
              _context39.next = 4;
              return Promise.all(promises);
            case 4:
            case "end":
              return _context39.stop();
          }
        }, _callee39, this);
      }));
    }
  }, {
    key: "pendingGatewaysListener",
    value: function pendingGatewaysListener(gateway, bridgeUrl, bridgeIncomingMessage) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {
        return _regeneratorRuntime().wrap(function _callee40$(_context40) {
          while (1) switch (_context40.prev = _context40.next) {
            case 0:
              if (this.pendingGateways.includes(gateway)) {
                _context40.next = 4;
                break;
              }
              _context40.next = 3;
              return gateway.close();
            case 3:
              return _context40.abrupt("return");
            case 4:
              this.closeGateways({
                except: gateway
              });
              if (!this.gateway) {
                _context40.next = 9;
                break;
              }
              logDebug$1('Gateway is already opened, closing previous gateway');
              _context40.next = 9;
              return this.gateway.close();
            case 9:
              this.session.bridgeUrl = bridgeUrl;
              this.gateway = gateway;
              this.gateway.setErrorsListener(this.gatewayErrorsListener.bind(this));
              this.gateway.setListener(this.gatewayListener.bind(this));
              return _context40.abrupt("return", this.gatewayListener(bridgeIncomingMessage));
            case 14:
            case "end":
              return _context40.stop();
          }
        }, _callee40, this);
      }));
    }
  }, {
    key: "gatewayListener",
    value: function gatewayListener(bridgeIncomingMessage) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {
        var walletMessage, id, resolve, lastId, listeners;
        return _regeneratorRuntime().wrap(function _callee41$(_context41) {
          while (1) switch (_context41.prev = _context41.next) {
            case 0:
              walletMessage = JSON.parse(this.session.sessionCrypto.decrypt(Base64.decode(bridgeIncomingMessage.message).toUint8Array(), hexToByteArray(bridgeIncomingMessage.from)));
              logDebug$1('Wallet message received:', walletMessage);
              if ('event' in walletMessage) {
                _context41.next = 11;
                break;
              }
              id = walletMessage.id.toString();
              resolve = this.pendingRequests.get(id);
              if (resolve) {
                _context41.next = 8;
                break;
              }
              logDebug$1("Response id ".concat(id, " doesn't match any request's id"));
              return _context41.abrupt("return");
            case 8:
              resolve(walletMessage);
              this.pendingRequests["delete"](id);
              return _context41.abrupt("return");
            case 11:
              if (!(walletMessage.id !== undefined)) {
                _context41.next = 21;
                break;
              }
              _context41.next = 14;
              return this.connectionStorage.getLastWalletEventId();
            case 14:
              lastId = _context41.sent;
              if (!(lastId !== undefined && walletMessage.id <= lastId)) {
                _context41.next = 18;
                break;
              }
              logError$1("Received event id (=".concat(walletMessage.id, ") must be greater than stored last wallet event id (=").concat(lastId, ") "));
              return _context41.abrupt("return");
            case 18:
              if (!(walletMessage.event !== 'connect')) {
                _context41.next = 21;
                break;
              }
              _context41.next = 21;
              return this.connectionStorage.storeLastWalletEventId(walletMessage.id);
            case 21:
              // `this.listeners` might be modified in the event handler
              listeners = this.listeners;
              if (!(walletMessage.event === 'connect')) {
                _context41.next = 25;
                break;
              }
              _context41.next = 25;
              return this.updateSession(walletMessage, bridgeIncomingMessage.from);
            case 25:
              if (!(walletMessage.event === 'disconnect')) {
                _context41.next = 29;
                break;
              }
              logDebug$1("Removing bridge and session: received disconnect event");
              _context41.next = 29;
              return this.removeBridgeAndSession();
            case 29:
              listeners.forEach(function (listener) {
                return listener(walletMessage);
              });
            case 30:
            case "end":
              return _context41.stop();
          }
        }, _callee41, this);
      }));
    }
  }, {
    key: "gatewayErrorsListener",
    value: function gatewayErrorsListener(e) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {
        return _regeneratorRuntime().wrap(function _callee42$(_context42) {
          while (1) switch (_context42.prev = _context42.next) {
            case 0:
              throw new TonConnectError("Bridge error ".concat(JSON.stringify(e)));
            case 1:
            case "end":
              return _context42.stop();
          }
        }, _callee42);
      }));
    }
  }, {
    key: "updateSession",
    value: function updateSession(connectEvent, walletPublicKey) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {
        var tonAddrItem, connectEventToSave;
        return _regeneratorRuntime().wrap(function _callee43$(_context43) {
          while (1) switch (_context43.prev = _context43.next) {
            case 0:
              this.session = Object.assign(Object.assign({}, this.session), {
                walletPublicKey: walletPublicKey
              });
              tonAddrItem = connectEvent.payload.items.find(function (item) {
                return item.name === 'ton_addr';
              });
              connectEventToSave = Object.assign(Object.assign({}, connectEvent), {
                payload: Object.assign(Object.assign({}, connectEvent.payload), {
                  items: [tonAddrItem]
                })
              });
              _context43.next = 5;
              return this.connectionStorage.storeConnection({
                type: 'http',
                session: this.session,
                lastWalletEventId: connectEvent.id,
                connectEvent: connectEventToSave,
                nextRpcRequestId: 0
              });
            case 5:
            case "end":
              return _context43.stop();
          }
        }, _callee43, this);
      }));
    }
  }, {
    key: "removeBridgeAndSession",
    value: function removeBridgeAndSession() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {
        return _regeneratorRuntime().wrap(function _callee44$(_context44) {
          while (1) switch (_context44.prev = _context44.next) {
            case 0:
              this.closeConnection();
              _context44.next = 3;
              return this.connectionStorage.removeConnection();
            case 3:
            case "end":
              return _context44.stop();
          }
        }, _callee44, this);
      }));
    }
  }, {
    key: "generateUniversalLink",
    value: function generateUniversalLink(universalLink, message) {
      if (isTelegramUrl(universalLink)) {
        return this.generateTGUniversalLink(universalLink, message);
      }
      return this.generateRegularUniversalLink(universalLink, message);
    }
  }, {
    key: "generateRegularUniversalLink",
    value: function generateRegularUniversalLink(universalLink, message) {
      var url = new URL(universalLink);
      url.searchParams.append('v', PROTOCOL_VERSION.toString());
      url.searchParams.append('id', this.session.sessionCrypto.sessionId);
      url.searchParams.append('r', JSON.stringify(message));
      return url.toString();
    }
  }, {
    key: "generateTGUniversalLink",
    value: function generateTGUniversalLink(universalLink, message) {
      var urlToWrap = this.generateRegularUniversalLink('about:blank', message);
      var linkParams = urlToWrap.split('?')[1];
      var startapp = 'tonconnect-' + encodeTelegramUrlParameters(linkParams);
      // TODO: Remove this line after all dApps and the wallets-list.json have been updated
      var updatedUniversalLink = this.convertToDirectLink(universalLink);
      var url = new URL(updatedUniversalLink);
      url.searchParams.append('startapp', startapp);
      return url.toString();
    }
    // TODO: Remove this method after all dApps and the wallets-list.json have been updated
  }, {
    key: "convertToDirectLink",
    value: function convertToDirectLink(universalLink) {
      var url = new URL(universalLink);
      if (url.searchParams.has('attach')) {
        url.searchParams["delete"]('attach');
        url.pathname += '/start';
      }
      return url.toString();
    }
  }, {
    key: "openGateways",
    value: function openGateways(sessionCrypto, options) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee45() {
        var _this29 = this;
        return _regeneratorRuntime().wrap(function _callee45$(_context45) {
          while (1) switch (_context45.prev = _context45.next) {
            case 0:
              if (!Array.isArray(this.walletConnectionSource)) {
                _context45.next = 8;
                break;
              }
              // close all gateways before opening new ones
              this.pendingGateways.map(function (bridge) {
                return bridge.close()["catch"]();
              });
              // open new gateways
              this.pendingGateways = this.walletConnectionSource.map(function (source) {
                var gateway = new BridgeGateway(_this29.storage, source.bridgeUrl, sessionCrypto.sessionId, function () {}, function () {});
                gateway.setListener(function (message) {
                  return _this29.pendingGatewaysListener(gateway, source.bridgeUrl, message);
                });
                return gateway;
              });
              _context45.next = 5;
              return Promise.allSettled(this.pendingGateways.map(function (bridge) {
                return callForSuccess(function (_options) {
                  var _a;
                  if (!_this29.pendingGateways.some(function (item) {
                    return item === bridge;
                  })) {
                    return bridge.close();
                  }
                  return bridge.registerSession({
                    openingDeadlineMS: (_a = options === null || options === void 0 ? void 0 : options.openingDeadlineMS) !== null && _a !== void 0 ? _a : _this29.defaultOpeningDeadlineMS,
                    signal: _options.signal
                  });
                }, {
                  attempts: Number.MAX_SAFE_INTEGER,
                  delayMs: _this29.defaultRetryTimeoutMS,
                  signal: options === null || options === void 0 ? void 0 : options.signal
                });
              }));
            case 5:
              return _context45.abrupt("return");
            case 8:
              if (!this.gateway) {
                _context45.next = 12;
                break;
              }
              logDebug$1("Gateway is already opened, closing previous gateway");
              _context45.next = 12;
              return this.gateway.close();
            case 12:
              this.gateway = new BridgeGateway(this.storage, this.walletConnectionSource.bridgeUrl, sessionCrypto.sessionId, this.gatewayListener.bind(this), this.gatewayErrorsListener.bind(this));
              _context45.next = 15;
              return this.gateway.registerSession({
                openingDeadlineMS: options === null || options === void 0 ? void 0 : options.openingDeadlineMS,
                signal: options === null || options === void 0 ? void 0 : options.signal
              });
            case 15:
              return _context45.abrupt("return", _context45.sent);
            case 16:
            case "end":
              return _context45.stop();
          }
        }, _callee45, this);
      }));
    }
  }, {
    key: "closeGateways",
    value: function closeGateways(options) {
      var _a;
      (_a = this.gateway) === null || _a === void 0 ? void 0 : _a.close();
      this.pendingGateways.filter(function (item) {
        return item !== (options === null || options === void 0 ? void 0 : options.except);
      }).forEach(function (bridge) {
        return bridge.close();
      });
      this.pendingGateways = [];
    }
  }], [{
    key: "fromStorage",
    value: function fromStorage(storage) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee46() {
        var bridgeConnectionStorage, connection;
        return _regeneratorRuntime().wrap(function _callee46$(_context46) {
          while (1) switch (_context46.prev = _context46.next) {
            case 0:
              bridgeConnectionStorage = new BridgeConnectionStorage(storage);
              _context46.next = 3;
              return bridgeConnectionStorage.getHttpConnection();
            case 3:
              connection = _context46.sent;
              if (!isPendingConnectionHttp(connection)) {
                _context46.next = 6;
                break;
              }
              return _context46.abrupt("return", new BridgeProvider(storage, connection.connectionSource));
            case 6:
              return _context46.abrupt("return", new BridgeProvider(storage, {
                bridgeUrl: connection.session.bridgeUrl
              }));
            case 7:
            case "end":
              return _context46.stop();
          }
        }, _callee46);
      }));
    }
  }]);
}();
function hasProperty(value, propertyKey) {
  return hasProperties(value, [propertyKey]);
}
function hasProperties(value, propertyKeys) {
  if (!value || _typeof(value) !== 'object') {
    return false;
  }
  return propertyKeys.every(function (propertyKey) {
    return propertyKey in value;
  });
}
function isJSBridgeWithMetadata(value) {
  try {
    if (!hasProperty(value, 'tonconnect') || !hasProperty(value.tonconnect, 'walletInfo')) {
      return false;
    }
    return hasProperties(value.tonconnect.walletInfo, ['name', 'app_name', 'image', 'about_url', 'platforms']);
  } catch (_a) {
    return false;
  }
}

/**
 * In memory storage like localStorage, but without persistence.
 * Uses as a fallback for localStorage in Safari's private mode.
 */
var InMemoryStorage$1 = /*#__PURE__*/function () {
  function InMemoryStorage() {
    _classCallCheck(this, InMemoryStorage);
    this.storage = {};
  }
  return _createClass(InMemoryStorage, [{
    key: "length",
    get: function get() {
      return Object.keys(this.storage).length;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.storage = {};
    }
  }, {
    key: "getItem",
    value: function getItem(key) {
      var _a;
      return (_a = this.storage[key]) !== null && _a !== void 0 ? _a : null;
    }
  }, {
    key: "key",
    value: function key(index) {
      var _a;
      var keys = Object.keys(this.storage);
      if (index < 0 || index >= keys.length) {
        return null;
      }
      return (_a = keys[index]) !== null && _a !== void 0 ? _a : null;
    }
  }, {
    key: "removeItem",
    value: function removeItem(key) {
      delete this.storage[key];
    }
  }, {
    key: "setItem",
    value: function setItem(key, value) {
      this.storage[key] = value;
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!InMemoryStorage.instance) {
        InMemoryStorage.instance = new InMemoryStorage();
      }
      return InMemoryStorage.instance;
    }
  }]);
}();
function getWindow$2() {
  if (typeof window === 'undefined') {
    return undefined;
  }
  return window;
}
/**
 * The function try to get window keys, if it is not available it returns empty array.
 * As an example, for Safari's private mode it returns empty array, because the browser does not allow to get window keys.
 */
function tryGetWindowKeys() {
  var window = getWindow$2();
  if (!window) {
    return [];
  }
  try {
    return Object.keys(window);
  } catch (_a) {
    return [];
  }
}
function getDocument() {
  if (typeof document === 'undefined') {
    return undefined;
  }
  return document;
}
function getWebPageManifest() {
  var _a;
  var origin = (_a = getWindow$2()) === null || _a === void 0 ? void 0 : _a.location.origin;
  if (origin) {
    return origin + '/tonconnect-manifest.json';
  }
  return '';
}
/**
 * Returns `localStorage` if it is available. In Safari's private mode, it returns `InMemoryStorage`. In Node.js, it throws an error.
 */
function tryGetLocalStorage$1() {
  if (isLocalStorageAvailable$1()) {
    return localStorage;
  }
  if (isNodeJs$1()) {
    throw new TonConnectError('`localStorage` is unavailable, but it is required for TonConnect. For more details, see https://github.com/ton-connect/sdk/tree/main/packages/sdk#init-connector');
  }
  return InMemoryStorage$1.getInstance();
}
/**
 * Checks if `localStorage` is available.
 */
function isLocalStorageAvailable$1() {
  // We use a try/catch block because Safari's private mode throws an error when attempting to access localStorage.
  try {
    return typeof localStorage !== 'undefined';
  } catch (_a) {
    return false;
  }
}
/**
 * Checks if the environment is Node.js.
 */
function isNodeJs$1() {
  return typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
}
var InjectedProvider = /*#__PURE__*/function () {
  function InjectedProvider(storage, injectedWalletKey) {
    _classCallCheck(this, InjectedProvider);
    this.injectedWalletKey = injectedWalletKey;
    this.type = 'injected';
    this.unsubscribeCallback = null;
    this.listenSubscriptions = false;
    this.listeners = [];
    var window = InjectedProvider.window;
    if (!InjectedProvider.isWindowContainsWallet(window, injectedWalletKey)) {
      throw new WalletNotInjectedError();
    }
    this.connectionStorage = new BridgeConnectionStorage(storage);
    this.injectedWallet = window[injectedWalletKey].tonconnect;
  }
  return _createClass(InjectedProvider, [{
    key: "connect",
    value: function connect(message) {
      this._connect(PROTOCOL_VERSION, message);
    }
  }, {
    key: "restoreConnection",
    value: function restoreConnection() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee47() {
        var connectEvent;
        return _regeneratorRuntime().wrap(function _callee47$(_context47) {
          while (1) switch (_context47.prev = _context47.next) {
            case 0:
              _context47.prev = 0;
              logDebug$1("Injected Provider restoring connection...");
              _context47.next = 4;
              return this.injectedWallet.restoreConnection();
            case 4:
              connectEvent = _context47.sent;
              logDebug$1('Injected Provider restoring connection response', connectEvent);
              if (!(connectEvent.event === 'connect')) {
                _context47.next = 11;
                break;
              }
              this.makeSubscriptions();
              this.listeners.forEach(function (listener) {
                return listener(connectEvent);
              });
              _context47.next = 13;
              break;
            case 11:
              _context47.next = 13;
              return this.connectionStorage.removeConnection();
            case 13:
              _context47.next = 20;
              break;
            case 15:
              _context47.prev = 15;
              _context47.t0 = _context47["catch"](0);
              _context47.next = 19;
              return this.connectionStorage.removeConnection();
            case 19:
              console.error(_context47.t0);
            case 20:
            case "end":
              return _context47.stop();
          }
        }, _callee47, this, [[0, 15]]);
      }));
    }
  }, {
    key: "closeConnection",
    value: function closeConnection() {
      if (this.listenSubscriptions) {
        this.injectedWallet.disconnect();
      }
      this.closeAllListeners();
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee48() {
        var _this30 = this;
        return _regeneratorRuntime().wrap(function _callee48$(_context48) {
          while (1) switch (_context48.prev = _context48.next) {
            case 0:
              return _context48.abrupt("return", new Promise(function (resolve) {
                var onRequestSent = function onRequestSent() {
                  _this30.closeAllListeners();
                  _this30.connectionStorage.removeConnection().then(resolve);
                };
                try {
                  _this30.injectedWallet.disconnect();
                  onRequestSent();
                } catch (e) {
                  logDebug$1(e);
                  _this30.sendRequest({
                    method: 'disconnect',
                    params: []
                  }, onRequestSent);
                }
              }));
            case 1:
            case "end":
              return _context48.stop();
          }
        }, _callee48);
      }));
    }
  }, {
    key: "closeAllListeners",
    value: function closeAllListeners() {
      var _a;
      this.listenSubscriptions = false;
      this.listeners = [];
      (_a = this.unsubscribeCallback) === null || _a === void 0 ? void 0 : _a.call(this);
    }
  }, {
    key: "listen",
    value: function listen(eventsCallback) {
      var _this31 = this;
      this.listeners.push(eventsCallback);
      return function () {
        return _this31.listeners = _this31.listeners.filter(function (listener) {
          return listener !== eventsCallback;
        });
      };
    }
  }, {
    key: "sendRequest",
    value: function sendRequest(request, optionsOrOnRequestSent) {
      var _a;
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee49() {
        var options, id, result;
        return _regeneratorRuntime().wrap(function _callee49$(_context49) {
          while (1) switch (_context49.prev = _context49.next) {
            case 0:
              // TODO: remove deprecated method
              options = {};
              if (typeof optionsOrOnRequestSent === 'function') {
                options.onRequestSent = optionsOrOnRequestSent;
              } else {
                options.onRequestSent = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.onRequestSent;
                options.signal = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.signal;
              }
              _context49.next = 4;
              return this.connectionStorage.getNextRpcRequestId();
            case 4:
              id = _context49.sent.toString();
              _context49.next = 7;
              return this.connectionStorage.increaseNextRpcRequestId();
            case 7:
              logDebug$1('Send injected-bridge request:', Object.assign(Object.assign({}, request), {
                id: id
              }));
              result = this.injectedWallet.send(Object.assign(Object.assign({}, request), {
                id: id
              }));
              result.then(function (response) {
                return logDebug$1('Wallet message received:', response);
              });
              (_a = options === null || options === void 0 ? void 0 : options.onRequestSent) === null || _a === void 0 ? void 0 : _a.call(options);
              return _context49.abrupt("return", result);
            case 12:
            case "end":
              return _context49.stop();
          }
        }, _callee49, this);
      }));
    }
  }, {
    key: "_connect",
    value: function _connect(protocolVersion, message) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee50() {
        var connectEvent, connectEventError;
        return _regeneratorRuntime().wrap(function _callee50$(_context50) {
          while (1) switch (_context50.prev = _context50.next) {
            case 0:
              _context50.prev = 0;
              logDebug$1("Injected Provider connect request: protocolVersion: ".concat(protocolVersion, ", message:"), message);
              _context50.next = 4;
              return this.injectedWallet.connect(protocolVersion, message);
            case 4:
              connectEvent = _context50.sent;
              logDebug$1('Injected Provider connect response:', connectEvent);
              if (!(connectEvent.event === 'connect')) {
                _context50.next = 10;
                break;
              }
              _context50.next = 9;
              return this.updateSession();
            case 9:
              this.makeSubscriptions();
            case 10:
              this.listeners.forEach(function (listener) {
                return listener(connectEvent);
              });
              _context50.next = 18;
              break;
            case 13:
              _context50.prev = 13;
              _context50.t0 = _context50["catch"](0);
              logDebug$1('Injected Provider connect error:', _context50.t0);
              connectEventError = {
                event: 'connect_error',
                payload: {
                  code: 0,
                  message: _context50.t0 === null || _context50.t0 === void 0 ? void 0 : _context50.t0.toString()
                }
              };
              this.listeners.forEach(function (listener) {
                return listener(connectEventError);
              });
            case 18:
            case "end":
              return _context50.stop();
          }
        }, _callee50, this, [[0, 13]]);
      }));
    }
  }, {
    key: "makeSubscriptions",
    value: function makeSubscriptions() {
      var _this32 = this;
      this.listenSubscriptions = true;
      this.unsubscribeCallback = this.injectedWallet.listen(function (e) {
        logDebug$1('Wallet message received:', e);
        if (_this32.listenSubscriptions) {
          _this32.listeners.forEach(function (listener) {
            return listener(e);
          });
        }
        if (e.event === 'disconnect') {
          _this32.disconnect();
        }
      });
    }
  }, {
    key: "updateSession",
    value: function updateSession() {
      return this.connectionStorage.storeConnection({
        type: 'injected',
        jsBridgeKey: this.injectedWalletKey,
        nextRpcRequestId: 0
      });
    }
  }], [{
    key: "fromStorage",
    value: function fromStorage(storage) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee51() {
        var bridgeConnectionStorage, connection;
        return _regeneratorRuntime().wrap(function _callee51$(_context51) {
          while (1) switch (_context51.prev = _context51.next) {
            case 0:
              bridgeConnectionStorage = new BridgeConnectionStorage(storage);
              _context51.next = 3;
              return bridgeConnectionStorage.getInjectedConnection();
            case 3:
              connection = _context51.sent;
              return _context51.abrupt("return", new InjectedProvider(storage, connection.jsBridgeKey));
            case 5:
            case "end":
              return _context51.stop();
          }
        }, _callee51);
      }));
    }
  }, {
    key: "isWalletInjected",
    value: function isWalletInjected(injectedWalletKey) {
      return InjectedProvider.isWindowContainsWallet(this.window, injectedWalletKey);
    }
  }, {
    key: "isInsideWalletBrowser",
    value: function isInsideWalletBrowser(injectedWalletKey) {
      if (InjectedProvider.isWindowContainsWallet(this.window, injectedWalletKey)) {
        return this.window[injectedWalletKey].tonconnect.isWalletBrowser;
      }
      return false;
    }
  }, {
    key: "getCurrentlyInjectedWallets",
    value: function getCurrentlyInjectedWallets() {
      if (!this.window) {
        return [];
      }
      var windowKeys = tryGetWindowKeys();
      var wallets = windowKeys.filter(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2);
          _ref2[0];
          var value = _ref2[1];
        return isJSBridgeWithMetadata(value);
      });
      return wallets.map(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
          jsBridgeKey = _ref4[0],
          wallet = _ref4[1];
        return {
          name: wallet.tonconnect.walletInfo.name,
          appName: wallet.tonconnect.walletInfo.app_name,
          aboutUrl: wallet.tonconnect.walletInfo.about_url,
          imageUrl: wallet.tonconnect.walletInfo.image,
          tondns: wallet.tonconnect.walletInfo.tondns,
          jsBridgeKey: jsBridgeKey,
          injected: true,
          embedded: wallet.tonconnect.isWalletBrowser,
          platforms: wallet.tonconnect.walletInfo.platforms
        };
      });
    }
  }, {
    key: "isWindowContainsWallet",
    value: function isWindowContainsWallet(window, injectedWalletKey) {
      return !!window && injectedWalletKey in window && _typeof(window[injectedWalletKey]) === 'object' && 'tonconnect' in window[injectedWalletKey];
    }
  }]);
}();
InjectedProvider.window = getWindow$2();

/**
 * Default storage to save protocol data, uses `localStorage` if it is available. In Safari's private mode, it uses `InMemoryStorage`. In Node.js, it throws an error.
 */
var DefaultStorage = /*#__PURE__*/function () {
  function DefaultStorage() {
    _classCallCheck(this, DefaultStorage);
    this.localStorage = tryGetLocalStorage$1();
  }
  return _createClass(DefaultStorage, [{
    key: "getItem",
    value: function getItem(key) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee52() {
        return _regeneratorRuntime().wrap(function _callee52$(_context52) {
          while (1) switch (_context52.prev = _context52.next) {
            case 0:
              return _context52.abrupt("return", this.localStorage.getItem(key));
            case 1:
            case "end":
              return _context52.stop();
          }
        }, _callee52, this);
      }));
    }
  }, {
    key: "removeItem",
    value: function removeItem(key) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee53() {
        return _regeneratorRuntime().wrap(function _callee53$(_context53) {
          while (1) switch (_context53.prev = _context53.next) {
            case 0:
              this.localStorage.removeItem(key);
            case 1:
            case "end":
              return _context53.stop();
          }
        }, _callee53, this);
      }));
    }
  }, {
    key: "setItem",
    value: function setItem(key, value) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee54() {
        return _regeneratorRuntime().wrap(function _callee54$(_context54) {
          while (1) switch (_context54.prev = _context54.next) {
            case 0:
              this.localStorage.setItem(key, value);
            case 1:
            case "end":
              return _context54.stop();
          }
        }, _callee54, this);
      }));
    }
  }]);
}();
/**
 * Checks if `WalletInfo` is `WalletInfoInjectable` and `WalletInfo` is injected to the current webpage (`walletInfo.injected === true`).
 * @param value WalletInfo to check.
 */
function isWalletInfoCurrentlyInjected(value) {
  return isWalletInfoInjectable(value) && value.injected;
}
/**
 * Checks if `WalletInfo` is `WalletInfoInjectable` and dApp is opened inside this wallet's browser.
 * @param value WalletInfo to check.
 */
function isWalletInfoCurrentlyEmbedded(value) {
  return isWalletInfoCurrentlyInjected(value) && value.embedded;
}
/**
 * Checks if `WalletInfo` is `WalletInfoInjected`, but doesn't check if it is injected to the page or not.
 * @param value WalletInfo to check.
 */
function isWalletInfoInjectable(value) {
  return 'jsBridgeKey' in value;
}
/**
 * Checks if `WalletInfo` is `WalletInfoRemote`.
 * @param value WalletInfo to check.
 */
function isWalletInfoRemote(value) {
  return 'bridgeUrl' in value;
}
var FALLBACK_WALLETS_LIST = [{
  app_name: 'telegram-wallet',
  name: 'Wallet',
  image: 'https://wallet.tg/images/logo-288.png',
  about_url: 'https://wallet.tg/',
  universal_url: 'https://t.me/wallet?attach=wallet',
  bridge: [{
    type: 'sse',
    url: 'https://bridge.ton.space/bridge'
  }],
  platforms: ['ios', 'android', 'macos', 'windows', 'linux']
}, {
  app_name: 'tonkeeper',
  name: 'Tonkeeper',
  image: 'https://tonkeeper.com/assets/tonconnect-icon.png',
  tondns: 'tonkeeper.ton',
  about_url: 'https://tonkeeper.com',
  universal_url: 'https://app.tonkeeper.com/ton-connect',
  deepLink: 'tonkeeper-tc://',
  bridge: [{
    type: 'sse',
    url: 'https://bridge.tonapi.io/bridge'
  }, {
    type: 'js',
    key: 'tonkeeper'
  }],
  platforms: ['ios', 'android', 'chrome', 'firefox', 'macos']
}, {
  app_name: 'mytonwallet',
  name: 'MyTonWallet',
  image: 'https://static.mytonwallet.io/icon-256.png',
  about_url: 'https://mytonwallet.io',
  universal_url: 'https://connect.mytonwallet.org',
  bridge: [{
    type: 'js',
    key: 'mytonwallet'
  }, {
    type: 'sse',
    url: 'https://tonconnectbridge.mytonwallet.org/bridge/'
  }],
  platforms: ['chrome', 'windows', 'macos', 'linux', 'ios', 'android', 'firefox']
}, {
  app_name: 'openmask',
  name: 'OpenMask',
  image: 'https://raw.githubusercontent.com/OpenProduct/openmask-extension/main/public/openmask-logo-288.png',
  about_url: 'https://www.openmask.app/',
  bridge: [{
    type: 'js',
    key: 'openmask'
  }],
  platforms: ['chrome']
}, {
  app_name: 'tonhub',
  name: 'Tonhub',
  image: 'https://tonhub.com/tonconnect_logo.png',
  about_url: 'https://tonhub.com',
  universal_url: 'https://tonhub.com/ton-connect',
  bridge: [{
    type: 'js',
    key: 'tonhub'
  }, {
    type: 'sse',
    url: 'https://connect.tonhubapi.com/tonconnect'
  }],
  platforms: ['ios', 'android']
}, {
  app_name: 'dewallet',
  name: 'DeWallet',
  image: 'https://raw.githubusercontent.com/delab-team/manifests-images/main/WalletAvatar.png',
  about_url: 'https://delabwallet.com',
  universal_url: 'https://t.me/dewallet?attach=wallet',
  bridge: [{
    type: 'sse',
    url: 'https://sse-bridge.delab.team/bridge'
  }],
  platforms: ['ios', 'android']
}, {
  app_name: 'xtonwallet',
  name: 'XTONWallet',
  image: 'https://xtonwallet.com/assets/img/icon-256-back.png',
  about_url: 'https://xtonwallet.com',
  bridge: [{
    type: 'js',
    key: 'xtonwallet'
  }],
  platforms: ['chrome', 'firefox']
}, {
  app_name: 'tonwallet',
  name: 'TON Wallet',
  image: 'https://wallet.ton.org/assets/ui/qr-logo.png',
  about_url: 'https://chrome.google.com/webstore/detail/ton-wallet/nphplpgoakhhjchkkhmiggakijnkhfnd',
  bridge: [{
    type: 'js',
    key: 'tonwallet'
  }],
  platforms: ['chrome']
}, {
  app_name: 'bitgetTonWallet',
  name: 'Bitget Wallet',
  image: 'https://raw.githubusercontent.com/bitkeepwallet/download/main/logo/png/bitget_wallet_logo_0_gas_fee.png',
  about_url: 'https://web3.bitget.com',
  deepLink: 'bitkeep://',
  bridge: [{
    type: 'js',
    key: 'bitgetTonWallet'
  }, {
    type: 'sse',
    url: 'https://bridge.tonapi.io/bridge'
  }],
  platforms: ['ios', 'android', 'chrome'],
  universal_url: 'https://bkcode.vip/ton-connect'
}, {
  app_name: 'safepalwallet',
  name: 'SafePal',
  image: 'https://s.pvcliping.com/web/public_image/SafePal_x288.png',
  tondns: '',
  about_url: 'https://www.safepal.com',
  universal_url: 'https://link.safepal.io/ton-connect',
  deepLink: 'safepal-tc://',
  bridge: [{
    type: 'sse',
    url: 'https://ton-bridge.safepal.com/tonbridge/v1/bridge'
  }, {
    type: 'js',
    key: 'safepalwallet'
  }],
  platforms: ['ios', 'android', 'chrome', 'firefox']
}, {
  app_name: 'okxTonWallet',
  name: 'OKX Wallet',
  image: 'https://static.okx.com/cdn/assets/imgs/247/58E63FEA47A2B7D7.png',
  about_url: 'https://www.okx.com/web3',
  universal_url: 'https://www.okx.com/download?appendQuery=true&deeplink=okx://web3/wallet/tonconnect',
  bridge: [{
    type: 'js',
    key: 'okxTonWallet'
  }, {
    type: 'sse',
    url: 'https://www.okx.com/tonbridge/discover/rpc/bridge'
  }],
  platforms: ['chrome', 'safari', 'firefox', 'ios', 'android']
}, {
  app_name: 'okxTonWalletTr',
  name: 'OKX TR Wallet',
  image: 'https://static.okx.com/cdn/assets/imgs/247/587A8296F0BB640F.png',
  about_url: 'https://tr.okx.com/web3',
  universal_url: 'https://tr.okx.com/download?appendQuery=true&deeplink=okxtr://web3/wallet/tonconnect',
  bridge: [{
    type: 'js',
    key: 'okxTonWallet'
  }, {
    type: 'sse',
    url: 'https://www.okx.com/tonbridge/discover/rpc/bridge'
  }],
  platforms: ['chrome', 'safari', 'firefox', 'ios', 'android']
}];
var WalletsListManager = /*#__PURE__*/function () {
  function WalletsListManager(options) {
    _classCallCheck(this, WalletsListManager);
    this.walletsListCache = null;
    this.walletsListCacheCreationTimestamp = null;
    this.walletsListSource = 'https://raw.githubusercontent.com/ton-blockchain/wallets-list/main/wallets-v2.json';
    if (options === null || options === void 0 ? void 0 : options.walletsListSource) {
      this.walletsListSource = options.walletsListSource;
    }
    if (options === null || options === void 0 ? void 0 : options.cacheTTLMs) {
      this.cacheTTLMs = options.cacheTTLMs;
    }
  }
  return _createClass(WalletsListManager, [{
    key: "getWallets",
    value: function getWallets() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee55() {
        var _this33 = this;
        return _regeneratorRuntime().wrap(function _callee55$(_context55) {
          while (1) switch (_context55.prev = _context55.next) {
            case 0:
              if (this.cacheTTLMs && this.walletsListCacheCreationTimestamp && Date.now() > this.walletsListCacheCreationTimestamp + this.cacheTTLMs) {
                this.walletsListCache = null;
              }
              if (!this.walletsListCache) {
                this.walletsListCache = this.fetchWalletsList();
                this.walletsListCache.then(function () {
                  _this33.walletsListCacheCreationTimestamp = Date.now();
                })["catch"](function () {
                  _this33.walletsListCache = null;
                  _this33.walletsListCacheCreationTimestamp = null;
                });
              }
              return _context55.abrupt("return", this.walletsListCache);
            case 3:
            case "end":
              return _context55.stop();
          }
        }, _callee55, this);
      }));
    }
  }, {
    key: "getEmbeddedWallet",
    value: function getEmbeddedWallet() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee56() {
        var walletsList, embeddedWallets;
        return _regeneratorRuntime().wrap(function _callee56$(_context56) {
          while (1) switch (_context56.prev = _context56.next) {
            case 0:
              _context56.next = 2;
              return this.getWallets();
            case 2:
              walletsList = _context56.sent;
              embeddedWallets = walletsList.filter(isWalletInfoCurrentlyEmbedded);
              if (!(embeddedWallets.length !== 1)) {
                _context56.next = 6;
                break;
              }
              return _context56.abrupt("return", null);
            case 6:
              return _context56.abrupt("return", embeddedWallets[0]);
            case 7:
            case "end":
              return _context56.stop();
          }
        }, _callee56, this);
      }));
    }
  }, {
    key: "fetchWalletsList",
    value: function fetchWalletsList() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee57() {
        var _this34 = this;
        var walletsList, walletsResponse, wrongFormatWallets, currentlyInjectedWallets;
        return _regeneratorRuntime().wrap(function _callee57$(_context57) {
          while (1) switch (_context57.prev = _context57.next) {
            case 0:
              walletsList = [];
              _context57.prev = 1;
              _context57.next = 4;
              return fetch(this.walletsListSource);
            case 4:
              walletsResponse = _context57.sent;
              _context57.next = 7;
              return walletsResponse.json();
            case 7:
              walletsList = _context57.sent;
              if (Array.isArray(walletsList)) {
                _context57.next = 10;
                break;
              }
              throw new FetchWalletsError('Wrong wallets list format, wallets list must be an array.');
            case 10:
              wrongFormatWallets = walletsList.filter(function (wallet) {
                return !_this34.isCorrectWalletConfigDTO(wallet);
              });
              if (wrongFormatWallets.length) {
                logError$1("Wallet(s) ".concat(wrongFormatWallets.map(function (wallet) {
                  return wallet.name;
                }).join(', '), " config format is wrong. They were removed from the wallets list."));
                walletsList = walletsList.filter(function (wallet) {
                  return _this34.isCorrectWalletConfigDTO(wallet);
                });
              }
              _context57.next = 18;
              break;
            case 14:
              _context57.prev = 14;
              _context57.t0 = _context57["catch"](1);
              logError$1(_context57.t0);
              walletsList = FALLBACK_WALLETS_LIST;
            case 18:
              currentlyInjectedWallets = [];
              try {
                currentlyInjectedWallets = InjectedProvider.getCurrentlyInjectedWallets();
              } catch (e) {
                logError$1(e);
              }
              return _context57.abrupt("return", this.mergeWalletsLists(this.walletConfigDTOListToWalletConfigList(walletsList), currentlyInjectedWallets));
            case 21:
            case "end":
              return _context57.stop();
          }
        }, _callee57, this, [[1, 14]]);
      }));
    }
  }, {
    key: "walletConfigDTOListToWalletConfigList",
    value: function walletConfigDTOListToWalletConfigList(walletConfigDTO) {
      return walletConfigDTO.map(function (walletConfigDTO) {
        var walletConfigBase = {
          name: walletConfigDTO.name,
          appName: walletConfigDTO.app_name,
          imageUrl: walletConfigDTO.image,
          aboutUrl: walletConfigDTO.about_url,
          tondns: walletConfigDTO.tondns,
          platforms: walletConfigDTO.platforms
        };
        var walletConfig = walletConfigBase;
        walletConfigDTO.bridge.forEach(function (bridge) {
          if (bridge.type === 'sse') {
            walletConfig.bridgeUrl = bridge.url;
            walletConfig.universalLink = walletConfigDTO.universal_url;
            walletConfig.deepLink = walletConfigDTO.deepLink;
          }
          if (bridge.type === 'js') {
            var jsBridgeKey = bridge.key;
            walletConfig.jsBridgeKey = jsBridgeKey;
            walletConfig.injected = InjectedProvider.isWalletInjected(jsBridgeKey);
            walletConfig.embedded = InjectedProvider.isInsideWalletBrowser(jsBridgeKey);
          }
        });
        return walletConfig;
      });
    }
  }, {
    key: "mergeWalletsLists",
    value: function mergeWalletsLists(list1, list2) {
      var names = new Set(list1.concat(list2).map(function (item) {
        return item.name;
      }));
      return _toConsumableArray(names.values()).map(function (name) {
        var list1Item = list1.find(function (item) {
          return item.name === name;
        });
        var list2Item = list2.find(function (item) {
          return item.name === name;
        });
        return Object.assign(Object.assign({}, list1Item && Object.assign({}, list1Item)), list2Item && Object.assign({}, list2Item));
      });
    }
    // eslint-disable-next-line complexity
  }, {
    key: "isCorrectWalletConfigDTO",
    value: function isCorrectWalletConfigDTO(value) {
      if (!value || !(_typeof(value) === 'object')) {
        return false;
      }
      var containsName = 'name' in value;
      var containsAppName = 'app_name' in value;
      var containsImage = 'image' in value;
      var containsAbout = 'about_url' in value;
      var containsPlatforms = 'platforms' in value;
      if (!containsName || !containsImage || !containsAbout || !containsPlatforms || !containsAppName) {
        return false;
      }
      if (!value.platforms || !Array.isArray(value.platforms) || !value.platforms.length) {
        return false;
      }
      if (!('bridge' in value) || !Array.isArray(value.bridge) || !value.bridge.length) {
        return false;
      }
      var bridge = value.bridge;
      if (bridge.some(function (item) {
        return !item || _typeof(item) !== 'object' || !('type' in item);
      })) {
        return false;
      }
      var sseBridge = bridge.find(function (item) {
        return item.type === 'sse';
      });
      if (sseBridge) {
        if (!('url' in sseBridge) || !sseBridge.url || !value.universal_url) {
          return false;
        }
      }
      var jsBridge = bridge.find(function (item) {
        return item.type === 'js';
      });
      if (jsBridge) {
        if (!('key' in jsBridge) || !jsBridge.key) {
          return false;
        }
      }
      return true;
    }
  }]);
}();
/**
 * Thrown when wallet doesn't support requested feature method.
 */
var WalletNotSupportFeatureError = /*#__PURE__*/function (_TonConnectError15) {
  function WalletNotSupportFeatureError() {
    var _this35;
    _classCallCheck(this, WalletNotSupportFeatureError);
    for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
      args[_key19] = arguments[_key19];
    }
    _this35 = _callSuper(this, WalletNotSupportFeatureError, [].concat(args));
    Object.setPrototypeOf(_this35, WalletNotSupportFeatureError.prototype);
    return _this35;
  }
  _inherits(WalletNotSupportFeatureError, _TonConnectError15);
  return _createClass(WalletNotSupportFeatureError, [{
    key: "info",
    get: function get() {
      return "Wallet doesn't support requested feature method.";
    }
  }]);
}(TonConnectError);
function checkSendTransactionSupport(features, options) {
  var supportsDeprecatedSendTransactionFeature = features.includes('SendTransaction');
  var sendTransactionFeature = features.find(function (feature) {
    return feature && _typeof(feature) === 'object' && feature.name === 'SendTransaction';
  });
  if (!supportsDeprecatedSendTransactionFeature && !sendTransactionFeature) {
    throw new WalletNotSupportFeatureError("Wallet doesn't support SendTransaction feature.");
  }
  if (sendTransactionFeature && sendTransactionFeature.maxMessages !== undefined) {
    if (sendTransactionFeature.maxMessages < options.requiredMessagesNumber) {
      throw new WalletNotSupportFeatureError("Wallet is not able to handle such SendTransaction request. Max support messages number is ".concat(sendTransactionFeature.maxMessages, ", but ").concat(options.requiredMessagesNumber, " is required."));
    }
    return;
  }
  logWarning$1("Connected wallet didn't provide information about max allowed messages in the SendTransaction request. Request may be rejected by the wallet.");
}

/**
 * Create a request version event.
 */
function createRequestVersionEvent() {
  return {
    type: 'request-version'
  };
}
/**
 * Create a response version event.
 * @param version
 */
function createResponseVersionEvent(version) {
  return {
    type: 'response-version',
    version: version
  };
}
/**
 * Create a version info.
 * @param version
 */
function createVersionInfo(version) {
  return {
    ton_connect_sdk_lib: version.ton_connect_sdk_lib,
    ton_connect_ui_lib: version.ton_connect_ui_lib
  };
}
function createConnectionInfo(version, wallet) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  var isTonProof = ((_a = wallet === null || wallet === void 0 ? void 0 : wallet.connectItems) === null || _a === void 0 ? void 0 : _a.tonProof) && 'proof' in wallet.connectItems.tonProof;
  var authType = isTonProof ? 'ton_proof' : 'ton_addr';
  return {
    wallet_address: (_c = (_b = wallet === null || wallet === void 0 ? void 0 : wallet.account) === null || _b === void 0 ? void 0 : _b.address) !== null && _c !== void 0 ? _c : null,
    wallet_type: (_d = wallet === null || wallet === void 0 ? void 0 : wallet.device.appName) !== null && _d !== void 0 ? _d : null,
    wallet_version: (_e = wallet === null || wallet === void 0 ? void 0 : wallet.device.appVersion) !== null && _e !== void 0 ? _e : null,
    auth_type: authType,
    custom_data: Object.assign({
      chain_id: (_g = (_f = wallet === null || wallet === void 0 ? void 0 : wallet.account) === null || _f === void 0 ? void 0 : _f.chain) !== null && _g !== void 0 ? _g : null,
      provider: (_h = wallet === null || wallet === void 0 ? void 0 : wallet.provider) !== null && _h !== void 0 ? _h : null
    }, createVersionInfo(version))
  };
}
/**
 * Create a connection init event.
 */
function createConnectionStartedEvent(version) {
  return {
    type: 'connection-started',
    custom_data: createVersionInfo(version)
  };
}
/**
 * Create a connection completed event.
 * @param version
 * @param wallet
 */
function createConnectionCompletedEvent(version, wallet) {
  return Object.assign({
    type: 'connection-completed',
    is_success: true
  }, createConnectionInfo(version, wallet));
}
/**
 * Create a connection error event.
 * @param version
 * @param error_message
 * @param errorCode
 */
function createConnectionErrorEvent(version, error_message, errorCode) {
  return {
    type: 'connection-error',
    is_success: false,
    error_message: error_message,
    error_code: errorCode !== null && errorCode !== void 0 ? errorCode : null,
    custom_data: createVersionInfo(version)
  };
}
/**
 * Create a connection restoring started event.
 */
function createConnectionRestoringStartedEvent(version) {
  return {
    type: 'connection-restoring-started',
    custom_data: createVersionInfo(version)
  };
}
/**
 * Create a connection restoring completed event.
 * @param version
 * @param wallet
 */
function createConnectionRestoringCompletedEvent(version, wallet) {
  return Object.assign({
    type: 'connection-restoring-completed',
    is_success: true
  }, createConnectionInfo(version, wallet));
}
/**
 * Create a connection restoring error event.
 * @param version
 * @param errorMessage
 */
function createConnectionRestoringErrorEvent(version, errorMessage) {
  return {
    type: 'connection-restoring-error',
    is_success: false,
    error_message: errorMessage,
    custom_data: createVersionInfo(version)
  };
}
function createTransactionInfo(wallet, transaction) {
  var _a, _b, _c, _d;
  return {
    valid_until: (_a = String(transaction.validUntil)) !== null && _a !== void 0 ? _a : null,
    from: (_d = (_b = transaction.from) !== null && _b !== void 0 ? _b : (_c = wallet === null || wallet === void 0 ? void 0 : wallet.account) === null || _c === void 0 ? void 0 : _c.address) !== null && _d !== void 0 ? _d : null,
    messages: transaction.messages.map(function (message) {
      var _a, _b;
      return {
        address: (_a = message.address) !== null && _a !== void 0 ? _a : null,
        amount: (_b = message.amount) !== null && _b !== void 0 ? _b : null
      };
    })
  };
}
/**
 * Create a transaction init event.
 * @param version
 * @param wallet
 * @param transaction
 */
function createTransactionSentForSignatureEvent(version, wallet, transaction) {
  return Object.assign(Object.assign({
    type: 'transaction-sent-for-signature'
  }, createConnectionInfo(version, wallet)), createTransactionInfo(wallet, transaction));
}
/**
 * Create a transaction signed event.
 * @param version
 * @param wallet
 * @param transaction
 * @param signedTransaction
 */
function createTransactionSignedEvent(version, wallet, transaction, signedTransaction) {
  return Object.assign(Object.assign({
    type: 'transaction-signed',
    is_success: true,
    signed_transaction: signedTransaction.boc
  }, createConnectionInfo(version, wallet)), createTransactionInfo(wallet, transaction));
}
/**
 * Create a transaction error event.
 * @param version
 * @param wallet
 * @param transaction
 * @param errorMessage
 * @param errorCode
 */
function createTransactionSigningFailedEvent(version, wallet, transaction, errorMessage, errorCode) {
  return Object.assign(Object.assign({
    type: 'transaction-signing-failed',
    is_success: false,
    error_message: errorMessage,
    error_code: errorCode !== null && errorCode !== void 0 ? errorCode : null
  }, createConnectionInfo(version, wallet)), createTransactionInfo(wallet, transaction));
}
/**
 * Create a disconnect event.
 * @param version
 * @param wallet
 * @param scope
 * @returns
 */
function createDisconnectionEvent(version, wallet, scope) {
  return Object.assign({
    type: 'disconnection',
    scope: scope
  }, createConnectionInfo(version, wallet));
}

/**
 * A concrete implementation of EventDispatcher that dispatches events to the browser window.
 */
var BrowserEventDispatcher = /*#__PURE__*/function () {
  function BrowserEventDispatcher() {
    _classCallCheck(this, BrowserEventDispatcher);
    /**
     * The window object, possibly undefined in a server environment.
     * @private
     */
    this.window = getWindow$2();
  }
  /**
   * Dispatches an event with the given name and details to the browser window.
   * @param eventName - The name of the event to dispatch.
   * @param eventDetails - The details of the event to dispatch.
   * @returns A promise that resolves when the event has been dispatched.
   */
  return _createClass(BrowserEventDispatcher, [{
    key: "dispatchEvent",
    value: function dispatchEvent(eventName, eventDetails) {
      var _a;
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee58() {
        var event;
        return _regeneratorRuntime().wrap(function _callee58$(_context58) {
          while (1) switch (_context58.prev = _context58.next) {
            case 0:
              event = new CustomEvent(eventName, {
                detail: eventDetails
              });
              (_a = this.window) === null || _a === void 0 ? void 0 : _a.dispatchEvent(event);
            case 2:
            case "end":
              return _context58.stop();
          }
        }, _callee58, this);
      }));
    }
    /**
     * Adds an event listener to the browser window.
     * @param eventName - The name of the event to listen for.
     * @param listener - The listener to add.
     * @param options - The options for the listener.
     * @returns A function that removes the listener.
     */
  }, {
    key: "addEventListener",
    value: function addEventListener(eventName, listener, options) {
      var _a;
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee59() {
        var _this36 = this;
        return _regeneratorRuntime().wrap(function _callee59$(_context59) {
          while (1) switch (_context59.prev = _context59.next) {
            case 0:
              (_a = this.window) === null || _a === void 0 ? void 0 : _a.addEventListener(eventName, listener, options);
              return _context59.abrupt("return", function () {
                var _a;
                return (_a = _this36.window) === null || _a === void 0 ? void 0 : _a.removeEventListener(eventName, listener);
              });
            case 2:
            case "end":
              return _context59.stop();
          }
        }, _callee59, this);
      }));
    }
  }]);
}();
/**
 * Tracker for TonConnect user actions, such as transaction signing, connection, etc.
 *
 * List of events:
 *  * `connection-started`: when a user starts connecting a wallet.
 *  * `connection-completed`: when a user successfully connected a wallet.
 *  * `connection-error`: when a user cancels a connection or there is an error during the connection process.
 *  * `connection-restoring-started`: when the dApp starts restoring a connection.
 *  * `connection-restoring-completed`: when the dApp successfully restores a connection.
 *  * `connection-restoring-error`: when the dApp fails to restore a connection.
 *  * `disconnection`: when a user starts disconnecting a wallet.
 *  * `transaction-sent-for-signature`: when a user sends a transaction for signature.
 *  * `transaction-signed`: when a user successfully signs a transaction.
 *  * `transaction-signing-failed`: when a user cancels transaction signing or there is an error during the signing process.
 *
 * If you want to track user actions, you can subscribe to the window events with prefix `ton-connect-`:
 *
 * @example
 * window.addEventListener('ton-connect-transaction-sent-for-signature', (event) => {
 *    console.log('Transaction init', event.detail);
 * });
 *
 * @internal
 */
var TonConnectTracker = /*#__PURE__*/function () {
  function TonConnectTracker(options) {
    _classCallCheck(this, TonConnectTracker);
    var _a;
    /**
     * Event prefix for user actions.
     * @private
     */
    this.eventPrefix = 'ton-connect-';
    /**
     * TonConnect UI version.
     */
    this.tonConnectUiVersion = null;
    this.eventDispatcher = (_a = options === null || options === void 0 ? void 0 : options.eventDispatcher) !== null && _a !== void 0 ? _a : new BrowserEventDispatcher();
    this.tonConnectSdkVersion = options.tonConnectSdkVersion;
    this.init()["catch"]();
  }
  /**
   * Version of the library.
   */
  return _createClass(TonConnectTracker, [{
    key: "version",
    get: function get() {
      return createVersionInfo({
        ton_connect_sdk_lib: this.tonConnectSdkVersion,
        ton_connect_ui_lib: this.tonConnectUiVersion
      });
    }
    /**
     * Called once when the tracker is created and request version other libraries.
     */
  }, {
    key: "init",
    value: function init() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee60() {
        return _regeneratorRuntime().wrap(function _callee60$(_context60) {
          while (1) switch (_context60.prev = _context60.next) {
            case 0:
              _context60.prev = 0;
              _context60.next = 3;
              return this.setRequestVersionHandler();
            case 3:
              _context60.next = 5;
              return this.requestTonConnectUiVersion();
            case 5:
              this.tonConnectUiVersion = _context60.sent;
              _context60.next = 10;
              break;
            case 8:
              _context60.prev = 8;
              _context60.t0 = _context60["catch"](0);
            case 10:
            case "end":
              return _context60.stop();
          }
        }, _callee60, this, [[0, 8]]);
      }));
    }
    /**
     * Set request version handler.
     * @private
     */
  }, {
    key: "setRequestVersionHandler",
    value: function setRequestVersionHandler() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee62() {
        var _this37 = this;
        return _regeneratorRuntime().wrap(function _callee62$(_context62) {
          while (1) switch (_context62.prev = _context62.next) {
            case 0:
              _context62.next = 2;
              return this.eventDispatcher.addEventListener('ton-connect-request-version', function () {
                return __awaiter(_this37, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee61() {
                  return _regeneratorRuntime().wrap(function _callee61$(_context61) {
                    while (1) switch (_context61.prev = _context61.next) {
                      case 0:
                        _context61.next = 2;
                        return this.eventDispatcher.dispatchEvent('ton-connect-response-version', createResponseVersionEvent(this.tonConnectSdkVersion));
                      case 2:
                      case "end":
                        return _context61.stop();
                    }
                  }, _callee61, this);
                }));
              });
            case 2:
            case "end":
              return _context62.stop();
          }
        }, _callee62, this);
      }));
    }
    /**
     * Request TonConnect UI version.
     * @private
     */
  }, {
    key: "requestTonConnectUiVersion",
    value: function requestTonConnectUiVersion() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee64() {
        var _this38 = this;
        return _regeneratorRuntime().wrap(function _callee64$(_context64) {
          while (1) switch (_context64.prev = _context64.next) {
            case 0:
              return _context64.abrupt("return", new Promise(function (resolve, reject) {
                return __awaiter(_this38, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee63() {
                  return _regeneratorRuntime().wrap(function _callee63$(_context63) {
                    while (1) switch (_context63.prev = _context63.next) {
                      case 0:
                        _context63.prev = 0;
                        _context63.next = 3;
                        return this.eventDispatcher.addEventListener('ton-connect-ui-response-version', function (event) {
                          resolve(event.detail.version);
                        }, {
                          once: true
                        });
                      case 3:
                        _context63.next = 5;
                        return this.eventDispatcher.dispatchEvent('ton-connect-ui-request-version', createRequestVersionEvent());
                      case 5:
                        _context63.next = 10;
                        break;
                      case 7:
                        _context63.prev = 7;
                        _context63.t0 = _context63["catch"](0);
                        reject(_context63.t0);
                      case 10:
                      case "end":
                        return _context63.stop();
                    }
                  }, _callee63, this, [[0, 7]]);
                }));
              }));
            case 1:
            case "end":
              return _context64.stop();
          }
        }, _callee64);
      }));
    }
    /**
     * Emit user action event to the window.
     * @param eventDetails
     * @private
     */
  }, {
    key: "dispatchUserActionEvent",
    value: function dispatchUserActionEvent(eventDetails) {
      try {
        this.eventDispatcher.dispatchEvent("".concat(this.eventPrefix).concat(eventDetails.type), eventDetails)["catch"]();
      } catch (e) {}
    }
    /**
     * Track connection init event.
     * @param args
     */
  }, {
    key: "trackConnectionStarted",
    value: function trackConnectionStarted() {
      try {
        for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
          args[_key20] = arguments[_key20];
        }
        var event = createConnectionStartedEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e) {}
    }
    /**
     * Track connection success event.
     * @param args
     */
  }, {
    key: "trackConnectionCompleted",
    value: function trackConnectionCompleted() {
      try {
        for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
          args[_key21] = arguments[_key21];
        }
        var event = createConnectionCompletedEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e) {}
    }
    /**
     * Track connection error event.
     * @param args
     */
  }, {
    key: "trackConnectionError",
    value: function trackConnectionError() {
      try {
        for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {
          args[_key22] = arguments[_key22];
        }
        var event = createConnectionErrorEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e) {}
    }
    /**
     * Track connection restoring init event.
     * @param args
     */
  }, {
    key: "trackConnectionRestoringStarted",
    value: function trackConnectionRestoringStarted() {
      try {
        for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {
          args[_key23] = arguments[_key23];
        }
        var event = createConnectionRestoringStartedEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e) {}
    }
    /**
     * Track connection restoring success event.
     * @param args
     */
  }, {
    key: "trackConnectionRestoringCompleted",
    value: function trackConnectionRestoringCompleted() {
      try {
        for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {
          args[_key24] = arguments[_key24];
        }
        var event = createConnectionRestoringCompletedEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e) {}
    }
    /**
     * Track connection restoring error event.
     * @param args
     */
  }, {
    key: "trackConnectionRestoringError",
    value: function trackConnectionRestoringError() {
      try {
        for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {
          args[_key25] = arguments[_key25];
        }
        var event = createConnectionRestoringErrorEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e) {}
    }
    /**
     * Track disconnect event.
     * @param args
     */
  }, {
    key: "trackDisconnection",
    value: function trackDisconnection() {
      try {
        for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {
          args[_key26] = arguments[_key26];
        }
        var event = createDisconnectionEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e) {}
    }
    /**
     * Track transaction init event.
     * @param args
     */
  }, {
    key: "trackTransactionSentForSignature",
    value: function trackTransactionSentForSignature() {
      try {
        for (var _len27 = arguments.length, args = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {
          args[_key27] = arguments[_key27];
        }
        var event = createTransactionSentForSignatureEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e) {}
    }
    /**
     * Track transaction signed event.
     * @param args
     */
  }, {
    key: "trackTransactionSigned",
    value: function trackTransactionSigned() {
      try {
        for (var _len28 = arguments.length, args = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {
          args[_key28] = arguments[_key28];
        }
        var event = createTransactionSignedEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e) {}
    }
    /**
     * Track transaction error event.
     * @param args
     */
  }, {
    key: "trackTransactionSigningFailed",
    value: function trackTransactionSigningFailed() {
      try {
        for (var _len29 = arguments.length, args = new Array(_len29), _key29 = 0; _key29 < _len29; _key29++) {
          args[_key29] = arguments[_key29];
        }
        var event = createTransactionSigningFailedEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e) {}
    }
  }]);
}();
var tonConnectSdkVersion = "3.0.5";
var TonConnect = /*#__PURE__*/function () {
  function TonConnect(options) {
    _classCallCheck(this, TonConnect);
    this.walletsList = new WalletsListManager();
    this._wallet = null;
    this.provider = null;
    this.statusChangeSubscriptions = [];
    this.statusChangeErrorSubscriptions = [];
    this.dappSettings = {
      manifestUrl: (options === null || options === void 0 ? void 0 : options.manifestUrl) || getWebPageManifest(),
      storage: (options === null || options === void 0 ? void 0 : options.storage) || new DefaultStorage()
    };
    this.walletsList = new WalletsListManager({
      walletsListSource: options === null || options === void 0 ? void 0 : options.walletsListSource,
      cacheTTLMs: options === null || options === void 0 ? void 0 : options.walletsListCacheTTLMs
    });
    this.tracker = new TonConnectTracker({
      eventDispatcher: options === null || options === void 0 ? void 0 : options.eventDispatcher,
      tonConnectSdkVersion: tonConnectSdkVersion
    });
    if (!this.dappSettings.manifestUrl) {
      throw new DappMetadataError('Dapp tonconnect-manifest.json must be specified if window.location.origin is undefined. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest');
    }
    this.bridgeConnectionStorage = new BridgeConnectionStorage(this.dappSettings.storage);
    if (!(options === null || options === void 0 ? void 0 : options.disableAutoPauseConnection)) {
      this.addWindowFocusAndBlurSubscriptions();
    }
  }
  /**
   * Returns available wallets list.
   */
  return _createClass(TonConnect, [{
    key: "connected",
    get:
    /**
     * Shows if the wallet is connected right now.
     */
    function get() {
      return this._wallet !== null;
    }
    /**
     * Current connected account or null if no account is connected.
     */
  }, {
    key: "account",
    get: function get() {
      var _a;
      return ((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.account) || null;
    }
    /**
     * Current connected wallet or null if no account is connected.
     */
  }, {
    key: "wallet",
    get: function get() {
      return this._wallet;
    },
    set: function set(value) {
      var _this39 = this;
      this._wallet = value;
      this.statusChangeSubscriptions.forEach(function (callback) {
        return callback(_this39._wallet);
      });
    }
    /**
     * Returns available wallets list.
     */
  }, {
    key: "getWallets",
    value: function getWallets() {
      return this.walletsList.getWallets();
    }
    /**
     * Allows to subscribe to connection status changes and handle connection errors.
     * @param callback will be called after connections status changes with actual wallet or null.
     * @param errorsHandler (optional) will be called with some instance of TonConnectError when connect error is received.
     * @returns unsubscribe callback.
     */
  }, {
    key: "onStatusChange",
    value: function onStatusChange(callback, errorsHandler) {
      var _this40 = this;
      this.statusChangeSubscriptions.push(callback);
      if (errorsHandler) {
        this.statusChangeErrorSubscriptions.push(errorsHandler);
      }
      return function () {
        _this40.statusChangeSubscriptions = _this40.statusChangeSubscriptions.filter(function (item) {
          return item !== callback;
        });
        if (errorsHandler) {
          _this40.statusChangeErrorSubscriptions = _this40.statusChangeErrorSubscriptions.filter(function (item) {
            return item !== errorsHandler;
          });
        }
      };
    }
  }, {
    key: "connect",
    value: function connect(wallet, requestOrOptions) {
      var _this41 = this;
      var _a, _b;
      // TODO: remove deprecated method
      var options = {};
      if (_typeof(requestOrOptions) === 'object' && 'tonProof' in requestOrOptions) {
        options.request = requestOrOptions;
      }
      if (_typeof(requestOrOptions) === 'object' && ('openingDeadlineMS' in requestOrOptions || 'signal' in requestOrOptions || 'request' in requestOrOptions)) {
        options.request = requestOrOptions === null || requestOrOptions === void 0 ? void 0 : requestOrOptions.request;
        options.openingDeadlineMS = requestOrOptions === null || requestOrOptions === void 0 ? void 0 : requestOrOptions.openingDeadlineMS;
        options.signal = requestOrOptions === null || requestOrOptions === void 0 ? void 0 : requestOrOptions.signal;
      }
      if (this.connected) {
        throw new WalletAlreadyConnectedError();
      }
      var abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
      (_a = this.abortController) === null || _a === void 0 ? void 0 : _a.abort();
      this.abortController = abortController;
      if (abortController.signal.aborted) {
        throw new TonConnectError('Connection was aborted');
      }
      (_b = this.provider) === null || _b === void 0 ? void 0 : _b.closeConnection();
      this.provider = this.createProvider(wallet);
      abortController.signal.addEventListener('abort', function () {
        var _a;
        (_a = _this41.provider) === null || _a === void 0 ? void 0 : _a.closeConnection();
        _this41.provider = null;
      });
      this.tracker.trackConnectionStarted();
      return this.provider.connect(this.createConnectRequest(options === null || options === void 0 ? void 0 : options.request), {
        openingDeadlineMS: options === null || options === void 0 ? void 0 : options.openingDeadlineMS,
        signal: abortController.signal
      });
    }
    /**
     * Try to restore existing session and reconnect to the corresponding wallet. Call it immediately when your app is loaded.
     */
  }, {
    key: "restoreConnection",
    value: function restoreConnection(options) {
      var _a, _b;
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee66() {
        var _this42 = this;
        var abortController, _yield$Promise$all, _yield$Promise$all2, bridgeConnectionType, embeddedWallet, provider, onAbortRestore, restoreConnectionTask, restoreConnectionTimeout;
        return _regeneratorRuntime().wrap(function _callee66$(_context66) {
          while (1) switch (_context66.prev = _context66.next) {
            case 0:
              this.tracker.trackConnectionRestoringStarted();
              abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
              (_a = this.abortController) === null || _a === void 0 ? void 0 : _a.abort();
              this.abortController = abortController;
              if (!abortController.signal.aborted) {
                _context66.next = 7;
                break;
              }
              this.tracker.trackConnectionRestoringError('Connection restoring was aborted');
              return _context66.abrupt("return");
            case 7:
              _context66.next = 9;
              return Promise.all([this.bridgeConnectionStorage.storedConnectionType(), this.walletsList.getEmbeddedWallet()]);
            case 9:
              _yield$Promise$all = _context66.sent;
              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);
              bridgeConnectionType = _yield$Promise$all2[0];
              embeddedWallet = _yield$Promise$all2[1];
              if (!abortController.signal.aborted) {
                _context66.next = 16;
                break;
              }
              this.tracker.trackConnectionRestoringError('Connection restoring was aborted');
              return _context66.abrupt("return");
            case 16:
              provider = null;
              _context66.prev = 17;
              _context66.t0 = bridgeConnectionType;
              _context66.next = _context66.t0 === 'http' ? 21 : _context66.t0 === 'injected' ? 25 : 29;
              break;
            case 21:
              _context66.next = 23;
              return BridgeProvider.fromStorage(this.dappSettings.storage);
            case 23:
              provider = _context66.sent;
              return _context66.abrupt("break", 34);
            case 25:
              _context66.next = 27;
              return InjectedProvider.fromStorage(this.dappSettings.storage);
            case 27:
              provider = _context66.sent;
              return _context66.abrupt("break", 34);
            case 29:
              if (!embeddedWallet) {
                _context66.next = 33;
                break;
              }
              provider = this.createProvider(embeddedWallet);
              _context66.next = 34;
              break;
            case 33:
              return _context66.abrupt("return");
            case 34:
              _context66.next = 44;
              break;
            case 36:
              _context66.prev = 36;
              _context66.t1 = _context66["catch"](17);
              this.tracker.trackConnectionRestoringError('Provider is not restored');
              _context66.next = 41;
              return this.bridgeConnectionStorage.removeConnection();
            case 41:
              provider === null || provider === void 0 ? void 0 : provider.closeConnection();
              provider = null;
              return _context66.abrupt("return");
            case 44:
              if (!abortController.signal.aborted) {
                _context66.next = 48;
                break;
              }
              provider === null || provider === void 0 ? void 0 : provider.closeConnection();
              this.tracker.trackConnectionRestoringError('Connection restoring was aborted');
              return _context66.abrupt("return");
            case 48:
              if (provider) {
                _context66.next = 52;
                break;
              }
              logError$1('Provider is not restored');
              this.tracker.trackConnectionRestoringError('Provider is not restored');
              return _context66.abrupt("return");
            case 52:
              (_b = this.provider) === null || _b === void 0 ? void 0 : _b.closeConnection();
              this.provider = provider;
              provider.listen(this.walletEventsListener.bind(this));
              onAbortRestore = function onAbortRestore() {
                _this42.tracker.trackConnectionRestoringError('Connection restoring was aborted');
                provider === null || provider === void 0 ? void 0 : provider.closeConnection();
                provider = null;
              };
              abortController.signal.addEventListener('abort', onAbortRestore);
              restoreConnectionTask = callForSuccess(function (_options) {
                return __awaiter(_this42, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee65() {
                  return _regeneratorRuntime().wrap(function _callee65$(_context65) {
                    while (1) switch (_context65.prev = _context65.next) {
                      case 0:
                        _context65.next = 2;
                        return provider === null || provider === void 0 ? void 0 : provider.restoreConnection({
                          openingDeadlineMS: options === null || options === void 0 ? void 0 : options.openingDeadlineMS,
                          signal: _options.signal
                        });
                      case 2:
                        abortController.signal.removeEventListener('abort', onAbortRestore);
                        if (this.connected) {
                          this.tracker.trackConnectionRestoringCompleted(this.wallet);
                        } else {
                          this.tracker.trackConnectionRestoringError('Connection restoring failed');
                        }
                      case 4:
                      case "end":
                        return _context65.stop();
                    }
                  }, _callee65, this);
                }));
              }, {
                attempts: Number.MAX_SAFE_INTEGER,
                delayMs: 2000,
                signal: options === null || options === void 0 ? void 0 : options.signal
              });
              restoreConnectionTimeout = new Promise(function (resolve) {
                return setTimeout(function () {
                  return resolve();
                }, 12000);
              } // connection deadline
              );
              return _context66.abrupt("return", Promise.race([restoreConnectionTask, restoreConnectionTimeout]));
            case 60:
            case "end":
              return _context66.stop();
          }
        }, _callee66, this, [[17, 36]]);
      }));
    }
  }, {
    key: "sendTransaction",
    value: function sendTransaction(transaction, optionsOrOnRequestSent) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee67() {
        var options, abortController, validUntil, tx, from, network, response, result;
        return _regeneratorRuntime().wrap(function _callee67$(_context67) {
          while (1) switch (_context67.prev = _context67.next) {
            case 0:
              // TODO: remove deprecated method
              options = {};
              if (typeof optionsOrOnRequestSent === 'function') {
                options.onRequestSent = optionsOrOnRequestSent;
              } else {
                options.onRequestSent = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.onRequestSent;
                options.signal = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.signal;
              }
              abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
              if (!abortController.signal.aborted) {
                _context67.next = 5;
                break;
              }
              throw new TonConnectError('Transaction sending was aborted');
            case 5:
              this.checkConnection();
              checkSendTransactionSupport(this.wallet.device.features, {
                requiredMessagesNumber: transaction.messages.length
              });
              this.tracker.trackTransactionSentForSignature(this.wallet, transaction);
              validUntil = transaction.validUntil, tx = __rest(transaction, ["validUntil"]);
              from = transaction.from || this.account.address;
              network = transaction.network || this.account.chain;
              _context67.next = 13;
              return this.provider.sendRequest(sendTransactionParser.convertToRpcRequest(Object.assign(Object.assign({}, tx), {
                valid_until: validUntil,
                from: from,
                network: network
              })), {
                onRequestSent: options.onRequestSent,
                signal: abortController.signal
              });
            case 13:
              response = _context67.sent;
              if (!sendTransactionParser.isError(response)) {
                _context67.next = 17;
                break;
              }
              this.tracker.trackTransactionSigningFailed(this.wallet, transaction, response.error.message, response.error.code);
              return _context67.abrupt("return", sendTransactionParser.parseAndThrowError(response));
            case 17:
              result = sendTransactionParser.convertFromRpcResponse(response);
              this.tracker.trackTransactionSigned(this.wallet, transaction, result);
              return _context67.abrupt("return", result);
            case 20:
            case "end":
              return _context67.stop();
          }
        }, _callee67, this);
      }));
    }
    /**
     * Disconnect form thw connected wallet and drop current session.
     */
  }, {
    key: "disconnect",
    value: function disconnect(options) {
      var _a;
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee68() {
        var abortController, prevAbortController;
        return _regeneratorRuntime().wrap(function _callee68$(_context68) {
          while (1) switch (_context68.prev = _context68.next) {
            case 0:
              if (this.connected) {
                _context68.next = 2;
                break;
              }
              throw new WalletNotConnectedError();
            case 2:
              abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
              prevAbortController = this.abortController;
              this.abortController = abortController;
              if (!abortController.signal.aborted) {
                _context68.next = 7;
                break;
              }
              throw new TonConnectError('Disconnect was aborted');
            case 7:
              this.onWalletDisconnected('dapp');
              _context68.next = 10;
              return (_a = this.provider) === null || _a === void 0 ? void 0 : _a.disconnect({
                signal: abortController.signal
              });
            case 10:
              prevAbortController === null || prevAbortController === void 0 ? void 0 : prevAbortController.abort();
            case 11:
            case "end":
              return _context68.stop();
          }
        }, _callee68, this);
      }));
    }
    /**
     * Pause bridge HTTP connection. Might be helpful, if you want to pause connections while browser tab is unfocused,
     * or if you use SDK with NodeJS and want to save server resources.
     */
  }, {
    key: "pauseConnection",
    value: function pauseConnection() {
      var _a;
      if (((_a = this.provider) === null || _a === void 0 ? void 0 : _a.type) !== 'http') {
        return;
      }
      this.provider.pause();
    }
    /**
     * Unpause bridge HTTP connection if it is paused.
     */
  }, {
    key: "unPauseConnection",
    value: function unPauseConnection() {
      var _a;
      if (((_a = this.provider) === null || _a === void 0 ? void 0 : _a.type) !== 'http') {
        return Promise.resolve();
      }
      return this.provider.unPause();
    }
  }, {
    key: "addWindowFocusAndBlurSubscriptions",
    value: function addWindowFocusAndBlurSubscriptions() {
      var _this43 = this;
      var document = getDocument();
      if (!document) {
        return;
      }
      try {
        document.addEventListener('visibilitychange', function () {
          if (document.hidden) {
            _this43.pauseConnection();
          } else {
            _this43.unPauseConnection()["catch"]();
          }
        });
      } catch (e) {
        logError$1('Cannot subscribe to the document.visibilitychange: ', e);
      }
    }
  }, {
    key: "createProvider",
    value: function createProvider(wallet) {
      var provider;
      if (!Array.isArray(wallet) && isWalletConnectionSourceJS(wallet)) {
        provider = new InjectedProvider(this.dappSettings.storage, wallet.jsBridgeKey);
      } else {
        provider = new BridgeProvider(this.dappSettings.storage, wallet);
      }
      provider.listen(this.walletEventsListener.bind(this));
      return provider;
    }
  }, {
    key: "walletEventsListener",
    value: function walletEventsListener(e) {
      switch (e.event) {
        case 'connect':
          this.onWalletConnected(e.payload);
          break;
        case 'connect_error':
          this.onWalletConnectError(e.payload);
          break;
        case 'disconnect':
          this.onWalletDisconnected('wallet');
      }
    }
  }, {
    key: "onWalletConnected",
    value: function onWalletConnected(connectEvent) {
      var tonAccountItem = connectEvent.items.find(function (item) {
        return item.name === 'ton_addr';
      });
      var tonProofItem = connectEvent.items.find(function (item) {
        return item.name === 'ton_proof';
      });
      if (!tonAccountItem) {
        throw new TonConnectError('ton_addr connection item was not found');
      }
      var wallet = {
        device: connectEvent.device,
        provider: this.provider.type,
        account: {
          address: tonAccountItem.address,
          chain: tonAccountItem.network,
          walletStateInit: tonAccountItem.walletStateInit,
          publicKey: tonAccountItem.publicKey
        }
      };
      if (tonProofItem) {
        wallet.connectItems = {
          tonProof: tonProofItem
        };
      }
      this.wallet = wallet;
      this.tracker.trackConnectionCompleted(wallet);
    }
  }, {
    key: "onWalletConnectError",
    value: function onWalletConnectError(connectEventError) {
      var error = connectErrorsParser.parseError(connectEventError);
      this.statusChangeErrorSubscriptions.forEach(function (errorsHandler) {
        return errorsHandler(error);
      });
      logDebug$1(error);
      this.tracker.trackConnectionError(connectEventError.message, connectEventError.code);
      if (error instanceof ManifestNotFoundError || error instanceof ManifestContentErrorError) {
        logError$1(error);
        throw error;
      }
    }
  }, {
    key: "onWalletDisconnected",
    value: function onWalletDisconnected(scope) {
      this.tracker.trackDisconnection(this.wallet, scope);
      this.wallet = null;
    }
  }, {
    key: "checkConnection",
    value: function checkConnection() {
      if (!this.connected) {
        throw new WalletNotConnectedError();
      }
    }
  }, {
    key: "createConnectRequest",
    value: function createConnectRequest(request) {
      var items = [{
        name: 'ton_addr'
      }];
      if (request === null || request === void 0 ? void 0 : request.tonProof) {
        items.push({
          name: 'ton_proof',
          payload: request.tonProof
        });
      }
      return {
        manifestUrl: this.dappSettings.manifestUrl,
        items: items
      };
    }
  }], [{
    key: "getWallets",
    value: function getWallets() {
      return this.walletsList.getWallets();
    }
  }]);
}();
TonConnect.walletsList = new WalletsListManager();
/**
 * Check if specified wallet is injected and available to use with the app.
 * @param walletJSKey target wallet's js bridge key.
 */
TonConnect.isWalletInjected = function (walletJSKey) {
  return InjectedProvider.isWalletInjected(walletJSKey);
};
/**
 * Check if the app is opened inside specified wallet's browser.
 * @param walletJSKey target wallet's js bridge key.
 */
TonConnect.isInsideWalletBrowser = function (walletJSKey) {
  return InjectedProvider.isInsideWalletBrowser(walletJSKey);
};
var noBounceableTag = 0x51;
var testOnlyTag = 0x80;
/**
 * Converts raw TON address to no-bounceable user-friendly format. [See details]{@link https://ton.org/docs/learn/overviews/addresses#user-friendly-address}
 * @param hexAddress raw TON address formatted as "0:<hex string without 0x>".
 * @param [testOnly=false] convert address to test-only form. [See details]{@link https://ton.org/docs/learn/overviews/addresses#user-friendly-address}
 */
function toUserFriendlyAddress(hexAddress) {
  var testOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var _parseHexAddress = parseHexAddress(hexAddress),
    wc = _parseHexAddress.wc,
    hex = _parseHexAddress.hex;
  var tag = noBounceableTag;
  if (testOnly) {
    tag |= testOnlyTag;
  }
  var addr = new Int8Array(34);
  addr[0] = tag;
  addr[1] = wc;
  addr.set(hex, 2);
  var addressWithChecksum = new Uint8Array(36);
  addressWithChecksum.set(addr);
  addressWithChecksum.set(crc16$3(addr), 34);
  var addressBase64 = Base64.encode(addressWithChecksum);
  return addressBase64.replace(/\+/g, '-').replace(/\//g, '_');
}
function parseHexAddress(hexAddress) {
  if (!hexAddress.includes(':')) {
    throw new WrongAddressError("Wrong address ".concat(hexAddress, ". Address must include \":\"."));
  }
  var parts = hexAddress.split(':');
  if (parts.length !== 2) {
    throw new WrongAddressError("Wrong address ".concat(hexAddress, ". Address must include \":\" only once."));
  }
  var wc = parseInt(parts[0]);
  if (wc !== 0 && wc !== -1) {
    throw new WrongAddressError("Wrong address ".concat(hexAddress, ". WC must be eq 0 or -1, but ").concat(wc, " received."));
  }
  var hex = parts[1];
  if ((hex === null || hex === void 0 ? void 0 : hex.length) !== 64) {
    throw new WrongAddressError("Wrong address ".concat(hexAddress, ". Hex part must be 64bytes length, but ").concat(hex === null || hex === void 0 ? void 0 : hex.length, " received."));
  }
  return {
    wc: wc,
    hex: hexToBytes$7(hex)
  };
}
function crc16$3(data) {
  var poly = 0x1021;
  var reg = 0;
  var message = new Uint8Array(data.length + 2);
  message.set(data);
  var _iterator = _createForOfIteratorHelper(message),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _byte = _step.value;
      var mask = 0x80;
      while (mask > 0) {
        reg <<= 1;
        if (_byte & mask) {
          reg += 1;
        }
        mask >>= 1;
        if (reg > 0xffff) {
          reg &= 0xffff;
          reg ^= poly;
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return new Uint8Array([Math.floor(reg / 256), reg % 256]);
}
var toByteMap = {};
for (var ord$1 = 0; ord$1 <= 0xff; ord$1++) {
  var s$1 = ord$1.toString(16);
  if (s$1.length < 2) {
    s$1 = '0' + s$1;
  }
  toByteMap[s$1] = ord$1;
}
function hexToBytes$7(hex) {
  hex = hex.toLowerCase();
  var length2 = hex.length;
  if (length2 % 2 !== 0) {
    throw new ParseHexError('Hex string must have length a multiple of 2: ' + hex);
  }
  var length = length2 / 2;
  var result = new Uint8Array(length);
  for (var i = 0; i < length; i++) {
    var doubled = i * 2;
    var hexSubstring = hex.substring(doubled, doubled + 2);
    if (!toByteMap.hasOwnProperty(hexSubstring)) {
      throw new ParseHexError('Invalid hex character: ' + hexSubstring);
    }
    result[i] = toByteMap[hexSubstring];
  }
  return result;
}

var uaParser = {exports: {}};

(function (module, exports) {
  /////////////////////////////////////////////////////////////////////////////////
  /* UAParser.js v1.0.38
     Copyright © 2012-2021 Faisal Salman <f@faisalman.com>
     MIT License */ /*
                    Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.
                    Supports browser & node.js environment. 
                    Demo   : https://faisalman.github.io/ua-parser-js
                    Source : https://github.com/faisalman/ua-parser-js */
  /////////////////////////////////////////////////////////////////////////////////

  (function (window, undefined$1) {

    //////////////
    // Constants
    /////////////
    var LIBVERSION = '1.0.38',
      EMPTY = '',
      UNKNOWN = '?',
      FUNC_TYPE = 'function',
      UNDEF_TYPE = 'undefined',
      OBJ_TYPE = 'object',
      STR_TYPE = 'string',
      MAJOR = 'major',
      MODEL = 'model',
      NAME = 'name',
      TYPE = 'type',
      VENDOR = 'vendor',
      VERSION = 'version',
      ARCHITECTURE = 'architecture',
      CONSOLE = 'console',
      MOBILE = 'mobile',
      TABLET = 'tablet',
      SMARTTV = 'smarttv',
      WEARABLE = 'wearable',
      EMBEDDED = 'embedded',
      UA_MAX_LENGTH = 500;
    var AMAZON = 'Amazon',
      APPLE = 'Apple',
      ASUS = 'ASUS',
      BLACKBERRY = 'BlackBerry',
      BROWSER = 'Browser',
      CHROME = 'Chrome',
      EDGE = 'Edge',
      FIREFOX = 'Firefox',
      GOOGLE = 'Google',
      HUAWEI = 'Huawei',
      LG = 'LG',
      MICROSOFT = 'Microsoft',
      MOTOROLA = 'Motorola',
      OPERA = 'Opera',
      SAMSUNG = 'Samsung',
      SHARP = 'Sharp',
      SONY = 'Sony',
      XIAOMI = 'Xiaomi',
      ZEBRA = 'Zebra',
      FACEBOOK = 'Facebook',
      CHROMIUM_OS = 'Chromium OS',
      MAC_OS = 'Mac OS';

    ///////////
    // Helper
    //////////

    var extend = function extend(regexes, extensions) {
        var mergedRegexes = {};
        for (var i in regexes) {
          if (extensions[i] && extensions[i].length % 2 === 0) {
            mergedRegexes[i] = extensions[i].concat(regexes[i]);
          } else {
            mergedRegexes[i] = regexes[i];
          }
        }
        return mergedRegexes;
      },
      enumerize = function enumerize(arr) {
        var enums = {};
        for (var i = 0; i < arr.length; i++) {
          enums[arr[i].toUpperCase()] = arr[i];
        }
        return enums;
      },
      has = function has(str1, str2) {
        return _typeof(str1) === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
      },
      lowerize = function lowerize(str) {
        return str.toLowerCase();
      },
      majorize = function majorize(version) {
        return _typeof(version) === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split('.')[0] : undefined$1;
      },
      trim = function trim(str, len) {
        if (_typeof(str) === STR_TYPE) {
          str = str.replace(/^\s\s*/, EMPTY);
          return _typeof(len) === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
        }
      };

    ///////////////
    // Map helper
    //////////////

    var rgxMapper = function rgxMapper(ua, arrays) {
        var i = 0,
          j,
          k,
          p,
          q,
          matches,
          match;

        // loop through all regexes maps
        while (i < arrays.length && !matches) {
          var regex = arrays[i],
            // even sequence (0,2,4,..)
            props = arrays[i + 1]; // odd sequence (1,3,5,..)
          j = k = 0;

          // try matching uastring with regexes
          while (j < regex.length && !matches) {
            if (!regex[j]) {
              break;
            }
            matches = regex[j++].exec(ua);
            if (!!matches) {
              for (p = 0; p < props.length; p++) {
                match = matches[++k];
                q = props[p];
                // check if given property is actually array
                if (_typeof(q) === OBJ_TYPE && q.length > 0) {
                  if (q.length === 2) {
                    if (_typeof(q[1]) == FUNC_TYPE) {
                      // assign modified match
                      this[q[0]] = q[1].call(this, match);
                    } else {
                      // assign given value, ignore regex match
                      this[q[0]] = q[1];
                    }
                  } else if (q.length === 3) {
                    // check whether function or regex
                    if (_typeof(q[1]) === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                      // call function (usually string mapper)
                      this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined$1;
                    } else {
                      // sanitize match using given regex
                      this[q[0]] = match ? match.replace(q[1], q[2]) : undefined$1;
                    }
                  } else if (q.length === 4) {
                    this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined$1;
                  }
                } else {
                  this[q] = match ? match : undefined$1;
                }
              }
            }
          }
          i += 2;
        }
      },
      strMapper = function strMapper(str, map) {
        for (var i in map) {
          // check if current value is array
          if (_typeof(map[i]) === OBJ_TYPE && map[i].length > 0) {
            for (var j = 0; j < map[i].length; j++) {
              if (has(map[i][j], str)) {
                return i === UNKNOWN ? undefined$1 : i;
              }
            }
          } else if (has(map[i], str)) {
            return i === UNKNOWN ? undefined$1 : i;
          }
        }
        return str;
      };

    ///////////////
    // String map
    //////////////

    // Safari < 3.0
    var oldSafariMap = {
        '1.0': '/8',
        '1.2': '/1',
        '1.3': '/3',
        '2.0': '/412',
        '2.0.2': '/416',
        '2.0.3': '/417',
        '2.0.4': '/419',
        '?': '/'
      },
      windowsVersionMap = {
        'ME': '4.90',
        'NT 3.11': 'NT3.51',
        'NT 4.0': 'NT4.0',
        '2000': 'NT 5.0',
        'XP': ['NT 5.1', 'NT 5.2'],
        'Vista': 'NT 6.0',
        '7': 'NT 6.1',
        '8': 'NT 6.2',
        '8.1': 'NT 6.3',
        '10': ['NT 6.4', 'NT 10.0'],
        'RT': 'ARM'
      };

    //////////////
    // Regex map
    /////////////

    var regexes = {
      browser: [[/\b(?:crmo|crios)\/([\w\.]+)/i // Chrome for Android/iOS
      ], [VERSION, [NAME, 'Chrome']], [/edg(?:e|ios|a)?\/([\w\.]+)/i // Microsoft Edge
      ], [VERSION, [NAME, 'Edge']], [
      // Presto based
      /(opera mini)\/([-\w\.]+)/i,
      // Opera Mini
      /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
      // Opera Mobi/Tablet
      /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i // Opera
      ], [NAME, VERSION], [/opios[\/ ]+([\w\.]+)/i // Opera mini on iphone >= 8.0
      ], [VERSION, [NAME, OPERA + ' Mini']], [/\bop(?:rg)?x\/([\w\.]+)/i // Opera GX
      ], [VERSION, [NAME, OPERA + ' GX']], [/\bopr\/([\w\.]+)/i // Opera Webkit
      ], [VERSION, [NAME, OPERA]], [
      // Mixed
      /\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i // Baidu
      ], [VERSION, [NAME, 'Baidu']], [/(kindle)\/([\w\.]+)/i,
      // Kindle
      /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
      // Lunascape/Maxthon/Netfront/Jasmine/Blazer
      // Trident based
      /(avant|iemobile|slim)\s?(?:browser)?[\/ ]?([\w\.]*)/i,
      // Avant/IEMobile/SlimBrowser
      /(?:ms|\()(ie) ([\w\.]+)/i,
      // Internet Explorer

      // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
      /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
      // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
      /(heytap|ovi)browser\/([\d\.]+)/i,
      // Heytap/Ovi
      /(weibo)__([\d\.]+)/i // Weibo
      ], [NAME, VERSION], [/\bddg\/([\w\.]+)/i // DuckDuckGo
      ], [VERSION, [NAME, 'DuckDuckGo']], [/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i // UCBrowser
      ], [VERSION, [NAME, 'UC' + BROWSER]], [/microm.+\bqbcore\/([\w\.]+)/i,
      // WeChat Desktop for Windows Built-in Browser
      /\bqbcore\/([\w\.]+).+microm/i, /micromessenger\/([\w\.]+)/i // WeChat
      ], [VERSION, [NAME, 'WeChat']], [/konqueror\/([\w\.]+)/i // Konqueror
      ], [VERSION, [NAME, 'Konqueror']], [/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i // IE11
      ], [VERSION, [NAME, 'IE']], [/ya(?:search)?browser\/([\w\.]+)/i // Yandex
      ], [VERSION, [NAME, 'Yandex']], [/slbrowser\/([\w\.]+)/i // Smart Lenovo Browser
      ], [VERSION, [NAME, 'Smart Lenovo ' + BROWSER]], [/(avast|avg)\/([\w\.]+)/i // Avast/AVG Secure Browser
      ], [[NAME, /(.+)/, '$1 Secure ' + BROWSER], VERSION], [/\bfocus\/([\w\.]+)/i // Firefox Focus
      ], [VERSION, [NAME, FIREFOX + ' Focus']], [/\bopt\/([\w\.]+)/i // Opera Touch
      ], [VERSION, [NAME, OPERA + ' Touch']], [/coc_coc\w+\/([\w\.]+)/i // Coc Coc Browser
      ], [VERSION, [NAME, 'Coc Coc']], [/dolfin\/([\w\.]+)/i // Dolphin
      ], [VERSION, [NAME, 'Dolphin']], [/coast\/([\w\.]+)/i // Opera Coast
      ], [VERSION, [NAME, OPERA + ' Coast']], [/miuibrowser\/([\w\.]+)/i // MIUI Browser
      ], [VERSION, [NAME, 'MIUI ' + BROWSER]], [/fxios\/([-\w\.]+)/i // Firefox for iOS
      ], [VERSION, [NAME, FIREFOX]], [/\bqihu|(qi?ho?o?|360)browser/i // 360
      ], [[NAME, '360 ' + BROWSER]], [/(oculus|sailfish|huawei|vivo)browser\/([\w\.]+)/i], [[NAME, /(.+)/, '$1 ' + BROWSER], VERSION], [
      // Oculus/Sailfish/HuaweiBrowser/VivoBrowser
      /samsungbrowser\/([\w\.]+)/i // Samsung Internet
      ], [VERSION, [NAME, SAMSUNG + ' Internet']], [/(comodo_dragon)\/([\w\.]+)/i // Comodo Dragon
      ], [[NAME, /_/g, ' '], VERSION], [/metasr[\/ ]?([\d\.]+)/i // Sogou Explorer
      ], [VERSION, [NAME, 'Sogou Explorer']], [/(sogou)mo\w+\/([\d\.]+)/i // Sogou Mobile
      ], [[NAME, 'Sogou Mobile'], VERSION], [/(electron)\/([\w\.]+) safari/i,
      // Electron-based App
      /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
      // Tesla
      /m?(qqbrowser|2345Explorer)[\/ ]?([\w\.]+)/i // QQBrowser/2345 Browser
      ], [NAME, VERSION], [/(lbbrowser)/i,
      // LieBao Browser
      /\[(linkedin)app\]/i // LinkedIn App for iOS & Android
      ], [NAME], [
      // WebView
      /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i // Facebook App for iOS & Android
      ], [[NAME, FACEBOOK], VERSION], [/(Klarna)\/([\w\.]+)/i,
      // Klarna Shopping Browser for iOS & Android
      /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
      // Kakao App
      /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
      // Naver InApp
      /safari (line)\/([\w\.]+)/i,
      // Line App for iOS
      /\b(line)\/([\w\.]+)\/iab/i,
      // Line App for Android
      /(alipay)client\/([\w\.]+)/i,
      // Alipay
      /(twitter)(?:and| f.+e\/([\w\.]+))/i,
      // Twitter
      /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i // Chromium/Instagram/Snapchat
      ], [NAME, VERSION], [/\bgsa\/([\w\.]+) .*safari\//i // Google Search Appliance on iOS
      ], [VERSION, [NAME, 'GSA']], [/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i // TikTok
      ], [VERSION, [NAME, 'TikTok']], [/headlesschrome(?:\/([\w\.]+)| )/i // Chrome Headless
      ], [VERSION, [NAME, CHROME + ' Headless']], [/ wv\).+(chrome)\/([\w\.]+)/i // Chrome WebView
      ], [[NAME, CHROME + ' WebView'], VERSION], [/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i // Android Browser
      ], [VERSION, [NAME, 'Android ' + BROWSER]], [/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i // Chrome/OmniWeb/Arora/Tizen/Nokia
      ], [NAME, VERSION], [/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i // Mobile Safari
      ], [VERSION, [NAME, 'Mobile Safari']], [/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i // Safari & Safari Mobile
      ], [VERSION, NAME], [/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i // Safari < 3.0
      ], [NAME, [VERSION, strMapper, oldSafariMap]], [/(webkit|khtml)\/([\w\.]+)/i], [NAME, VERSION], [
      // Gecko based
      /(navigator|netscape\d?)\/([-\w\.]+)/i // Netscape
      ], [[NAME, 'Netscape'], VERSION], [/mobile vr; rv:([\w\.]+)\).+firefox/i // Firefox Reality
      ], [VERSION, [NAME, FIREFOX + ' Reality']], [/ekiohf.+(flow)\/([\w\.]+)/i,
      // Flow
      /(swiftfox)/i,
      // Swiftfox
      /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
      // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
      /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
      // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
      /(firefox)\/([\w\.]+)/i,
      // Other Firefox-based
      /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
      // Mozilla

      // Other
      /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
      // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
      /(links) \(([\w\.]+)/i,
      // Links
      /panasonic;(viera)/i // Panasonic Viera
      ], [NAME, VERSION], [/(cobalt)\/([\w\.]+)/i // Cobalt
      ], [NAME, [VERSION, /master.|lts./, ""]]],
      cpu: [[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i // AMD64 (x64)
      ], [[ARCHITECTURE, 'amd64']], [/(ia32(?=;))/i // IA32 (quicktime)
      ], [[ARCHITECTURE, lowerize]], [/((?:i[346]|x)86)[;\)]/i // IA32 (x86)
      ], [[ARCHITECTURE, 'ia32']], [/\b(aarch64|arm(v?8e?l?|_?64))\b/i // ARM64
      ], [[ARCHITECTURE, 'arm64']], [/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i // ARMHF
      ], [[ARCHITECTURE, 'armhf']], [
      // PocketPC mistakenly identified as PowerPC
      /windows (ce|mobile); ppc;/i], [[ARCHITECTURE, 'arm']], [/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i // PowerPC
      ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [/(sun4\w)[;\)]/i // SPARC
      ], [[ARCHITECTURE, 'sparc']], [/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
      // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
      ], [[ARCHITECTURE, lowerize]]],
      device: [[
      //////////////////////////
      // MOBILES & TABLETS
      /////////////////////////

      // Samsung
      /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [/\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i, /samsung[- ]([-\w]+)/i, /sec-(sgh\w+)/i], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [
      // Apple
      /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i // iPod/iPhone
      ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [/\((ipad);[-\w\),; ]+apple/i,
      // iPad
      /applecoremedia\/[\w\.]+ \((ipad)/i, /\b(ipad)\d\d?,\d\d?[;\]].+ios/i], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [/(macintosh);/i], [MODEL, [VENDOR, APPLE]], [
      // Sharp
      /\b(sh-?[altvz]?\d\d[a-ekm]?)/i], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [
      // Huawei
      /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [/(?:huawei|honor)([-\w ]+)[;\)]/i, /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [
      // Xiaomi
      /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,
      // Xiaomi POCO
      /\b; (\w+) build\/hm\1/i,
      // Xiaomi Hongmi 'numeric' models
      /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
      // Xiaomi Hongmi
      /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
      // Xiaomi Redmi
      /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,
      // Xiaomi Redmi 'numeric' models
      /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i // Xiaomi Mi
      ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [/oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,
      // Redmi Pad
      /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i // Mi Pad tablets
      ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [
      // OPPO
      /; (\w+) bui.+ oppo/i, /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [/\b(opd2\d{3}a?) bui/i], [MODEL, [VENDOR, 'OPPO'], [TYPE, TABLET]], [
      // Vivo
      /vivo (\w+)(?: bui|\))/i, /\b(v[12]\d{3}\w?[at])(?: bui|;)/i], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [
      // Realme
      /\b(rmx[1-3]\d{3})(?: bui|;|\))/i], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [
      // Motorola
      /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i, /\bmot(?:orola)?[- ](\w*)/i, /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [/\b(mz60\d|xoom[2 ]{0,2}) build\//i], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [
      // LG
      /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i, /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i, /\blg-?([\d\w]+) bui/i], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [
      // Lenovo
      /(ideatab[-\w ]+)/i, /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [
      // Nokia
      /(?:maemo|nokia).*(n900|lumia \d+)/i, /nokia[-_ ]?([-\w\.]*)/i], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [
      // Google
      /(pixel c)\b/i // Google Pixel C
      ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i // Google Pixel
      ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [
      // Sony
      /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [
      // OnePlus
      / (kb2005|in20[12]5|be20[12][59])\b/i, /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [
      // Amazon
      /(alexa)webm/i, /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,
      // Kindle Fire without Silk / Echo Show
      /(kf[a-z]+)( bui|\)).+silk\//i // Kindle Fire HD
      ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i // Fire Phone
      ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [
      // BlackBerry
      /(playbook);[-\w\),; ]+(rim)/i // BlackBerry PlayBook
      ], [MODEL, VENDOR, [TYPE, TABLET]], [/\b((?:bb[a-f]|st[hv])100-\d)/i, /\(bb10; (\w+)/i // BlackBerry 10
      ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [
      // Asus
      /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [
      // HTC
      /(nexus 9)/i // HTC Nexus 9
      ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
      // HTC

      // ZTE
      /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i, /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
      ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [
      // Acer
      /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [
      // Meizu
      /droid.+; (m[1-5] note) bui/i, /\bmz-([-\w]{2,})/i], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [
      // Ulefone
      /; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i], [MODEL, [VENDOR, 'Ulefone'], [TYPE, MOBILE]], [
      // MIXED
      /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\w]*)/i,
      // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
      /(hp) ([\w ]+\w)/i,
      // HP iPAQ
      /(asus)-?(\w+)/i,
      // Asus
      /(microsoft); (lumia[\w ]+)/i,
      // Microsoft Lumia
      /(lenovo)[-_ ]?([-\w]+)/i,
      // Lenovo
      /(jolla)/i,
      // Jolla
      /(oppo) ?([\w ]+) bui/i // OPPO
      ], [VENDOR, MODEL, [TYPE, MOBILE]], [/(kobo)\s(ereader|touch)/i,
      // Kobo
      /(archos) (gamepad2?)/i,
      // Archos
      /(hp).+(touchpad(?!.+tablet)|tablet)/i,
      // HP TouchPad
      /(kindle)\/([\w\.]+)/i,
      // Kindle
      /(nook)[\w ]+build\/(\w+)/i,
      // Nook
      /(dell) (strea[kpr\d ]*[\dko])/i,
      // Dell Streak
      /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
      // Le Pan Tablets
      /(trinity)[- ]*(t\d{3}) bui/i,
      // Trinity Tablets
      /(gigaset)[- ]+(q\w{1,9}) bui/i,
      // Gigaset Tablets
      /(vodafone) ([\w ]+)(?:\)| bui)/i // Vodafone
      ], [VENDOR, MODEL, [TYPE, TABLET]], [/(surface duo)/i // Surface Duo
      ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [/droid [\d\.]+; (fp\du?)(?: b|\))/i // Fairphone
      ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [/(u304aa)/i // AT&T
      ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [/\bsie-(\w*)/i // Siemens
      ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [/\b(rct\w+) b/i // RCA Tablets
      ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [/\b(venue[\d ]{2,7}) b/i // Dell Venue Tablets
      ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [/\b(q(?:mv|ta)\w+) b/i // Verizon Tablet
      ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i // Barnes & Noble Tablet
      ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [/\b(tm\d{3}\w+) b/i], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [/\b(k88) b/i // ZTE K Series Tablet
      ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [/\b(nx\d{3}j) b/i // ZTE Nubia
      ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [/\b(gen\d{3}) b.+49h/i // Swiss GEN Mobile
      ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [/\b(zur\d{3}) b/i // Swiss ZUR Tablet
      ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [/\b((zeki)?tb.*\b) b/i // Zeki Tablets
      ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [/\b([yr]\d{2}) b/i, /\b(dragon[- ]+touch |dt)(\w{5}) b/i // Dragon Touch Tablet
      ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [/\b(ns-?\w{0,9}) b/i // Insignia Tablets
      ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [/\b((nxa|next)-?\w{0,9}) b/i // NextBook Tablets
      ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i // Voice Xtreme Phones
      ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [/\b(lvtel\-)?(v1[12]) b/i // LvTel Phones
      ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [/\b(ph-1) /i // Essential PH-1
      ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [/\b(v(100md|700na|7011|917g).*\b) b/i // Envizen Tablets
      ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [/\b(trio[-\w\. ]+) b/i // MachSpeed Tablets
      ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [/\btu_(1491) b/i // Rotor Tablets
      ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [/(shield[\w ]+) b/i // Nvidia Shield Tablets
      ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [/(sprint) (\w+)/i // Sprint Phones
      ], [VENDOR, MODEL, [TYPE, MOBILE]], [/(kin\.[onetw]{3})/i // Microsoft Kin
      ], [[MODEL, /\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i // Zebra
      ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [
      ///////////////////
      // SMARTTVS
      ///////////////////

      /smart-tv.+(samsung)/i // Samsung
      ], [VENDOR, [TYPE, SMARTTV]], [/hbbtv.+maple;(\d+)/i], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i // LG SmartTV
      ], [[VENDOR, LG], [TYPE, SMARTTV]], [/(apple) ?tv/i // Apple TV
      ], [VENDOR, [MODEL, APPLE + ' TV'], [TYPE, SMARTTV]], [/crkey/i // Google Chromecast
      ], [[MODEL, CHROME + 'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [/droid.+aft(\w+)( bui|\))/i // Fire TV
      ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [/\(dtv[\);].+(aquos)/i, /(aquos-tv[\w ]+)\)/i // Sharp
      ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]], [/(bravia[\w ]+)( bui|\))/i // Sony
      ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [/(mitv-\w{5}) bui/i // Xiaomi
      ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [/Hbbtv.*(technisat) (.*);/i // TechniSAT
      ], [VENDOR, MODEL, [TYPE, SMARTTV]], [/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
      // Roku
      /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i // HbbTV devices
      ], [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]], [/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i // SmartTV from Unidentified Vendors
      ], [[TYPE, SMARTTV]], [
      ///////////////////
      // CONSOLES
      ///////////////////

      /(ouya)/i,
      // Ouya
      /(nintendo) ([wids3utch]+)/i // Nintendo
      ], [VENDOR, MODEL, [TYPE, CONSOLE]], [/droid.+; (shield) bui/i // Nvidia
      ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [/(playstation [345portablevi]+)/i // Playstation
      ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [/\b(xbox(?: one)?(?!; xbox))[\); ]/i // Microsoft Xbox
      ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [
      ///////////////////
      // WEARABLES
      ///////////////////

      /((pebble))app/i // Pebble
      ], [VENDOR, MODEL, [TYPE, WEARABLE]], [/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i // Apple Watch
      ], [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]], [/droid.+; (glass) \d/i // Google Glass
      ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [/droid.+; (wt63?0{2,3})\)/i], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [/(quest( \d| pro)?)/i // Oculus Quest
      ], [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]], [
      ///////////////////
      // EMBEDDED
      ///////////////////

      /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i // Tesla
      ], [VENDOR, [TYPE, EMBEDDED]], [/(aeobc)\b/i // Echo Dot
      ], [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]], [
      ////////////////////
      // MIXED (GENERIC)
      ///////////////////

      /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i // Android Phones from Unidentified Vendors
      ], [MODEL, [TYPE, MOBILE]], [/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i // Android Tablets from Unidentified Vendors
      ], [MODEL, [TYPE, TABLET]], [/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i // Unidentifiable Tablet
      ], [[TYPE, TABLET]], [/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i // Unidentifiable Mobile
      ], [[TYPE, MOBILE]], [/(android[-\w\. ]{0,9});.+buil/i // Generic Android Device
      ], [MODEL, [VENDOR, 'Generic']]],
      engine: [[/windows.+ edge\/([\w\.]+)/i // EdgeHTML
      ], [VERSION, [NAME, EDGE + 'HTML']], [/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i // Blink
      ], [VERSION, [NAME, 'Blink']], [/(presto)\/([\w\.]+)/i,
      // Presto
      /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
      // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
      /ekioh(flow)\/([\w\.]+)/i,
      // Flow
      /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
      // KHTML/Tasman/Links
      /(icab)[\/ ]([23]\.[\d\.]+)/i,
      // iCab
      /\b(libweb)/i], [NAME, VERSION], [/rv\:([\w\.]{1,9})\b.+(gecko)/i // Gecko
      ], [VERSION, NAME]],
      os: [[
      // Windows
      /microsoft (windows) (vista|xp)/i // Windows (iTunes)
      ], [NAME, VERSION], [/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i // Windows Phone
      ], [NAME, [VERSION, strMapper, windowsVersionMap]], [/windows nt 6\.2; (arm)/i,
      // Windows RT
      /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i, /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i], [[VERSION, strMapper, windowsVersionMap], [NAME, 'Windows']], [
      // iOS/macOS
      /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
      // iOS
      /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i, /cfnetwork\/.+darwin/i], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [/(mac os x) ?([\w\. ]*)/i, /(macintosh|mac_powerpc\b)(?!.+haiku)/i // Mac OS
      ], [[NAME, MAC_OS], [VERSION, /_/g, '.']], [
      // Mobile OSes
      /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i // Android-x86/HarmonyOS
      ], [VERSION, NAME], [
      // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS
      /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i, /(blackberry)\w*\/([\w\.]*)/i,
      // Blackberry
      /(tizen|kaios)[\/ ]([\w\.]+)/i,
      // Tizen/KaiOS
      /\((series40);/i // Series 40
      ], [NAME, VERSION], [/\(bb(10);/i // BlackBerry 10
      ], [VERSION, [NAME, BLACKBERRY]], [/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i // Symbian
      ], [VERSION, [NAME, 'Symbian']], [/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i // Firefox OS
      ], [VERSION, [NAME, FIREFOX + ' OS']], [/web0s;.+rt(tv)/i, /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i // WebOS
      ], [VERSION, [NAME, 'webOS']], [/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i // watchOS
      ], [VERSION, [NAME, 'watchOS']], [
      // Google Chromecast
      /crkey\/([\d\.]+)/i // Google Chromecast
      ], [VERSION, [NAME, CHROME + 'cast']], [/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i // Chromium OS
      ], [[NAME, CHROMIUM_OS], VERSION], [
      // Smart TVs
      /panasonic;(viera)/i,
      // Panasonic Viera
      /(netrange)mmh/i,
      // Netrange
      /(nettv)\/(\d+\.[\w\.]+)/i,
      // NetTV

      // Console
      /(nintendo|playstation) ([wids345portablevuch]+)/i,
      // Nintendo/Playstation
      /(xbox); +xbox ([^\);]+)/i,
      // Microsoft Xbox (360, One, X, S, Series X, Series S)

      // Other
      /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
      // Joli/Palm
      /(mint)[\/\(\) ]?(\w*)/i,
      // Mint
      /(mageia|vectorlinux)[; ]/i,
      // Mageia/VectorLinux
      /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
      // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
      /(hurd|linux) ?([\w\.]*)/i,
      // Hurd/Linux
      /(gnu) ?([\w\.]*)/i,
      // GNU
      /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
      // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
      /(haiku) (\w+)/i // Haiku
      ], [NAME, VERSION], [/(sunos) ?([\w\.\d]*)/i // Solaris
      ], [[NAME, 'Solaris'], VERSION], [/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
      // Solaris
      /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
      // AIX
      /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
      // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS
      /(unix) ?([\w\.]*)/i // UNIX
      ], [NAME, VERSION]]
    };

    /////////////////
    // Constructor
    ////////////////

    var _UAParser = function UAParser(ua, extensions) {
      if (_typeof(ua) === OBJ_TYPE) {
        extensions = ua;
        ua = undefined$1;
      }
      if (!(this instanceof _UAParser)) {
        return new _UAParser(ua, extensions).getResult();
      }
      var _navigator = _typeof(window) !== UNDEF_TYPE && window.navigator ? window.navigator : undefined$1;
      var _ua = ua || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);
      var _uach = _navigator && _navigator.userAgentData ? _navigator.userAgentData : undefined$1;
      var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
      var _isSelfNav = _navigator && _navigator.userAgent == _ua;
      this.getBrowser = function () {
        var _browser = {};
        _browser[NAME] = undefined$1;
        _browser[VERSION] = undefined$1;
        rgxMapper.call(_browser, _ua, _rgxmap.browser);
        _browser[MAJOR] = majorize(_browser[VERSION]);
        // Brave-specific detection
        if (_isSelfNav && _navigator && _navigator.brave && _typeof(_navigator.brave.isBrave) == FUNC_TYPE) {
          _browser[NAME] = 'Brave';
        }
        return _browser;
      };
      this.getCPU = function () {
        var _cpu = {};
        _cpu[ARCHITECTURE] = undefined$1;
        rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
        return _cpu;
      };
      this.getDevice = function () {
        var _device = {};
        _device[VENDOR] = undefined$1;
        _device[MODEL] = undefined$1;
        _device[TYPE] = undefined$1;
        rgxMapper.call(_device, _ua, _rgxmap.device);
        if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
          _device[TYPE] = MOBILE;
        }
        // iPadOS-specific detection: identified as Mac, but has some iOS-only properties
        if (_isSelfNav && _device[MODEL] == 'Macintosh' && _navigator && _typeof(_navigator.standalone) !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
          _device[MODEL] = 'iPad';
          _device[TYPE] = TABLET;
        }
        return _device;
      };
      this.getEngine = function () {
        var _engine = {};
        _engine[NAME] = undefined$1;
        _engine[VERSION] = undefined$1;
        rgxMapper.call(_engine, _ua, _rgxmap.engine);
        return _engine;
      };
      this.getOS = function () {
        var _os = {};
        _os[NAME] = undefined$1;
        _os[VERSION] = undefined$1;
        rgxMapper.call(_os, _ua, _rgxmap.os);
        if (_isSelfNav && !_os[NAME] && _uach && _uach.platform && _uach.platform != 'Unknown') {
          _os[NAME] = _uach.platform.replace(/chrome os/i, CHROMIUM_OS).replace(/macos/i, MAC_OS); // backward compatibility
        }
        return _os;
      };
      this.getResult = function () {
        return {
          ua: this.getUA(),
          browser: this.getBrowser(),
          engine: this.getEngine(),
          os: this.getOS(),
          device: this.getDevice(),
          cpu: this.getCPU()
        };
      };
      this.getUA = function () {
        return _ua;
      };
      this.setUA = function (ua) {
        _ua = _typeof(ua) === STR_TYPE && ua.length > UA_MAX_LENGTH ? trim(ua, UA_MAX_LENGTH) : ua;
        return this;
      };
      this.setUA(_ua);
      return this;
    };
    _UAParser.VERSION = LIBVERSION;
    _UAParser.BROWSER = enumerize([NAME, VERSION, MAJOR]);
    _UAParser.CPU = enumerize([ARCHITECTURE]);
    _UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
    _UAParser.ENGINE = _UAParser.OS = enumerize([NAME, VERSION]);

    ///////////
    // Export
    //////////

    // check js environment
    {
      // nodejs env
      if (module.exports) {
        exports = module.exports = _UAParser;
      }
      exports.UAParser = _UAParser;
    }

    // jQuery/Zepto specific (optional)
    // Note:
    //   In AMD env the global scope should be kept clean, but jQuery is an exception.
    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
    //   and we should catch that.
    var $ = _typeof(window) !== UNDEF_TYPE && (window.jQuery || window.Zepto);
    if ($ && !$.ua) {
      var parser = new _UAParser();
      $.ua = parser.getResult();
      $.ua.get = function () {
        return parser.getUA();
      };
      $.ua.set = function (ua) {
        parser.setUA(ua);
        var result = parser.getResult();
        for (var prop in result) {
          $.ua[prop] = result[prop];
        }
      };
    }
  })((typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' ? window : commonjsGlobal);
})(uaParser, uaParser.exports);
var uaParserExports = uaParser.exports;
var UAParser = /*@__PURE__*/getDefaultExportFromCjs(uaParserExports);

var isMergeableObject = function isMergeableObject(value) {
  return isNonNullObject(value) && !isSpecial(value);
};
function isNonNullObject(value) {
  return !!value && _typeof(value) === 'object';
}
function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol["for"];
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol["for"]('react.element') : 0xeac7;
function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}
function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function (element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}
function getMergeFunction(key, options) {
  if (!options.customMerge) {
    return deepmerge;
  }
  var customMerge = options.customMerge(key);
  return typeof customMerge === 'function' ? customMerge : deepmerge;
}
function getEnumerableOwnPropertySymbols(target) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {
    return Object.propertyIsEnumerable.call(target, symbol);
  }) : [];
}
function getKeys(target) {
  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}
function propertyIsOnObject(object, property) {
  try {
    return property in object;
  } catch (_) {
    return false;
  }
}

// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe(target, key) {
  return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
  && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
  && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.
}
function mergeObject(target, source, options) {
  var destination = {};
  if (options.isMergeableObject(target)) {
    getKeys(target).forEach(function (key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
  }
  getKeys(source).forEach(function (key) {
    if (propertyIsUnsafe(target, key)) {
      return;
    }
    if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
      destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    } else {
      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    }
  });
  return destination;
}
function deepmerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject;
  // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
  // implementations can use it. The caller may not replace it.
  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}
deepmerge.all = function deepmergeAll(array, options) {
  if (!Array.isArray(array)) {
    throw new Error('first argument should be an array');
  }
  return array.reduce(function (prev, next) {
    return deepmerge(prev, next, options);
  }, {});
};
var deepmerge_1 = deepmerge;
var cjs = deepmerge_1;
var deepmerge$1 = /*@__PURE__*/getDefaultExportFromCjs(cjs);

var classnames = {exports: {}};

(function (module) {
  /* global define */

  (function () {

    var hasOwn = {}.hasOwnProperty;
    function classNames() {
      var classes = '';
      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        if (arg) {
          classes = appendClass(classes, parseValue(arg));
        }
      }
      return classes;
    }
    function parseValue(arg) {
      if (typeof arg === 'string' || typeof arg === 'number') {
        return arg;
      }
      if (_typeof(arg) !== 'object') {
        return '';
      }
      if (Array.isArray(arg)) {
        return classNames.apply(null, arg);
      }
      if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
        return arg.toString();
      }
      var classes = '';
      for (var key in arg) {
        if (hasOwn.call(arg, key) && arg[key]) {
          classes = appendClass(classes, key);
        }
      }
      return classes;
    }
    function appendClass(value, newClass) {
      if (!newClass) {
        return value;
      }
      if (value) {
        return value + ' ' + newClass;
      }
      return value + newClass;
    }
    if (module.exports) {
      classNames["default"] = classNames;
      module.exports = classNames;
    } else {
      window.classNames = classNames;
    }
  })();
})(classnames);
var classnamesExports = classnames.exports;
var cn = /*@__PURE__*/getDefaultExportFromCjs(classnamesExports);

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39, _templateObject40, _templateObject41, _templateObject42, _templateObject43, _templateObject44, _templateObject45, _templateObject46, _templateObject47, _templateObject48, _templateObject49, _templateObject50, _templateObject51, _templateObject52, _templateObject53, _templateObject54, _templateObject55, _templateObject56, _templateObject57, _templateObject58, _templateObject59, _templateObject60, _templateObject61, _templateObject62, _templateObject63, _templateObject64, _templateObject65, _templateObject66, _templateObject67, _templateObject68, _templateObject69, _templateObject70, _templateObject71, _templateObject72, _templateObject73, _templateObject74, _templateObject75, _templateObject76, _templateObject77, _templateObject78, _templateObject79, _templateObject80, _templateObject81, _templateObject82, _templateObject83, _templateObject84, _templateObject85, _templateObject86, _templateObject87, _templateObject88, _templateObject89, _templateObject90, _templateObject91, _templateObject92, _templateObject93, _templateObject94, _templateObject95, _templateObject96, _templateObject97, _templateObject98, _templateObject99, _templateObject100, _templateObject101, _templateObject102, _templateObject103, _templateObject104, _templateObject105, _templateObject106, _templateObject107, _templateObject108, _templateObject109, _templateObject110, _templateObject111, _templateObject112, _templateObject113, _templateObject114, _templateObject115, _templateObject116, _templateObject117, _templateObject118, _templateObject119, _templateObject120, _templateObject121, _templateObject122, _templateObject123, _templateObject124, _templateObject125, _templateObject126, _templateObject127, _templateObject128, _templateObject129, _templateObject130, _templateObject131, _templateObject132, _templateObject133, _templateObject134, _templateObject135, _templateObject136;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};
var __spreadValues = function __spreadValues(a2, b) {
  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a2, prop, b[prop]);
  if (__getOwnPropSymbols) {
    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a2, prop, b[prop]);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  return a2;
};
var __spreadProps = function __spreadProps(a2, b) {
  return __defProps(a2, __getOwnPropDescs(b));
};
var __publicField = function __publicField(obj, key, value) {
  __defNormalProp(obj, _typeof(key) !== "symbol" ? key + "" : key, value);
  return value;
};
var __async = function __async(__this, __arguments, generator) {
  return new Promise(function (resolve, reject) {
    var fulfilled = function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    };
    var rejected = function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    };
    var step = function step(x) {
      return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    };
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var _a, _b, _c, _d, _e, _f, _g, _h;
var sharedConfig = {};
function setHydrateContext(context) {
  sharedConfig.context = context;
}
var equalFn = function equalFn(a2, b) {
  return a2 === b;
};
var $PROXY = Symbol("solid-proxy");
var $TRACK = Symbol("solid-track");
var signalOptions = {
  equals: equalFn
};
var runEffects = runQueue;
var STALE = 1;
var PENDING = 2;
var UNOWNED = {
  owned: null,
  cleanups: null,
  context: null,
  owner: null
};
var NO_INIT = {};
var Owner = null;
var Transition$1 = null;
var Listener = null;
var Updates = null;
var Effects = null;
var ExecCount = 0;
function createRoot(fn, detachedOwner) {
  var listener = Listener,
    owner = Owner,
    unowned = fn.length === 0,
    root = unowned ? UNOWNED : {
      owned: null,
      cleanups: null,
      context: null,
      owner: detachedOwner === void 0 ? owner : detachedOwner
    },
    updateFn = unowned ? fn : function () {
      return fn(function () {
        return untrack(function () {
          return cleanNode(root);
        });
      });
    };
  Owner = root;
  Listener = null;
  try {
    return runUpdates(updateFn, true);
  } finally {
    Listener = listener;
    Owner = owner;
  }
}
function createSignal(value, options) {
  options = options ? Object.assign({}, signalOptions, options) : signalOptions;
  var s2 = {
    value: value,
    observers: null,
    observerSlots: null,
    comparator: options.equals || void 0
  };
  var setter = function setter(value2) {
    if (typeof value2 === "function") {
      value2 = value2(s2.value);
    }
    return writeSignal(s2, value2);
  };
  return [readSignal.bind(s2), setter];
}
function createComputed(fn, value, options) {
  var c2 = createComputation(fn, value, true, STALE);
  updateComputation(c2);
}
function createRenderEffect(fn, value, options) {
  var c2 = createComputation(fn, value, false, STALE);
  updateComputation(c2);
}
function createEffect(fn, value, options) {
  runEffects = runUserEffects;
  var c2 = createComputation(fn, value, false, STALE);
  c2.user = true;
  Effects ? Effects.push(c2) : updateComputation(c2);
}
function createMemo(fn, value, options) {
  options = options ? Object.assign({}, signalOptions, options) : signalOptions;
  var c2 = createComputation(fn, value, true, 0);
  c2.observers = null;
  c2.observerSlots = null;
  c2.comparator = options.equals || void 0;
  updateComputation(c2);
  return readSignal.bind(c2);
}
function createResource(pSource, pFetcher, pOptions) {
  var source;
  var fetcher;
  var options;
  if (arguments.length === 2 && _typeof(pFetcher) === "object" || arguments.length === 1) {
    source = true;
    fetcher = pSource;
    options = {};
  } else {
    source = pSource;
    fetcher = pFetcher;
    options = {};
  }
  var pr = null,
    initP = NO_INIT,
    id = null,
    scheduled = false,
    resolved = "initialValue" in options,
    dynamic = typeof source === "function" && createMemo(source);
  var contexts = /* @__PURE__ */new Set(),
    _ref2 = (options.storage || createSignal)(options.initialValue),
    _ref3 = _slicedToArray(_ref2, 2),
    value = _ref3[0],
    setValue = _ref3[1],
    _createSignal = createSignal(void 0),
    _createSignal2 = _slicedToArray(_createSignal, 2),
    error = _createSignal2[0],
    setError = _createSignal2[1],
    _createSignal3 = createSignal(void 0, {
      equals: false
    }),
    _createSignal4 = _slicedToArray(_createSignal3, 2),
    track = _createSignal4[0],
    trigger = _createSignal4[1],
    _createSignal5 = createSignal(resolved ? "ready" : "unresolved"),
    _createSignal6 = _slicedToArray(_createSignal5, 2),
    state = _createSignal6[0],
    setState = _createSignal6[1];
  if (sharedConfig.context) {
    id = "".concat(sharedConfig.context.id).concat(sharedConfig.context.count++);
    var v;
    if (options.ssrLoadFrom === "initial") initP = options.initialValue;else if (sharedConfig.load && (v = sharedConfig.load(id))) initP = v[0];
  }
  function loadEnd(p2, v, error2, key) {
    if (pr === p2) {
      pr = null;
      resolved = true;
      if ((p2 === initP || v === initP) && options.onHydrated) queueMicrotask(function () {
        return options.onHydrated(key, {
          value: v
        });
      });
      initP = NO_INIT;
      completeLoad(v, error2);
    }
    return v;
  }
  function completeLoad(v, err) {
    runUpdates(function () {
      if (err === void 0) setValue(function () {
        return v;
      });
      setState(err !== void 0 ? "errored" : "ready");
      setError(err);
      var _iterator2 = _createForOfIteratorHelper(contexts.keys()),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var c2 = _step2.value;
          c2.decrement();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      contexts.clear();
    }, false);
  }
  function read() {
    var c2 = SuspenseContext,
      v = value(),
      err = error();
    if (err !== void 0 && !pr) throw err;
    if (Listener && !Listener.user && c2) {
      createComputed(function () {
        track();
        if (pr) {
          if (c2.resolved) ;else if (!contexts.has(c2)) {
            c2.increment();
            contexts.add(c2);
          }
        }
      });
    }
    return v;
  }
  function load() {
    var refetching = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    if (refetching !== false && scheduled) return;
    scheduled = false;
    var lookup2 = dynamic ? dynamic() : source;
    if (lookup2 == null || lookup2 === false) {
      loadEnd(pr, untrack(value));
      return;
    }
    var p2 = initP !== NO_INIT ? initP : untrack(function () {
      return fetcher(lookup2, {
        value: value(),
        refetching: refetching
      });
    });
    if (_typeof(p2) !== "object" || !(p2 && "then" in p2)) {
      loadEnd(pr, p2, void 0, lookup2);
      return p2;
    }
    pr = p2;
    scheduled = true;
    queueMicrotask(function () {
      return scheduled = false;
    });
    runUpdates(function () {
      setState(resolved ? "refreshing" : "pending");
      trigger();
    }, false);
    return p2.then(function (v) {
      return loadEnd(p2, v, void 0, lookup2);
    }, function (e2) {
      return loadEnd(p2, void 0, castError(e2), lookup2);
    });
  }
  Object.defineProperties(read, {
    state: {
      get: function get() {
        return state();
      }
    },
    error: {
      get: function get() {
        return error();
      }
    },
    loading: {
      get: function get() {
        var s2 = state();
        return s2 === "pending" || s2 === "refreshing";
      }
    },
    latest: {
      get: function get() {
        if (!resolved) return read();
        var err = error();
        if (err && !pr) throw err;
        return value();
      }
    }
  });
  if (dynamic) createComputed(function () {
    return load(false);
  });else load(false);
  return [read, {
    refetch: load,
    mutate: setValue
  }];
}
function batch(fn) {
  return runUpdates(fn, false);
}
function untrack(fn) {
  if (Listener === null) return fn();
  var listener = Listener;
  Listener = null;
  try {
    return fn();
  } finally {
    Listener = listener;
  }
}
function on$1(deps, fn, options) {
  var isArray = Array.isArray(deps);
  var prevInput;
  return function (prevValue) {
    var input;
    if (isArray) {
      input = Array(deps.length);
      for (var i2 = 0; i2 < deps.length; i2++) input[i2] = deps[i2]();
    } else input = deps();
    var result = untrack(function () {
      return fn(input, prevInput, prevValue);
    });
    prevInput = input;
    return result;
  };
}
function onMount(fn) {
  createEffect(function () {
    return untrack(fn);
  });
}
function onCleanup(fn) {
  if (Owner === null) ;else if (Owner.cleanups === null) Owner.cleanups = [fn];else Owner.cleanups.push(fn);
  return fn;
}
function getListener() {
  return Listener;
}
function getOwner() {
  return Owner;
}
function createContext(defaultValue, options) {
  var id = Symbol("context");
  return {
    id: id,
    Provider: createProvider(id),
    defaultValue: defaultValue
  };
}
function useContext(context) {
  var ctx;
  return (ctx = lookup(Owner, context.id)) !== void 0 ? ctx : context.defaultValue;
}
function children(fn) {
  var children2 = createMemo(fn);
  var memo = createMemo(function () {
    return resolveChildren(children2());
  });
  memo.toArray = function () {
    var c2 = memo();
    return Array.isArray(c2) ? c2 : c2 != null ? [c2] : [];
  };
  return memo;
}
var SuspenseContext;
function readSignal() {
  var _this3 = this;
  var runningTransition = Transition$1;
  if (this.sources && (this.state || runningTransition)) {
    if (this.state === STALE || runningTransition) updateComputation(this);else {
      var updates = Updates;
      Updates = null;
      runUpdates(function () {
        return lookUpstream(_this3);
      }, false);
      Updates = updates;
    }
  }
  if (Listener) {
    var sSlot = this.observers ? this.observers.length : 0;
    if (!Listener.sources) {
      Listener.sources = [this];
      Listener.sourceSlots = [sSlot];
    } else {
      Listener.sources.push(this);
      Listener.sourceSlots.push(sSlot);
    }
    if (!this.observers) {
      this.observers = [Listener];
      this.observerSlots = [Listener.sources.length - 1];
    } else {
      this.observers.push(Listener);
      this.observerSlots.push(Listener.sources.length - 1);
    }
  }
  return this.value;
}
function writeSignal(node, value, isComp) {
  var current = node.value;
  if (!node.comparator || !node.comparator(current, value)) {
    node.value = value;
    if (node.observers && node.observers.length) {
      runUpdates(function () {
        for (var i2 = 0; i2 < node.observers.length; i2 += 1) {
          var o2 = node.observers[i2];
          var TransitionRunning = Transition$1 && Transition$1.running;
          if (TransitionRunning && Transition$1.disposed.has(o2)) ;
          if (TransitionRunning && !o2.tState || !TransitionRunning && !o2.state) {
            if (o2.pure) Updates.push(o2);else Effects.push(o2);
            if (o2.observers) markDownstream(o2);
          }
          if (TransitionRunning) ;else o2.state = STALE;
        }
        if (Updates.length > 1e6) {
          Updates = [];
          if (false) ;
          throw new Error();
        }
      }, false);
    }
  }
  return value;
}
function updateComputation(node) {
  if (!node.fn) return;
  cleanNode(node);
  var owner = Owner,
    listener = Listener,
    time = ExecCount;
  Listener = Owner = node;
  runComputation(node, node.value, time);
  Listener = listener;
  Owner = owner;
}
function runComputation(node, value, time) {
  var nextValue;
  try {
    nextValue = node.fn(value);
  } catch (err) {
    if (node.pure) {
      {
        node.state = STALE;
        node.owned && node.owned.forEach(cleanNode);
        node.owned = null;
      }
    }
    handleError(err);
  }
  if (!node.updatedAt || node.updatedAt <= time) {
    if (node.updatedAt != null && "observers" in node) {
      writeSignal(node, nextValue);
    } else node.value = nextValue;
    node.updatedAt = time;
  }
}
function createComputation(fn, init, pure) {
  var state = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : STALE;
  var c2 = {
    fn: fn,
    state: state,
    updatedAt: null,
    owned: null,
    sources: null,
    sourceSlots: null,
    cleanups: null,
    value: init,
    owner: Owner,
    context: null,
    pure: pure
  };
  if (Owner === null) ;else if (Owner !== UNOWNED) {
    {
      if (!Owner.owned) Owner.owned = [c2];else Owner.owned.push(c2);
    }
  }
  return c2;
}
function runTop(node) {
  var runningTransition = Transition$1;
  if (node.state === 0 || runningTransition) return;
  if (node.state === PENDING || runningTransition) return lookUpstream(node);
  if (node.suspense && untrack(node.suspense.inFallback)) return node.suspense.effects.push(node);
  var ancestors = [node];
  while ((node = node.owner) && (!node.updatedAt || node.updatedAt < ExecCount)) {
    if (node.state || runningTransition) ancestors.push(node);
  }
  for (var i2 = ancestors.length - 1; i2 >= 0; i2--) {
    node = ancestors[i2];
    if (node.state === STALE || runningTransition) {
      updateComputation(node);
    } else if (node.state === PENDING || runningTransition) {
      var updates = Updates;
      Updates = null;
      runUpdates(function () {
        return lookUpstream(node, ancestors[0]);
      }, false);
      Updates = updates;
    }
  }
}
function runUpdates(fn, init) {
  if (Updates) return fn();
  var wait = false;
  if (!init) Updates = [];
  if (Effects) wait = true;else Effects = [];
  ExecCount++;
  try {
    var res = fn();
    completeUpdates(wait);
    return res;
  } catch (err) {
    if (!wait) Effects = null;
    Updates = null;
    handleError(err);
  }
}
function completeUpdates(wait) {
  if (Updates) {
    runQueue(Updates);
    Updates = null;
  }
  if (wait) return;
  var e2 = Effects;
  Effects = null;
  if (e2.length) runUpdates(function () {
    return runEffects(e2);
  }, false);
}
function runQueue(queue) {
  for (var i2 = 0; i2 < queue.length; i2++) runTop(queue[i2]);
}
function runUserEffects(queue) {
  var i2,
    userLength = 0;
  for (i2 = 0; i2 < queue.length; i2++) {
    var e2 = queue[i2];
    if (!e2.user) runTop(e2);else queue[userLength++] = e2;
  }
  if (sharedConfig.context) setHydrateContext();
  for (i2 = 0; i2 < userLength; i2++) runTop(queue[i2]);
}
function lookUpstream(node, ignore) {
  var runningTransition = Transition$1;
  node.state = 0;
  for (var i2 = 0; i2 < node.sources.length; i2 += 1) {
    var source = node.sources[i2];
    if (source.sources) {
      if (source.state === STALE || runningTransition) {
        if (source !== ignore) runTop(source);
      } else if (source.state === PENDING || runningTransition) lookUpstream(source, ignore);
    }
  }
}
function markDownstream(node) {
  var runningTransition = Transition$1;
  for (var i2 = 0; i2 < node.observers.length; i2 += 1) {
    var o2 = node.observers[i2];
    if (!o2.state || runningTransition) {
      o2.state = PENDING;
      if (o2.pure) Updates.push(o2);else Effects.push(o2);
      o2.observers && markDownstream(o2);
    }
  }
}
function cleanNode(node) {
  var i2;
  if (node.sources) {
    while (node.sources.length) {
      var source = node.sources.pop(),
        index = node.sourceSlots.pop(),
        obs = source.observers;
      if (obs && obs.length) {
        var n2 = obs.pop(),
          s2 = source.observerSlots.pop();
        if (index < obs.length) {
          n2.sourceSlots[s2] = index;
          obs[index] = n2;
          source.observerSlots[index] = s2;
        }
      }
    }
  }
  if (node.owned) {
    for (i2 = 0; i2 < node.owned.length; i2++) cleanNode(node.owned[i2]);
    node.owned = null;
  }
  if (node.cleanups) {
    for (i2 = 0; i2 < node.cleanups.length; i2++) node.cleanups[i2]();
    node.cleanups = null;
  }
  node.state = 0;
  node.context = null;
}
function castError(err) {
  if (err instanceof Error || typeof err === "string") return err;
  return new Error("Unknown error");
}
function handleError(err) {
  err = castError(err);
  throw err;
}
function lookup(owner, key) {
  return owner ? owner.context && owner.context[key] !== void 0 ? owner.context[key] : lookup(owner.owner, key) : void 0;
}
function resolveChildren(children2) {
  if (typeof children2 === "function" && !children2.length) return resolveChildren(children2());
  if (Array.isArray(children2)) {
    var results = [];
    for (var i2 = 0; i2 < children2.length; i2++) {
      var result = resolveChildren(children2[i2]);
      Array.isArray(result) ? results.push.apply(results, result) : results.push(result);
    }
    return results;
  }
  return children2;
}
function createProvider(id, options) {
  return function provider(props) {
    var res;
    createRenderEffect(function () {
      return res = untrack(function () {
        Owner.context = _defineProperty$1({}, id, props.value);
        return children(function () {
          return props.children;
        });
      });
    }, void 0);
    return res;
  };
}
var FALLBACK = Symbol("fallback");
function dispose(d) {
  for (var i2 = 0; i2 < d.length; i2++) d[i2]();
}
function mapArray(list, mapFn) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var items = [],
    mapped = [],
    disposers = [],
    len = 0,
    indexes = mapFn.length > 1 ? [] : null;
  onCleanup(function () {
    return dispose(disposers);
  });
  return function () {
    var newItems = list() || [],
      i2,
      j;
    newItems[$TRACK];
    return untrack(function () {
      var newLen = newItems.length,
        newIndices,
        newIndicesNext,
        temp,
        tempdisposers,
        tempIndexes,
        start,
        end,
        newEnd,
        item;
      if (newLen === 0) {
        if (len !== 0) {
          dispose(disposers);
          disposers = [];
          items = [];
          mapped = [];
          len = 0;
          indexes && (indexes = []);
        }
        if (options.fallback) {
          items = [FALLBACK];
          mapped[0] = createRoot(function (disposer) {
            disposers[0] = disposer;
            return options.fallback();
          });
          len = 1;
        }
      } else if (len === 0) {
        mapped = new Array(newLen);
        for (j = 0; j < newLen; j++) {
          items[j] = newItems[j];
          mapped[j] = createRoot(mapper);
        }
        len = newLen;
      } else {
        temp = new Array(newLen);
        tempdisposers = new Array(newLen);
        indexes && (tempIndexes = new Array(newLen));
        for (start = 0, end = Math.min(len, newLen); start < end && items[start] === newItems[start]; start++);
        for (end = len - 1, newEnd = newLen - 1; end >= start && newEnd >= start && items[end] === newItems[newEnd]; end--, newEnd--) {
          temp[newEnd] = mapped[end];
          tempdisposers[newEnd] = disposers[end];
          indexes && (tempIndexes[newEnd] = indexes[end]);
        }
        newIndices = /* @__PURE__ */new Map();
        newIndicesNext = new Array(newEnd + 1);
        for (j = newEnd; j >= start; j--) {
          item = newItems[j];
          i2 = newIndices.get(item);
          newIndicesNext[j] = i2 === void 0 ? -1 : i2;
          newIndices.set(item, j);
        }
        for (i2 = start; i2 <= end; i2++) {
          item = items[i2];
          j = newIndices.get(item);
          if (j !== void 0 && j !== -1) {
            temp[j] = mapped[i2];
            tempdisposers[j] = disposers[i2];
            indexes && (tempIndexes[j] = indexes[i2]);
            j = newIndicesNext[j];
            newIndices.set(item, j);
          } else disposers[i2]();
        }
        for (j = start; j < newLen; j++) {
          if (j in temp) {
            mapped[j] = temp[j];
            disposers[j] = tempdisposers[j];
            if (indexes) {
              indexes[j] = tempIndexes[j];
              indexes[j](j);
            }
          } else mapped[j] = createRoot(mapper);
        }
        mapped = mapped.slice(0, len = newLen);
        items = newItems.slice(0);
      }
      return mapped;
    });
    function mapper(disposer) {
      disposers[j] = disposer;
      if (indexes) {
        var _createSignal7 = createSignal(j),
          _createSignal8 = _slicedToArray(_createSignal7, 2),
          s2 = _createSignal8[0],
          set = _createSignal8[1];
        indexes[j] = set;
        return mapFn(newItems[j], s2);
      }
      return mapFn(newItems[j]);
    }
  };
}
function createComponent(Comp, props) {
  return untrack(function () {
    return Comp(props || {});
  });
}
function trueFn() {
  return true;
}
var propTraps = {
  get: function get(_, property, receiver) {
    if (property === $PROXY) return receiver;
    return _.get(property);
  },
  has: function has(_, property) {
    if (property === $PROXY) return true;
    return _.has(property);
  },
  set: trueFn,
  deleteProperty: trueFn,
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(_, property) {
    return {
      configurable: true,
      enumerable: true,
      get: function get() {
        return _.get(property);
      },
      set: trueFn,
      deleteProperty: trueFn
    };
  },
  ownKeys: function ownKeys(_) {
    return _.keys();
  }
};
function resolveSource(s2) {
  return !(s2 = typeof s2 === "function" ? s2() : s2) ? {} : s2;
}
function mergeProps() {
  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
    sources[_key] = arguments[_key];
  }
  var proxy = false;
  for (var i2 = 0; i2 < sources.length; i2++) {
    var s2 = sources[i2];
    proxy = proxy || !!s2 && $PROXY in s2;
    sources[i2] = typeof s2 === "function" ? (proxy = true, createMemo(s2)) : s2;
  }
  if (proxy) {
    return new Proxy({
      get: function get(property) {
        for (var _i = sources.length - 1; _i >= 0; _i--) {
          var v = resolveSource(sources[_i])[property];
          if (v !== void 0) return v;
        }
      },
      has: function has(property) {
        for (var _i2 = sources.length - 1; _i2 >= 0; _i2--) {
          if (property in resolveSource(sources[_i2])) return true;
        }
        return false;
      },
      keys: function keys() {
        var keys = [];
        for (var _i3 = 0; _i3 < sources.length; _i3++) keys.push.apply(keys, _toConsumableArray(Object.keys(resolveSource(sources[_i3]))));
        return _toConsumableArray(new Set(keys));
      }
    }, propTraps);
  }
  var target = {};
  for (var _i4 = sources.length - 1; _i4 >= 0; _i4--) {
    if (sources[_i4]) {
      var descriptors = Object.getOwnPropertyDescriptors(sources[_i4]);
      var _loop = function _loop(key) {
        if (key in target) return 1; // continue
        Object.defineProperty(target, key, {
          enumerable: true,
          get: function get() {
            for (var i3 = sources.length - 1; i3 >= 0; i3--) {
              var v = (sources[i3] || {})[key];
              if (v !== void 0) return v;
            }
          }
        });
      };
      for (var key in descriptors) {
        if (_loop(key)) continue;
      }
    }
  }
  return target;
}
function splitProps(props) {
  for (var _len2 = arguments.length, keys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    keys[_key2 - 1] = arguments[_key2];
  }
  var blocked = new Set(keys.flat());
  if ($PROXY in props) {
    var res = keys.map(function (k) {
      return new Proxy({
        get: function get(property) {
          return k.includes(property) ? props[property] : void 0;
        },
        has: function has(property) {
          return k.includes(property) && property in props;
        },
        keys: function keys() {
          return k.filter(function (property) {
            return property in props;
          });
        }
      }, propTraps);
    });
    res.push(new Proxy({
      get: function get(property) {
        return blocked.has(property) ? void 0 : props[property];
      },
      has: function has(property) {
        return blocked.has(property) ? false : property in props;
      },
      keys: function keys() {
        return Object.keys(props).filter(function (k) {
          return !blocked.has(k);
        });
      }
    }, propTraps));
    return res;
  }
  var descriptors = Object.getOwnPropertyDescriptors(props);
  keys.push(Object.keys(descriptors).filter(function (k) {
    return !blocked.has(k);
  }));
  return keys.map(function (k) {
    var clone = {};
    var _loop2 = function _loop2() {
      var key = k[i2];
      if (!(key in props)) return 1; // continue
      Object.defineProperty(clone, key, descriptors[key] ? descriptors[key] : {
        get: function get() {
          return props[key];
        },
        set: function set() {
          return true;
        },
        enumerable: true
      });
    };
    for (var i2 = 0; i2 < k.length; i2++) {
      if (_loop2()) continue;
    }
    return clone;
  });
}
function For(props) {
  var fallback = "fallback" in props && {
    fallback: function fallback() {
      return props.fallback;
    }
  };
  return createMemo(mapArray(function () {
    return props.each;
  }, props.children, fallback || void 0));
}
function Show(props) {
  var strictEqual = false;
  var keyed = props.keyed;
  var condition = createMemo(function () {
    return props.when;
  }, void 0, {
    equals: function equals(a2, b) {
      return strictEqual ? a2 === b : !a2 === !b;
    }
  });
  return createMemo(function () {
    var c2 = condition();
    if (c2) {
      var child = props.children;
      var fn = typeof child === "function" && child.length > 0;
      strictEqual = keyed || fn;
      return fn ? untrack(function () {
        return child(c2);
      }) : child;
    }
    return props.fallback;
  }, void 0, void 0);
}
function Switch(props) {
  var strictEqual = false;
  var keyed = false;
  var equals = function equals(a2, b) {
    return a2[0] === b[0] && (strictEqual ? a2[1] === b[1] : !a2[1] === !b[1]) && a2[2] === b[2];
  };
  var conditions = children(function () {
      return props.children;
    }),
    evalConditions = createMemo(function () {
      var conds = conditions();
      if (!Array.isArray(conds)) conds = [conds];
      for (var i2 = 0; i2 < conds.length; i2++) {
        var c2 = conds[i2].when;
        if (c2) {
          keyed = !!conds[i2].keyed;
          return [i2, c2, conds[i2]];
        }
      }
      return [-1];
    }, void 0, {
      equals: equals
    });
  return createMemo(function () {
    var _evalConditions = evalConditions(),
      _evalConditions2 = _slicedToArray(_evalConditions, 3),
      index = _evalConditions2[0],
      when = _evalConditions2[1],
      cond = _evalConditions2[2];
    if (index < 0) return props.fallback;
    var c2 = cond.children;
    var fn = typeof c2 === "function" && c2.length > 0;
    strictEqual = keyed || fn;
    return fn ? untrack(function () {
      return c2(when);
    }) : c2;
  }, void 0, void 0);
}
function Match(props) {
  return props;
}
var booleans = ["allowfullscreen", "async", "autofocus", "autoplay", "checked", "controls", "default", "disabled", "formnovalidate", "hidden", "indeterminate", "ismap", "loop", "multiple", "muted", "nomodule", "novalidate", "open", "playsinline", "readonly", "required", "reversed", "seamless", "selected"];
var Properties = /* @__PURE__ */new Set(["className", "value", "readOnly", "formNoValidate", "isMap", "noModule", "playsInline"].concat(booleans));
var ChildProperties = /* @__PURE__ */new Set(["innerHTML", "textContent", "innerText", "children"]);
var Aliases = /* @__PURE__ */Object.assign(/* @__PURE__ */Object.create(null), {
  className: "class",
  htmlFor: "for"
});
var PropAliases = /* @__PURE__ */Object.assign(/* @__PURE__ */Object.create(null), {
  "class": "className",
  formnovalidate: "formNoValidate",
  ismap: "isMap",
  nomodule: "noModule",
  playsinline: "playsInline",
  readonly: "readOnly"
});
var DelegatedEvents = /* @__PURE__ */new Set(["beforeinput", "click", "dblclick", "contextmenu", "focusin", "focusout", "input", "keydown", "keyup", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "pointerdown", "pointermove", "pointerout", "pointerover", "pointerup", "touchend", "touchmove", "touchstart"]);
var SVGElements = /* @__PURE__ */new Set(["altGlyph", "altGlyphDef", "altGlyphItem", "animate", "animateColor", "animateMotion", "animateTransform", "circle", "clipPath", "color-profile", "cursor", "defs", "desc", "ellipse", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "font", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignObject", "g", "glyph", "glyphRef", "hkern", "image", "line", "linearGradient", "marker", "mask", "metadata", "missing-glyph", "mpath", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "set", "stop", "svg", "switch", "symbol", "text", "textPath", "tref", "tspan", "use", "view", "vkern"]);
var SVGNamespace = {
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace"
};
function reconcileArrays(parentNode, a2, b) {
  var bLength = b.length,
    aEnd = a2.length,
    bEnd = bLength,
    aStart = 0,
    bStart = 0,
    after = a2[aEnd - 1].nextSibling,
    map = null;
  while (aStart < aEnd || bStart < bEnd) {
    if (a2[aStart] === b[bStart]) {
      aStart++;
      bStart++;
      continue;
    }
    while (a2[aEnd - 1] === b[bEnd - 1]) {
      aEnd--;
      bEnd--;
    }
    if (aEnd === aStart) {
      var node = bEnd < bLength ? bStart ? b[bStart - 1].nextSibling : b[bEnd - bStart] : after;
      while (bStart < bEnd) parentNode.insertBefore(b[bStart++], node);
    } else if (bEnd === bStart) {
      while (aStart < aEnd) {
        if (!map || !map.has(a2[aStart])) a2[aStart].remove();
        aStart++;
      }
    } else if (a2[aStart] === b[bEnd - 1] && b[bStart] === a2[aEnd - 1]) {
      var _node = a2[--aEnd].nextSibling;
      parentNode.insertBefore(b[bStart++], a2[aStart++].nextSibling);
      parentNode.insertBefore(b[--bEnd], _node);
      a2[aEnd] = b[bEnd];
    } else {
      if (!map) {
        map = /* @__PURE__ */new Map();
        var i2 = bStart;
        while (i2 < bEnd) map.set(b[i2], i2++);
      }
      var index = map.get(a2[aStart]);
      if (index != null) {
        if (bStart < index && index < bEnd) {
          var _i5 = aStart,
            sequence = 1,
            t2 = void 0;
          while (++_i5 < aEnd && _i5 < bEnd) {
            if ((t2 = map.get(a2[_i5])) == null || t2 !== index + sequence) break;
            sequence++;
          }
          if (sequence > index - bStart) {
            var _node2 = a2[aStart];
            while (bStart < index) parentNode.insertBefore(b[bStart++], _node2);
          } else parentNode.replaceChild(b[bStart++], a2[aStart++]);
        } else aStart++;
      } else a2[aStart++].remove();
    }
  }
}
var $$EVENTS = "_$DX_DELEGATE";
function render(code, element, init) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var disposer;
  createRoot(function (dispose2) {
    disposer = dispose2;
    element === document ? code() : insert(element, code(), element.firstChild ? null : void 0, init);
  }, options.owner);
  return function () {
    disposer();
    element.textContent = "";
  };
}
function template$1(html, check, isSVG) {
  if (typeof window === 'undefined') {
    return null;
  }
  var t2 = document.createElement("template");
  t2.innerHTML = html;
  var node = t2.content.firstChild;
  if (isSVG) node = node.firstChild;
  return node;
}
function delegateEvents(eventNames) {
  var document2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.document;
  var e2 = document2[$$EVENTS] || (document2[$$EVENTS] = /* @__PURE__ */new Set());
  for (var i2 = 0, l2 = eventNames.length; i2 < l2; i2++) {
    var name = eventNames[i2];
    if (!e2.has(name)) {
      e2.add(name);
      document2.addEventListener(name, eventHandler);
    }
  }
}
function setAttribute(node, name, value) {
  if (value == null) node.removeAttribute(name);else node.setAttribute(name, value);
}
function setAttributeNS(node, namespace, name, value) {
  if (value == null) node.removeAttributeNS(namespace, name);else node.setAttributeNS(namespace, name, value);
}
function className(node, value) {
  if (value == null) node.removeAttribute("class");else node.className = value;
}
function addEventListener(node, name, handler, delegate) {
  if (delegate) {
    if (Array.isArray(handler)) {
      node["$$".concat(name)] = handler[0];
      node["$$".concat(name, "Data")] = handler[1];
    } else node["$$".concat(name)] = handler;
  } else if (Array.isArray(handler)) {
    var handlerFn = handler[0];
    node.addEventListener(name, handler[0] = function (e2) {
      return handlerFn.call(node, handler[1], e2);
    });
  } else node.addEventListener(name, handler);
}
function classList(node, value) {
  var prev = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var classKeys = Object.keys(value || {}),
    prevKeys = Object.keys(prev);
  var i2, len;
  for (i2 = 0, len = prevKeys.length; i2 < len; i2++) {
    var key = prevKeys[i2];
    if (!key || key === "undefined" || value[key]) continue;
    toggleClassKey(node, key, false);
    delete prev[key];
  }
  for (i2 = 0, len = classKeys.length; i2 < len; i2++) {
    var _key3 = classKeys[i2],
      classValue = !!value[_key3];
    if (!_key3 || _key3 === "undefined" || prev[_key3] === classValue || !classValue) continue;
    toggleClassKey(node, _key3, true);
    prev[_key3] = classValue;
  }
  return prev;
}
function style(node, value, prev) {
  if (!value) return prev ? setAttribute(node, "style") : value;
  var nodeStyle = node.style;
  if (typeof value === "string") return nodeStyle.cssText = value;
  typeof prev === "string" && (nodeStyle.cssText = prev = void 0);
  prev || (prev = {});
  value || (value = {});
  var v, s2;
  for (s2 in prev) {
    value[s2] == null && nodeStyle.removeProperty(s2);
    delete prev[s2];
  }
  for (s2 in value) {
    v = value[s2];
    if (v !== prev[s2]) {
      nodeStyle.setProperty(s2, v);
      prev[s2] = v;
    }
  }
  return prev;
}
function spread(node) {
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var isSVG = arguments.length > 2 ? arguments[2] : undefined;
  var skipChildren = arguments.length > 3 ? arguments[3] : undefined;
  var prevProps = {};
  if (!skipChildren) {
    createRenderEffect(function () {
      return prevProps.children = insertExpression(node, props.children, prevProps.children);
    });
  }
  createRenderEffect(function () {
    return props.ref && props.ref(node);
  });
  createRenderEffect(function () {
    return assign(node, props, isSVG, true, prevProps, true);
  });
  return prevProps;
}
function use(fn, element, arg) {
  return untrack(function () {
    return fn(element, arg);
  });
}
function insert(parent, accessor, marker, initial) {
  if (marker !== void 0 && !initial) initial = [];
  if (typeof accessor !== "function") return insertExpression(parent, accessor, initial, marker);
  createRenderEffect(function (current) {
    return insertExpression(parent, accessor(), current, marker);
  }, initial);
}
function assign(node, props, isSVG, skipChildren) {
  var prevProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  var skipRef = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  props || (props = {});
  for (var prop in prevProps) {
    if (!(prop in props)) {
      if (prop === "children") continue;
      prevProps[prop] = assignProp(node, prop, null, prevProps[prop], isSVG, skipRef);
    }
  }
  for (var _prop in props) {
    if (_prop === "children") {
      continue;
    }
    var value = props[_prop];
    prevProps[_prop] = assignProp(node, _prop, value, prevProps[_prop], isSVG, skipRef);
  }
}
function getNextElement(template2) {
  var node, key;
  if (!sharedConfig.context || !(node = sharedConfig.registry.get(key = getHydrationKey()))) {
    return template2.cloneNode(true);
  }
  if (sharedConfig.completed) sharedConfig.completed.add(node);
  sharedConfig.registry["delete"](key);
  return node;
}
function toPropertyName(name) {
  return name.toLowerCase().replace(/-([a-z])/g, function (_, w) {
    return w.toUpperCase();
  });
}
function toggleClassKey(node, key, value) {
  var classNames = key.trim().split(/\s+/);
  for (var i2 = 0, nameLen = classNames.length; i2 < nameLen; i2++) node.classList.toggle(classNames[i2], value);
}
function assignProp(node, prop, value, prev, isSVG, skipRef) {
  var isCE, isProp, isChildProp;
  if (prop === "style") return style(node, value, prev);
  if (prop === "classList") return classList(node, value, prev);
  if (value === prev) return prev;
  if (prop === "ref") {
    if (!skipRef) value(node);
  } else if (prop.slice(0, 3) === "on:") {
    var e2 = prop.slice(3);
    prev && node.removeEventListener(e2, prev);
    value && node.addEventListener(e2, value);
  } else if (prop.slice(0, 10) === "oncapture:") {
    var _e3 = prop.slice(10);
    prev && node.removeEventListener(_e3, prev, true);
    value && node.addEventListener(_e3, value, true);
  } else if (prop.slice(0, 2) === "on") {
    var name = prop.slice(2).toLowerCase();
    var delegate = DelegatedEvents.has(name);
    if (!delegate && prev) {
      var h2 = Array.isArray(prev) ? prev[0] : prev;
      node.removeEventListener(name, h2);
    }
    if (delegate || value) {
      addEventListener(node, name, value, delegate);
      delegate && delegateEvents([name]);
    }
  } else if ((isChildProp = ChildProperties.has(prop)) || !isSVG && (PropAliases[prop] || (isProp = Properties.has(prop))) || (isCE = node.nodeName.includes("-"))) {
    if (prop === "class" || prop === "className") className(node, value);else if (isCE && !isProp && !isChildProp) node[toPropertyName(prop)] = value;else node[PropAliases[prop] || prop] = value;
  } else {
    var ns = isSVG && prop.indexOf(":") > -1 && SVGNamespace[prop.split(":")[0]];
    if (ns) setAttributeNS(node, ns, prop, value);else setAttribute(node, Aliases[prop] || prop, value);
  }
  return value;
}
function eventHandler(e2) {
  var key = "$$".concat(e2.type);
  var node = e2.composedPath && e2.composedPath()[0] || e2.target;
  if (e2.target !== node) {
    Object.defineProperty(e2, "target", {
      configurable: true,
      value: node
    });
  }
  Object.defineProperty(e2, "currentTarget", {
    configurable: true,
    get: function get() {
      return node || document;
    }
  });
  if (sharedConfig.registry && !sharedConfig.done) {
    sharedConfig.done = true;
    document.querySelectorAll("[id^=pl-]").forEach(function (elem) {
      while (elem && elem.nodeType !== 8 && elem.nodeValue !== "pl-" + e2) {
        var x = elem.nextSibling;
        elem.remove();
        elem = x;
      }
      elem && elem.remove();
    });
  }
  while (node) {
    var handler = node[key];
    if (handler && !node.disabled) {
      var data = node["".concat(key, "Data")];
      data !== void 0 ? handler.call(node, data, e2) : handler.call(node, e2);
      if (e2.cancelBubble) return;
    }
    node = node._$host || node.parentNode || node.host;
  }
}
function insertExpression(parent, value, current, marker, unwrapArray) {
  if (sharedConfig.context && !current) current = _toConsumableArray(parent.childNodes);
  while (typeof current === "function") current = current();
  if (value === current) return current;
  var t2 = _typeof(value),
    multi = marker !== void 0;
  parent = multi && current[0] && current[0].parentNode || parent;
  if (t2 === "string" || t2 === "number") {
    if (sharedConfig.context) return current;
    if (t2 === "number") value = value.toString();
    if (multi) {
      var node = current[0];
      if (node && node.nodeType === 3) {
        node.data = value;
      } else node = document.createTextNode(value);
      current = cleanChildren(parent, current, marker, node);
    } else {
      if (current !== "" && typeof current === "string") {
        current = parent.firstChild.data = value;
      } else current = parent.textContent = value;
    }
  } else if (value == null || t2 === "boolean") {
    if (sharedConfig.context) return current;
    current = cleanChildren(parent, current, marker);
  } else if (t2 === "function") {
    createRenderEffect(function () {
      var v = value();
      while (typeof v === "function") v = v();
      current = insertExpression(parent, v, current, marker);
    });
    return function () {
      return current;
    };
  } else if (Array.isArray(value)) {
    var array = [];
    var currentArray = current && Array.isArray(current);
    if (normalizeIncomingArray(array, value, current, unwrapArray)) {
      createRenderEffect(function () {
        return current = insertExpression(parent, array, current, marker, true);
      });
      return function () {
        return current;
      };
    }
    if (sharedConfig.context) {
      if (!array.length) return current;
      for (var i2 = 0; i2 < array.length; i2++) {
        if (array[i2].parentNode) return current = array;
      }
    }
    if (array.length === 0) {
      current = cleanChildren(parent, current, marker);
      if (multi) return current;
    } else if (currentArray) {
      if (current.length === 0) {
        appendNodes(parent, array, marker);
      } else reconcileArrays(parent, current, array);
    } else {
      current && cleanChildren(parent);
      appendNodes(parent, array);
    }
    current = array;
  } else if (value instanceof Node) {
    if (sharedConfig.context && value.parentNode) return current = multi ? [value] : value;
    if (Array.isArray(current)) {
      if (multi) return current = cleanChildren(parent, current, marker, value);
      cleanChildren(parent, current, null, value);
    } else if (current == null || current === "" || !parent.firstChild) {
      parent.appendChild(value);
    } else parent.replaceChild(value, parent.firstChild);
    current = value;
  } else ;
  return current;
}
function normalizeIncomingArray(normalized, array, current, unwrap2) {
  var dynamic = false;
  for (var i2 = 0, len = array.length; i2 < len; i2++) {
    var item = array[i2],
      prev = current && current[i2];
    if (item instanceof Node) {
      normalized.push(item);
    } else if (item == null || item === true || item === false) ;else if (Array.isArray(item)) {
      dynamic = normalizeIncomingArray(normalized, item, prev) || dynamic;
    } else if (typeof item === "function") {
      if (unwrap2) {
        while (typeof item === "function") item = item();
        dynamic = normalizeIncomingArray(normalized, Array.isArray(item) ? item : [item], Array.isArray(prev) ? prev : [prev]) || dynamic;
      } else {
        normalized.push(item);
        dynamic = true;
      }
    } else {
      var value = String(item);
      if (prev && prev.nodeType === 3 && prev.data === value) {
        normalized.push(prev);
      } else normalized.push(document.createTextNode(value));
    }
  }
  return dynamic;
}
function appendNodes(parent, array) {
  var marker = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  for (var i2 = 0, len = array.length; i2 < len; i2++) parent.insertBefore(array[i2], marker);
}
function cleanChildren(parent, current, marker, replacement) {
  if (marker === void 0) return parent.textContent = "";
  var node = replacement || document.createTextNode("");
  if (current.length) {
    var inserted = false;
    for (var i2 = current.length - 1; i2 >= 0; i2--) {
      var el = current[i2];
      if (node !== el) {
        var isParent = el.parentNode === parent;
        if (!inserted && !i2) isParent ? parent.replaceChild(node, el) : parent.insertBefore(node, marker);else isParent && el.remove();
      } else inserted = true;
    }
  } else parent.insertBefore(node, marker);
  return [node];
}
function getHydrationKey() {
  var hydrate = sharedConfig.context;
  return "".concat(hydrate.id).concat(hydrate.count++);
}
var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
function createElement(tagName) {
  var isSVG = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return isSVG ? document.createElementNS(SVG_NAMESPACE, tagName) : document.createElement(tagName);
}
function Portal(props) {
  var useShadow = props.useShadow,
    marker = document.createTextNode(""),
    mount = props.mount || document.body;
  function renderPortal() {
    if (sharedConfig.context) {
      var _createSignal9 = createSignal(false),
        _createSignal10 = _slicedToArray(_createSignal9, 2),
        s2 = _createSignal10[0],
        set = _createSignal10[1];
      queueMicrotask(function () {
        return set(true);
      });
      return function () {
        return s2() && props.children;
      };
    } else return function () {
      return props.children;
    };
  }
  if (mount instanceof HTMLHeadElement) {
    var _createSignal11 = createSignal(false),
      _createSignal12 = _slicedToArray(_createSignal11, 2),
      clean = _createSignal12[0],
      setClean = _createSignal12[1];
    var cleanup = function cleanup() {
      return setClean(true);
    };
    createRoot(function (dispose2) {
      return insert(mount, function () {
        return !clean() ? renderPortal()() : dispose2();
      }, null);
    });
    onCleanup(function () {
      if (sharedConfig.context) queueMicrotask(cleanup);else cleanup();
    });
  } else {
    var container = createElement(props.isSVG ? "g" : "div", props.isSVG),
      renderRoot = useShadow && container.attachShadow ? container.attachShadow({
        mode: "open"
      }) : container;
    Object.defineProperty(container, "_$host", {
      get: function get() {
        return marker.parentNode;
      },
      configurable: true
    });
    insert(renderRoot, renderPortal());
    mount.appendChild(container);
    props.ref && props.ref(container);
    onCleanup(function () {
      return mount.removeChild(container);
    });
  }
  return marker;
}
function Dynamic(props) {
  var _splitProps = splitProps(props, ["component"]),
    _splitProps2 = _slicedToArray(_splitProps, 2),
    p2 = _splitProps2[0],
    others = _splitProps2[1];
  var cached = createMemo(function () {
    return p2.component;
  });
  return createMemo(function () {
    var component = cached();
    switch (_typeof(component)) {
      case "function":
        return untrack(function () {
          return component(others);
        });
      case "string":
        var isSvg = SVGElements.has(component);
        var el = sharedConfig.context ? getNextElement() : createElement(component, isSvg);
        spread(el, others, isSvg);
        return el;
    }
  });
}
var THEME = /* @__PURE__ */function (THEME2) {
  THEME2["DARK"] = "DARK";
  THEME2["LIGHT"] = "LIGHT";
  return THEME2;
}(THEME || {});
var e = {
    data: ""
  },
  t$2 = function t(t2) {
    return "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) ? ((t2 ? t2.querySelector("#_goober") : window._goober) || Object.assign((t2 || document.head).appendChild(document.createElement("style")), {
      innerHTML: " ",
      id: "_goober"
    })).firstChild : t2 || e;
  },
  l = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g,
  a = /\/\*[^]*?\*\/|  +/g,
  n = /\n+/g,
  _o = function o(e2, t2) {
    var r = "",
      l2 = "",
      a2 = "";
    var _loop3 = function _loop3(n2) {
      var c2 = e2[n2];
      "@" == n2[0] ? "i" == n2[1] ? r = n2 + " " + c2 + ";" : l2 += "f" == n2[1] ? _o(c2, n2) : n2 + "{" + _o(c2, "k" == n2[1] ? "" : t2) + "}" : "object" == _typeof(c2) ? l2 += _o(c2, t2 ? t2.replace(/([^,])+/g, function (e3) {
        return n2.replace(/(^:.*)|([^,])+/g, function (t3) {
          return /&/.test(t3) ? t3.replace(/&/g, e3) : e3 ? e3 + " " + t3 : t3;
        });
      }) : n2) : null != c2 && (n2 = /^--/.test(n2) ? n2 : n2.replace(/[A-Z]/g, "-$&").toLowerCase(), a2 += _o.p ? _o.p(n2, c2) : n2 + ":" + c2 + ";");
    };
    for (var n2 in e2) {
      _loop3(n2);
    }
    return r + (t2 && a2 ? t2 + "{" + a2 + "}" : a2) + l2;
  },
  c = {},
  _s = function s(e2) {
    if ("object" == _typeof(e2)) {
      var t2 = "";
      for (var r in e2) t2 += r + _s(e2[r]);
      return t2;
    }
    return e2;
  },
  i$1 = function i(e2, t2, r, i2, p2) {
    var u2 = _s(e2),
      d = c[u2] || (c[u2] = function (e3) {
        var t3 = 0,
          r2 = 11;
        for (; t3 < e3.length;) r2 = 101 * r2 + e3.charCodeAt(t3++) >>> 0;
        return "go" + r2;
      }(u2));
    if (!c[d]) {
      var t3 = u2 !== e2 ? e2 : function (e3) {
        var t4,
          r2,
          o2 = [{}];
        for (; t4 = l.exec(e3.replace(a, ""));) t4[4] ? o2.shift() : t4[3] ? (r2 = t4[3].replace(n, " ").trim(), o2.unshift(o2[0][r2] = o2[0][r2] || {})) : o2[0][t4[1]] = t4[2].replace(n, " ").trim();
        return o2[0];
      }(e2);
      c[d] = _o(p2 ? _defineProperty$1({}, "@keyframes " + d, t3) : t3, r ? "" : "." + d);
    }
    var f = r && c.g ? c.g : null;
    return r && (c.g = c[d]), function (e3, t3, r2, l2) {
      l2 ? t3.data = t3.data.replace(l2, e3) : -1 === t3.data.indexOf(e3) && (t3.data = r2 ? e3 + t3.data : t3.data + e3);
    }(c[d], t2, i2, f), d;
  },
  p = function p(e2, t2, r) {
    return e2.reduce(function (e3, l2, a2) {
      var n2 = t2[a2];
      if (n2 && n2.call) {
        var e4 = n2(r),
          t3 = e4 && e4.props && e4.props.className || /^go/.test(e4) && e4;
        n2 = t3 ? "." + t3 : e4 && "object" == _typeof(e4) ? e4.props ? "" : _o(e4, "") : false === e4 ? "" : e4;
      }
      return e3 + l2 + (null == n2 ? "" : n2);
    }, "");
  };
function u(e2) {
  var r = this || {},
    l2 = e2.call ? e2(r.p) : e2;
  return i$1(l2.unshift ? l2.raw ? p(l2, [].slice.call(arguments, 1), r.p) : l2.reduce(function (e3, t2) {
    return Object.assign(e3, t2 && t2.call ? t2(r.p) : t2);
  }, {}) : l2, t$2(r.target), r.g, r.o, r.k);
}
u.bind({
  g: 1
});
var h = u.bind({
  k: 1
});
var ThemeContext = createContext();
function ThemeProvider(props) {
  return createComponent(ThemeContext.Provider, {
    value: props.theme,
    get children() {
      return props.children;
    }
  });
}
function useTheme() {
  return useContext(ThemeContext);
}
function makeStyled(tag) {
  var _ctx = this || {};
  return function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
      args[_key4] = arguments[_key4];
    }
    var Styled = function Styled(props) {
      var theme = useContext(ThemeContext);
      var withTheme = mergeProps(props, {
        theme: theme
      });
      var clone = mergeProps(withTheme, {
        get class() {
          var pClass = withTheme["class"],
            append = "class" in withTheme && /^go[0-9]+/.test(pClass);
          var className2 = u.apply({
            target: _ctx.target,
            o: append,
            p: withTheme,
            g: _ctx.g
          }, args);
          return [pClass, className2].filter(Boolean).join(" ");
        }
      });
      var _splitProps3 = splitProps(clone, ["as", "theme"]),
        _splitProps4 = _slicedToArray(_splitProps3, 2),
        local = _splitProps4[0],
        newProps = _splitProps4[1];
      var htmlProps = newProps;
      var createTag = local.as || tag;
      var el;
      if (typeof createTag === "function") {
        el = createTag(htmlProps);
      } else {
        {
          if (_ctx.g == 1) {
            el = document.createElement(createTag);
            spread(el, htmlProps);
          } else {
            el = Dynamic(mergeProps({
              component: createTag
            }, htmlProps));
          }
        }
      }
      return el;
    };
    Styled["class"] = function (props) {
      return untrack(function () {
        return u.apply({
          target: _ctx.target,
          p: props,
          g: _ctx.g
        }, args);
      });
    };
    return Styled;
  };
}
var styled = new Proxy(makeStyled, {
  get: function get(target, tag) {
    return target(tag);
  }
});
function createGlobalStyles() {
  var fn = makeStyled.call({
    g: 1
  }, "div").apply(null, arguments);
  return function GlobalStyles2(props) {
    fn(props);
    return null;
  };
}
var globalStylesTag = "tc-root";
var disableScrollClass = "tc-disable-scroll";
var usingMouseClass = "tc-using-mouse";
var GlobalStyles = function GlobalStyles() {
  document.body.addEventListener("mousedown", function () {
    return document.body.classList.add(usingMouseClass);
  });
  document.body.addEventListener("keydown", function (event) {
    if (event.key === "Tab") {
      document.body.classList.remove(usingMouseClass);
    }
  });
  var Styles = createGlobalStyles(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    ", " * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n        \n        font-family: -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', Arial, Tahoma, Verdana, sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;        \n        -webkit-tap-highlight-color: transparent;\n    }\n    \n    ", " img {\n      -webkit-user-select: none;\n      -webkit-touch-callout: none;\n    }   \n \n    ", " *:focus {\n        outline: #08f auto 2px;\n    }\n    \n    ", " li {\n        list-style: none;\n    }\n    \n    ", " button {\n        outline: none;\n    }\n    \n    body.", " {\n        position: fixed; \n        overflow-y: scroll;\n        right: 0;\n        left: 0;\n    }\n    \n    body.", " ", " *:focus {\n        outline: none;\n    }\n"])), globalStylesTag, globalStylesTag, globalStylesTag, globalStylesTag, globalStylesTag, disableScrollClass, usingMouseClass, globalStylesTag);
  return createComponent(Styles, {});
};
function hexToRgb(hex) {
  if (hex[0] === "#") {
    hex = hex.slice(1);
  }
  var bigint = parseInt(hex, 16);
  var r = bigint >> 16 & 255;
  var g = bigint >> 8 & 255;
  var b = bigint & 255;
  return [r, g, b].join(",");
}
function rgba(color, opacity) {
  if (color[0] === "#") {
    color = hexToRgb(color);
  }
  return "rgba(".concat(color, ", ").concat(opacity, ")");
}
function toPx(value) {
  return value.toString() + "px";
}
var _InMemoryStorage2 = /*#__PURE__*/function () {
  function _InMemoryStorage() {
    _classCallCheck(this, _InMemoryStorage);
    __publicField(this, "storage", {});
  }
  return _createClass(_InMemoryStorage, [{
    key: "length",
    get: function get() {
      return Object.keys(this.storage).length;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.storage = {};
    }
  }, {
    key: "getItem",
    value: function getItem(key) {
      var _a2;
      return (_a2 = this.storage[key]) != null ? _a2 : null;
    }
  }, {
    key: "key",
    value: function key(index) {
      var _a2;
      var keys = Object.keys(this.storage);
      if (index < 0 || index >= keys.length) {
        return null;
      }
      return (_a2 = keys[index]) != null ? _a2 : null;
    }
  }, {
    key: "removeItem",
    value: function removeItem(key) {
      delete this.storage[key];
    }
  }, {
    key: "setItem",
    value: function setItem(key, value) {
      this.storage[key] = value;
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!_InMemoryStorage2.instance) {
        _InMemoryStorage2.instance = new _InMemoryStorage2();
      }
      return _InMemoryStorage2.instance;
    }
  }]);
}();
var InMemoryStorage = _InMemoryStorage2;
__publicField(InMemoryStorage, "instance");
var TonConnectUIError = /*#__PURE__*/function (_TonConnectError) {
  function TonConnectUIError() {
    var _this4;
    _classCallCheck(this, TonConnectUIError);
    for (var _len4 = arguments.length, args = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {
      args[_key5] = arguments[_key5];
    }
    _this4 = _callSuper(this, TonConnectUIError, [].concat(args));
    Object.setPrototypeOf(_this4, TonConnectUIError.prototype);
    return _this4;
  }
  _inherits(TonConnectUIError, _TonConnectError);
  return _createClass(TonConnectUIError);
}(TonConnectError);
function logDebug() {
  {
    try {
      var _console;
      for (var _len5 = arguments.length, args = new Array(_len5), _key6 = 0; _key6 < _len5; _key6++) {
        args[_key6] = arguments[_key6];
      }
      (_console = console).debug.apply(_console, ["[TON_CONNECT_UI]"].concat(args));
    } catch (e2) {}
  }
}
function logError() {
  {
    try {
      var _console2;
      for (var _len6 = arguments.length, args = new Array(_len6), _key7 = 0; _key7 < _len6; _key7++) {
        args[_key7] = arguments[_key7];
      }
      (_console2 = console).error.apply(_console2, ["[TON_CONNECT_UI]"].concat(args));
    } catch (e2) {}
  }
}
function logWarning() {
  {
    try {
      var _console3;
      for (var _len7 = arguments.length, args = new Array(_len7), _key8 = 0; _key8 < _len7; _key8++) {
        args[_key8] = arguments[_key8];
      }
      (_console3 = console).warn.apply(_console3, ["[TON_CONNECT_UI]"].concat(args));
    } catch (e2) {}
  }
}
function openLink(href) {
  var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "_self";
  logDebug("openLink", href, target);
  window.open(href, target, "noopener noreferrer");
}
function openLinkBlank(href) {
  openLink(href, "_blank");
}
function openDeeplinkWithFallback(href, fallback) {
  var doFallback = function doFallback() {
    if (isBrowser("safari") || isOS("android") && isBrowser("firefox")) {
      return;
    }
    fallback();
  };
  var fallbackTimeout = setTimeout(function () {
    return doFallback();
  }, 200);
  window.addEventListener("blur", function () {
    return clearTimeout(fallbackTimeout);
  }, {
    once: true
  });
  openLink(href, "_self");
}
function getSystemTheme() {
  if (window.matchMedia && window.matchMedia("(prefers-color-scheme: light)").matches) {
    return THEME.LIGHT;
  }
  return THEME.DARK;
}
function subscribeToThemeChange(callback) {
  var handler = function handler(event) {
    return callback(event.matches ? THEME.DARK : THEME.LIGHT);
  };
  window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", handler);
  return function () {
    return window.matchMedia("(prefers-color-scheme: dark)").removeEventListener("change", handler);
  };
}
function disableScroll() {
  if (document.documentElement.scrollHeight === document.documentElement.clientHeight) {
    return;
  }
  document.body.style.top = toPx(-document.documentElement.scrollTop);
  document.body.classList.add(disableScrollClass);
}
function enableScroll() {
  document.body.classList.remove(disableScrollClass);
  document.documentElement.scrollTo({
    top: -parseFloat(getComputedStyle(document.body).top)
  });
  document.body.style.top = "auto";
}
function fixMobileSafariActiveTransition() {
  if (!document.body.hasAttribute("ontouchstart")) {
    document.body.setAttribute("ontouchstart", "");
  }
}
function defineStylesRoot() {
  customElements.define(globalStylesTag, /*#__PURE__*/function (_HTMLElement) {
    function TcRootElement() {
      _classCallCheck(this, TcRootElement);
      return _callSuper(this, TcRootElement, arguments);
    }
    _inherits(TcRootElement, _HTMLElement);
    return _createClass(TcRootElement);
  }(/*#__PURE__*/_wrapNativeSuper(HTMLElement)));
}
function createMacrotask(callback) {
  return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return new Promise(function (resolve) {
            return requestAnimationFrame(resolve);
          });
        case 2:
          callback();
        case 3:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
}
function createMacrotaskAsync(callback) {
  return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return new Promise(function (resolve) {
            return requestAnimationFrame(resolve);
          });
        case 2:
          return _context2.abrupt("return", callback());
        case 3:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
}
function preloadImages(images) {
  if (document.readyState !== "complete") {
    window.addEventListener("load", function () {
      return createMacrotask(function () {
        return preloadImages(images);
      });
    }, {
      once: true
    });
  } else {
    images.forEach(function (img) {
      var node = new window.Image();
      node.src = img;
    });
  }
}
function getWindow$1() {
  if (typeof window !== "undefined") {
    return window;
  }
  return void 0;
}
function tryGetLocalStorage() {
  if (isLocalStorageAvailable()) {
    return localStorage;
  }
  if (isNodeJs()) {
    throw new TonConnectUIError("`localStorage` is unavailable, but it is required for TonConnect. For more details, see https://github.com/ton-connect/sdk/tree/main/packages/sdk#init-connector");
  }
  return InMemoryStorage.getInstance();
}
function isLocalStorageAvailable() {
  try {
    return typeof localStorage !== "undefined";
  } catch (e2) {
    return false;
  }
}
function isNodeJs() {
  return typeof process !== "undefined" && process.versions != null && process.versions.node != null;
}
function getUserAgent() {
  var _a2, _b2, _c2;
  var results = new UAParser().getResult();
  var osName = (_a2 = results.os.name) == null ? void 0 : _a2.toLowerCase();
  var deviceModel = (_b2 = results.device.model) == null ? void 0 : _b2.toLowerCase();
  var os;
  switch (true) {
    case deviceModel === "ipad":
      os = "ipad";
      break;
    case osName === "ios":
      os = "ios";
      break;
    case osName === "android":
      os = "android";
      break;
    case osName === "mac os":
      os = "macos";
      break;
    case osName === "linux":
      os = "linux";
      break;
    case osName == null ? void 0 : osName.includes("windows"):
      os = "windows";
      break;
  }
  var browserName = (_c2 = results.browser.name) == null ? void 0 : _c2.toLowerCase();
  var browser;
  switch (true) {
    case browserName === "chrome":
      browser = "chrome";
      break;
    case browserName === "firefox":
      browser = "firefox";
      break;
    case browserName == null ? void 0 : browserName.includes("safari"):
      browser = "safari";
      break;
    case browserName == null ? void 0 : browserName.includes("opera"):
      browser = "opera";
      break;
  }
  return {
    os: os,
    browser: browser
  };
}
function isOS() {
  for (var _len8 = arguments.length, os = new Array(_len8), _key9 = 0; _key9 < _len8; _key9++) {
    os[_key9] = arguments[_key9];
  }
  return os.includes(getUserAgent().os);
}
function isBrowser() {
  for (var _len9 = arguments.length, browser = new Array(_len9), _key10 = 0; _key10 < _len9; _key10++) {
    browser[_key10] = arguments[_key10];
  }
  return browser.includes(getUserAgent().browser);
}
function toDeeplink(universalLink, deeplink) {
  var url = new URL(universalLink);
  return deeplink + url.search;
}
var WalletInfoStorage = /*#__PURE__*/function () {
  function WalletInfoStorage() {
    _classCallCheck(this, WalletInfoStorage);
    __publicField(this, "localStorage");
    __publicField(this, "storageKey", "ton-connect-ui_wallet-info");
    this.localStorage = tryGetLocalStorage();
  }
  return _createClass(WalletInfoStorage, [{
    key: "setWalletInfo",
    value: function setWalletInfo(walletInfo) {
      this.localStorage.setItem(this.storageKey, JSON.stringify(walletInfo));
    }
  }, {
    key: "getWalletInfo",
    value: function getWalletInfo() {
      var walletInfoString = this.localStorage.getItem(this.storageKey);
      if (!walletInfoString) {
        return null;
      }
      return JSON.parse(walletInfoString);
    }
  }, {
    key: "removeWalletInfo",
    value: function removeWalletInfo() {
      this.localStorage.removeItem(this.storageKey);
    }
  }]);
}();
var PreferredWalletStorage = /*#__PURE__*/function () {
  function PreferredWalletStorage() {
    _classCallCheck(this, PreferredWalletStorage);
    __publicField(this, "localStorage");
    __publicField(this, "storageKey", "ton-connect-ui_preferred-wallet");
    this.localStorage = tryGetLocalStorage();
  }
  return _createClass(PreferredWalletStorage, [{
    key: "setPreferredWalletAppName",
    value: function setPreferredWalletAppName(name) {
      this.localStorage.setItem(this.storageKey, name);
    }
  }, {
    key: "getPreferredWalletAppName",
    value: function getPreferredWalletAppName() {
      return this.localStorage.getItem(this.storageKey) || void 0;
    }
  }]);
}();
var LastSelectedWalletInfoStorage = /*#__PURE__*/function () {
  function LastSelectedWalletInfoStorage() {
    _classCallCheck(this, LastSelectedWalletInfoStorage);
    __publicField(this, "localStorage");
    __publicField(this, "storageKey", "ton-connect-ui_last-selected-wallet-info");
    this.localStorage = tryGetLocalStorage();
  }
  return _createClass(LastSelectedWalletInfoStorage, [{
    key: "setLastSelectedWalletInfo",
    value: function setLastSelectedWalletInfo(walletInfo) {
      this.localStorage.setItem(this.storageKey, JSON.stringify(walletInfo));
    }
  }, {
    key: "getLastSelectedWalletInfo",
    value: function getLastSelectedWalletInfo() {
      var walletInfoString = this.localStorage.getItem(this.storageKey);
      if (!walletInfoString) {
        return null;
      }
      return JSON.parse(walletInfoString);
    }
  }, {
    key: "removeLastSelectedWalletInfo",
    value: function removeLastSelectedWalletInfo() {
      this.localStorage.removeItem(this.storageKey);
    }
  }]);
}();
var _createSignal13 = createSignal({
    status: "closed",
    closeReason: null
  }),
  _createSignal14 = _slicedToArray(_createSignal13, 2),
  walletsModalState = _createSignal14[0],
  setWalletsModalState = _createSignal14[1];
var getWalletsModalIsOpened = createMemo(function () {
  return walletsModalState().status === "opened";
});
var _createSignal15 = createSignal({
    status: "closed",
    closeReason: null
  }),
  _createSignal16 = _slicedToArray(_createSignal15, 2),
  singleWalletModalState = _createSignal16[0],
  setSingleWalletModalState = _createSignal16[1];
var getSingleWalletModalIsOpened = createMemo(function () {
  return singleWalletModalState().status === "opened";
});
var getSingleWalletModalWalletInfo = createMemo(function () {
  var state = singleWalletModalState();
  if (state.status === "opened") {
    return state.walletInfo;
  }
  return null;
});
var lastSelectedWalletInfoStorage = typeof window !== "undefined" ? new LastSelectedWalletInfoStorage() : void 0;
var _createSignal17 = createSignal((lastSelectedWalletInfoStorage == null ? void 0 : lastSelectedWalletInfoStorage.getLastSelectedWalletInfo()) || null),
  _createSignal18 = _slicedToArray(_createSignal17, 2),
  lastSelectedWalletInfo = _createSignal18[0],
  _setLastSelectedWalletInfo = _createSignal18[1];
var setLastSelectedWalletInfo = function setLastSelectedWalletInfo(walletInfo) {
  if (!lastSelectedWalletInfoStorage) {
    lastSelectedWalletInfoStorage = new LastSelectedWalletInfoStorage();
  }
  if (walletInfo) {
    lastSelectedWalletInfoStorage.setLastSelectedWalletInfo(walletInfo);
  } else {
    lastSelectedWalletInfoStorage.removeLastSelectedWalletInfo();
  }
  _setLastSelectedWalletInfo(walletInfo);
};
var _createSignal19 = createSignal(null),
  _createSignal20 = _slicedToArray(_createSignal19, 2),
  action = _createSignal20[0],
  _setAction = _createSignal20[1];
var common$1 = {
  close: "Close",
  openWallet: "Open wallet",
  copyLink: "Copy Link",
  linkCopied: "Link Copied",
  copied: "Copied",
  yourWallet: "Your Wallet",
  retry: "Retry",
  get: "GET",
  mobile: "Mobile",
  browserExtension: "Browser Extension",
  desktop: "Desktop"
};
var button$1 = {
  connectWallet: "Connect Wallet",
  dropdown: {
    copy: "Copy address",
    copied: "Address copied!",
    disconnect: "Disconnect"
  }
};
var notifications$1 = {
  confirm: {
    header: "Open {{ name }} to\xA0confirm the\xA0transaction."
  },
  transactionSent: {
    header: "Transaction sent",
    text: "Your transaction\xA0will be\xA0processed in\xA0a\xA0few seconds."
  },
  transactionCanceled: {
    header: "Transaction canceled",
    text: "There will be no changes to\xA0your account."
  }
};
var walletItem$1 = {
  walletOn: "Wallet On",
  recent: "Recent",
  installed: "Installed",
  popular: "Popular"
};
var walletModal$1 = {
  loading: "Loading wallets",
  wallets: "Wallets",
  mobileUniversalModal: {
    connectYourWallet: "Connect your wallet",
    openWalletOnTelegramOrSelect: "Open Wallet in Telegram or select your wallet to connect",
    openWalletOnTelegram: "Open Wallet in Telegram",
    openLink: "Open Link",
    scan: "Scan with your mobile wallet"
  },
  desktopUniversalModal: {
    connectYourWallet: "Connect your wallet",
    scan: "Scan with your mobile wallet",
    availableWallets: "Available wallets"
  },
  mobileConnectionModal: {
    showQR: "Show QR Code",
    scanQR: "Scan the\xA0QR code below with your phone\u2019s\xA0or\xA0{{ name }}\u2019s camera",
    continueIn: "Continue in {{ name }}\u2026",
    connectionDeclined: "Connection declined"
  },
  desktopConnectionModal: {
    scanQR: "Scan the\xA0QR code below with your phone\u2019s\xA0or\xA0{{ name }}\u2019s camera",
    continueInExtension: "Continue in\xA0{{ name }} browser extension\u2026",
    dontHaveExtension: "Seems you don't have installed {{ name }}\xA0browser\xA0extension",
    getWallet: "Get {{ name }}",
    continueOnDesktop: "Continue in\xA0{{ name }} on desktop\u2026",
    openWalletOnTelegram: "Open Wallet in Telegram on desktop",
    connectionDeclined: "Connection declined"
  },
  infoModal: {
    whatIsAWallet: "What is a wallet",
    secureDigitalAssets: "Secure digital assets storage",
    walletProtects: "A wallet protects and manages your digital assets\xA0including TON, tokens and collectables.",
    controlIdentity: "Control your Web3 identity",
    manageIdentity: "Manage your digital identity and access decentralized applications with ease. Maintain control over your data and engage securely in\xA0the\xA0blockchain ecosystem.",
    effortlessCryptoTransactions: "Effortless crypto transactions",
    easilySend: "Easily send, receive, monitor your cryptocurrencies.\xA0Streamline your operations with\xA0decentralized applications.",
    getAWallet: "Get a Wallet"
  }
};
var actionModal$1 = {
  confirmTransaction: {
    header: "Confirm the\xA0transaction in\xA0{{ name }}",
    text: "It will only take a\xA0moment."
  },
  transactionSent: "$notifications.transactionSent",
  transactionCanceled: "$notifications.transactionCanceled"
};
var en = {
  common: common$1,
  button: button$1,
  notifications: notifications$1,
  walletItem: walletItem$1,
  walletModal: walletModal$1,
  actionModal: actionModal$1
};
var common = {
  close: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
  openWallet: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0451\u043A",
  copyLink: "\u041A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0443",
  linkCopied: "\u0421\u0441\u044B\u043B\u043A\u0430 \u0441\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D\u0430",
  copied: "\u0421\u0441\u044B\u043B\u043A\u0430 \u0441\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D\u0430",
  yourWallet: "\u0412\u0430\u0448 \u043A\u043E\u0448\u0435\u043B\u0451\u043A",
  retry: "\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u044C",
  get: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C",
  mobile: "\u041C\u043E\u0431\u0438\u043B\u044C\u043D\u044B\u0439",
  browserExtension: "\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435",
  desktop: "\u0414\u0435\u0441\u043A\u0442\u043E\u043F"
};
var button = {
  connectWallet: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0451\u043A",
  dropdown: {
    copy: "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0430\u0434\u0440\u0435\u0441",
    copied: "\u0410\u0434\u0440\u0435\u0441 \u0441\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D!",
    disconnect: "\u041E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0451\u043A"
  }
};
var notifications = {
  confirm: {
    header: "\u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 {{ name }}, \u0447\u0442\u043E\u0431\u044B\xA0\u043F\u043E\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044C \u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044E."
  },
  transactionSent: {
    header: "\u0422\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044F \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0430",
    text: "\u0412\u0430\u0448\u0430 \u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044F\xA0\u0431\u0443\u0434\u0435\u0442 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0430\u043D\u0430 \u0447\u0435\u0440\u0435\u0437\xA0\u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E \u0441\u0435\u043A\u0443\u043D\u0434."
  },
  transactionCanceled: {
    header: "\u0422\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044F \u043E\u0442\u043C\u0435\u043D\u0435\u043D\u0430",
    text: "\u0421\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043E \u0441\u0447\u0451\u0442\u0430 \u043D\u0435\xA0\u0438\u0437\u043C\u0435\u043D\u0438\u0442\u0441\u044F."
  }
};
var walletItem = {
  walletOn: "Wallet \u0432",
  recent: "\u041D\u0435\u0434\u0430\u0432\u043D\u0438\u0439",
  installed: "\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D",
  popular: "\u041F\u043E\u043F\u0443\u043B\u044F\u0440\u0435\u043D"
};
var walletModal = {
  loading: "\u041A\u043E\u0448\u0435\u043B\u044C\u043A\u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044E\u0442\u0441\u044F",
  wallets: "\u041A\u043E\u0448\u0435\u043B\u044C\u043A\u0438",
  mobileUniversalModal: {
    connectYourWallet: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u0435 \u043A\u043E\u0448\u0435\u043B\u0451\u043A",
    openWalletOnTelegramOrSelect: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u0435 Wallet \u0432\xA0Telegram \u0438\u043B\u0438\xA0\u0432\u044B\u0431\u0435\u0440\u0435\u0442\u0435 \u043A\u043E\u0448\u0435\u043B\u0451\u043A \u0434\u043B\u044F\xA0\u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u044F",
    openWalletOnTelegram: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C Wallet \u0432 Telegram",
    openLink: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0443",
    scan: "\u041E\u0442\u0441\u043A\u0430\u043D\u0438\u0440\u0443\u0439\u0442\u0435 \u043A\u0430\u043C\u0435\u0440\u043E\u0439 \u0432\u0430\u0448\u0435\u0433\u043E\xA0\u0442\u0435\u043B\u0435\u0444\u043E\u043D\u0430"
  },
  desktopUniversalModal: {
    connectYourWallet: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u0435 \u043A\u043E\u0448\u0435\u043B\u0451\u043A",
    scan: "\u041E\u0442\u0441\u043A\u0430\u043D\u0438\u0440\u0443\u0439\u0442\u0435 QR-\u043A\u043E\u0434 \u043A\u0430\u043C\u0435\u0440\u043E\u0439 \u0432\u0430\u0448\u0435\u0433\u043E\xA0\u0442\u0435\u043B\u0435\u0444\u043E\u043D\u0430",
    availableWallets: "\u0414\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0435 \u043A\u043E\u0448\u0435\u043B\u044C\u043A\u0438"
  },
  mobileConnectionModal: {
    showQR: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C QR-\u043A\u043E\u0434",
    scanQR: "\u041E\u0442\u0441\u043A\u0430\u043D\u0438\u0440\u0443\u0439\u0442\u0435 QR-\u043A\u043E\u0434 \u043D\u0438\u0436\u0435 \u043A\u0430\u043C\u0435\u0440\u043E\u0439 \u0432\xA0\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0438 {{ name }}, \u0438\u043B\u0438\xA0\u043A\u0430\u043C\u0435\u0440\u043E\u0439 \u0442\u0435\u043B\u0435\u0444\u043E\u043D\u0430",
    continueIn: "\u041F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u0435 \u0432 {{ name }}\u2026",
    connectionDeclined: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u043E\u0442\u043A\u043B\u043E\u043D\u0435\u043D\u043E"
  },
  desktopConnectionModal: {
    scanQR: "\u041E\u0442\u0441\u043A\u0430\u043D\u0438\u0440\u0443\u0439\u0442\u0435 QR-\u043A\u043E\u0434 \u043D\u0438\u0436\u0435 \u043A\u0430\u043C\u0435\u0440\u043E\u0439 \u0432\xA0\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0438 {{ name }}, \u0438\u043B\u0438\xA0\u043A\u0430\u043C\u0435\u0440\u043E\u0439 \u0442\u0435\u043B\u0435\u0444\u043E\u043D\u0430",
    continueInExtension: "\u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u043D\u043E\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435 {{ name }}",
    dontHaveExtension: "\u041F\u043E\u0445\u043E\u0436\u0435, \u0443 \u0432\u0430\u0441 \u043D\u0435\xA0\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u043E \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u043D\u043E\u0435\xA0\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435\xA0{{ name }}",
    getWallet: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C {{ name }}",
    continueOnDesktop: "\u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 {{ name }} \u043D\u0430\xA0\u043A\u043E\u043C\u043F\u044C\u044E\u0442\u0435\u0440\u0435\u2026",
    openWalletOnTelegram: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C Wallet \u0432\xA0Telegram",
    connectionDeclined: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u043E\u0442\u043A\u043B\u043E\u043D\u0435\u043D\u043E"
  },
  infoModal: {
    whatIsAWallet: "\u0427\u0442\u043E \u0442\u0430\u043A\u043E\u0435 \u043A\u043E\u0448\u0435\u043B\u0451\u043A?",
    secureDigitalAssets: "\u041D\u0430\u0434\u0435\u0436\u043D\u043E\u0435 \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435 \u0446\u0438\u0444\u0440\u043E\u0432\u044B\u0445 \u0430\u043A\u0442\u0438\u0432\u043E\u0432",
    walletProtects: "\u041A\u043E\u0448\u0435\u043B\u0451\u043A \u0437\u0430\u0449\u0438\u0449\u0430\u0435\u0442 \u0432\u0430\u0448\u0438 \u0446\u0438\u0444\u0440\u043E\u0432\u044B\u0435 \u0430\u043A\u0442\u0438\u0432\u044B, \u0432\u043A\u043B\u044E\u0447\u0430\u044F TON, \u0442\u043E\u043A\u0435\u043D\u044B \u0438\xA0\u043F\u0440\u0435\u0434\u043C\u0435\u0442\u044B \u043A\u043E\u043B\u043B\u0435\u043A\u0446\u0438\u043E\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F, \u0438\xA0\u0443\u043F\u0440\u0430\u0432\u043B\u044F\u0435\u0442 \u0438\u043C\u0438.",
    controlIdentity: "\u041A\u043E\u043D\u0442\u0440\u043E\u043B\u044C \u0441\u0432\u043E\u0435\u0439 \u043B\u0438\u0447\u043D\u043E\u0441\u0442\u0438 Web3",
    manageIdentity: "\u0423\u043F\u0440\u0430\u0432\u043B\u044F\u0439\u0442\u0435 \u0441\u0432\u043E\u0435\u0439 \u0446\u0438\u0444\u0440\u043E\u0432\u043E\u0439 \u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0446\u0438\u0435\u0439 \u0438\xA0\u0441\xA0\u043B\u0435\u0433\u043A\u043E\u0441\u0442\u044C\u044E \u043F\u043E\u043B\u0443\u0447\u0430\u0439\u0442\u0435 \u0434\u043E\u0441\u0442\u0443\u043F \u043A\xA0\u0434\u0435\u0446\u0435\u043D\u0442\u0440\u0430\u043B\u0438\u0437\u043E\u0432\u0430\u043D\u043D\u044B\u043C \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F\u043C. \u0421\u043E\u0445\u0440\u0430\u043D\u044F\u0439\u0442\u0435 \u043A\u043E\u043D\u0442\u0440\u043E\u043B\u044C \u043D\u0430\u0434\xA0\u0441\u0432\u043E\u0438\u043C\u0438 \u0434\u0430\u043D\u043D\u044B\u043C\u0438 \u0438\xA0\u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u043E \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u0439\u0442\u0435 \u0432\xA0\u044D\u043A\u043E\u0441\u0438\u0441\u0442\u0435\u043C\u0435\xA0\u0431\u043B\u043E\u043A\u0447\u0435\u0439\u043D\u0430.",
    effortlessCryptoTransactions: "\u041F\u0440\u043E\u0441\u0442\u044B\u0435 \u043A\u0440\u0438\u043F\u0442\u043E\u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u0438",
    easilySend: "\u041B\u0435\u0433\u043A\u043E \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u044F\u0439\u0442\u0435, \u043F\u043E\u043B\u0443\u0447\u0430\u0439\u0442\u0435 \u0438\xA0\u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u0441\u0432\u043E\u0438 \u043A\u0440\u0438\u043F\u0442\u043E\u0432\u0430\u043B\u044E\u0442\u044B. \u041E\u043F\u0442\u0438\u043C\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u0432\u043E\u0438 \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\xA0\u043F\u043E\u043C\u043E\u0449\u044C\u044E \u0434\u0435\u0446\u0435\u043D\u0442\u0440\u0430\u043B\u0438\u0437\u043E\u0432\u0430\u043D\u043D\u044B\u0445 \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0439.",
    getAWallet: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0451\u043A"
  }
};
var actionModal = {
  confirmTransaction: {
    header: "\u041F\u043E\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432\xA0{{ name }}",
    text: "\u042D\u0442\u043E \u0437\u0430\u0439\u043C\u0435\u0442 \u043F\u0430\u0440\u0443 \u0441\u0435\u043A\u0443\u043D\u0434."
  },
  transactionSent: "$notifications.transactionSent",
  transactionCanceled: "$notifications.transactionCanceled"
};
var ru = {
  common: common,
  button: button,
  notifications: notifications,
  walletItem: walletItem,
  walletModal: walletModal,
  actionModal: actionModal
};
var i18nDictionary = {
  en: parseDictionary(en),
  ru: parseDictionary(ru)
};
function parseDictionary(dictionary) {
  var refSymbol = "$";
  var _iterate = function iterate(subDictionary) {
    Object.entries(subDictionary).forEach(function (_ref4) {
      var _ref5 = _slicedToArray(_ref4, 2),
        key = _ref5[0],
        value = _ref5[1];
      if (_typeof(value) === "object" && value) {
        return _iterate(value);
      }
      if (typeof value === "string") {
        if (value[0] === refSymbol) {
          var path = value.slice(1).split(".");
          var obj = dictionary;
          path.forEach(function (item) {
            if (item in obj) {
              obj = obj[item];
            } else {
              throw new Error("Cannot parse translations: there is no property ".concat(item, " in translation"));
            }
          });
          subDictionary[key] = obj;
        }
        if (value.slice(0, 2) === "\\".concat(refSymbol)) {
          subDictionary[key] = value.slice(1);
        }
      }
    });
  };
  _iterate(dictionary);
  return dictionary;
}
var ConnectorContext = createContext();
var $RAW = Symbol("store-raw"),
  $NODE = Symbol("store-node"),
  $NAME = Symbol("store-name");
function wrap$1(value, name) {
  var p2 = value[$PROXY];
  if (!p2) {
    Object.defineProperty(value, $PROXY, {
      value: p2 = new Proxy(value, proxyTraps$1)
    });
    if (!Array.isArray(value)) {
      var keys = Object.keys(value),
        desc = Object.getOwnPropertyDescriptors(value);
      for (var i2 = 0, l2 = keys.length; i2 < l2; i2++) {
        var prop = keys[i2];
        if (desc[prop].get) {
          Object.defineProperty(value, prop, {
            enumerable: desc[prop].enumerable,
            get: desc[prop].get.bind(p2)
          });
        }
      }
    }
  }
  return p2;
}
function isWrappable(obj) {
  var proto;
  return obj != null && _typeof(obj) === "object" && (obj[$PROXY] || !(proto = Object.getPrototypeOf(obj)) || proto === Object.prototype || Array.isArray(obj));
}
function unwrap(item) {
  var set = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Set();
  var result, unwrapped, v, prop;
  if (result = item != null && item[$RAW]) return result;
  if (!isWrappable(item) || set.has(item)) return item;
  if (Array.isArray(item)) {
    if (Object.isFrozen(item)) item = item.slice(0);else set.add(item);
    for (var i2 = 0, l2 = item.length; i2 < l2; i2++) {
      v = item[i2];
      if ((unwrapped = unwrap(v, set)) !== v) item[i2] = unwrapped;
    }
  } else {
    if (Object.isFrozen(item)) item = Object.assign({}, item);else set.add(item);
    var keys = Object.keys(item),
      desc = Object.getOwnPropertyDescriptors(item);
    for (var _i6 = 0, _l = keys.length; _i6 < _l; _i6++) {
      prop = keys[_i6];
      if (desc[prop].get) continue;
      v = item[prop];
      if ((unwrapped = unwrap(v, set)) !== v) item[prop] = unwrapped;
    }
  }
  return item;
}
function getDataNodes(target) {
  var nodes = target[$NODE];
  if (!nodes) Object.defineProperty(target, $NODE, {
    value: nodes = {}
  });
  return nodes;
}
function getDataNode(nodes, property, value) {
  return nodes[property] || (nodes[property] = createDataNode(value));
}
function proxyDescriptor$1(target, property) {
  var desc = Reflect.getOwnPropertyDescriptor(target, property);
  if (!desc || desc.get || !desc.configurable || property === $PROXY || property === $NODE || property === $NAME) return desc;
  delete desc.value;
  delete desc.writable;
  desc.get = function () {
    return target[$PROXY][property];
  };
  return desc;
}
function trackSelf(target) {
  if (getListener()) {
    var nodes = getDataNodes(target);
    (nodes._ || (nodes._ = createDataNode()))();
  }
}
function ownKeys$1(target) {
  trackSelf(target);
  return Reflect.ownKeys(target);
}
function createDataNode(value) {
  var _createSignal21 = createSignal(value, {
      equals: false,
      internal: true
    }),
    _createSignal22 = _slicedToArray(_createSignal21, 2),
    s2 = _createSignal22[0],
    set = _createSignal22[1];
  s2.$ = set;
  return s2;
}
var proxyTraps$1 = {
  get: function get(target, property, receiver) {
    if (property === $RAW) return target;
    if (property === $PROXY) return receiver;
    if (property === $TRACK) {
      trackSelf(target);
      return receiver;
    }
    var nodes = getDataNodes(target);
    var tracked = nodes.hasOwnProperty(property);
    var value = tracked ? nodes[property]() : target[property];
    if (property === $NODE || property === "__proto__") return value;
    if (!tracked) {
      var desc = Object.getOwnPropertyDescriptor(target, property);
      if (getListener() && (typeof value !== "function" || target.hasOwnProperty(property)) && !(desc && desc.get)) value = getDataNode(nodes, property, value)();
    }
    return isWrappable(value) ? wrap$1(value) : value;
  },
  has: function has(target, property) {
    if (property === $RAW || property === $PROXY || property === $TRACK || property === $NODE || property === "__proto__") return true;
    this.get(target, property, target);
    return property in target;
  },
  set: function set() {
    return true;
  },
  deleteProperty: function deleteProperty() {
    return true;
  },
  ownKeys: ownKeys$1,
  getOwnPropertyDescriptor: proxyDescriptor$1
};
function setProperty(state, property, value) {
  var deleting = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (!deleting && state[property] === value) return;
  var prev = state[property],
    len = state.length;
  if (value === void 0) delete state[property];else state[property] = value;
  var nodes = getDataNodes(state),
    node;
  if (node = getDataNode(nodes, property, prev)) node.$(function () {
    return value;
  });
  if (Array.isArray(state) && state.length !== len) (node = getDataNode(nodes, "length", len)) && node.$(state.length);
  (node = nodes._) && node.$();
}
function mergeStoreNode(state, value) {
  var keys = Object.keys(value);
  for (var i2 = 0; i2 < keys.length; i2 += 1) {
    var key = keys[i2];
    setProperty(state, key, value[key]);
  }
}
function updateArray(current, next) {
  if (typeof next === "function") next = next(current);
  next = unwrap(next);
  if (Array.isArray(next)) {
    if (current === next) return;
    var i2 = 0,
      len = next.length;
    for (; i2 < len; i2++) {
      var value = next[i2];
      if (current[i2] !== value) setProperty(current, i2, value);
    }
    setProperty(current, "length", len);
  } else mergeStoreNode(current, next);
}
function updatePath(current, path) {
  var traversed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var part,
    prev = current;
  if (path.length > 1) {
    part = path.shift();
    var partType = _typeof(part),
      isArray = Array.isArray(current);
    if (Array.isArray(part)) {
      for (var i2 = 0; i2 < part.length; i2++) {
        updatePath(current, [part[i2]].concat(path), traversed);
      }
      return;
    } else if (isArray && partType === "function") {
      for (var _i7 = 0; _i7 < current.length; _i7++) {
        if (part(current[_i7], _i7)) updatePath(current, [_i7].concat(path), traversed);
      }
      return;
    } else if (isArray && partType === "object") {
      var _part = part,
        _part$from = _part.from,
        from = _part$from === void 0 ? 0 : _part$from,
        _part$to = _part.to,
        to = _part$to === void 0 ? current.length - 1 : _part$to,
        _part$by = _part.by,
        by = _part$by === void 0 ? 1 : _part$by;
      for (var _i8 = from; _i8 <= to; _i8 += by) {
        updatePath(current, [_i8].concat(path), traversed);
      }
      return;
    } else if (path.length > 1) {
      updatePath(current[part], path, [part].concat(traversed));
      return;
    }
    prev = current[part];
    traversed = [part].concat(traversed);
  }
  var value = path[0];
  if (typeof value === "function") {
    value = value(prev, traversed);
    if (value === prev) return;
  }
  if (part === void 0 && value == void 0) return;
  value = unwrap(value);
  if (part === void 0 || isWrappable(prev) && isWrappable(value) && !Array.isArray(value)) {
    mergeStoreNode(prev, value);
  } else setProperty(current, part, value);
}
function createStore() {
  for (var _len10 = arguments.length, _ref6 = new Array(_len10), _key11 = 0; _key11 < _len10; _key11++) {
    _ref6[_key11] = arguments[_key11];
  }
  var store = _ref6[0];
    _ref6[1];
  var unwrappedStore = unwrap(store || {});
  var isArray = Array.isArray(unwrappedStore);
  var wrappedStore = wrap$1(unwrappedStore);
  function setStore() {
    for (var _len11 = arguments.length, args = new Array(_len11), _key12 = 0; _key12 < _len11; _key12++) {
      args[_key12] = arguments[_key12];
    }
    batch(function () {
      isArray && args.length === 1 ? updateArray(unwrappedStore, args[0]) : updatePath(unwrappedStore, args);
    });
  }
  return [wrappedStore, setStore];
}
var defaultLightColorsSet = {
  constant: {
    black: "#000000",
    white: "#FFFFFF"
  },
  connectButton: {
    background: "#0098EA",
    foreground: "#FFFFFF"
  },
  accent: "#0098EA",
  telegramButton: "#0098EA",
  icon: {
    primary: "#0F0F0F",
    secondary: "#7A8999",
    tertiary: "#C1CAD2",
    success: "#29CC6A",
    error: "#F5A73B"
  },
  background: {
    primary: "#FFFFFF",
    secondary: "#F1F3F5",
    segment: "#FFFFFF",
    tint: "#F1F3F5",
    qr: "#F1F3F5"
  },
  text: {
    primary: "#0F0F0F",
    secondary: "#6A7785"
  }
};
var defaultDarkColorsSet = {
  constant: {
    black: "#000000",
    white: "#FFFFFF"
  },
  connectButton: {
    background: "#0098EA",
    foreground: "#FFFFFF"
  },
  accent: "#E5E5EA",
  telegramButton: "#31A6F5",
  icon: {
    primary: "#E5E5EA",
    secondary: "#909099",
    tertiary: "#434347",
    success: "#29CC6A",
    error: "#F5A73B"
  },
  background: {
    primary: "#121214",
    secondary: "#18181A",
    segment: "#262629",
    tint: "#222224",
    qr: "#FFFFFF"
  },
  text: {
    primary: "#E5E5EA",
    secondary: "#7D7D85"
  }
};
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
function isObject$2(o2) {
  return Object.prototype.toString.call(o2) === "[object Object]";
}
function isPlainObject(o2) {
  var ctor, prot;
  if (isObject$2(o2) === false) return false;
  ctor = o2.constructor;
  if (ctor === void 0) return true;
  prot = ctor.prototype;
  if (isObject$2(prot) === false) return false;
  if (prot.hasOwnProperty("isPrototypeOf") === false) {
    return false;
  }
  return true;
}
function mergeOptions(options, defaultOptions) {
  if (!options) {
    return defaultOptions;
  }
  var overwriteMerge = function overwriteMerge(_, sourceArray, __) {
    return sourceArray;
  };
  return deepmerge$1(defaultOptions, options, {
    arrayMerge: overwriteMerge,
    isMergeableObject: isPlainObject
  });
}
var _createStore = createStore({
    theme: THEME.LIGHT,
    colors: defaultLightColorsSet,
    borderRadius: "m"
  }),
  _createStore2 = _slicedToArray(_createStore, 2),
  themeState = _createStore2[0],
  setThemeState = _createStore2[1];
var themeColorsMappingDefault = _defineProperty$1(_defineProperty$1({}, THEME.LIGHT, defaultLightColorsSet), THEME.DARK, defaultDarkColorsSet);
var themeCustomColors = _defineProperty$1(_defineProperty$1({}, THEME.LIGHT, void 0), THEME.DARK, void 0);
function setTheme(theme, colorsSet) {
  if (colorsSet) {
    themeCustomColors[THEME.DARK] = mergeOptions(colorsSet[THEME.DARK], themeCustomColors[THEME.DARK]);
    themeCustomColors[THEME.LIGHT] = mergeOptions(colorsSet[THEME.LIGHT], themeCustomColors[THEME.LIGHT]);
  }
  setThemeState({
    theme: theme,
    colors: mergeOptions(themeCustomColors[theme], themeColorsMappingDefault[theme])
  });
}
function setBorderRadius(borderRadius) {
  setThemeState({
    borderRadius: borderRadius
  });
}
function setColors(colorsSet) {
  themeCustomColors[THEME.DARK] = mergeOptions(colorsSet[THEME.DARK], themeCustomColors[THEME.DARK]);
  themeCustomColors[THEME.LIGHT] = mergeOptions(colorsSet[THEME.LIGHT], themeCustomColors[THEME.LIGHT]);
  setThemeState(function (state) {
    return {
      colors: mergeOptions(themeCustomColors[state.theme], themeColorsMappingDefault[state.theme])
    };
  });
}
var ImagePlaceholder = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    background-color: ", ";\n"])), function (props) {
  return props.theme.colors.background.secondary;
});
var Image = function Image(props) {
  var imgRef;
  var _createSignal23 = createSignal(null),
    _createSignal24 = _slicedToArray(_createSignal23, 2),
    image = _createSignal24[0],
    setImage = _createSignal24[1];
  createEffect(function () {
    var img = new window.Image();
    img.src = props.src;
    img.alt = props.alt || "";
    img.setAttribute("draggable", "false");
    if (props["class"]) {
      img.classList.add(props["class"]);
    }
    if (img.complete) {
      return setImage(img);
    }
    img.addEventListener("load", function () {
      return setImage(img);
    });
    return function () {
      return img.removeEventListener("load", function () {
        return setImage(img);
      });
    };
  });
  return [createComponent(Show, {
    get when() {
      return image();
    },
    get children() {
      return image();
    }
  }), createComponent(Show, {
    get when() {
      return !image();
    },
    get children() {
      return createComponent(ImagePlaceholder, _defineProperty$1(_defineAccessor("get", {}, "class", function () {
        return props["class"];
      }), "ref", function ref(r$) {
        var _ref$ = imgRef;
        typeof _ref$ === "function" ? _ref$(r$) : imgRef = r$;
      }));
    }
  })];
};
var initParams = {};
try {
  var locationHash = location.hash.toString();
  initParams = urlParseHashParams(locationHash);
} catch (e2) {}
var tmaPlatform = "unknown";
if (initParams == null ? void 0 : initParams.tgWebAppPlatform) {
  tmaPlatform = (_a = initParams.tgWebAppPlatform) != null ? _a : "unknown";
}
if (tmaPlatform === "unknown") {
  var window2 = getWindow$1();
  tmaPlatform = (_d = (_c = (_b = window2 == null ? void 0 : window2.Telegram) == null ? void 0 : _b.WebApp) == null ? void 0 : _c.platform) != null ? _d : "unknown";
}
var webAppVersion = "6.0";
if (initParams == null ? void 0 : initParams.tgWebAppVersion) {
  webAppVersion = initParams.tgWebAppVersion;
}
if (!webAppVersion) {
  var _window = getWindow$1();
  webAppVersion = (_g = (_f = (_e = _window == null ? void 0 : _window.Telegram) == null ? void 0 : _e.WebApp) == null ? void 0 : _f.version) != null ? _g : "6.0";
}
function isTmaPlatform() {
  for (var _len12 = arguments.length, platforms = new Array(_len12), _key13 = 0; _key13 < _len12; _key13++) {
    platforms[_key13] = arguments[_key13];
  }
  return platforms.includes(tmaPlatform);
}
function isInTMA() {
  var _a2;
  return tmaPlatform !== "unknown" || !!((_a2 = getWindow$1()) == null ? void 0 : _a2.TelegramWebviewProxy);
}
function isInTelegramBrowser() {
  var _a2;
  var isTelegramWebview = !!((_a2 = getWindow$1()) == null ? void 0 : _a2.TelegramWebview);
  return (isInTMA() || isTelegramWebview) && tmaPlatform === "unknown";
}
function sendExpand() {
  postEvent("web_app_expand", {});
}
function sendOpenTelegramLink(link, fallback) {
  var url = new URL(link);
  if (url.protocol !== "http:" && url.protocol !== "https:") {
    if (fallback) {
      return fallback();
    }
    throw new TonConnectUIError("Url protocol is not supported: ".concat(url));
  }
  if (url.hostname !== "t.me") {
    if (fallback) {
      return fallback();
    }
    throw new TonConnectUIError("Url host is not supported: ".concat(url));
  }
  var pathFull = url.pathname + url.search;
  if (isIframe() || versionAtLeast("6.1")) {
    postEvent("web_app_open_tg_link", {
      path_full: pathFull
    });
  } else {
    openLinkBlank("https://t.me" + pathFull);
  }
}
function isIframe() {
  try {
    var _window2 = getWindow$1();
    if (!_window2) {
      return false;
    }
    return _window2.parent != null && _window2 !== _window2.parent;
  } catch (e2) {
    return false;
  }
}
function postEvent(eventType, eventData) {
  try {
    var _window3 = getWindow$1();
    if (!_window3) {
      throw new TonConnectUIError("Can't post event to parent window: window is not defined");
    }
    if (_window3.TelegramWebviewProxy !== void 0) {
      logDebug("postEvent", eventType, eventData);
      _window3.TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));
    } else if (_window3.external && "notify" in _window3.external) {
      logDebug("postEvent", eventType, eventData);
      _window3.external.notify(JSON.stringify({
        eventType: eventType,
        eventData: eventData
      }));
    } else if (isIframe()) {
      var trustedTarget = "*";
      var message = JSON.stringify({
        eventType: eventType,
        eventData: eventData
      });
      logDebug("postEvent", eventType, eventData);
      _window3.parent.postMessage(message, trustedTarget);
    } else {
      throw new TonConnectUIError("Can't post event to TMA");
    }
  } catch (e2) {
    logError("Can't post event to parent window: ".concat(e2));
  }
}
function urlParseHashParams(locationHash) {
  locationHash = locationHash.replace(/^#/, "");
  var params = {};
  if (!locationHash.length) {
    return params;
  }
  if (locationHash.indexOf("=") < 0 && locationHash.indexOf("?") < 0) {
    params._path = urlSafeDecode(locationHash);
    return params;
  }
  var qIndex = locationHash.indexOf("?");
  if (qIndex >= 0) {
    var pathParam = locationHash.substr(0, qIndex);
    params._path = urlSafeDecode(pathParam);
    locationHash = locationHash.substr(qIndex + 1);
  }
  var query_params = urlParseQueryString(locationHash);
  for (var k in query_params) {
    params[k] = query_params[k];
  }
  return params;
}
function urlSafeDecode(urlencoded) {
  try {
    urlencoded = urlencoded.replace(/\+/g, "%20");
    return decodeURIComponent(urlencoded);
  } catch (e2) {
    return urlencoded;
  }
}
function urlParseQueryString(queryString) {
  var params = {};
  if (!queryString.length) {
    return params;
  }
  var queryStringParams = queryString.split("&");
  var i2, param, paramName, paramValue;
  for (i2 = 0; i2 < queryStringParams.length; i2++) {
    param = queryStringParams[i2].split("=");
    paramName = urlSafeDecode(param[0]);
    paramValue = param[1] == null ? null : urlSafeDecode(param[1]);
    params[paramName] = paramValue;
  }
  return params;
}
function versionCompare(v1, v2) {
  if (typeof v1 !== "string") v1 = "";
  var v1List = v1.replace(/^\s+|\s+$/g, "").split(".");
  var v2List = v2.replace(/^\s+|\s+$/g, "").split(".");
  var a2, i2, p1, p2;
  a2 = Math.max(v1List.length, v2List.length);
  for (i2 = 0; i2 < a2; i2++) {
    p1 = parseInt(v1List[i2]) || 0;
    p2 = parseInt(v2List[i2]) || 0;
    if (p1 === p2) continue;
    if (p1 > p2) return 1;
    return -1;
  }
  return 0;
}
function versionAtLeast(ver) {
  return versionCompare(webAppVersion, ver) >= 0;
}
var maxWidth = {
  mobile: 440,
  tablet: 1020
};
function isDevice(device) {
  var window2 = getWindow$1();
  if (!window2) {
    return device === "desktop";
  }
  if (isTmaPlatform("weba")) {
    return true;
  }
  var width = window2.innerWidth;
  switch (device) {
    case "desktop":
      return width > maxWidth.tablet;
    case "tablet":
      return width > maxWidth.mobile;
    default:
    case "mobile":
      return width <= maxWidth.mobile || isOS("ios", "android", "ipad");
  }
}
function media(device) {
  switch (device) {
    case "mobile":
      return "@media (max-width: ".concat(maxWidth.mobile, "px)");
    case "tablet":
      return "@media (max-width: ".concat(maxWidth.tablet, "px) (min-width: ").concat(maxWidth.mobile, "px)");
    default:
    case "desktop":
      return "@media (min-width: ".concat(maxWidth.tablet, "px)");
  }
}
var mediaTouch = "@media (hover: none)";
var mediaNotTouch = "@media not all and (hover: none)";
var borders$5 = {
  m: "100vh",
  s: "8px",
  none: "0"
};
var scaleValues = {
  s: 0.02,
  m: 0.04
};
var ButtonStyled$1 = styled.button(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    display: ", ";\n    gap: ", ";\n    align-items: ", ";\n    justify-content: ", ";\n    background-color: ", ";\n    color: ", ";\n\n    padding: ", ";\n    padding-left: ", ";\n    padding-right: ", ";\n    border: none;\n    border-radius: ", ";\n    cursor: ", ";\n\n    font-size: 14px;\n    font-weight: 510;\n    line-height: 18px;\n\n    transition: transform 0.125s ease-in-out;\n\n    ", " {\n        &:hover {\n            transform: ", ";\n        }\n    }\n\n    &:active {\n        transform: ", ";\n    }\n\n    ", " {\n        &:active {\n            transform: ", ";\n        }\n    }\n"])), function (props) {
  return props.leftIcon || props.rightIcon ? "flex" : "inline-block";
}, function (props) {
  return props.leftIcon || props.rightIcon ? "6px" : "unset";
}, function (props) {
  return props.leftIcon || props.rightIcon ? "center" : "unset";
}, function (props) {
  return props.leftIcon || props.rightIcon ? "space-between" : "unset";
}, function (props) {
  return props.appearance === "flat" ? "transparent" : props.appearance === "secondary" ? props.theme.colors.background.tint : rgba(props.theme.colors.accent, 0.12);
}, function (props) {
  return props.appearance === "secondary" ? props.theme.colors.text.primary : props.theme.colors.accent;
}, function (props) {
  return props.appearance === "flat" ? "0" : "9px 16px";
}, function (props) {
  return props.leftIcon && props.appearance !== "flat" ? "12px" : "16px";
}, function (props) {
  return props.rightIcon && props.appearance !== "flat" ? "12px" : "16px";
}, function (props) {
  return borders$5[props.theme.borderRadius];
}, function (props) {
  return props.disabled ? "not-allowed" : "pointer";
}, mediaNotTouch, function (props) {
  return props.disabled ? "unset" : "scale(".concat(1 + scaleValues[props.scale], ")");
}, function (props) {
  return props.disabled ? "unset" : "scale(".concat(1 - scaleValues[props.scale], ")");
}, mediaTouch, function (props) {
  return props.disabled ? "unset" : "scale(".concat(1 - scaleValues[props.scale] * 2, ")");
});
function useDataAttributes(props) {
  var keys = untrack(function () {
    return Object.keys(props).filter(function (key) {
      return key.startsWith("data-");
    });
  });
  var _splitProps5 = splitProps(props, keys),
    _splitProps6 = _slicedToArray(_splitProps5, 1),
    dataAttrs = _splitProps6[0];
  return dataAttrs;
}
var Button = function Button(props) {
  var dataAttrs = useDataAttributes(props);
  return createComponent(ButtonStyled$1, mergeProps(_defineProperty$1(_defineAccessor("get", _defineAccessor("get", _defineAccessor("get", _defineAccessor("get", _defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineAccessor("get", {
    get appearance() {
      return props.appearance || "primary";
    }
  }, "class", function () {
    return props["class"];
  }), "onClick", function onClick(e2) {
    var _a2;
    return (_a2 = props.onClick) == null ? void 0 : _a2.call(props, e2);
  }), "onMouseEnter", function onMouseEnter(e2) {
    var _a2;
    return (_a2 = props.onMouseEnter) == null ? void 0 : _a2.call(props, e2);
  }), "onMouseLeave", function onMouseLeave(e2) {
    var _a2;
    return (_a2 = props.onMouseLeave) == null ? void 0 : _a2.call(props, e2);
  }), "ref", function ref(r$) {
    var _ref$ = props.ref;
    typeof _ref$ === "function" ? _ref$(r$) : props.ref = r$;
  }), "disabled", function () {
    return props.disabled;
  }), "scale", function () {
    return props.scale || "m";
  }), "leftIcon", function () {
    return !!props.leftIcon;
  }), "rightIcon", function () {
    return !!props.rightIcon;
  }), "data-tc-button", "true"), dataAttrs, {
    get children() {
      return [createMemo(function () {
        return props.leftIcon;
      }), createMemo(function () {
        return props.children;
      }), createMemo(function () {
        return props.rightIcon;
      })];
    }
  }));
};
function nextFrame(fn) {
  requestAnimationFrame(function () {
    requestAnimationFrame(fn);
  });
}
var Transition = function Transition(props) {
  var el;
  var first = true;
  var _createSignal25 = createSignal(),
    _createSignal26 = _slicedToArray(_createSignal25, 2),
    s1 = _createSignal26[0],
    set1 = _createSignal26[1];
  var _createSignal27 = createSignal(),
    _createSignal28 = _slicedToArray(_createSignal27, 2),
    s2 = _createSignal28[0],
    set2 = _createSignal28[1];
  var resolved = children(function () {
    return props.children;
  });
  var onBeforeEnter = props.onBeforeEnter,
    onEnter = props.onEnter,
    onAfterEnter = props.onAfterEnter,
    onBeforeExit = props.onBeforeExit,
    onExit = props.onExit,
    onAfterExit = props.onAfterExit;
  var classnames = createMemo(function () {
    var name = props.name || "s";
    return {
      enterActiveClass: props.enterActiveClass || name + "-enter-active",
      enterClass: props.enterClass || name + "-enter",
      enterToClass: props.enterToClass || name + "-enter-to",
      exitActiveClass: props.exitActiveClass || name + "-exit-active",
      exitClass: props.exitClass || name + "-exit",
      exitToClass: props.exitToClass || name + "-exit-to"
    };
  });
  function enterTransition(el2, prev) {
    if (!first || props.appear) {
      var _el2$classList3, _el2$classList4;
      var _endTransition = function endTransition(e2) {
        if (el2 && (!e2 || e2.target === el2)) {
          var _el2$classList, _el2$classList2;
          el2.removeEventListener("transitionend", _endTransition);
          el2.removeEventListener("animationend", _endTransition);
          (_el2$classList = el2.classList).remove.apply(_el2$classList, _toConsumableArray(enterActiveClasses));
          (_el2$classList2 = el2.classList).remove.apply(_el2$classList2, _toConsumableArray(enterToClasses));
          batch(function () {
            s1() !== el2 && set1(el2);
            s2() === el2 && set2(void 0);
          });
          onAfterEnter && onAfterEnter(el2);
          if (props.mode === "inout") exitTransition(el2, prev);
        }
      };
      var enterClasses = classnames().enterClass.split(" ");
      var enterActiveClasses = classnames().enterActiveClass.split(" ");
      var enterToClasses = classnames().enterToClass.split(" ");
      onBeforeEnter && onBeforeEnter(el2);
      (_el2$classList3 = el2.classList).add.apply(_el2$classList3, _toConsumableArray(enterClasses));
      (_el2$classList4 = el2.classList).add.apply(_el2$classList4, _toConsumableArray(enterActiveClasses));
      nextFrame(function () {
        var _el2$classList5, _el2$classList6;
        (_el2$classList5 = el2.classList).remove.apply(_el2$classList5, _toConsumableArray(enterClasses));
        (_el2$classList6 = el2.classList).add.apply(_el2$classList6, _toConsumableArray(enterToClasses));
        onEnter && onEnter(el2, function () {
          return _endTransition();
        });
        if (!onEnter || onEnter.length < 2) {
          el2.addEventListener("transitionend", _endTransition);
          el2.addEventListener("animationend", _endTransition);
        }
      });
    }
    prev && !props.mode ? set2(el2) : set1(el2);
  }
  function exitTransition(el2, prev) {
    var _prev$classList, _prev$classList2;
    var exitClasses = classnames().exitClass.split(" ");
    var exitActiveClasses = classnames().exitActiveClass.split(" ");
    var exitToClasses = classnames().exitToClass.split(" ");
    if (!prev.parentNode) return endTransition();
    onBeforeExit && onBeforeExit(prev);
    (_prev$classList = prev.classList).add.apply(_prev$classList, _toConsumableArray(exitClasses));
    (_prev$classList2 = prev.classList).add.apply(_prev$classList2, _toConsumableArray(exitActiveClasses));
    nextFrame(function () {
      var _prev$classList3, _prev$classList4;
      (_prev$classList3 = prev.classList).remove.apply(_prev$classList3, _toConsumableArray(exitClasses));
      (_prev$classList4 = prev.classList).add.apply(_prev$classList4, _toConsumableArray(exitToClasses));
    });
    onExit && onExit(prev, function () {
      return endTransition();
    });
    if (!onExit || onExit.length < 2) {
      prev.addEventListener("transitionend", endTransition);
      prev.addEventListener("animationend", endTransition);
    }
    function endTransition(e2) {
      if (!e2 || e2.target === prev) {
        var _prev$classList5, _prev$classList6;
        prev.removeEventListener("transitionend", endTransition);
        prev.removeEventListener("animationend", endTransition);
        (_prev$classList5 = prev.classList).remove.apply(_prev$classList5, _toConsumableArray(exitActiveClasses));
        (_prev$classList6 = prev.classList).remove.apply(_prev$classList6, _toConsumableArray(exitToClasses));
        s1() === prev && set1(void 0);
        onAfterExit && onAfterExit(prev);
        if (props.mode === "outin") enterTransition(el2, prev);
      }
    }
  }
  createComputed(function (prev) {
    el = resolved();
    while (typeof el === "function") el = el();
    return untrack(function () {
      if (el && el !== prev) {
        if (props.mode !== "outin") enterTransition(el, prev);else if (first) set1(el);
      }
      if (prev && prev !== el && props.mode !== "inout") exitTransition(el, prev);
      first = false;
      return el;
    });
  });
  return [s1, s2];
};
function getRect(element) {
  var _element$getBoundingC = element.getBoundingClientRect(),
    top = _element$getBoundingC.top,
    bottom = _element$getBoundingC.bottom,
    left = _element$getBoundingC.left,
    right = _element$getBoundingC.right,
    width = _element$getBoundingC.width,
    height = _element$getBoundingC.height;
  var parentRect = element.parentNode.getBoundingClientRect();
  return {
    top: top - parentRect.top,
    bottom: bottom,
    left: left - parentRect.left,
    right: right,
    width: width,
    height: height
  };
}
var TransitionGroup = function TransitionGroup(props) {
  var resolved = children(function () {
    return props.children;
  });
  var classnames = createMemo(function () {
    var name = props.name || "s";
    return {
      enterActiveClass: props.enterActiveClass || name + "-enter-active",
      enterClass: props.enterClass || name + "-enter",
      enterToClass: props.enterToClass || name + "-enter-to",
      exitActiveClass: props.exitActiveClass || name + "-exit-active",
      exitClass: props.exitClass || name + "-exit",
      exitToClass: props.exitToClass || name + "-exit-to",
      moveClass: props.moveClass || name + "-move"
    };
  });
  var onBeforeEnter = props.onBeforeEnter,
    onEnter = props.onEnter,
    onAfterEnter = props.onAfterEnter,
    onBeforeExit = props.onBeforeExit,
    onExit = props.onExit,
    onAfterExit = props.onAfterExit;
  var _createSignal29 = createSignal(),
    _createSignal30 = _slicedToArray(_createSignal29, 2),
    combined = _createSignal30[0],
    setCombined = _createSignal30[1];
  var p2 = [];
  var first = true;
  createComputed(function () {
    var c2 = resolved();
    var comb = _toConsumableArray(c2);
    var next = new Set(c2);
    var prev = new Set(p2);
    var enterClasses = classnames().enterClass.split(" ");
    var enterActiveClasses = classnames().enterActiveClass.split(" ");
    var enterToClasses = classnames().enterToClass.split(" ");
    var exitClasses = classnames().exitClass.split(" ");
    var exitActiveClasses = classnames().exitActiveClass.split(" ");
    var exitToClasses = classnames().exitToClass.split(" ");
    var _loop4 = function _loop4() {
      var el = c2[i2];
      if (!first && !prev.has(el)) {
        var _el$classList3, _el$classList4;
        var _endTransition2 = function endTransition(e2) {
          if (el && (!e2 || e2.target === el)) {
            var _el$classList, _el$classList2;
            el.removeEventListener("transitionend", _endTransition2);
            el.removeEventListener("animationend", _endTransition2);
            (_el$classList = el.classList).remove.apply(_el$classList, _toConsumableArray(enterActiveClasses));
            (_el$classList2 = el.classList).remove.apply(_el$classList2, _toConsumableArray(enterToClasses));
            onAfterEnter && onAfterEnter(el);
          }
        };
        onBeforeEnter && onBeforeEnter(el);
        (_el$classList3 = el.classList).add.apply(_el$classList3, _toConsumableArray(enterClasses));
        (_el$classList4 = el.classList).add.apply(_el$classList4, _toConsumableArray(enterActiveClasses));
        nextFrame(function () {
          var _el$classList5, _el$classList6;
          (_el$classList5 = el.classList).remove.apply(_el$classList5, _toConsumableArray(enterClasses));
          (_el$classList6 = el.classList).add.apply(_el$classList6, _toConsumableArray(enterToClasses));
          onEnter && onEnter(el, function () {
            return _endTransition2();
          });
          if (!onEnter || onEnter.length < 2) {
            el.addEventListener("transitionend", _endTransition2);
            el.addEventListener("animationend", _endTransition2);
          }
        });
      }
    };
    for (var i2 = 0; i2 < c2.length; i2++) {
      _loop4();
    }
    var _loop5 = function _loop5() {
      var old = p2[_i9];
      if (!next.has(old) && old.parentNode) {
        var _old$classList3, _old$classList4;
        var _endTransition3 = function endTransition(e2) {
          if (!e2 || e2.target === old) {
            var _old$classList, _old$classList2;
            old.removeEventListener("transitionend", _endTransition3);
            old.removeEventListener("animationend", _endTransition3);
            (_old$classList = old.classList).remove.apply(_old$classList, _toConsumableArray(exitActiveClasses));
            (_old$classList2 = old.classList).remove.apply(_old$classList2, _toConsumableArray(exitToClasses));
            onAfterExit && onAfterExit(old);
            p2 = p2.filter(function (i3) {
              return i3 !== old;
            });
            setCombined(p2);
          }
        };
        comb.splice(_i9, 0, old);
        onBeforeExit && onBeforeExit(old);
        (_old$classList3 = old.classList).add.apply(_old$classList3, _toConsumableArray(exitClasses));
        (_old$classList4 = old.classList).add.apply(_old$classList4, _toConsumableArray(exitActiveClasses));
        nextFrame(function () {
          var _old$classList5, _old$classList6;
          (_old$classList5 = old.classList).remove.apply(_old$classList5, _toConsumableArray(exitClasses));
          (_old$classList6 = old.classList).add.apply(_old$classList6, _toConsumableArray(exitToClasses));
        });
        onExit && onExit(old, function () {
          return _endTransition3();
        });
        if (!onExit || onExit.length < 2) {
          old.addEventListener("transitionend", _endTransition3);
          old.addEventListener("animationend", _endTransition3);
        }
      }
    };
    for (var _i9 = 0; _i9 < p2.length; _i9++) {
      _loop5();
    }
    p2 = comb;
    setCombined(comb);
  });
  createEffect(function (nodes) {
    var c2 = combined();
    c2.forEach(function (child) {
      var n2;
      if (!(n2 = nodes.get(child))) {
        nodes.set(child, n2 = {
          pos: getRect(child),
          "new": !first
        });
      } else if (n2["new"]) {
        n2["new"] = false;
        n2.newPos = getRect(child);
      }
      if (n2["new"]) {
        child.addEventListener("transitionend", function () {
          n2["new"] = false;
          child.parentNode && (n2.newPos = getRect(child));
        }, {
          once: true
        });
      }
      n2.newPos && (n2.pos = n2.newPos);
      n2.newPos = getRect(child);
    });
    if (first) {
      first = false;
      return nodes;
    }
    c2.forEach(function (child) {
      var c3 = nodes.get(child);
      var oldPos = c3.pos;
      var newPos = c3.newPos;
      var dx = oldPos.left - newPos.left;
      var dy = oldPos.top - newPos.top;
      if (dx || dy) {
        c3.moved = true;
        var s2 = child.style;
        s2.transform = "translate(".concat(dx, "px,").concat(dy, "px)");
        s2.transitionDuration = "0s";
      }
    });
    document.body.offsetHeight;
    c2.forEach(function (child) {
      var c3 = nodes.get(child);
      if (c3.moved) {
        var _child$classList2;
        var _endTransition4 = function endTransition(e2) {
          if (e2 && e2.target !== child || !child.parentNode) return;
          if (!e2 || /transform$/.test(e2.propertyName)) {
            var _child$classList;
            child.removeEventListener("transitionend", _endTransition4);
            (_child$classList = child.classList).remove.apply(_child$classList, _toConsumableArray(moveClasses));
          }
        };
        c3.moved = false;
        var s2 = child.style;
        var moveClasses = classnames().moveClass.split(" ");
        (_child$classList2 = child.classList).add.apply(_child$classList2, _toConsumableArray(moveClasses));
        s2.transform = s2.transitionDuration = "";
        child.addEventListener("transitionend", _endTransition4);
      }
    });
    return nodes;
  }, /* @__PURE__ */new Map());
  return combined;
};
function clickOutside$1(el, accessor) {
  var onClick = function onClick(e2) {
    var _a2;
    return !el.contains(e2.target) && ((_a2 = accessor()) == null ? void 0 : _a2());
  };
  document.body.addEventListener("click", onClick);
  onCleanup(function () {
    return document.body.removeEventListener("click", onClick);
  });
}
function escPressed(_, accessor) {
  var onKeyPress = function onKeyPress(e2) {
    var _a2, _b2;
    if (e2.key === "Escape") {
      (_a2 = document.activeElement) == null ? void 0 : _a2.blur();
      (_b2 = accessor()) == null ? void 0 : _b2();
    }
  };
  document.body.addEventListener("keydown", onKeyPress);
  onCleanup(function () {
    return document.body.removeEventListener("keydown", onKeyPress);
  });
}
function androidBackHandler$1(_, config) {
  var _config = config(),
    isEnabled = _config.isEnabled,
    onClose = _config.onClose;
  if (!isEnabled) {
    return;
  }
  var userOSIsAndroid = getUserAgent().os === "android";
  if (!userOSIsAndroid) {
    return;
  }
  window.history.pushState(ROUTE_STATE, "");
  var popstateHandler = function popstateHandler(event) {
    event.preventDefault();
    onClose();
  };
  window.addEventListener("popstate", popstateHandler, {
    once: true
  });
  onCleanup(function () {
    window.removeEventListener("popstate", popstateHandler);
    createMacrotask(function () {
      var _a2;
      if (((_a2 = window.history.state) == null ? void 0 : _a2[ROUTE_STATE_KEY]) === true) {
        window.history.back();
      }
    });
  });
}
var ROUTE_STATE_KEY = "androidBackHandler";
var ROUTE_STATE = _defineProperty$1({}, ROUTE_STATE_KEY, true);
var _tmpl$$w = /* @__PURE__ */template$1("<svg><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10.2122 14.3407C10.5384 14.0854 10.5959 13.614 10.3406 13.2878L6.20237 8.00003L10.3406 2.71227C10.5959 2.38607 10.5384 1.91469 10.2122 1.6594C9.88604 1.40412 9.41465 1.46161 9.15937 1.7878L4.65937 7.5378C4.44688 7.80932 4.44688 8.19074 4.65937 8.46226L9.15937 14.2123C9.41465 14.5385 9.88604 14.5959 10.2122 14.3407Z\"></path></svg>", 4, true);
var rotationDegrees = {
  left: 0,
  top: 90,
  right: 180,
  bottom: 270
};
var ArrowIcon = function ArrowIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.secondary;
  };
  var direction = function direction() {
    return props.direction || "left";
  };
  var Svg = styled("svg")(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n        transform: rotate(", "deg);\n        transition: transform 0.1s ease-in-out;\n    "])), function (props2) {
    return rotationDegrees[props2.svgDirection];
  });
  return createComponent(Svg, {
    xmlns: "http://www.w3.org/2000/svg",
    width: "16",
    height: "16",
    viewBox: "0 0 16 16",
    fill: "none",
    get svgDirection() {
      return direction();
    },
    get children() {
      var _el$ = _tmpl$$w.cloneNode(true);
      createRenderEffect(function () {
        return setAttribute(_el$, "fill", fill());
      });
      return _el$;
    }
  });
};
var _tmpl$$v = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2.71966 2.71968C3.01255 2.42678 3.48743 2.42677 3.78032 2.71966L8.00002 6.93925L12.2197 2.71967C12.5126 2.42677 12.9874 2.42678 13.2803 2.71967C13.5732 3.01257 13.5732 3.48744 13.2803 3.78033L9.06068 7.99991L13.2803 12.2197C13.5732 12.5126 13.5732 12.9874 13.2803 13.2803C12.9874 13.5732 12.5126 13.5732 12.2197 13.2803L8.00002 9.06057L3.78033 13.2803C3.48744 13.5732 3.01257 13.5732 2.71967 13.2803C2.42678 12.9874 2.42677 12.5126 2.71967 12.2197L6.93936 7.99991L2.71968 3.78034C2.42678 3.48745 2.42677 3.01257 2.71966 2.71968Z\"></path></svg>");
var CloseIcon = function CloseIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.secondary;
  };
  return function () {
    var _el$ = _tmpl$$v.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function () {
      return setAttribute(_el$2, "fill", fill());
    });
    return _el$;
  }();
};
var IconButtonStyled = styled.button(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    background-color: ", ";\n    border: none;\n    cursor: pointer;\n\n    transition: transform 0.125s ease-in-out;\n\n    ", " {\n        &:hover {\n            transform: scale(1.04);\n        }\n    }\n\n    &:active {\n        transform: scale(0.96);\n    }\n\n    ", " {\n        &:active {\n            transform: scale(0.92);\n        }\n    }\n"])), function (props) {
  return props.theme.colors.background.tint;
}, mediaNotTouch, mediaTouch);
var IconButton = function IconButton(props) {
  var dataAttrs = useDataAttributes(props);
  var icon = function icon() {
    return props.icon || "close";
  };
  return createComponent(IconButtonStyled, mergeProps(_defineProperty$1(_defineProperty$1(_defineAccessor("get", {}, "class", function () {
    return props["class"];
  }), "onClick", function onClick() {
    return props.onClick();
  }), "data-tc-icon-button", "true"), dataAttrs, {
    get children() {
      return [createComponent(Show, {
        get when() {
          return !!props.children;
        },
        get children() {
          return props.children;
        }
      }), createComponent(Show, {
        get when() {
          return !props.children;
        },
        get children() {
          return createComponent(Switch, {
            get children() {
              return [createComponent(Match, {
                get when() {
                  return icon() === "close";
                },
                get children() {
                  return createComponent(CloseIcon, {
                    get fill() {
                      return props.fill;
                    }
                  });
                }
              }), createComponent(Match, {
                get when() {
                  return icon() === "arrow";
                },
                get children() {
                  return createComponent(ArrowIcon, {
                    get fill() {
                      return props.fill;
                    }
                  });
                }
              }), createComponent(Match, {
                get when() {
                  return icon() === "question";
                },
                get children() {
                  return createComponent(QuestionIcon, {
                    get fill() {
                      return props.fill;
                    }
                  });
                }
              }), createComponent(Match, {
                get when() {
                  return typeof icon() !== "string";
                },
                get children() {
                  return icon();
                }
              })];
            }
          });
        }
      })];
    }
  }));
};
var borders$4 = {
  m: "24px",
  s: "16px",
  none: "0"
};
var ModalBackgroundStyled = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n    display: flex;\n    position: fixed;\n    z-index: 1000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.4);\n    padding: 20px 0;\n    overflow-y: auto;\n\n    ", " {\n        padding-bottom: 0;\n    }\n"])), media("mobile"));
var ModalWrapperClass = u(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08), 0 16px 64px rgba(0, 0, 0, 0.16);\n    width: fit-content;\n    margin: auto;\n\n    ", " {\n        width: 100%;\n        height: fit-content;\n        margin: auto 0 0 0;\n    }\n"])), media("mobile"));
var ModalBodyStyled = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n    position: relative;\n    min-height: 100px;\n    width: 416px;\n    padding: 44px 56px 24px;\n\n    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.04);\n\n    background-color: ", ";\n    border-radius: ", ";\n\n    ", " {\n        width: 100%;\n    }\n"])), function (props) {
  return props.theme.colors.background.primary;
}, function (props) {
  return borders$4[props.theme.borderRadius];
}, media("mobile"));
var CloseButtonStyled = styled(IconButton)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n    position: absolute;\n    right: 16px;\n    top: 16px;\n"])));
var ModalFooterStyled = styled.div(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 16px 16px 16px 18px;\n    border-radius: 0 0 ", "\n        ", ";\n"])), function (props) {
  return borders$4[props.theme.borderRadius];
}, function (props) {
  return borders$4[props.theme.borderRadius];
});
var QuestionButtonStyled = styled(IconButton)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n    background-color: ", ";\n"])), function (props) {
  return rgba(props.theme.colors.icon.secondary, 0.12);
});
var AnimationTimelineNoop = /*#__PURE__*/_createClass(function AnimationTimelineNoop() {
  _classCallCheck(this, AnimationTimelineNoop);
  __publicField(this, "currentTime", 0);
});
var _AnimationNoop2 = /*#__PURE__*/function () {
  function _AnimationNoop() {
    _classCallCheck(this, _AnimationNoop);
    __publicField(this, "currentTime", 0);
    __publicField(this, "playbackRate", 1);
    __publicField(this, "startTime", null);
    __publicField(this, "timeline", new AnimationTimelineNoop());
    __publicField(this, "finished", Promise.resolve(this));
    __publicField(this, "effect", null);
    __publicField(this, "id", "");
    __publicField(this, "pending", false);
    __publicField(this, "playState", "finished");
    __publicField(this, "replaceState", "active");
    __publicField(this, "ready", Promise.resolve(this));
    __publicField(this, "oncancel", null);
    __publicField(this, "onfinish", null);
    __publicField(this, "onremove", null);
  }
  return _createClass(_AnimationNoop, [{
    key: "cancel",
    value: function cancel() {}
  }, {
    key: "finish",
    value: function finish() {}
  }, {
    key: "pause",
    value: function pause() {}
  }, {
    key: "play",
    value: function play() {}
  }, {
    key: "reverse",
    value: function reverse() {}
  }, {
    key: "addEventListener",
    value: function addEventListener(_type, _listener, _options) {}
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(_event) {
      return false;
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(_type, _callback, _options) {}
  }, {
    key: "updatePlaybackRate",
    value: function updatePlaybackRate(_playbackRate) {}
  }, {
    key: "commitStyles",
    value: function commitStyles() {}
  }, {
    key: "persist",
    value: function persist() {}
  }], [{
    key: "create",
    value: function create() {
      if (!_AnimationNoop2._instance) {
        logWarning("Animation is not supported in this environment: please consider using the `web-animations-js` polyfill to provide a fallback implementation of the Web Animations API.");
        _AnimationNoop2._instance = new _AnimationNoop2();
      }
      return _AnimationNoop2._instance;
    }
  }]);
}();
var AnimationNoop = _AnimationNoop2;
__publicField(AnimationNoop, "_instance", null);
function animate(element, keyframes, options) {
  if ("animate" in element) {
    return element.animate(keyframes, options);
  }
  return AnimationNoop.create();
}
var _tmpl$$u = /* @__PURE__ */template$1("<div></div>");
var clickOutside = clickOutside$1;
var keyPressed = escPressed;
var androidBackHandler = androidBackHandler$1;
var Modal = function Modal(props) {
  var theme = useTheme();
  var dataAttrs = useDataAttributes(props);
  createEffect(function () {
    if (props.opened) {
      disableScroll();
    } else {
      enableScroll();
    }
  });
  return createComponent(Transition, {
    onBeforeEnter: function onBeforeEnter(el) {
      var duration = isDevice("mobile") ? 200 : 100;
      animate(el, [{
        opacity: 0
      }, {
        opacity: 1
      }], {
        duration: duration
      });
      if (isDevice("mobile")) {
        animate(el.firstElementChild, [{
          transform: "translateY(390px)"
        }, {
          transform: "translateY(0)"
        }], {
          duration: duration
        });
      }
    },
    onExit: function onExit(el, done) {
      var duration = isDevice("mobile") ? 200 : 100;
      var backgroundAnimation = animate(el, [{
        opacity: 1
      }, {
        opacity: 0
      }], {
        duration: duration
      });
      if (isDevice("mobile")) {
        var contentAnimation = animate(el.firstElementChild, [{
          transform: "translateY(0)"
        }, {
          transform: "translateY(390px)"
        }], {
          duration: duration
        });
        Promise.all([backgroundAnimation.finished, contentAnimation.finished]).then(done);
      } else {
        backgroundAnimation.finished.then(done);
      }
    },
    get children() {
      return createComponent(Show, {
        get when() {
          return props.opened;
        },
        get children() {
          return createComponent(ModalBackgroundStyled, mergeProps({
            "data-tc-modal": "true"
          }, dataAttrs, {
            get children() {
              var _el$ = _tmpl$$u.cloneNode(true);
              use(androidBackHandler, _el$, function () {
                return {
                  isEnabled: props.enableAndroidBackHandler,
                  onClose: function onClose() {
                    return props.onClose();
                  }
                };
              });
              use(keyPressed, _el$, function () {
                return function () {
                  return props.onClose();
                };
              });
              use(clickOutside, _el$, function () {
                return function () {
                  return props.onClose();
                };
              });
              insert(_el$, createComponent(ModalBodyStyled, _defineAccessor("get", _defineAccessor("get", {}, "class", function () {
                return props["class"];
              }), "children", function () {
                return [createComponent(CloseButtonStyled, {
                  icon: "close",
                  onClick: function onClick() {
                    return props.onClose();
                  }
                }), createMemo(function () {
                  return props.children;
                })];
              })), null);
              insert(_el$, createComponent(Show, {
                get when() {
                  return props.onClickQuestion;
                },
                get children() {
                  return createComponent(ModalFooterStyled, {
                    get children() {
                      return [createComponent(TonConnectBrand, {}), createComponent(QuestionButtonStyled, {
                        get onClick() {
                          return props.onClickQuestion;
                        },
                        icon: "question"
                      })];
                    }
                  });
                }
              }), null);
              createRenderEffect(function () {
                return className(_el$, cn(ModalWrapperClass, u(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n                                border-radius: ", ";\n                                background-color: ", ";\n\n                                ", " {\n                                    border-radius: ", "\n                                        ", " 0 0;\n                                }\n                            "])), borders$4[theme.borderRadius], theme.colors.background.tint, media("mobile"), borders$4[theme.borderRadius], borders$4[theme.borderRadius])));
              });
              return _el$;
            }
          }));
        }
      });
    }
  });
};
var wrapperBorderRadius = {
  m: "22px",
  s: "12px",
  none: "0"
};
var sliderBorderRadius = {
  m: "18px",
  s: "8px",
  none: "0"
};
var TabBarStyled = styled.div(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n    display: grid;\n    grid-template: 1fr / 1fr 1fr;\n    width: fit-content;\n    justify-items: center;\n    gap: 4px;\n\n    position: relative;\n    padding: 4px;\n    border-radius: ", ";\n\n    background-color: ", ";\n"])), function (props) {
  return wrapperBorderRadius[props.theme.borderRadius];
}, function (props) {
  return props.theme.colors.background.secondary;
});
var SliderStyled = styled.div(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n    position: absolute;\n    top: 4px;\n    left: 4px;\n\n    height: calc(100% - 8px);\n    width: calc(50% - 4px);\n\n    border-radius: ", ";\n    background-color: ", ";\n\n    transform: ", ";\n\n    transition: transform 0.13s ease-in-out;\n"])), function (props) {
  return sliderBorderRadius[props.theme.borderRadius];
}, function (props) {
  return props.theme.colors.background.segment;
}, function (props) {
  return props.right ? "translateX(100%)" : "translateX(0)";
});
var InputStyled = styled.input(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n    display: none;\n"])));
var LabelStyled = styled.label(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n    padding: 9px 12px;\n    z-index: 1;\n\n    cursor: ", ";\n\n    transition: transform 0.13s ease-in-out;\n\n    &:hover {\n        transform: ", ";\n    }\n\n    > * {\n        ", "\n    }\n"])), function (props) {
  return props.isActive ? "default" : "pointer";
}, function (props) {
  return props.isActive ? "none" : "scale(1.025)";
}, function (props) {
  return !props.isActive ? "color: ".concat(props.theme.colors.text.secondary, ";") : "";
});
var TabBar = function TabBar(props) {
  var groupName = "tabBar" + Math.floor(Math.random() * 1e4);
  return createComponent(TabBarStyled, _defineAccessor("get", _defineProperty$1(_defineAccessor("get", {}, "class", function () {
    return props["class"];
  }), "data-tc-tab-bar", "true"), "children", function () {
    return [createComponent(SliderStyled, {
      get right() {
        return props.selectedTabIndex === 1;
      }
    }), createComponent(LabelStyled, {
      get isActive() {
        return props.selectedTabIndex === 0;
      },
      get children() {
        return [createComponent(InputStyled, {
          type: "radio",
          name: groupName,
          get checked() {
            return props.selectedTabIndex === 0;
          },
          onInput: function onInput() {
            var _a2;
            return (_a2 = props.onSelectedTabIndexChange) == null ? void 0 : _a2.call(props, 0);
          }
        }), createMemo(function () {
          return props.tab1;
        })];
      }
    }), createComponent(LabelStyled, {
      get isActive() {
        return props.selectedTabIndex === 1;
      },
      get children() {
        return [createComponent(InputStyled, {
          type: "radio",
          get checked() {
            return props.selectedTabIndex === 1;
          },
          name: groupName,
          onInput: function onInput() {
            var _a2;
            return (_a2 = props.onSelectedTabIndexChange) == null ? void 0 : _a2.call(props, 1);
          }
        }), createMemo(function () {
          return props.tab2;
        })];
      }
    })];
  }));
};
var backgroundBorders = {
  m: "16px",
  s: "12px",
  none: "0"
};
var imageBorders = {
  m: "12px",
  s: "8px",
  none: "0"
};
var qrNormalSize = 256;
var imgSizeDefault = 60;
var picSizeDefault = 48;
var qrPaddingTop = 24;
var CopyIconButton = styled.div(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n    width: 52px;\n    height: 52px;\n    background: transparent;\n    position: absolute;\n    right: 0;\n    bottom: 0;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: transform 0.125s ease-in-out;\n"])));
var QrCodeBackground = styled.button(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["\n    display: flex;\n    align-items: center;\n    position: relative;\n    background-color: ", ";\n    border-radius: ", ";\n    padding: ", " 0;\n    height: ", ";\n    width: 100%;\n\n    overflow: hidden;\n    cursor: pointer;\n    border: none;\n\n    ", " {\n        &:hover {\n            ", " {\n                transform: scale(1.04);\n            }\n        }\n    }\n\n    &:active {\n        ", " {\n            transform: scale(0.96);\n        }\n    }\n\n    ", " {\n        &:active {\n            ", " {\n                transform: scale(0.92);\n            }\n        }\n    }\n"])), function (props) {
  return props.theme.colors.background.qr;
}, function (props) {
  return backgroundBorders[props.theme.borderRadius];
}, toPx(qrPaddingTop), toPx(qrNormalSize + qrPaddingTop * 2), mediaNotTouch, CopyIconButton["class"], CopyIconButton["class"], mediaTouch, CopyIconButton["class"]);
var QrCodeWrapper$2 = styled.div(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["\n    position: relative;\n\n    width: fit-content;\n    margin: 0 auto;\n\n    > div:first-child {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    rect {\n        fill: transparent;\n    }\n\n    path {\n        fill: ", ";\n    }\n"])), function (props) {
  return props.theme.colors.constant.black;
});
var ImageBackground = styled.div(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["\n    position: absolute;\n    width: ", ";\n    height: ", ";\n    background: ", ";\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n"])), toPx(imgSizeDefault), toPx(imgSizeDefault), function (props) {
  return props.theme.colors.background.qr;
});
var ImageStyled$3 = styled(Image)(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["\n    width: ", ";\n    height: ", ";\n    border-radius: ", ";\n    background-color: ", ";\n"])), function (props) {
  return toPx(props.size);
}, function (props) {
  return toPx(props.size);
}, function (props) {
  return imageBorders[props.theme.borderRadius];
}, function (props) {
  return props.theme.colors.background.qr;
});
var CopiedBoxStyled = styled.div(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["\n    position: absolute;\n    bottom: 14px;\n    left: 50%;\n    transform: translate(-50%, 0);\n\n    display: flex;\n    gap: 6px;\n    align-items: center;\n    border-radius: 18px;\n    min-width: 126px;\n    padding: 9px 16px 9px 10px;\n\n    filter: drop-shadow(0px 2px 8px rgba(0, 0, 0, 0.08));\n    background-color: ", ";\n"])), function (props) {
  return props.theme.colors.background.segment;
});
var qrcode$1 = {
  exports: {}
};
(function (module, exports) {
  var qrcode2 = function () {
    var qrcode3 = function qrcode3(typeNumber, errorCorrectionLevel) {
      var PAD0 = 236;
      var PAD1 = 17;
      var _typeNumber = typeNumber;
      var _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];
      var _modules = null;
      var _moduleCount = 0;
      var _dataCache = null;
      var _dataList = [];
      var _this = {};
      var makeImpl = function makeImpl(test, maskPattern) {
        _moduleCount = _typeNumber * 4 + 17;
        _modules = function (moduleCount) {
          var modules = new Array(moduleCount);
          for (var row = 0; row < moduleCount; row += 1) {
            modules[row] = new Array(moduleCount);
            for (var col = 0; col < moduleCount; col += 1) {
              modules[row][col] = null;
            }
          }
          return modules;
        }(_moduleCount);
        setupPositionProbePattern(0, 0);
        setupPositionProbePattern(_moduleCount - 7, 0);
        setupPositionProbePattern(0, _moduleCount - 7);
        setupPositionAdjustPattern();
        setupTimingPattern();
        setupTypeInfo(test, maskPattern);
        if (_typeNumber >= 7) {
          setupTypeNumber(test);
        }
        if (_dataCache == null) {
          _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);
        }
        mapData(_dataCache, maskPattern);
      };
      var setupPositionProbePattern = function setupPositionProbePattern(row, col) {
        for (var r = -1; r <= 7; r += 1) {
          if (row + r <= -1 || _moduleCount <= row + r) continue;
          for (var c2 = -1; c2 <= 7; c2 += 1) {
            if (col + c2 <= -1 || _moduleCount <= col + c2) continue;
            if (0 <= r && r <= 6 && (c2 == 0 || c2 == 6) || 0 <= c2 && c2 <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c2 && c2 <= 4) {
              _modules[row + r][col + c2] = true;
            } else {
              _modules[row + r][col + c2] = false;
            }
          }
        }
      };
      var getBestMaskPattern = function getBestMaskPattern() {
        var minLostPoint = 0;
        var pattern = 0;
        for (var i2 = 0; i2 < 8; i2 += 1) {
          makeImpl(true, i2);
          var lostPoint = QRUtil.getLostPoint(_this);
          if (i2 == 0 || minLostPoint > lostPoint) {
            minLostPoint = lostPoint;
            pattern = i2;
          }
        }
        return pattern;
      };
      var setupTimingPattern = function setupTimingPattern() {
        for (var r = 8; r < _moduleCount - 8; r += 1) {
          if (_modules[r][6] != null) {
            continue;
          }
          _modules[r][6] = r % 2 == 0;
        }
        for (var c2 = 8; c2 < _moduleCount - 8; c2 += 1) {
          if (_modules[6][c2] != null) {
            continue;
          }
          _modules[6][c2] = c2 % 2 == 0;
        }
      };
      var setupPositionAdjustPattern = function setupPositionAdjustPattern() {
        var pos = QRUtil.getPatternPosition(_typeNumber);
        for (var i2 = 0; i2 < pos.length; i2 += 1) {
          for (var j = 0; j < pos.length; j += 1) {
            var row = pos[i2];
            var col = pos[j];
            if (_modules[row][col] != null) {
              continue;
            }
            for (var r = -2; r <= 2; r += 1) {
              for (var c2 = -2; c2 <= 2; c2 += 1) {
                if (r == -2 || r == 2 || c2 == -2 || c2 == 2 || r == 0 && c2 == 0) {
                  _modules[row + r][col + c2] = true;
                } else {
                  _modules[row + r][col + c2] = false;
                }
              }
            }
          }
        }
      };
      var setupTypeNumber = function setupTypeNumber(test) {
        var bits = QRUtil.getBCHTypeNumber(_typeNumber);
        for (var i2 = 0; i2 < 18; i2 += 1) {
          var mod = !test && (bits >> i2 & 1) == 1;
          _modules[Math.floor(i2 / 3)][i2 % 3 + _moduleCount - 8 - 3] = mod;
        }
        for (var i2 = 0; i2 < 18; i2 += 1) {
          var mod = !test && (bits >> i2 & 1) == 1;
          _modules[i2 % 3 + _moduleCount - 8 - 3][Math.floor(i2 / 3)] = mod;
        }
      };
      var setupTypeInfo = function setupTypeInfo(test, maskPattern) {
        var data = _errorCorrectionLevel << 3 | maskPattern;
        var bits = QRUtil.getBCHTypeInfo(data);
        for (var i2 = 0; i2 < 15; i2 += 1) {
          var mod = !test && (bits >> i2 & 1) == 1;
          if (i2 < 6) {
            _modules[i2][8] = mod;
          } else if (i2 < 8) {
            _modules[i2 + 1][8] = mod;
          } else {
            _modules[_moduleCount - 15 + i2][8] = mod;
          }
        }
        for (var i2 = 0; i2 < 15; i2 += 1) {
          var mod = !test && (bits >> i2 & 1) == 1;
          if (i2 < 8) {
            _modules[8][_moduleCount - i2 - 1] = mod;
          } else if (i2 < 9) {
            _modules[8][15 - i2 - 1 + 1] = mod;
          } else {
            _modules[8][15 - i2 - 1] = mod;
          }
        }
        _modules[_moduleCount - 8][8] = !test;
      };
      var mapData = function mapData(data, maskPattern) {
        var inc = -1;
        var row = _moduleCount - 1;
        var bitIndex = 7;
        var byteIndex = 0;
        var maskFunc = QRUtil.getMaskFunction(maskPattern);
        for (var col = _moduleCount - 1; col > 0; col -= 2) {
          if (col == 6) col -= 1;
          while (true) {
            for (var c2 = 0; c2 < 2; c2 += 1) {
              if (_modules[row][col - c2] == null) {
                var dark = false;
                if (byteIndex < data.length) {
                  dark = (data[byteIndex] >>> bitIndex & 1) == 1;
                }
                var mask = maskFunc(row, col - c2);
                if (mask) {
                  dark = !dark;
                }
                _modules[row][col - c2] = dark;
                bitIndex -= 1;
                if (bitIndex == -1) {
                  byteIndex += 1;
                  bitIndex = 7;
                }
              }
            }
            row += inc;
            if (row < 0 || _moduleCount <= row) {
              row -= inc;
              inc = -inc;
              break;
            }
          }
        }
      };
      var createBytes = function createBytes(buffer, rsBlocks) {
        var offset = 0;
        var maxDcCount = 0;
        var maxEcCount = 0;
        var dcdata = new Array(rsBlocks.length);
        var ecdata = new Array(rsBlocks.length);
        for (var r = 0; r < rsBlocks.length; r += 1) {
          var dcCount = rsBlocks[r].dataCount;
          var ecCount = rsBlocks[r].totalCount - dcCount;
          maxDcCount = Math.max(maxDcCount, dcCount);
          maxEcCount = Math.max(maxEcCount, ecCount);
          dcdata[r] = new Array(dcCount);
          for (var i2 = 0; i2 < dcdata[r].length; i2 += 1) {
            dcdata[r][i2] = 255 & buffer.getBuffer()[i2 + offset];
          }
          offset += dcCount;
          var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
          var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);
          var modPoly = rawPoly.mod(rsPoly);
          ecdata[r] = new Array(rsPoly.getLength() - 1);
          for (var i2 = 0; i2 < ecdata[r].length; i2 += 1) {
            var modIndex = i2 + modPoly.getLength() - ecdata[r].length;
            ecdata[r][i2] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;
          }
        }
        var totalCodeCount = 0;
        for (var i2 = 0; i2 < rsBlocks.length; i2 += 1) {
          totalCodeCount += rsBlocks[i2].totalCount;
        }
        var data = new Array(totalCodeCount);
        var index = 0;
        for (var i2 = 0; i2 < maxDcCount; i2 += 1) {
          for (var r = 0; r < rsBlocks.length; r += 1) {
            if (i2 < dcdata[r].length) {
              data[index] = dcdata[r][i2];
              index += 1;
            }
          }
        }
        for (var i2 = 0; i2 < maxEcCount; i2 += 1) {
          for (var r = 0; r < rsBlocks.length; r += 1) {
            if (i2 < ecdata[r].length) {
              data[index] = ecdata[r][i2];
              index += 1;
            }
          }
        }
        return data;
      };
      var createData = function createData(typeNumber2, errorCorrectionLevel2, dataList) {
        var rsBlocks = QRRSBlock.getRSBlocks(typeNumber2, errorCorrectionLevel2);
        var buffer = qrBitBuffer();
        for (var i2 = 0; i2 < dataList.length; i2 += 1) {
          var data = dataList[i2];
          buffer.put(data.getMode(), 4);
          buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber2));
          data.write(buffer);
        }
        var totalDataCount = 0;
        for (var i2 = 0; i2 < rsBlocks.length; i2 += 1) {
          totalDataCount += rsBlocks[i2].dataCount;
        }
        if (buffer.getLengthInBits() > totalDataCount * 8) {
          throw "code length overflow. (" + buffer.getLengthInBits() + ">" + totalDataCount * 8 + ")";
        }
        if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
          buffer.put(0, 4);
        }
        while (buffer.getLengthInBits() % 8 != 0) {
          buffer.putBit(false);
        }
        while (true) {
          if (buffer.getLengthInBits() >= totalDataCount * 8) {
            break;
          }
          buffer.put(PAD0, 8);
          if (buffer.getLengthInBits() >= totalDataCount * 8) {
            break;
          }
          buffer.put(PAD1, 8);
        }
        return createBytes(buffer, rsBlocks);
      };
      _this.addData = function (data, mode) {
        mode = mode || "Byte";
        var newData = null;
        switch (mode) {
          case "Numeric":
            newData = qrNumber(data);
            break;
          case "Alphanumeric":
            newData = qrAlphaNum(data);
            break;
          case "Byte":
            newData = qr8BitByte(data);
            break;
          case "Kanji":
            newData = qrKanji(data);
            break;
          default:
            throw "mode:" + mode;
        }
        _dataList.push(newData);
        _dataCache = null;
      };
      _this.isDark = function (row, col) {
        if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {
          throw row + "," + col;
        }
        return _modules[row][col];
      };
      _this.getModuleCount = function () {
        return _moduleCount;
      };
      _this.make = function () {
        if (_typeNumber < 1) {
          var typeNumber2 = 1;
          for (; typeNumber2 < 40; typeNumber2++) {
            var rsBlocks = QRRSBlock.getRSBlocks(typeNumber2, _errorCorrectionLevel);
            var buffer = qrBitBuffer();
            for (var i2 = 0; i2 < _dataList.length; i2++) {
              var data = _dataList[i2];
              buffer.put(data.getMode(), 4);
              buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber2));
              data.write(buffer);
            }
            var totalDataCount = 0;
            for (var i2 = 0; i2 < rsBlocks.length; i2++) {
              totalDataCount += rsBlocks[i2].dataCount;
            }
            if (buffer.getLengthInBits() <= totalDataCount * 8) {
              break;
            }
          }
          _typeNumber = typeNumber2;
        }
        makeImpl(false, getBestMaskPattern());
      };
      _this.createTableTag = function (cellSize, margin) {
        cellSize = cellSize || 2;
        margin = typeof margin == "undefined" ? cellSize * 4 : margin;
        var qrHtml = "";
        qrHtml += '<table style="';
        qrHtml += " border-width: 0px; border-style: none;";
        qrHtml += " border-collapse: collapse;";
        qrHtml += " padding: 0px; margin: " + margin + "px;";
        qrHtml += '">';
        qrHtml += "<tbody>";
        for (var r = 0; r < _this.getModuleCount(); r += 1) {
          qrHtml += "<tr>";
          for (var c2 = 0; c2 < _this.getModuleCount(); c2 += 1) {
            qrHtml += '<td style="';
            qrHtml += " border-width: 0px; border-style: none;";
            qrHtml += " border-collapse: collapse;";
            qrHtml += " padding: 0px; margin: 0px;";
            qrHtml += " width: " + cellSize + "px;";
            qrHtml += " height: " + cellSize + "px;";
            qrHtml += " background-color: ";
            qrHtml += _this.isDark(r, c2) ? "#000000" : "#ffffff";
            qrHtml += ";";
            qrHtml += '"/>';
          }
          qrHtml += "</tr>";
        }
        qrHtml += "</tbody>";
        qrHtml += "</table>";
        return qrHtml;
      };
      _this.createSvgTag = function (cellSize, margin, alt, title) {
        var opts = {};
        if (_typeof(arguments[0]) == "object") {
          opts = arguments[0];
          cellSize = opts.cellSize;
          margin = opts.margin;
          alt = opts.alt;
          title = opts.title;
        }
        cellSize = cellSize || 2;
        margin = typeof margin == "undefined" ? cellSize * 4 : margin;
        alt = typeof alt === "string" ? {
          text: alt
        } : alt || {};
        alt.text = alt.text || null;
        alt.id = alt.text ? alt.id || "qrcode-description" : null;
        title = typeof title === "string" ? {
          text: title
        } : title || {};
        title.text = title.text || null;
        title.id = title.text ? title.id || "qrcode-title" : null;
        var size = _this.getModuleCount() * cellSize + margin * 2;
        var c2,
          mc,
          r,
          mr,
          qrSvg = "",
          rect;
        rect = "l" + cellSize + ",0 0," + cellSize + " -" + cellSize + ",0 0,-" + cellSize + "z ";
        qrSvg += '<svg version="1.1" xmlns="http://www.w3.org/2000/svg"';
        qrSvg += !opts.scalable ? ' width="' + size + 'px" height="' + size + 'px"' : "";
        qrSvg += ' viewBox="0 0 ' + size + " " + size + '" ';
        qrSvg += ' preserveAspectRatio="xMinYMin meet"';
        qrSvg += title.text || alt.text ? ' role="img" aria-labelledby="' + escapeXml([title.id, alt.id].join(" ").trim()) + '"' : "";
        qrSvg += ">";
        qrSvg += title.text ? '<title id="' + escapeXml(title.id) + '">' + escapeXml(title.text) + "</title>" : "";
        qrSvg += alt.text ? '<description id="' + escapeXml(alt.id) + '">' + escapeXml(alt.text) + "</description>" : "";
        qrSvg += '<rect width="100%" height="100%" fill="white" cx="0" cy="0"/>';
        qrSvg += '<path d="';
        for (r = 0; r < _this.getModuleCount(); r += 1) {
          mr = r * cellSize + margin;
          for (c2 = 0; c2 < _this.getModuleCount(); c2 += 1) {
            if (_this.isDark(r, c2)) {
              mc = c2 * cellSize + margin;
              qrSvg += "M" + mc + "," + mr + rect;
            }
          }
        }
        qrSvg += '" stroke="transparent" fill="black"/>';
        qrSvg += "</svg>";
        return qrSvg;
      };
      _this.createDataURL = function (cellSize, margin) {
        cellSize = cellSize || 2;
        margin = typeof margin == "undefined" ? cellSize * 4 : margin;
        var size = _this.getModuleCount() * cellSize + margin * 2;
        var min2 = margin;
        var max2 = size - margin;
        return createDataURL(size, size, function (x, y) {
          if (min2 <= x && x < max2 && min2 <= y && y < max2) {
            var c2 = Math.floor((x - min2) / cellSize);
            var r = Math.floor((y - min2) / cellSize);
            return _this.isDark(r, c2) ? 0 : 1;
          } else {
            return 1;
          }
        });
      };
      _this.createImgTag = function (cellSize, margin, alt) {
        cellSize = cellSize || 2;
        margin = typeof margin == "undefined" ? cellSize * 4 : margin;
        var size = _this.getModuleCount() * cellSize + margin * 2;
        var img = "";
        img += "<img";
        img += ' src="';
        img += _this.createDataURL(cellSize, margin);
        img += '"';
        img += ' width="';
        img += size;
        img += '"';
        img += ' height="';
        img += size;
        img += '"';
        if (alt) {
          img += ' alt="';
          img += escapeXml(alt);
          img += '"';
        }
        img += "/>";
        return img;
      };
      var escapeXml = function escapeXml(s2) {
        var escaped = "";
        for (var i2 = 0; i2 < s2.length; i2 += 1) {
          var c2 = s2.charAt(i2);
          switch (c2) {
            case "<":
              escaped += "&lt;";
              break;
            case ">":
              escaped += "&gt;";
              break;
            case "&":
              escaped += "&amp;";
              break;
            case '"':
              escaped += "&quot;";
              break;
            default:
              escaped += c2;
              break;
          }
        }
        return escaped;
      };
      var _createHalfASCII = function _createHalfASCII(margin) {
        var cellSize = 1;
        margin = typeof margin == "undefined" ? cellSize * 2 : margin;
        var size = _this.getModuleCount() * cellSize + margin * 2;
        var min2 = margin;
        var max2 = size - margin;
        var y, x, r1, r2, p2;
        var blocks = {
          "\u2588\u2588": "\u2588",
          "\u2588 ": "\u2580",
          " \u2588": "\u2584",
          "  ": " "
        };
        var blocksLastLineNoMargin = {
          "\u2588\u2588": "\u2580",
          "\u2588 ": "\u2580",
          " \u2588": " ",
          "  ": " "
        };
        var ascii = "";
        for (y = 0; y < size; y += 2) {
          r1 = Math.floor((y - min2) / cellSize);
          r2 = Math.floor((y + 1 - min2) / cellSize);
          for (x = 0; x < size; x += 1) {
            p2 = "\u2588";
            if (min2 <= x && x < max2 && min2 <= y && y < max2 && _this.isDark(r1, Math.floor((x - min2) / cellSize))) {
              p2 = " ";
            }
            if (min2 <= x && x < max2 && min2 <= y + 1 && y + 1 < max2 && _this.isDark(r2, Math.floor((x - min2) / cellSize))) {
              p2 += " ";
            } else {
              p2 += "\u2588";
            }
            ascii += margin < 1 && y + 1 >= max2 ? blocksLastLineNoMargin[p2] : blocks[p2];
          }
          ascii += "\n";
        }
        if (size % 2 && margin > 0) {
          return ascii.substring(0, ascii.length - size - 1) + Array(size + 1).join("\u2580");
        }
        return ascii.substring(0, ascii.length - 1);
      };
      _this.createASCII = function (cellSize, margin) {
        cellSize = cellSize || 1;
        if (cellSize < 2) {
          return _createHalfASCII(margin);
        }
        cellSize -= 1;
        margin = typeof margin == "undefined" ? cellSize * 2 : margin;
        var size = _this.getModuleCount() * cellSize + margin * 2;
        var min2 = margin;
        var max2 = size - margin;
        var y, x, r, p2;
        var white = Array(cellSize + 1).join("\u2588\u2588");
        var black = Array(cellSize + 1).join("  ");
        var ascii = "";
        var line = "";
        for (y = 0; y < size; y += 1) {
          r = Math.floor((y - min2) / cellSize);
          line = "";
          for (x = 0; x < size; x += 1) {
            p2 = 1;
            if (min2 <= x && x < max2 && min2 <= y && y < max2 && _this.isDark(r, Math.floor((x - min2) / cellSize))) {
              p2 = 0;
            }
            line += p2 ? white : black;
          }
          for (r = 0; r < cellSize; r += 1) {
            ascii += line + "\n";
          }
        }
        return ascii.substring(0, ascii.length - 1);
      };
      _this.renderTo2dContext = function (context, cellSize) {
        cellSize = cellSize || 2;
        var length = _this.getModuleCount();
        for (var row = 0; row < length; row++) {
          for (var col = 0; col < length; col++) {
            context.fillStyle = _this.isDark(row, col) ? "black" : "white";
            context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);
          }
        }
      };
      return _this;
    };
    qrcode3.stringToBytesFuncs = {
      "default": function _default(s2) {
        var bytes = [];
        for (var i2 = 0; i2 < s2.length; i2 += 1) {
          var c2 = s2.charCodeAt(i2);
          bytes.push(c2 & 255);
        }
        return bytes;
      }
    };
    qrcode3.stringToBytes = qrcode3.stringToBytesFuncs["default"];
    qrcode3.createStringToBytes = function (unicodeData, numChars) {
      var unicodeMap = function () {
        var bin = base64DecodeInputStream(unicodeData);
        var read = function read() {
          var b = bin.read();
          if (b == -1) throw "eof";
          return b;
        };
        var count = 0;
        var unicodeMap2 = {};
        while (true) {
          var b0 = bin.read();
          if (b0 == -1) break;
          var b1 = read();
          var b2 = read();
          var b3 = read();
          var k = String.fromCharCode(b0 << 8 | b1);
          var v = b2 << 8 | b3;
          unicodeMap2[k] = v;
          count += 1;
        }
        if (count != numChars) {
          throw count + " != " + numChars;
        }
        return unicodeMap2;
      }();
      var unknownChar = "?".charCodeAt(0);
      return function (s2) {
        var bytes = [];
        for (var i2 = 0; i2 < s2.length; i2 += 1) {
          var c2 = s2.charCodeAt(i2);
          if (c2 < 128) {
            bytes.push(c2);
          } else {
            var b = unicodeMap[s2.charAt(i2)];
            if (typeof b == "number") {
              if ((b & 255) == b) {
                bytes.push(b);
              } else {
                bytes.push(b >>> 8);
                bytes.push(b & 255);
              }
            } else {
              bytes.push(unknownChar);
            }
          }
        }
        return bytes;
      };
    };
    var QRMode = {
      MODE_NUMBER: 1 << 0,
      MODE_ALPHA_NUM: 1 << 1,
      MODE_8BIT_BYTE: 1 << 2,
      MODE_KANJI: 1 << 3
    };
    var QRErrorCorrectionLevel = {
      L: 1,
      M: 0,
      Q: 3,
      H: 2
    };
    var QRMaskPattern = {
      PATTERN000: 0,
      PATTERN001: 1,
      PATTERN010: 2,
      PATTERN011: 3,
      PATTERN100: 4,
      PATTERN101: 5,
      PATTERN110: 6,
      PATTERN111: 7
    };
    var QRUtil = function () {
      var PATTERN_POSITION_TABLE = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]];
      var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
      var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
      var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
      var _this = {};
      var getBCHDigit = function getBCHDigit(data) {
        var digit = 0;
        while (data != 0) {
          digit += 1;
          data >>>= 1;
        }
        return digit;
      };
      _this.getBCHTypeInfo = function (data) {
        var d = data << 10;
        while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {
          d ^= G15 << getBCHDigit(d) - getBCHDigit(G15);
        }
        return (data << 10 | d) ^ G15_MASK;
      };
      _this.getBCHTypeNumber = function (data) {
        var d = data << 12;
        while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {
          d ^= G18 << getBCHDigit(d) - getBCHDigit(G18);
        }
        return data << 12 | d;
      };
      _this.getPatternPosition = function (typeNumber) {
        return PATTERN_POSITION_TABLE[typeNumber - 1];
      };
      _this.getMaskFunction = function (maskPattern) {
        switch (maskPattern) {
          case QRMaskPattern.PATTERN000:
            return function (i2, j) {
              return (i2 + j) % 2 == 0;
            };
          case QRMaskPattern.PATTERN001:
            return function (i2, j) {
              return i2 % 2 == 0;
            };
          case QRMaskPattern.PATTERN010:
            return function (i2, j) {
              return j % 3 == 0;
            };
          case QRMaskPattern.PATTERN011:
            return function (i2, j) {
              return (i2 + j) % 3 == 0;
            };
          case QRMaskPattern.PATTERN100:
            return function (i2, j) {
              return (Math.floor(i2 / 2) + Math.floor(j / 3)) % 2 == 0;
            };
          case QRMaskPattern.PATTERN101:
            return function (i2, j) {
              return i2 * j % 2 + i2 * j % 3 == 0;
            };
          case QRMaskPattern.PATTERN110:
            return function (i2, j) {
              return (i2 * j % 2 + i2 * j % 3) % 2 == 0;
            };
          case QRMaskPattern.PATTERN111:
            return function (i2, j) {
              return (i2 * j % 3 + (i2 + j) % 2) % 2 == 0;
            };
          default:
            throw "bad maskPattern:" + maskPattern;
        }
      };
      _this.getErrorCorrectPolynomial = function (errorCorrectLength) {
        var a2 = qrPolynomial([1], 0);
        for (var i2 = 0; i2 < errorCorrectLength; i2 += 1) {
          a2 = a2.multiply(qrPolynomial([1, QRMath.gexp(i2)], 0));
        }
        return a2;
      };
      _this.getLengthInBits = function (mode, type) {
        if (1 <= type && type < 10) {
          switch (mode) {
            case QRMode.MODE_NUMBER:
              return 10;
            case QRMode.MODE_ALPHA_NUM:
              return 9;
            case QRMode.MODE_8BIT_BYTE:
              return 8;
            case QRMode.MODE_KANJI:
              return 8;
            default:
              throw "mode:" + mode;
          }
        } else if (type < 27) {
          switch (mode) {
            case QRMode.MODE_NUMBER:
              return 12;
            case QRMode.MODE_ALPHA_NUM:
              return 11;
            case QRMode.MODE_8BIT_BYTE:
              return 16;
            case QRMode.MODE_KANJI:
              return 10;
            default:
              throw "mode:" + mode;
          }
        } else if (type < 41) {
          switch (mode) {
            case QRMode.MODE_NUMBER:
              return 14;
            case QRMode.MODE_ALPHA_NUM:
              return 13;
            case QRMode.MODE_8BIT_BYTE:
              return 16;
            case QRMode.MODE_KANJI:
              return 12;
            default:
              throw "mode:" + mode;
          }
        } else {
          throw "type:" + type;
        }
      };
      _this.getLostPoint = function (qrcode4) {
        var moduleCount = qrcode4.getModuleCount();
        var lostPoint = 0;
        for (var row = 0; row < moduleCount; row += 1) {
          for (var col = 0; col < moduleCount; col += 1) {
            var sameCount = 0;
            var dark = qrcode4.isDark(row, col);
            for (var r = -1; r <= 1; r += 1) {
              if (row + r < 0 || moduleCount <= row + r) {
                continue;
              }
              for (var c2 = -1; c2 <= 1; c2 += 1) {
                if (col + c2 < 0 || moduleCount <= col + c2) {
                  continue;
                }
                if (r == 0 && c2 == 0) {
                  continue;
                }
                if (dark == qrcode4.isDark(row + r, col + c2)) {
                  sameCount += 1;
                }
              }
            }
            if (sameCount > 5) {
              lostPoint += 3 + sameCount - 5;
            }
          }
        }
        for (var row = 0; row < moduleCount - 1; row += 1) {
          for (var col = 0; col < moduleCount - 1; col += 1) {
            var count = 0;
            if (qrcode4.isDark(row, col)) count += 1;
            if (qrcode4.isDark(row + 1, col)) count += 1;
            if (qrcode4.isDark(row, col + 1)) count += 1;
            if (qrcode4.isDark(row + 1, col + 1)) count += 1;
            if (count == 0 || count == 4) {
              lostPoint += 3;
            }
          }
        }
        for (var row = 0; row < moduleCount; row += 1) {
          for (var col = 0; col < moduleCount - 6; col += 1) {
            if (qrcode4.isDark(row, col) && !qrcode4.isDark(row, col + 1) && qrcode4.isDark(row, col + 2) && qrcode4.isDark(row, col + 3) && qrcode4.isDark(row, col + 4) && !qrcode4.isDark(row, col + 5) && qrcode4.isDark(row, col + 6)) {
              lostPoint += 40;
            }
          }
        }
        for (var col = 0; col < moduleCount; col += 1) {
          for (var row = 0; row < moduleCount - 6; row += 1) {
            if (qrcode4.isDark(row, col) && !qrcode4.isDark(row + 1, col) && qrcode4.isDark(row + 2, col) && qrcode4.isDark(row + 3, col) && qrcode4.isDark(row + 4, col) && !qrcode4.isDark(row + 5, col) && qrcode4.isDark(row + 6, col)) {
              lostPoint += 40;
            }
          }
        }
        var darkCount = 0;
        for (var col = 0; col < moduleCount; col += 1) {
          for (var row = 0; row < moduleCount; row += 1) {
            if (qrcode4.isDark(row, col)) {
              darkCount += 1;
            }
          }
        }
        var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
        lostPoint += ratio * 10;
        return lostPoint;
      };
      return _this;
    }();
    var QRMath = function () {
      var EXP_TABLE = new Array(256);
      var LOG_TABLE = new Array(256);
      for (var i2 = 0; i2 < 8; i2 += 1) {
        EXP_TABLE[i2] = 1 << i2;
      }
      for (var i2 = 8; i2 < 256; i2 += 1) {
        EXP_TABLE[i2] = EXP_TABLE[i2 - 4] ^ EXP_TABLE[i2 - 5] ^ EXP_TABLE[i2 - 6] ^ EXP_TABLE[i2 - 8];
      }
      for (var i2 = 0; i2 < 255; i2 += 1) {
        LOG_TABLE[EXP_TABLE[i2]] = i2;
      }
      var _this = {};
      _this.glog = function (n2) {
        if (n2 < 1) {
          throw "glog(" + n2 + ")";
        }
        return LOG_TABLE[n2];
      };
      _this.gexp = function (n2) {
        while (n2 < 0) {
          n2 += 255;
        }
        while (n2 >= 256) {
          n2 -= 255;
        }
        return EXP_TABLE[n2];
      };
      return _this;
    }();
    function qrPolynomial(num, shift) {
      if (typeof num.length == "undefined") {
        throw num.length + "/" + shift;
      }
      var _num = function () {
        var offset = 0;
        while (offset < num.length && num[offset] == 0) {
          offset += 1;
        }
        var _num2 = new Array(num.length - offset + shift);
        for (var i2 = 0; i2 < num.length - offset; i2 += 1) {
          _num2[i2] = num[i2 + offset];
        }
        return _num2;
      }();
      var _this = {};
      _this.getAt = function (index) {
        return _num[index];
      };
      _this.getLength = function () {
        return _num.length;
      };
      _this.multiply = function (e2) {
        var num2 = new Array(_this.getLength() + e2.getLength() - 1);
        for (var i2 = 0; i2 < _this.getLength(); i2 += 1) {
          for (var j = 0; j < e2.getLength(); j += 1) {
            num2[i2 + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i2)) + QRMath.glog(e2.getAt(j)));
          }
        }
        return qrPolynomial(num2, 0);
      };
      _this.mod = function (e2) {
        if (_this.getLength() - e2.getLength() < 0) {
          return _this;
        }
        var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e2.getAt(0));
        var num2 = new Array(_this.getLength());
        for (var i2 = 0; i2 < _this.getLength(); i2 += 1) {
          num2[i2] = _this.getAt(i2);
        }
        for (var i2 = 0; i2 < e2.getLength(); i2 += 1) {
          num2[i2] ^= QRMath.gexp(QRMath.glog(e2.getAt(i2)) + ratio);
        }
        return qrPolynomial(num2, 0).mod(e2);
      };
      return _this;
    }
    var QRRSBlock = function () {
      var RS_BLOCK_TABLE = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12, 7, 37, 13], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];
      var qrRSBlock = function qrRSBlock(totalCount, dataCount) {
        var _this2 = {};
        _this2.totalCount = totalCount;
        _this2.dataCount = dataCount;
        return _this2;
      };
      var _this = {};
      var getRsBlockTable = function getRsBlockTable(typeNumber, errorCorrectionLevel) {
        switch (errorCorrectionLevel) {
          case QRErrorCorrectionLevel.L:
            return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
          case QRErrorCorrectionLevel.M:
            return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
          case QRErrorCorrectionLevel.Q:
            return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
          case QRErrorCorrectionLevel.H:
            return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
          default:
            return void 0;
        }
      };
      _this.getRSBlocks = function (typeNumber, errorCorrectionLevel) {
        var rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);
        if (typeof rsBlock == "undefined") {
          throw "bad rs block @ typeNumber:" + typeNumber + "/errorCorrectionLevel:" + errorCorrectionLevel;
        }
        var length = rsBlock.length / 3;
        var list = [];
        for (var i2 = 0; i2 < length; i2 += 1) {
          var count = rsBlock[i2 * 3 + 0];
          var totalCount = rsBlock[i2 * 3 + 1];
          var dataCount = rsBlock[i2 * 3 + 2];
          for (var j = 0; j < count; j += 1) {
            list.push(qrRSBlock(totalCount, dataCount));
          }
        }
        return list;
      };
      return _this;
    }();
    var qrBitBuffer = function qrBitBuffer() {
      var _buffer = [];
      var _length = 0;
      var _this = {};
      _this.getBuffer = function () {
        return _buffer;
      };
      _this.getAt = function (index) {
        var bufIndex = Math.floor(index / 8);
        return (_buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;
      };
      _this.put = function (num, length) {
        for (var i2 = 0; i2 < length; i2 += 1) {
          _this.putBit((num >>> length - i2 - 1 & 1) == 1);
        }
      };
      _this.getLengthInBits = function () {
        return _length;
      };
      _this.putBit = function (bit) {
        var bufIndex = Math.floor(_length / 8);
        if (_buffer.length <= bufIndex) {
          _buffer.push(0);
        }
        if (bit) {
          _buffer[bufIndex] |= 128 >>> _length % 8;
        }
        _length += 1;
      };
      return _this;
    };
    var qrNumber = function qrNumber(data) {
      var _mode = QRMode.MODE_NUMBER;
      var _data = data;
      var _this = {};
      _this.getMode = function () {
        return _mode;
      };
      _this.getLength = function (buffer) {
        return _data.length;
      };
      _this.write = function (buffer) {
        var data2 = _data;
        var i2 = 0;
        while (i2 + 2 < data2.length) {
          buffer.put(strToNum(data2.substring(i2, i2 + 3)), 10);
          i2 += 3;
        }
        if (i2 < data2.length) {
          if (data2.length - i2 == 1) {
            buffer.put(strToNum(data2.substring(i2, i2 + 1)), 4);
          } else if (data2.length - i2 == 2) {
            buffer.put(strToNum(data2.substring(i2, i2 + 2)), 7);
          }
        }
      };
      var strToNum = function strToNum(s2) {
        var num = 0;
        for (var i2 = 0; i2 < s2.length; i2 += 1) {
          num = num * 10 + chatToNum(s2.charAt(i2));
        }
        return num;
      };
      var chatToNum = function chatToNum(c2) {
        if ("0" <= c2 && c2 <= "9") {
          return c2.charCodeAt(0) - "0".charCodeAt(0);
        }
        throw "illegal char :" + c2;
      };
      return _this;
    };
    var qrAlphaNum = function qrAlphaNum(data) {
      var _mode = QRMode.MODE_ALPHA_NUM;
      var _data = data;
      var _this = {};
      _this.getMode = function () {
        return _mode;
      };
      _this.getLength = function (buffer) {
        return _data.length;
      };
      _this.write = function (buffer) {
        var s2 = _data;
        var i2 = 0;
        while (i2 + 1 < s2.length) {
          buffer.put(getCode(s2.charAt(i2)) * 45 + getCode(s2.charAt(i2 + 1)), 11);
          i2 += 2;
        }
        if (i2 < s2.length) {
          buffer.put(getCode(s2.charAt(i2)), 6);
        }
      };
      var getCode = function getCode(c2) {
        if ("0" <= c2 && c2 <= "9") {
          return c2.charCodeAt(0) - "0".charCodeAt(0);
        } else if ("A" <= c2 && c2 <= "Z") {
          return c2.charCodeAt(0) - "A".charCodeAt(0) + 10;
        } else {
          switch (c2) {
            case " ":
              return 36;
            case "$":
              return 37;
            case "%":
              return 38;
            case "*":
              return 39;
            case "+":
              return 40;
            case "-":
              return 41;
            case ".":
              return 42;
            case "/":
              return 43;
            case ":":
              return 44;
            default:
              throw "illegal char :" + c2;
          }
        }
      };
      return _this;
    };
    var qr8BitByte = function qr8BitByte(data) {
      var _mode = QRMode.MODE_8BIT_BYTE;
      var _bytes = qrcode3.stringToBytes(data);
      var _this = {};
      _this.getMode = function () {
        return _mode;
      };
      _this.getLength = function (buffer) {
        return _bytes.length;
      };
      _this.write = function (buffer) {
        for (var i2 = 0; i2 < _bytes.length; i2 += 1) {
          buffer.put(_bytes[i2], 8);
        }
      };
      return _this;
    };
    var qrKanji = function qrKanji(data) {
      var _mode = QRMode.MODE_KANJI;
      var stringToBytes = qrcode3.stringToBytesFuncs["SJIS"];
      if (!stringToBytes) {
        throw "sjis not supported.";
      }
      !function (c2, code) {
        var test = stringToBytes(c2);
        if (test.length != 2 || (test[0] << 8 | test[1]) != code) {
          throw "sjis not supported.";
        }
      }("\u53CB", 38726);
      var _bytes = stringToBytes(data);
      var _this = {};
      _this.getMode = function () {
        return _mode;
      };
      _this.getLength = function (buffer) {
        return ~~(_bytes.length / 2);
      };
      _this.write = function (buffer) {
        var data2 = _bytes;
        var i2 = 0;
        while (i2 + 1 < data2.length) {
          var c2 = (255 & data2[i2]) << 8 | 255 & data2[i2 + 1];
          if (33088 <= c2 && c2 <= 40956) {
            c2 -= 33088;
          } else if (57408 <= c2 && c2 <= 60351) {
            c2 -= 49472;
          } else {
            throw "illegal char at " + (i2 + 1) + "/" + c2;
          }
          c2 = (c2 >>> 8 & 255) * 192 + (c2 & 255);
          buffer.put(c2, 13);
          i2 += 2;
        }
        if (i2 < data2.length) {
          throw "illegal char at " + (i2 + 1);
        }
      };
      return _this;
    };
    var byteArrayOutputStream = function byteArrayOutputStream() {
      var _bytes = [];
      var _this = {};
      _this.writeByte = function (b) {
        _bytes.push(b & 255);
      };
      _this.writeShort = function (i2) {
        _this.writeByte(i2);
        _this.writeByte(i2 >>> 8);
      };
      _this.writeBytes = function (b, off, len) {
        off = off || 0;
        len = len || b.length;
        for (var i2 = 0; i2 < len; i2 += 1) {
          _this.writeByte(b[i2 + off]);
        }
      };
      _this.writeString = function (s2) {
        for (var i2 = 0; i2 < s2.length; i2 += 1) {
          _this.writeByte(s2.charCodeAt(i2));
        }
      };
      _this.toByteArray = function () {
        return _bytes;
      };
      _this.toString = function () {
        var s2 = "";
        s2 += "[";
        for (var i2 = 0; i2 < _bytes.length; i2 += 1) {
          if (i2 > 0) {
            s2 += ",";
          }
          s2 += _bytes[i2];
        }
        s2 += "]";
        return s2;
      };
      return _this;
    };
    var base64EncodeOutputStream = function base64EncodeOutputStream() {
      var _buffer = 0;
      var _buflen = 0;
      var _length = 0;
      var _base64 = "";
      var _this = {};
      var writeEncoded = function writeEncoded(b) {
        _base64 += String.fromCharCode(encode(b & 63));
      };
      var encode = function encode(n2) {
        if (n2 < 0) ;else if (n2 < 26) {
          return 65 + n2;
        } else if (n2 < 52) {
          return 97 + (n2 - 26);
        } else if (n2 < 62) {
          return 48 + (n2 - 52);
        } else if (n2 == 62) {
          return 43;
        } else if (n2 == 63) {
          return 47;
        }
        throw "n:" + n2;
      };
      _this.writeByte = function (n2) {
        _buffer = _buffer << 8 | n2 & 255;
        _buflen += 8;
        _length += 1;
        while (_buflen >= 6) {
          writeEncoded(_buffer >>> _buflen - 6);
          _buflen -= 6;
        }
      };
      _this.flush = function () {
        if (_buflen > 0) {
          writeEncoded(_buffer << 6 - _buflen);
          _buffer = 0;
          _buflen = 0;
        }
        if (_length % 3 != 0) {
          var padlen = 3 - _length % 3;
          for (var i2 = 0; i2 < padlen; i2 += 1) {
            _base64 += "=";
          }
        }
      };
      _this.toString = function () {
        return _base64;
      };
      return _this;
    };
    var base64DecodeInputStream = function base64DecodeInputStream(str) {
      var _str = str;
      var _pos = 0;
      var _buffer = 0;
      var _buflen = 0;
      var _this = {};
      _this.read = function () {
        while (_buflen < 8) {
          if (_pos >= _str.length) {
            if (_buflen == 0) {
              return -1;
            }
            throw "unexpected end of file./" + _buflen;
          }
          var c2 = _str.charAt(_pos);
          _pos += 1;
          if (c2 == "=") {
            _buflen = 0;
            return -1;
          } else if (c2.match(/^\s$/)) {
            continue;
          }
          _buffer = _buffer << 6 | decode(c2.charCodeAt(0));
          _buflen += 6;
        }
        var n2 = _buffer >>> _buflen - 8 & 255;
        _buflen -= 8;
        return n2;
      };
      var decode = function decode(c2) {
        if (65 <= c2 && c2 <= 90) {
          return c2 - 65;
        } else if (97 <= c2 && c2 <= 122) {
          return c2 - 97 + 26;
        } else if (48 <= c2 && c2 <= 57) {
          return c2 - 48 + 52;
        } else if (c2 == 43) {
          return 62;
        } else if (c2 == 47) {
          return 63;
        } else {
          throw "c:" + c2;
        }
      };
      return _this;
    };
    var gifImage = function gifImage(width, height) {
      var _width = width;
      var _height = height;
      var _data = new Array(width * height);
      var _this = {};
      _this.setPixel = function (x, y, pixel) {
        _data[y * _width + x] = pixel;
      };
      _this.write = function (out) {
        out.writeString("GIF87a");
        out.writeShort(_width);
        out.writeShort(_height);
        out.writeByte(128);
        out.writeByte(0);
        out.writeByte(0);
        out.writeByte(0);
        out.writeByte(0);
        out.writeByte(0);
        out.writeByte(255);
        out.writeByte(255);
        out.writeByte(255);
        out.writeString(",");
        out.writeShort(0);
        out.writeShort(0);
        out.writeShort(_width);
        out.writeShort(_height);
        out.writeByte(0);
        var lzwMinCodeSize = 2;
        var raster = getLZWRaster(lzwMinCodeSize);
        out.writeByte(lzwMinCodeSize);
        var offset = 0;
        while (raster.length - offset > 255) {
          out.writeByte(255);
          out.writeBytes(raster, offset, 255);
          offset += 255;
        }
        out.writeByte(raster.length - offset);
        out.writeBytes(raster, offset, raster.length - offset);
        out.writeByte(0);
        out.writeString(";");
      };
      var bitOutputStream = function bitOutputStream(out) {
        var _out = out;
        var _bitLength = 0;
        var _bitBuffer = 0;
        var _this2 = {};
        _this2.write = function (data, length) {
          if (data >>> length != 0) {
            throw "length over";
          }
          while (_bitLength + length >= 8) {
            _out.writeByte(255 & (data << _bitLength | _bitBuffer));
            length -= 8 - _bitLength;
            data >>>= 8 - _bitLength;
            _bitBuffer = 0;
            _bitLength = 0;
          }
          _bitBuffer = data << _bitLength | _bitBuffer;
          _bitLength = _bitLength + length;
        };
        _this2.flush = function () {
          if (_bitLength > 0) {
            _out.writeByte(_bitBuffer);
          }
        };
        return _this2;
      };
      var getLZWRaster = function getLZWRaster(lzwMinCodeSize) {
        var clearCode = 1 << lzwMinCodeSize;
        var endCode = (1 << lzwMinCodeSize) + 1;
        var bitLength = lzwMinCodeSize + 1;
        var table = lzwTable();
        for (var i2 = 0; i2 < clearCode; i2 += 1) {
          table.add(String.fromCharCode(i2));
        }
        table.add(String.fromCharCode(clearCode));
        table.add(String.fromCharCode(endCode));
        var byteOut = byteArrayOutputStream();
        var bitOut = bitOutputStream(byteOut);
        bitOut.write(clearCode, bitLength);
        var dataIndex = 0;
        var s2 = String.fromCharCode(_data[dataIndex]);
        dataIndex += 1;
        while (dataIndex < _data.length) {
          var c2 = String.fromCharCode(_data[dataIndex]);
          dataIndex += 1;
          if (table.contains(s2 + c2)) {
            s2 = s2 + c2;
          } else {
            bitOut.write(table.indexOf(s2), bitLength);
            if (table.size() < 4095) {
              if (table.size() == 1 << bitLength) {
                bitLength += 1;
              }
              table.add(s2 + c2);
            }
            s2 = c2;
          }
        }
        bitOut.write(table.indexOf(s2), bitLength);
        bitOut.write(endCode, bitLength);
        bitOut.flush();
        return byteOut.toByteArray();
      };
      var lzwTable = function lzwTable() {
        var _map = {};
        var _size = 0;
        var _this2 = {};
        _this2.add = function (key) {
          if (_this2.contains(key)) {
            throw "dup key:" + key;
          }
          _map[key] = _size;
          _size += 1;
        };
        _this2.size = function () {
          return _size;
        };
        _this2.indexOf = function (key) {
          return _map[key];
        };
        _this2.contains = function (key) {
          return typeof _map[key] != "undefined";
        };
        return _this2;
      };
      return _this;
    };
    var createDataURL = function createDataURL(width, height, getPixel) {
      var gif = gifImage(width, height);
      for (var y = 0; y < height; y += 1) {
        for (var x = 0; x < width; x += 1) {
          gif.setPixel(x, y, getPixel(x, y));
        }
      }
      var b = byteArrayOutputStream();
      gif.write(b);
      var base64 = base64EncodeOutputStream();
      var bytes = b.toByteArray();
      for (var i2 = 0; i2 < bytes.length; i2 += 1) {
        base64.writeByte(bytes[i2]);
      }
      base64.flush();
      return "data:image/gif;base64," + base64;
    };
    return qrcode3;
  }();
  !function () {
    qrcode2.stringToBytesFuncs["UTF-8"] = function (s2) {
      function toUTF8Array(str) {
        var utf8 = [];
        for (var i2 = 0; i2 < str.length; i2++) {
          var charcode = str.charCodeAt(i2);
          if (charcode < 128) utf8.push(charcode);else if (charcode < 2048) {
            utf8.push(192 | charcode >> 6, 128 | charcode & 63);
          } else if (charcode < 55296 || charcode >= 57344) {
            utf8.push(224 | charcode >> 12, 128 | charcode >> 6 & 63, 128 | charcode & 63);
          } else {
            i2++;
            charcode = 65536 + ((charcode & 1023) << 10 | str.charCodeAt(i2) & 1023);
            utf8.push(240 | charcode >> 18, 128 | charcode >> 12 & 63, 128 | charcode >> 6 & 63, 128 | charcode & 63);
          }
        }
        return utf8;
      }
      return toUTF8Array(s2);
    };
  }();
  (function (factory) {
    {
      module.exports = factory();
    }
  })(function () {
    return qrcode2;
  });
})(qrcode$1);
var qrcode = qrcode$1.exports;
function copyToClipboard(text) {
  return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          if (navigator == null ? void 0 : navigator.clipboard) {
            _context3.next = 3;
            break;
          }
          throw new TonConnectUIError("Clipboard API not available");
        case 3:
          _context3.next = 5;
          return navigator.clipboard.writeText(text);
        case 5:
          return _context3.abrupt("return", _context3.sent);
        case 8:
          _context3.prev = 8;
          _context3.t0 = _context3["catch"](0);
        case 10:
          fallbackCopyTextToClipboard(text);
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 8]]);
  }));
}
function fallbackCopyTextToClipboard(text) {
  var textArea = document.createElement("textarea");
  textArea.value = text;
  textArea.style.top = "0";
  textArea.style.left = "0";
  textArea.style.position = "fixed";
  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();
  try {
    document.execCommand("copy");
  } finally {
    document.body.removeChild(textArea);
  }
}
var _tmpl$$t = /* @__PURE__ */template$1("<div></div>");
var QRCode = function QRCode(props) {
  var qrCodeCanvasRef;
  var qrCodeWrapperRef;
  var imageRef;
  var _createSignal31 = createSignal(false),
    _createSignal32 = _slicedToArray(_createSignal31, 2),
    copyButtonOpened = _createSignal32[0],
    setCopyButtonOpened = _createSignal32[1];
  var _createSignal33 = createSignal(picSizeDefault),
    _createSignal34 = _slicedToArray(_createSignal33, 2),
    picSize = _createSignal34[0],
    setPicSize = _createSignal34[1];
  createEffect(function () {
    var errorCorrectionLevel = "L";
    var cellSize = 4;
    var qr = qrcode(0, errorCorrectionLevel);
    qr.addData(props.sourceUrl);
    qr.make();
    qrCodeCanvasRef.innerHTML = qr.createSvgTag(cellSize, 0);
    var qrSize = qrCodeCanvasRef.firstElementChild.clientWidth;
    var scale = Math.round(qrNormalSize / qrSize * 1e5) / 1e5;
    if (imageRef) {
      var imgSize = Math.ceil(imgSizeDefault / (scale * cellSize)) * cellSize;
      var imgOffset = toPx(Math.ceil((qrSize - imgSize) / (2 * cellSize)) * cellSize);
      imageRef.style.top = imgOffset;
      imageRef.style.left = imgOffset;
      imageRef.style.height = toPx(imgSize);
      imageRef.style.width = toPx(imgSize);
      setPicSize(Math.round(picSizeDefault / scale));
    }
    qrCodeWrapperRef.style.transform = "scale(".concat(scale, ")");
  });
  var timeoutId = null;
  var onCopyClick = function onCopyClick() {
    setCopyButtonOpened(true);
    copyToClipboard(props.sourceUrl);
    if (timeoutId != null) {
      clearTimeout(timeoutId);
    }
    timeoutId = setTimeout(function () {
      return setCopyButtonOpened(false);
    }, 1500);
  };
  return createComponent(QrCodeBackground, _defineAccessor("get", _defineProperty$1(_defineAccessor("get", {}, "class", function () {
    return props["class"];
  }), "onClick", onCopyClick), "children", function () {
    return [createComponent(QrCodeWrapper$2, {
      ref: function ref(r$) {
        var _ref$ = qrCodeWrapperRef;
        typeof _ref$ === "function" ? _ref$(r$) : qrCodeWrapperRef = r$;
      },
      get children() {
        return [function () {
          var _el$ = _tmpl$$t.cloneNode(true);
          var _ref$2 = qrCodeCanvasRef;
          typeof _ref$2 === "function" ? use(_ref$2, _el$) : qrCodeCanvasRef = _el$;
          return _el$;
        }(), createComponent(Show, {
          get when() {
            return props.imageUrl;
          },
          get children() {
            return createComponent(ImageBackground, {
              ref: function ref(r$) {
                var _ref$3 = imageRef;
                typeof _ref$3 === "function" ? _ref$3(r$) : imageRef = r$;
              },
              get children() {
                return createComponent(ImageStyled$3, {
                  get src() {
                    return props.imageUrl;
                  },
                  alt: "",
                  get size() {
                    return picSize();
                  }
                });
              }
            });
          }
        })];
      }
    }), createComponent(Transition, {
      onBeforeEnter: function onBeforeEnter(el) {
        animate(el, [{
          opacity: 0,
          transform: "translate(-50%, 44px)"
        }, {
          opacity: 1,
          transform: "translate(-50%, 0)"
        }], {
          duration: 150,
          easing: "ease-out"
        });
      },
      onExit: function onExit(el, done) {
        animate(el, [{
          opacity: 1,
          transform: "translate(-50%, 0)"
        }, {
          opacity: 0,
          transform: "translate(-50%, 44px)"
        }], {
          duration: 150,
          easing: "ease-out"
        }).finished.then(function () {
          done();
        });
      },
      get children() {
        return createComponent(Show, {
          get when() {
            return copyButtonOpened() && !props.disableCopy;
          },
          get children() {
            return createComponent(CopiedBoxStyled, {
              get children() {
                return [createComponent(SuccessIcon, {
                  size: "xs"
                }), createComponent(Text, {
                  translationKey: "common.linkCopied",
                  children: "Link Copied"
                })];
              }
            });
          }
        });
      }
    }), createComponent(Show, {
      get when() {
        return !props.disableCopy;
      },
      get children() {
        return createComponent(CopyIconButton, {
          get children() {
            return createComponent(CopyLightIcon, {});
          }
        });
      }
    })];
  }));
};
var deepReadObject = function deepReadObject(obj, path, defaultValue) {
  var value = path.trim().split(".").reduce(function (a2, b) {
    return a2 ? a2[b] : void 0;
  }, obj);
  return value !== void 0 ? value : defaultValue;
};
var template = function template(str, params) {
  var reg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : /{{(.*?)}}/g;
  return str.replace(reg, function (_, key) {
    return deepReadObject(params, key, "");
  });
};
var createI18nContext = function createI18nContext() {
  var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : navigator.language in init ? navigator.language : Object.keys(init)[0];
  var _createSignal35 = createSignal(lang),
    _createSignal36 = _slicedToArray(_createSignal35, 2),
    _locale = _createSignal36[0],
    setLocale = _createSignal36[1];
  var _createStore3 = createStore(init),
    _createStore4 = _slicedToArray(_createStore3, 2),
    _dict = _createStore4[0],
    setDict = _createStore4[1];
  var translate = function translate(key, params, defaultValue) {
    var val = deepReadObject(_dict[_locale()], key, defaultValue || "");
    if (typeof val === "function") return val(params);
    if (typeof val === "string") return template(val, params || {});
    return val;
  };
  var actions = {
    add: function add(lang2, table) {
      setDict(lang2, function (t2) {
        return Object.assign(t2 || {}, table);
      });
    },
    locale: function locale(lang2) {
      return lang2 ? setLocale(lang2) : _locale();
    },
    dict: function dict(lang2) {
      return deepReadObject(_dict, lang2);
    }
  };
  return [translate, actions];
};
var I18nContext = createContext({});
var useI18n = function useI18n() {
  return useContext(I18nContext);
};
var TextStyled$3 = styled.div(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["\n    font-style: normal;\n    font-weight: ", ";\n    font-size: ", ";\n    line-height: ", ";\n\n    color: ", ";\n"])), function (props) {
  return props.fontWeight;
}, function (props) {
  return props.fontSize;
}, function (props) {
  return props.lineHeight;
}, function (props) {
  return props.color;
});
var Text = function Text(inputs) {
  var theme = useTheme();
  var _useI18n = useI18n(),
    _useI18n2 = _slicedToArray(_useI18n, 1),
    t2 = _useI18n2[0];
  var textRef;
  var color = function color() {
    return inputs.color || theme.colors.text.primary;
  };
  var props = mergeProps({
    fontSize: "14px",
    fontWeight: "510",
    lineHeight: "130%"
  }, inputs);
  createEffect(function () {
    if (!textRef) {
      return;
    }
    if (props.cursor === "unset") {
      return;
    }
    if (getComputedStyle(textRef).cursor !== "pointer") {
      textRef.style.cursor = "default";
    }
  });
  return createComponent(TextStyled$3, _defineAccessor("get", _defineProperty$1(_defineProperty$1(_defineAccessor("get", {
    get fontSize() {
      return props.fontSize;
    },
    get fontWeight() {
      return props.fontWeight;
    },
    get lineHeight() {
      return props.lineHeight;
    },
    get color() {
      return color();
    }
  }, "class", function () {
    return props["class"];
  }), "ref", function ref(r$) {
    var _ref$ = textRef;
    typeof _ref$ === "function" ? _ref$(r$) : textRef = r$;
  }), "data-tc-text", "true"), "children", function () {
    var _a2;
    return createMemo(function () {
      return !!props.translationKey;
    })() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
  }));
};
var ImageContainer = styled.div(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["\n    position: relative;\n\n    &::after {\n        content: '';\n        display: block;\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        border: 0.5px solid rgba(0, 0, 0, 0.08);\n\n        border-radius: inherit;\n    }\n"])));
var ImageStyled$2 = styled(Image)(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["\n    width: 100%;\n    height: 100%;\n    border-radius: inherit;\n"])));
var WalletImage = function WalletImage(props) {
  return createComponent(ImageContainer, _defineAccessor("get", _defineAccessor("get", {}, "class", function () {
    return props["class"];
  }), "children", function () {
    return createComponent(ImageStyled$2, {
      get src() {
        return props.src;
      }
    });
  }));
};
var borders$3 = {
  m: "16px",
  s: "12px",
  none: "0"
};
var badgeBorders = {
  m: "6px",
  s: "6px",
  none: "0"
};
var WalletItemStyled = styled.button(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["\n    position: relative;\n    cursor: pointer;\n    border: none;\n    background-color: unset;\n    padding: 8px 4px;\n    width: 92px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    transition: transform 0.125s ease-in-out;\n\n    ", " {\n        &:hover {\n            transform: scale(1.04);\n        }\n    }\n\n    &:active {\n        transform: scale(0.96);\n    }\n\n    ", " {\n        padding: 8px 4px;\n        width: 82px;\n    }\n\n    ", " {\n        &:active {\n            transform: scale(0.92);\n        }\n    }\n"])), mediaNotTouch, media("mobile"), mediaTouch);
var ImageStyled$1 = styled(WalletImage)(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["\n    width: 60px;\n    height: 60px;\n    border-radius: ", ";\n\n    margin-bottom: 8px;\n"])), function (props) {
  return borders$3[props.theme.borderRadius];
});
var BadgeStyled = styled(Image)(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["\n    position: absolute;\n    right: 10px;\n    top: 50px;\n    width: 24px;\n    height: 24px;\n    border-radius: ", ";\n    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.08);\n"])), function (props) {
  return badgeBorders[props.theme.borderRadius];
});
var StyledText = styled(Text)(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["\n    max-width: 90px;\n    font-weight: 510;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n\n    ", " {\n        max-width: 80px;\n    }\n"])), media("mobile"));
var StyledSecondLine = styled(Text)(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["\n    font-weight: ", ";\n    max-width: 90px;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    color: ", ";\n\n    ", " {\n        max-width: 80px;\n    }\n"])), function (props) {
  return props.colorPrimary ? "510" : "400";
}, function (props) {
  return props.colorPrimary ? props.theme.colors.text.primary : props.theme.colors.text.secondary;
}, media("mobile"));
var _tmpl$$s = /* @__PURE__ */template$1("<div></div>");
var WalletItem = function WalletItem(props) {
  var ctxRef = null;
  var adjustLetterSpacing = function adjustLetterSpacing() {
    var name = ctxRef == null ? void 0 : ctxRef.querySelector("div");
    if (name && name.scrollWidth > name.clientWidth) {
      var spacing = 0;
      var minSpacing = -0.4;
      var step = 0.05;
      while (name.scrollWidth > name.clientWidth && spacing >= minSpacing) {
        spacing -= step;
        name.style.letterSpacing = "".concat(spacing, "px");
      }
      if (spacing !== 0) {
        spacing -= step;
        name.style.letterSpacing = "".concat(spacing, "px");
      }
    }
  };
  onMount(function () {
    return adjustLetterSpacing();
  });
  createEffect(function () {
    adjustLetterSpacing();
  });
  return createComponent(WalletItemStyled, _defineAccessor("get", _defineProperty$1(_defineProperty$1(_defineAccessor("get", {}, "class", function () {
    return props["class"];
  }), "onClick", function onClick() {
    return props.onClick();
  }), "data-tc-wallet-item", "true"), "children", function () {
    return [createMemo(function () {
      return createMemo(function () {
        return typeof props.icon === "string";
      })() ? createComponent(ImageStyled$1, {
        get src() {
          return props.icon;
        }
      }) : props.icon;
    }), createMemo(function () {
      return createMemo(function () {
        return !!props.badgeUrl;
      })() && createComponent(BadgeStyled, {
        get src() {
          return props.badgeUrl;
        }
      });
    }), function () {
      var _el$ = _tmpl$$s.cloneNode(true);
      use(function (el) {
        return ctxRef = el;
      }, _el$);
      insert(_el$, createComponent(StyledText, {
        get children() {
          return props.name;
        }
      }));
      return _el$;
    }(), createMemo(function () {
      return createMemo(function () {
        return !!props.secondLine;
      })() && createComponent(StyledSecondLine, {
        get colorPrimary() {
          var _a2;
          return (_a2 = props.secondLineColorPrimary) != null ? _a2 : true;
        },
        get children() {
          return props.secondLine;
        }
      });
    })];
  }));
};
var H1Styled$9 = styled.h1(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["\n    font-style: normal;\n    font-weight: 590;\n    font-size: 20px;\n    line-height: 28px;\n\n    text-align: center;\n\n    color: ", ";\n\n    margin-top: 0;\n    margin-bottom: 0;\n\n    cursor: default;\n"])), function (props) {
  return props.theme.colors.text.primary;
});
var H1 = function H1(props) {
  var _useI18n3 = useI18n(),
    _useI18n4 = _slicedToArray(_useI18n3, 1),
    t2 = _useI18n4[0];
  return createComponent(H1Styled$9, _defineAccessor("get", _defineProperty$1(_defineAccessor("get", {}, "class", function () {
    return props["class"];
  }), "data-tc-h1", "true"), "children", function () {
    var _a2;
    return createMemo(function () {
      return !!props.translationKey;
    })() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
  }));
};
var H2Styled$5 = styled.h2(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["\n    font-style: normal;\n    font-weight: 400;\n    font-size: 16px;\n    line-height: 22px;\n\n    text-align: center;\n\n    color: ", ";\n\n    margin-top: 0;\n    margin-bottom: 32px;\n\n    cursor: default;\n"])), function (props) {
  return props.theme.colors.text.secondary;
});
var H2 = function H2(props) {
  var _useI18n5 = useI18n(),
    _useI18n6 = _slicedToArray(_useI18n5, 1),
    t2 = _useI18n6[0];
  return createComponent(H2Styled$5, _defineAccessor("get", _defineProperty$1(_defineAccessor("get", {}, "class", function () {
    return props["class"];
  }), "data-tc-h2", "true"), "children", function () {
    var _a2;
    return createMemo(function () {
      return !!props.translationKey;
    })() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
  }));
};
var H3Styled$1 = styled.h3(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["\n    font-style: normal;\n    font-weight: 510;\n    font-size: 16px;\n    line-height: 20px;\n\n    color: ", ";\n\n    margin-top: 0;\n    margin-bottom: 0;\n\n    cursor: default;\n"])), function (props) {
  return props.theme.colors.text.primary;
});
var H3 = function H3(props) {
  var _useI18n7 = useI18n(),
    _useI18n8 = _slicedToArray(_useI18n7, 1),
    t2 = _useI18n8[0];
  return createComponent(H3Styled$1, _defineAccessor("get", _defineAccessor("get", {
    "data-tc-h3": "true"
  }, "class", function () {
    return props["class"];
  }), "children", function () {
    var _a2;
    return createMemo(function () {
      return !!props.translationKey;
    })() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
  }));
};
var _tmpl$$r = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 28 28\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.75 7.5C9.33579 7.5 9 7.16421 9 6.75C9 6.33579 9.33579 6 9.75 6H21.25C21.6642 6 22 6.33579 22 6.75V18.25C22 18.6642 21.6642 19 21.25 19C20.8358 19 20.5 18.6642 20.5 18.25V8.56066L6.28033 22.7803C5.98744 23.0732 5.51256 23.0732 5.21967 22.7803C4.92678 22.4874 4.92678 22.0126 5.21967 21.7197L19.4393 7.5H9.75Z\"></path></svg>");
var LongArrowIcon = function LongArrowIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.secondary;
  };
  return function () {
    var _el$ = _tmpl$$r.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function (_p$) {
      var _v$ = fill(),
        _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "fill", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  }();
};
var _tmpl$$q = /* @__PURE__ */template$1("<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M14.1839 17.7069C13.6405 18.6507 13.3688 19.1226 13.0591 19.348C12.4278 19.8074 11.5723 19.8074 10.941 19.348C10.6312 19.1226 10.3595 18.6507 9.81613 17.7069L5.52066 10.2464C4.76864 8.94024 4.39263 8.28717 4.33762 7.75894C4.2255 6.68236 4.81894 5.65591 5.80788 5.21589C6.29309 5 7.04667 5 8.55383 5H15.4462C16.9534 5 17.7069 5 18.1922 5.21589C19.1811 5.65591 19.7745 6.68236 19.6624 7.75894C19.6074 8.28717 19.2314 8.94024 18.4794 10.2464L14.1839 17.7069ZM11.1 16.3412L6.56139 8.48002C6.31995 8.06185 6.19924 7.85276 6.18146 7.68365C6.14523 7.33896 6.33507 7.01015 6.65169 6.86919C6.80703 6.80002 7.04847 6.80002 7.53133 6.80002H7.53134L11.1 6.80002V16.3412ZM12.9 16.3412L17.4387 8.48002C17.6801 8.06185 17.8008 7.85276 17.8186 7.68365C17.8548 7.33896 17.665 7.01015 17.3484 6.86919C17.193 6.80002 16.9516 6.80002 16.4687 6.80002L12.9 6.80002V16.3412Z\"></path></svg>");
var TonIcon = function TonIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.primary;
  };
  return function () {
    var _el$ = _tmpl$$q.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function () {
      return setAttribute(_el$2, "fill", fill());
    });
    return _el$;
  }();
};
var _tmpl$$p = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><g clip-path=\"url(#clip0_3783_2045)\"><circle cx=\"8\" cy=\"8.00098\" r=\"8\"></circle><path d=\"M4.75 8.50098L7 10.751L11.75 6.00098\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></g><defs><clipPath id=\"clip0_3783_2045\"><rect width=\"16\" height=\"16\" fill=\"white\" transform=\"translate(0 0.000976562)\"></rect></clipPath></defs></svg>"),
  _tmpl$2$3 = /* @__PURE__ */template$1("<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"12\" cy=\"12\" r=\"11\"></circle><path d=\"M17.1364 9.6364C17.4879 9.28493 17.4879 8.71508 17.1364 8.36361C16.7849 8.01214 16.2151 8.01214 15.8636 8.36361L10 14.2272L8.1364 12.3636C7.78493 12.0121 7.21508 12.0121 6.86361 12.3636C6.51214 12.7151 6.51214 13.2849 6.86361 13.6364L9.36361 16.1364C9.71508 16.4879 10.2849 16.4879 10.6364 16.1364L17.1364 9.6364Z\"></path></svg>"),
  _tmpl$3$2 = /* @__PURE__ */template$1("<svg width=\"72\" height=\"72\" viewBox=\"0 0 72 72\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"36\" cy=\"36\" r=\"33\"></circle><path d=\"M50.9142 28.4142C51.6953 27.6332 51.6953 26.3668 50.9142 25.5858C50.1332 24.8047 48.8668 24.8047 48.0858 25.5858L30 43.6716L23.9142 37.5858C23.1332 36.8047 21.8668 36.8047 21.0858 37.5858C20.3047 38.3668 20.3047 39.6332 21.0858 40.4142L28.5858 47.9142C29.3668 48.6953 30.6332 48.6953 31.4142 47.9142L50.9142 28.4142Z\"></path></svg>");
var SuccessIcon = function SuccessIcon(props) {
  var theme = useTheme();
  var size = function size() {
    return props.size || "s";
  };
  var fill = function fill() {
    return props.fill || theme.colors.icon.success;
  };
  return createMemo(function () {
    var _c$ = createMemo(function () {
      return size() === "xs";
    });
    return function () {
      return _c$() ? function () {
        var _el$ = _tmpl$$p.cloneNode(true),
          _el$2 = _el$.firstChild,
          _el$3 = _el$2.firstChild,
          _el$4 = _el$3.nextSibling;
        createRenderEffect(function (_p$) {
          var _v$ = props["class"],
            _v$2 = fill(),
            _v$3 = theme.colors.constant.white;
          _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
          _v$2 !== _p$._v$2 && setAttribute(_el$3, "fill", _p$._v$2 = _v$2);
          _v$3 !== _p$._v$3 && setAttribute(_el$4, "stroke", _p$._v$3 = _v$3);
          return _p$;
        }, {
          _v$: void 0,
          _v$2: void 0,
          _v$3: void 0
        });
        return _el$;
      }() : function () {
        var _c$2 = createMemo(function () {
          return size() === "s";
        });
        return function () {
          return _c$2() ? function () {
            var _el$5 = _tmpl$2$3.cloneNode(true),
              _el$6 = _el$5.firstChild,
              _el$7 = _el$6.nextSibling;
            createRenderEffect(function (_p$) {
              var _v$4 = props["class"],
                _v$5 = fill(),
                _v$6 = theme.colors.constant.white;
              _v$4 !== _p$._v$4 && setAttribute(_el$5, "class", _p$._v$4 = _v$4);
              _v$5 !== _p$._v$5 && setAttribute(_el$6, "fill", _p$._v$5 = _v$5);
              _v$6 !== _p$._v$6 && setAttribute(_el$7, "fill", _p$._v$6 = _v$6);
              return _p$;
            }, {
              _v$4: void 0,
              _v$5: void 0,
              _v$6: void 0
            });
            return _el$5;
          }() : function () {
            var _el$8 = _tmpl$3$2.cloneNode(true),
              _el$9 = _el$8.firstChild,
              _el$10 = _el$9.nextSibling;
            createRenderEffect(function (_p$) {
              var _v$7 = props["class"],
                _v$8 = fill(),
                _v$9 = theme.colors.constant.white;
              _v$7 !== _p$._v$7 && setAttribute(_el$8, "class", _p$._v$7 = _v$7);
              _v$8 !== _p$._v$8 && setAttribute(_el$9, "fill", _p$._v$8 = _v$8);
              _v$9 !== _p$._v$9 && setAttribute(_el$10, "fill", _p$._v$9 = _v$9);
              return _p$;
            }, {
              _v$7: void 0,
              _v$8: void 0,
              _v$9: void 0
            });
            return _el$8;
          }();
        };
      }();
    };
  }());
};
var _tmpl$$o = /* @__PURE__ */template$1("<svg width=\"72\" height=\"72\" viewBox=\"0 0 72 72\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"36\" cy=\"36\" r=\"33\"></circle><path d=\"M24.0858 26.9142C23.3047 26.1332 23.3047 24.8668 24.0858 24.0858C24.8668 23.3047 26.1332 23.3047 26.9142 24.0858L36 33.1716L45.0858 24.0858C45.8668 23.3047 47.1332 23.3047 47.9142 24.0858C48.6953 24.8668 48.6953 26.1332 47.9142 26.9142L38.8284 36L47.9142 45.0858C48.6953 45.8668 48.6953 47.1332 47.9142 47.9142C47.1332 48.6953 45.8668 48.6953 45.0858 47.9142L36 38.8284L26.9142 47.9142C26.1332 48.6953 24.8668 48.6953 24.0858 47.9142C23.3047 47.1332 23.3047 45.8668 24.0858 45.0858L33.1716 36L24.0858 26.9142Z\"></path></svg>"),
  _tmpl$2$2 = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\"><circle cx=\"24\" cy=\"24.001\" r=\"22\"></circle><path d=\"M24 24.001L31.5 16.501M24 24.001L16.5 16.501M24 24.001L16.5 31.501M24 24.001L31.5 31.501\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg>"),
  _tmpl$3$1 = /* @__PURE__ */template$1("<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"12\" cy=\"12\" r=\"11\"></circle><path d=\"M7.86361 9.1364C7.51214 8.78493 7.51214 8.21508 7.86361 7.86361C8.21508 7.51214 8.78493 7.51214 9.1364 7.86361L12 10.7272L14.8636 7.86361C15.2151 7.51214 15.7849 7.51214 16.1364 7.86361C16.4879 8.21508 16.4879 8.78493 16.1364 9.1364L13.2728 12L16.1364 14.8636C16.4879 15.2151 16.4879 15.7849 16.1364 16.1364C15.7849 16.4879 15.2151 16.4879 14.8636 16.1364L12 13.2728L9.1364 16.1364C8.78493 16.4879 8.21508 16.4879 7.86361 16.1364C7.51214 15.7849 7.51214 15.2151 7.86361 14.8636L10.7272 12L7.86361 9.1364Z\"></path></svg>");
var ErrorIcon = function ErrorIcon(props) {
  var theme = useTheme();
  var size = function size() {
    return props.size || "m";
  };
  var fill = function fill() {
    return props.fill || theme.colors.icon.error;
  };
  return createMemo(function () {
    var _c$ = createMemo(function () {
      return size() === "m";
    });
    return function () {
      return _c$() ? function () {
        var _el$ = _tmpl$$o.cloneNode(true),
          _el$2 = _el$.firstChild,
          _el$3 = _el$2.nextSibling;
        createRenderEffect(function (_p$) {
          var _v$ = props["class"],
            _v$2 = fill(),
            _v$3 = theme.colors.constant.white;
          _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
          _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
          _v$3 !== _p$._v$3 && setAttribute(_el$3, "fill", _p$._v$3 = _v$3);
          return _p$;
        }, {
          _v$: void 0,
          _v$2: void 0,
          _v$3: void 0
        });
        return _el$;
      }() : function () {
        var _c$2 = createMemo(function () {
          return size() === "s";
        });
        return function () {
          return _c$2() ? function () {
            var _el$4 = _tmpl$2$2.cloneNode(true),
              _el$5 = _el$4.firstChild,
              _el$6 = _el$5.nextSibling;
            createRenderEffect(function (_p$) {
              var _v$4 = props["class"],
                _v$5 = fill(),
                _v$6 = theme.colors.constant.white;
              _v$4 !== _p$._v$4 && setAttribute(_el$4, "class", _p$._v$4 = _v$4);
              _v$5 !== _p$._v$5 && setAttribute(_el$5, "fill", _p$._v$5 = _v$5);
              _v$6 !== _p$._v$6 && setAttribute(_el$6, "stroke", _p$._v$6 = _v$6);
              return _p$;
            }, {
              _v$4: void 0,
              _v$5: void 0,
              _v$6: void 0
            });
            return _el$4;
          }() : function () {
            var _el$7 = _tmpl$3$1.cloneNode(true),
              _el$8 = _el$7.firstChild,
              _el$9 = _el$8.nextSibling;
            createRenderEffect(function (_p$) {
              var _v$7 = props["class"],
                _v$8 = fill(),
                _v$9 = theme.colors.constant.white;
              _v$7 !== _p$._v$7 && setAttribute(_el$7, "class", _p$._v$7 = _v$7);
              _v$8 !== _p$._v$8 && setAttribute(_el$8, "fill", _p$._v$8 = _v$8);
              _v$9 !== _p$._v$9 && setAttribute(_el$9, "fill", _p$._v$9 = _v$9);
              return _p$;
            }, {
              _v$7: void 0,
              _v$8: void 0,
              _v$9: void 0
            });
            return _el$7;
          }();
        };
      }();
    };
  }());
};
var _tmpl$$n = /* @__PURE__ */template$1("<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.55 5.85123C18.9459 7.81184 20.1094 12.1541 18.1488 15.55C16.1882 18.9459 11.8459 20.1094 8.44998 18.1488C8.01952 17.9003 7.46909 18.0478 7.22056 18.4782C6.97203 18.9087 7.11952 19.4591 7.54998 19.7076C11.8068 22.1653 17.2499 20.7068 19.7076 16.45C22.1653 12.1932 20.7068 6.75005 16.45 4.29239C12.1932 1.83472 6.75003 3.29321 4.29236 7.55001C4.04383 7.98047 4.19132 8.53091 4.62178 8.77943C5.05224 9.02796 5.60268 8.88048 5.8512 8.45001C7.81181 5.05413 12.1541 3.89062 15.55 5.85123Z\"></path></svg>"),
  _tmpl$2$1 = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M22 2.99951C11.5066 2.99951 3 11.5061 3 21.9995C3 32.4929 11.5066 40.9995 22 40.9995C22.8284 40.9995 23.5 41.6711 23.5 42.4995C23.5 43.3279 22.8284 43.9995 22 43.9995C9.84974 43.9995 0 34.1498 0 21.9995C0 9.84925 9.84974 -0.000488281 22 -0.000488281C34.1503 -0.000488281 44 9.84925 44 21.9995C44 22.8279 43.3284 23.4995 42.5 23.4995C41.6716 23.4995 41 22.8279 41 21.9995C41 11.5061 32.4934 2.99951 22 2.99951Z\"></path></svg>"),
  _tmpl$3 = /* @__PURE__ */template$1("<svg width=\"72\" height=\"72\" viewBox=\"0 0 72 72\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M24 56.7846C35.479 63.412 50.1572 59.479 56.7846 47.9999C63.412 36.5209 59.479 21.8427 48 15.2153C36.521 8.58791 21.8428 12.5209 15.2154 23.9999\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg>");
var LoaderIcon = function LoaderIcon(props) {
  var theme = useTheme();
  var size = function size() {
    return props.size || "xs";
  };
  var fill = function fill() {
    return props.fill || theme.colors.icon.tertiary;
  };
  var rotateAnimation = h(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["\n        0% {\n          transform: rotate(0deg);\n        }\n        100% {\n          transform: rotate(360deg);\n        }\n    "])));
  var svgClass = u(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral(["\n        animation: ", " 1s linear infinite;\n    "])), rotateAnimation);
  return createMemo(function () {
    var _c$ = createMemo(function () {
      return size() === "xs";
    });
    return function () {
      return _c$() ? function () {
        var _el$ = _tmpl$$n.cloneNode(true),
          _el$2 = _el$.firstChild;
        createRenderEffect(function (_p$) {
          var _v$ = cn(svgClass, props["class"]),
            _v$2 = fill();
          _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
          _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
          return _p$;
        }, {
          _v$: void 0,
          _v$2: void 0
        });
        return _el$;
      }() : function () {
        var _c$2 = createMemo(function () {
          return size() === "s";
        });
        return function () {
          return _c$2() ? function () {
            var _el$3 = _tmpl$2$1.cloneNode(true),
              _el$4 = _el$3.firstChild;
            createRenderEffect(function (_p$) {
              var _v$3 = cn(svgClass, props["class"]),
                _v$4 = fill();
              _v$3 !== _p$._v$3 && setAttribute(_el$3, "class", _p$._v$3 = _v$3);
              _v$4 !== _p$._v$4 && setAttribute(_el$4, "fill", _p$._v$4 = _v$4);
              return _p$;
            }, {
              _v$3: void 0,
              _v$4: void 0
            });
            return _el$3;
          }() : function () {
            var _el$5 = _tmpl$3.cloneNode(true),
              _el$6 = _el$5.firstChild;
            createRenderEffect(function (_p$) {
              var _v$5 = cn(svgClass, props["class"]),
                _v$6 = fill();
              _v$5 !== _p$._v$5 && setAttribute(_el$5, "class", _p$._v$5 = _v$5);
              _v$6 !== _p$._v$6 && setAttribute(_el$6, "stroke", _p$._v$6 = _v$6);
              return _p$;
            }, {
              _v$5: void 0,
              _v$6: void 0
            });
            return _el$5;
          }();
        };
      }();
    };
  }());
};
var _tmpl$$m = /* @__PURE__ */template$1("<svg width=\"158\" height=\"28\" viewBox=\"0 0 158 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M28 14.001C28 21.733 21.732 28.001 14 28.001C6.26801 28.001 0 21.733 0 14.001C0 6.26899 6.26801 0.000976562 14 0.000976562C21.732 0.000976562 28 6.26899 28 14.001ZM9.21931 8.00098H18.7801H18.7813C20.538 8.00098 21.6522 9.89966 20.7691 11.4302L14.8672 21.6576C14.4822 22.3254 13.5172 22.3254 13.1322 21.6576L7.23158 11.4302C6.34721 9.89726 7.4614 8.00098 9.21931 8.00098ZM13.1262 18.5882V9.74806H9.21811C8.78976 9.74806 8.53708 10.2029 8.74163 10.5578L11.8423 16.1035L13.1262 18.5882ZM16.1559 16.1047L19.2554 10.5566C19.4599 10.2017 19.2073 9.74685 18.7789 9.74685H14.8709V18.5906L16.1559 16.1047Z\" fill=\"#0098EA\"></path><path d=\"M18.7802 8.00098H9.21936C7.46145 8.00098 6.34727 9.89726 7.23164 11.4302L13.1322 21.6576C13.5173 22.3254 14.4823 22.3254 14.8673 21.6576L20.7691 11.4302C21.6523 9.89966 20.5381 8.00098 18.7814 8.00098H18.7802ZM13.1274 18.5906L11.8424 16.1035L8.74168 10.5578C8.53714 10.2029 8.78981 9.74806 9.21816 9.74806H13.1262V18.5918L13.1274 18.5906ZM19.2555 10.5566L16.156 16.1047L14.8709 18.5906V9.74685H18.779C19.2073 9.74685 19.46 10.2017 19.2555 10.5566Z\" fill=\"white\"></path><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M51.7483 22.1967C55.7182 22.1967 58.9609 18.954 58.9609 14.9841C58.9609 11.0142 55.7182 7.77148 51.7483 7.77148C47.7588 7.77148 44.5357 11.0142 44.5357 14.9841C44.5357 18.954 47.7588 22.1967 51.7483 22.1967ZM51.7483 19.1702C49.4686 19.1702 47.6802 17.2442 47.6802 14.9841C47.6802 12.724 49.4686 10.798 51.7483 10.798C54.0084 10.798 55.7968 12.724 55.7968 14.9841C55.7968 17.2442 54.0084 19.1702 51.7483 19.1702ZM37.0698 21.9609H40.2142V10.9946H44.2843V8.00732H33V10.9946H37.0698V21.9609ZM69.9379 8.00732H73.0823V21.9609H70.3899L63.59 13.3333V21.9609H60.4652V8.00732H63.1576L69.9379 16.6153V8.00732ZM79.2259 14.9887C79.2259 10.9202 82.351 7.77539 86.4982 7.77539C89.8592 7.77539 92.5519 9.95709 93.2202 12.6891H90.7437C90.154 11.0971 88.4637 9.9964 86.4982 9.9964C83.5893 9.9964 81.5452 12.1781 81.5452 14.9887C81.5452 17.7994 83.5893 19.9811 86.4982 19.9811C88.4637 19.9811 90.154 18.8804 90.7437 17.2884H93.2202C92.5519 20.0204 89.8592 22.2021 86.4982 22.2021C82.351 22.2021 79.2259 19.0573 79.2259 14.9887ZM104.584 17.0525C104.584 19.9025 102.343 22.1628 99.4342 22.1628C96.5253 22.1628 94.2846 19.9025 94.2846 17.0525C94.2846 14.2025 96.5253 11.9422 99.4342 11.9422C102.343 11.9422 104.584 14.2025 104.584 17.0525ZM96.4663 17.0525C96.4663 18.8018 97.6849 20.158 99.4342 20.158C101.164 20.158 102.382 18.8018 102.382 17.0525C102.382 15.3032 101.164 13.947 99.4342 13.947C97.6849 13.947 96.4663 15.3032 96.4663 17.0525ZM108.626 12.1388H106.463V21.9662H108.626V17.1311C108.626 15.0281 109.726 13.9077 111.161 13.9077C112.419 13.9077 113.205 14.8512 113.205 16.4039V21.9662H115.367V16.0501C115.367 13.5539 113.893 11.9422 111.613 11.9422C110.335 11.9422 109.215 12.4926 108.626 13.4753V12.1388ZM117.839 12.1388H120.001V13.4753C120.59 12.4926 121.711 11.9422 122.988 11.9422C125.268 11.9422 126.742 13.5539 126.742 16.0501V21.9662H124.58V16.4039C124.58 14.8512 123.794 13.9077 122.536 13.9077C121.101 13.9077 120.001 15.0281 120.001 17.1311V21.9662H117.839V12.1388ZM133.558 22.1628C136.054 22.1628 137.823 20.728 138.373 18.8804H136.113C135.661 19.8238 134.717 20.2563 133.636 20.2563C131.887 20.2563 130.747 19.077 130.668 17.5832H138.491C138.688 14.2419 136.585 11.9422 133.577 11.9422C130.551 11.9422 128.526 14.1436 128.526 17.0525C128.526 20.0007 130.629 22.1628 133.558 22.1628ZM130.747 16.0501C131.042 14.5367 132.162 13.7505 133.518 13.7505C134.717 13.7505 135.838 14.4581 136.172 16.0501H130.747ZM149.851 18.3694C149.32 20.5511 147.453 22.1628 144.859 22.1628C141.871 22.1628 139.709 19.8828 139.709 17.0525C139.709 14.2222 141.871 11.9422 144.859 11.9422C147.453 11.9422 149.32 13.5539 149.851 15.7356H147.571C147.178 14.6743 146.215 13.9077 144.859 13.9077C143.109 13.9077 141.91 15.2246 141.91 17.0525C141.91 18.8804 143.109 20.1973 144.859 20.1973C146.215 20.1973 147.178 19.4307 147.571 18.3694H149.851ZM155.75 22.0645C156.418 22.0645 156.929 21.9859 157.362 21.8483V19.9221C157.047 20.0401 156.615 20.1187 156.202 20.1187C155.082 20.1187 154.551 19.6666 154.551 18.448V14.065H157.362V12.1388H154.551V9.40675H152.389V12.1388H150.345V14.065H152.389V18.8018C152.389 21.0228 153.863 22.0645 155.75 22.0645Z\"></path></svg>");
var TonConnectBrand = function TonConnectBrand() {
  var theme = useTheme();
  var fill = function fill() {
    return theme.theme === THEME.DARK ? theme.colors.constant.white : theme.colors.constant.black;
  };
  return function () {
    var _el$ = _tmpl$$m.cloneNode(true),
      _el$2 = _el$.firstChild,
      _el$3 = _el$2.nextSibling,
      _el$4 = _el$3.nextSibling;
    createRenderEffect(function () {
      return setAttribute(_el$4, "fill", fill());
    });
    return _el$;
  }();
};
var _tmpl$$l = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M5.56608 4.42584C5.82527 3.32158 6.8176 2.5 8.00001 2.5C9.38072 2.5 10.5 3.61929 10.5 5C10.5 5.63026 10.3391 6.0386 10.1264 6.34455C9.90018 6.66993 9.58561 6.92478 9.18864 7.20877C9.12579 7.25372 9.05873 7.30025 8.9887 7.34883C8.27392 7.84472 7.25001 8.55507 7.25001 10V10.25C7.25001 10.6642 7.5858 11 8.00001 11C8.41422 11 8.75001 10.6642 8.75001 10.25V10C8.75001 9.36502 9.10777 9.1096 9.94554 8.51149L10.0614 8.42873C10.4769 8.13147 10.9748 7.75194 11.358 7.20076C11.7547 6.63015 12 5.91973 12 5C12 2.79086 10.2091 1 8.00001 1C6.10564 1 4.5205 2.31615 4.10577 4.08308C4.01112 4.48634 4.26129 4.88997 4.66454 4.98462C5.0678 5.07927 5.47143 4.8291 5.56608 4.42584ZM8.00001 15C8.60752 15 9.10001 14.5075 9.10001 13.9C9.10001 13.2925 8.60752 12.8 8.00001 12.8C7.39249 12.8 6.90001 13.2925 6.90001 13.9C6.90001 14.5075 7.39249 15 8.00001 15Z\"></path></svg>");
var QuestionIcon = function QuestionIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.secondary;
  };
  return function () {
    var _el$ = _tmpl$$l.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function () {
      return setAttribute(_el$2, "fill", fill());
    });
    return _el$;
  }();
};
var _tmpl$$k = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.98156 8.75C9.84854 11.4328 9.01206 13.5 8 13.5C6.98794 13.5 6.15146 11.4328 6.01844 8.75H9.98156ZM11.4832 8.75C11.4217 10.1155 11.1929 11.3869 10.8239 12.4017C10.7734 12.5405 10.7188 12.6789 10.6595 12.8154C12.1454 11.993 13.2103 10.5029 13.4493 8.75H11.4832ZM13.4493 7.25H11.4832C11.4217 5.88453 11.1929 4.61314 10.8239 3.5983C10.7734 3.4595 10.7188 3.32111 10.6595 3.18459C12.1454 4.00697 13.2103 5.49709 13.4493 7.25ZM9.98156 7.25H6.01844C6.15144 4.56764 6.98769 2.50062 7.99955 2.5H8C9.01206 2.5 9.84854 4.56724 9.98156 7.25ZM4.51678 7.25C4.57826 5.88453 4.80706 4.61314 5.1761 3.5983C5.22657 3.4595 5.28124 3.32111 5.3405 3.18459C3.85463 4.00697 2.78972 5.49709 2.55071 7.25H4.51678ZM2.55071 8.75C2.78972 10.5029 3.85463 11.993 5.3405 12.8154C5.28124 12.6789 5.22657 12.5405 5.1761 12.4017C4.80706 11.3869 4.57826 10.1155 4.51678 8.75H2.55071ZM15 8C15 11.866 11.866 15 8 15C4.13401 15 1 11.866 1 8C1 4.13401 4.13401 1 8 1C11.866 1 15 4.13401 15 8Z\"></path></svg>");
var BrowserIcon = function BrowserIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.primary;
  };
  return function () {
    var _el$ = _tmpl$$k.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function () {
      return setAttribute(_el$2, "fill", fill());
    });
    return _el$;
  }();
};
var _tmpl$$j = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2.5 4.8C2.5 3.11984 2.5 2.27976 2.82698 1.63803C3.1146 1.07354 3.57354 0.614601 4.13803 0.32698C4.77976 0 5.61984 0 7.3 0H8.7C10.3802 0 11.2202 0 11.862 0.32698C12.4265 0.614601 12.8854 1.07354 13.173 1.63803C13.5 2.27976 13.5 3.11984 13.5 4.8V11.2C13.5 12.8802 13.5 13.7202 13.173 14.362C12.8854 14.9265 12.4265 15.3854 11.862 15.673C11.2202 16 10.3802 16 8.7 16H7.3C5.61984 16 4.77976 16 4.13803 15.673C3.57354 15.3854 3.1146 14.9265 2.82698 14.362C2.5 13.7202 2.5 12.8802 2.5 11.2V4.8ZM4 3.9C4 3.05992 4 2.63988 4.16349 2.31901C4.3073 2.03677 4.53677 1.8073 4.81901 1.66349C5.13988 1.5 5.55992 1.5 6.4 1.5H9.6C10.4401 1.5 10.8601 1.5 11.181 1.66349C11.4632 1.8073 11.6927 2.03677 11.8365 2.31901C12 2.63988 12 3.05992 12 3.9V12.1C12 12.9401 12 13.3601 11.8365 13.681C11.6927 13.9632 11.4632 14.1927 11.181 14.3365C10.8601 14.5 10.4401 14.5 9.6 14.5H6.4C5.55992 14.5 5.13988 14.5 4.81901 14.3365C4.53677 14.1927 4.3073 13.9632 4.16349 13.681C4 13.3601 4 12.9401 4 12.1V3.9ZM7 2.5C6.58579 2.5 6.25 2.83579 6.25 3.25C6.25 3.66421 6.58579 4 7 4H9C9.41421 4 9.75 3.66421 9.75 3.25C9.75 2.83579 9.41421 2.5 9 2.5H7Z\"></path></svg>");
var MobileIcon = function MobileIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.primary;
  };
  return function () {
    var _el$ = _tmpl$$j.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function () {
      return setAttribute(_el$2, "fill", fill());
    });
    return _el$;
  }();
};
var _tmpl$$i = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.5 6.8C1.5 5.11984 1.5 4.27976 1.82698 3.63803C2.1146 3.07354 2.57354 2.6146 3.13803 2.32698C3.77976 2 4.61984 2 6.3 2H9.7C11.3802 2 12.2202 2 12.862 2.32698C13.4265 2.6146 13.8854 3.07354 14.173 3.63803C14.5 4.27976 14.5 5.11984 14.5 6.8V11.5H15.25C15.6642 11.5 16 11.8358 16 12.25C16 12.6642 15.6642 13 15.25 13H0.75C0.335786 13 0 12.6642 0 12.25C0 11.8358 0.335786 11.5 0.75 11.5H1.5V6.8ZM3 11.5H13V5.9C13 5.05992 13 4.63988 12.8365 4.31901C12.6927 4.03677 12.4632 3.8073 12.181 3.66349C11.8601 3.5 11.4401 3.5 10.6 3.5H5.4C4.55992 3.5 4.13988 3.5 3.81901 3.66349C3.53677 3.8073 3.3073 4.03677 3.16349 4.31901C3 4.63988 3 5.05992 3 5.9V11.5Z\"></path></svg>");
var DesktopIcon = function DesktopIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.primary;
  };
  return function () {
    var _el$ = _tmpl$$i.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function () {
      return setAttribute(_el$2, "fill", fill());
    });
    return _el$;
  }();
};
var _tmpl$$h = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\"><g clip-path=\"url(#clip0_3676_1603)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.5 1.25049C15.5 0.836275 15.1642 0.500488 14.75 0.500488C14.3358 0.500488 14 0.836275 14 1.25049V3.67012C12.7187 2.04487 10.7318 1.00049 8.5 1.00049C4.63401 1.00049 1.5 4.1345 1.5 8.00049C1.5 11.8665 4.63401 15.0005 8.5 15.0005C11.6844 15.0005 14.3703 12.8748 15.2199 9.96661C15.3361 9.56902 15.1079 9.15254 14.7103 9.03638C14.3127 8.92023 13.8962 9.14838 13.7801 9.54597C13.1123 11.8319 11 13.5005 8.5 13.5005C5.46243 13.5005 3 11.0381 3 8.00049C3 4.96292 5.46243 2.50049 8.5 2.50049C10.321 2.50049 11.9363 3.3855 12.9377 4.75049H10.5C10.0858 4.75049 9.75 5.08627 9.75 5.50049C9.75 5.9147 10.0858 6.25049 10.5 6.25049H14.75C15.1642 6.25049 15.5 5.9147 15.5 5.50049V1.25049Z\"></path></g><defs><clipPath id=\"clip0_3676_1603\"><rect width=\"16\" height=\"16\" fill=\"white\" transform=\"translate(0.5 0.000488281)\"></rect></clipPath></defs></svg>");
var RetryIcon = function RetryIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.accent;
  };
  return function () {
    var _el$ = _tmpl$$h.cloneNode(true),
      _el$2 = _el$.firstChild,
      _el$3 = _el$2.firstChild;
    createRenderEffect(function () {
      return setAttribute(_el$3, "fill", fill());
    });
    return _el$;
  }();
};
var _tmpl$$g = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M13 4.06119V6.75053C13 7.16474 13.3358 7.50053 13.75 7.50053C14.1642 7.50053 14.5 7.16474 14.5 6.75053V2.75053L14.5 2.72807C14.5001 2.63191 14.5003 2.49627 14.4842 2.37627C14.4638 2.22503 14.4063 1.99261 14.2071 1.79342C14.0079 1.59423 13.7755 1.5367 13.6243 1.51637C13.5043 1.50023 13.3686 1.50039 13.2725 1.50051L13.25 1.50053H9.25C8.83579 1.50053 8.5 1.83631 8.5 2.25053C8.5 2.66474 8.83579 3.00053 9.25 3.00053H11.9393L7.21967 7.7202C6.92678 8.01309 6.92678 8.48796 7.21967 8.78086C7.51256 9.07375 7.98744 9.07375 8.28033 8.78086L13 4.06119ZM5.85 1.50053H5.81903H5.81899C5.21528 1.50052 4.71702 1.50051 4.31113 1.53367C3.88956 1.56812 3.50203 1.64204 3.13803 1.82751C2.57354 2.11513 2.1146 2.57407 1.82698 3.13856C1.64151 3.50256 1.56759 3.89009 1.53315 4.31166C1.49998 4.71755 1.49999 5.21581 1.5 5.81953V5.81955V5.85053V10.1505V10.1815V10.1815C1.49999 10.7852 1.49998 11.2835 1.53315 11.6894C1.56759 12.111 1.64151 12.4985 1.82698 12.8625C2.1146 13.427 2.57354 13.8859 3.13803 14.1735C3.50203 14.359 3.88956 14.4329 4.31113 14.4674C4.71702 14.5005 5.21527 14.5005 5.81897 14.5005H5.81901H5.85H10.15H10.181H10.181C10.7847 14.5005 11.283 14.5005 11.6889 14.4674C12.1104 14.4329 12.498 14.359 12.862 14.1735C13.4265 13.8859 13.8854 13.427 14.173 12.8625C14.3585 12.4985 14.4324 12.111 14.4669 11.6894C14.5 11.2835 14.5 10.7853 14.5 10.1816V10.1815V10.1505V9.75053C14.5 9.33631 14.1642 9.00053 13.75 9.00053C13.3358 9.00053 13 9.33631 13 9.75053V10.1505C13 10.793 12.9994 11.2297 12.9718 11.5672C12.945 11.8961 12.8963 12.0642 12.8365 12.1815C12.6927 12.4638 12.4632 12.6932 12.181 12.837C12.0637 12.8968 11.8955 12.9455 11.5667 12.9724C11.2292 12.9999 10.7924 13.0005 10.15 13.0005H5.85C5.20757 13.0005 4.77085 12.9999 4.43328 12.9724C4.10447 12.9455 3.93632 12.8968 3.81902 12.837C3.53677 12.6932 3.3073 12.4638 3.16349 12.1815C3.10372 12.0642 3.05503 11.8961 3.02816 11.5672C3.00058 11.2297 3 10.793 3 10.1505V5.85053C3 5.20809 3.00058 4.77137 3.02816 4.43381C3.05503 4.10499 3.10372 3.93684 3.16349 3.81954C3.3073 3.5373 3.53677 3.30783 3.81902 3.16402C3.93632 3.10425 4.10447 3.05556 4.43328 3.02869C4.77085 3.00111 5.20757 3.00053 5.85 3.00053H6.25C6.66422 3.00053 7 2.66474 7 2.25053C7 1.83631 6.66422 1.50053 6.25 1.50053H5.85Z\"></path></svg>");
var LinkIcon = function LinkIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.accent;
  };
  return function () {
    var _el$ = _tmpl$$g.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function () {
      return setAttribute(_el$2, "fill", fill());
    });
    return _el$;
  }();
};
var _tmpl$$f = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\"><g clip-path=\"url(#clip0_3676_1274)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.82698 2.63901C1.5 3.28074 1.5 4.12082 1.5 5.80098V8.80098V9.00098V10.201C1.5 11.8811 1.5 12.7212 1.82698 13.3629C2.1146 13.9274 2.57354 14.3864 3.13803 14.674C3.77976 15.001 4.61984 15.001 6.3 15.001H11.7C13.3802 15.001 14.2202 15.001 14.862 14.674C15.4265 14.3864 15.8854 13.9274 16.173 13.3629C16.5 12.7212 16.5 11.8811 16.5 10.201V8.80098C16.5 7.12082 16.5 6.28074 16.173 5.63901C15.8854 5.07452 15.4265 4.61558 14.862 4.32796C14.743 4.26733 14.6172 4.21795 14.4805 4.17772C14.4501 3.49449 14.3722 3.02994 14.173 2.63901C13.8854 2.07452 13.4265 1.61558 12.862 1.32796C12.2202 1.00098 11.3802 1.00098 9.7 1.00098H6.3C4.61984 1.00098 3.77976 1.00098 3.13803 1.32796C2.57354 1.61558 2.1146 2.07452 1.82698 2.63901ZM12.9861 4.00942C12.9684 3.7108 12.9281 3.49982 12.8365 3.31999C12.6927 3.03775 12.4632 2.80828 12.181 2.66447C11.8601 2.50098 11.4401 2.50098 10.6 2.50098H5.4C4.55992 2.50098 4.13988 2.50098 3.81901 2.66447C3.53677 2.80828 3.3073 3.03775 3.16349 3.31999C3.03615 3.56991 3.00799 3.88 3.00177 4.40188C3.04646 4.37612 3.09189 4.35146 3.13803 4.32796C3.77976 4.00098 4.61984 4.00098 6.3 4.00098H11.7C12.1966 4.00098 12.6197 4.00098 12.9861 4.00942ZM3 7.90098V8.10098C3 8.47468 3 8.76527 3.01439 9.00098H3V11.101C3 11.9411 3 12.3611 3.16349 12.682C3.3073 12.9642 3.53677 13.1937 3.81901 13.3375C4.13988 13.501 4.55992 13.501 5.4 13.501H12.6C13.4401 13.501 13.8601 13.501 14.181 13.3375C14.4632 13.1937 14.6927 12.9642 14.8365 12.682C15 12.3611 15 11.9411 15 11.101V7.90098C15 7.0609 15 6.64086 14.8365 6.31999C14.6927 6.03775 14.4632 5.80828 14.181 5.66447C13.8601 5.50098 13.4401 5.50098 12.6 5.50098H5.4C4.55992 5.50098 4.13988 5.50098 3.81901 5.66447C3.53677 5.80828 3.3073 6.03775 3.16349 6.31999C3 6.64086 3 7.0609 3 7.90098ZM10.5 9.75098C10.5 9.33676 10.8358 9.00098 11.25 9.00098H12.75C13.1642 9.00098 13.5 9.33676 13.5 9.75098C13.5 10.1652 13.1642 10.501 12.75 10.501H11.25C10.8358 10.501 10.5 10.1652 10.5 9.75098Z\"></path></g><defs><clipPath id=\"clip0_3676_1274\"><rect width=\"16\" height=\"16\" fill=\"white\" transform=\"translate(0.5 0.000976562)\"></rect></clipPath></defs></svg>");
var WalletIcon = function WalletIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.accent;
  };
  return function () {
    var _el$ = _tmpl$$f.cloneNode(true),
      _el$2 = _el$.firstChild,
      _el$3 = _el$2.firstChild;
    createRenderEffect(function () {
      return setAttribute(_el$3, "fill", fill());
    });
    return _el$;
  }();
};
var _tmpl$$e = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M39.6319 16.8719C38.3212 16.2041 36.7002 16.0478 34 16.0112V11C34 5.47715 29.5228 1 24 1C18.4772 1 14 5.47715 14 11V16.0112C11.2998 16.0478 9.6788 16.2041 8.36808 16.8719C6.86278 17.6389 5.63893 18.8628 4.87195 20.3681C4 22.0794 4 24.3196 4 28.8V32.2C4 36.6804 4 38.9206 4.87195 40.6319C5.63893 42.1372 6.86278 43.3611 8.36808 44.1281C10.0794 45 12.3196 45 16.8 45H31.2C35.6804 45 37.9206 45 39.6319 44.1281C41.1372 43.3611 42.3611 42.1372 43.1281 40.6319C44 38.9206 44 36.6804 44 32.2V28.8C44 24.3196 44 22.0794 43.1281 20.3681C42.3611 18.8628 41.1372 17.6389 39.6319 16.8719ZM31 11V16H17V11C17 7.13401 20.134 4 24 4C27.866 4 31 7.13401 31 11ZM7.54497 21.73C7 22.7996 7 24.1997 7 27V34C7 36.8003 7 38.2004 7.54497 39.27C8.02433 40.2108 8.78924 40.9757 9.73005 41.455C10.7996 42 12.1997 42 15 42H33C35.8003 42 37.2004 42 38.27 41.455C39.2108 40.9757 39.9757 40.2108 40.455 39.27C41 38.2004 41 36.8003 41 34V27C41 24.1997 41 22.7996 40.455 21.73C39.9757 20.7892 39.2108 20.0243 38.27 19.545C37.2004 19 35.8003 19 33 19H15C12.1997 19 10.7996 19 9.73005 19.545C8.78924 20.0243 8.02433 20.7892 7.54497 21.73ZM24 24C23.1716 24 22.5 24.6716 22.5 25.5V29.5C22.5 30.3284 23.1716 31 24 31C24.8284 31 25.5 30.3284 25.5 29.5V25.5C25.5 24.6716 24.8284 24 24 24Z\"></path></svg>");
var SecurityIcon = function SecurityIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.secondary;
  };
  return function () {
    var _el$ = _tmpl$$e.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function (_p$) {
      var _v$ = props["class"],
        _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  }();
};
var _tmpl$$d = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M37.485 37.3849C40.894 33.9506 43 29.2212 43 24C43 13.5066 34.4934 5 24 5C13.5066 5 5 13.5066 5 24C5 29.2213 7.1061 33.9507 10.5151 37.385C13.3583 32.9438 18.3354 30 24.0001 30C29.6647 30 34.6418 32.9437 37.485 37.3849ZM35.1809 39.3635C32.9143 35.5532 28.7554 33 24.0001 33C19.2448 33 15.0858 35.5533 12.8193 39.3636C15.9564 41.6506 19.8206 43 24 43C28.1795 43 32.0437 41.6505 35.1809 39.3635ZM24 46C36.1503 46 46 36.1503 46 24C46 11.8497 36.1503 2 24 2C11.8497 2 2 11.8497 2 24C2 36.1503 11.8497 46 24 46ZM24 24C26.7614 24 29 21.7614 29 19C29 16.2386 26.7614 14 24 14C21.2386 14 19 16.2386 19 19C19 21.7614 21.2386 24 24 24ZM24 27C28.4183 27 32 23.4183 32 19C32 14.5817 28.4183 11 24 11C19.5817 11 16 14.5817 16 19C16 23.4183 19.5817 27 24 27Z\"></path></svg>");
var PersonalityIcon = function PersonalityIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.secondary;
  };
  return function () {
    var _el$ = _tmpl$$d.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function (_p$) {
      var _v$ = props["class"],
        _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  }();
};
var _tmpl$$c = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M34.5607 4.43934C33.9749 3.85355 33.0251 3.85355 32.4393 4.43934C31.8536 5.02513 31.8536 5.97487 32.4393 6.56066L37.8787 12H10.5C9.67157 12 9 12.6716 9 13.5C9 14.3284 9.67157 15 10.5 15H37.8787L32.4393 20.4393C31.8536 21.0251 31.8536 21.9749 32.4393 22.5607C33.0251 23.1464 33.9749 23.1464 34.5607 22.5607L42.5607 14.5607C43.1464 13.9749 43.1464 13.0251 42.5607 12.4393L34.5607 4.43934ZM13.4393 25.4393C14.0251 24.8536 14.9749 24.8536 15.5607 25.4393C16.1464 26.0251 16.1464 26.9749 15.5607 27.5607L10.1213 33H37.5C38.3284 33 39 33.6716 39 34.5C39 35.3284 38.3284 36 37.5 36H10.1213L15.5607 41.4393C16.1464 42.0251 16.1464 42.9749 15.5607 43.5607C14.9749 44.1464 14.0251 44.1464 13.4393 43.5607L5.43934 35.5607C4.85355 34.9749 4.85355 34.0251 5.43934 33.4393L13.4393 25.4393Z\"></path></svg>");
var SwapIcon = function SwapIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.secondary;
  };
  return function () {
    var _el$ = _tmpl$$c.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function (_p$) {
      var _v$ = props["class"],
        _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  }();
};
var _tmpl$$b = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"29\" viewBox=\"0 0 28 29\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.75 12.002C1.75 9.20169 1.75 7.80156 2.29497 6.732C2.77433 5.79119 3.53924 5.02629 4.48005 4.54692C5.54961 4.00195 6.94974 4.00195 9.75 4.00195H17.25C20.0503 4.00195 21.4504 4.00195 22.52 4.54692C23.4608 5.02629 24.2257 5.79119 24.705 6.732C24.8256 6.96861 24.9195 7.2214 24.9926 7.50195H21.5C19.6377 7.50195 18.7065 7.50195 17.9609 7.77334C16.711 8.22828 15.7263 9.21291 15.2714 10.4629C15 11.2085 15 12.1396 15 14.002C15 15.8643 15 16.7954 15.2714 17.541C15.7263 18.791 16.711 19.7756 17.9609 20.2306C18.7065 20.502 19.6377 20.502 21.5 20.502H24.9926C24.9195 20.7825 24.8256 21.0353 24.705 21.2719C24.2257 22.2127 23.4608 22.9776 22.52 23.457C21.4504 24.002 20.0503 24.002 17.25 24.002H9.75C6.94974 24.002 5.54961 24.002 4.48005 23.457C3.53924 22.9776 2.77433 22.2127 2.29497 21.2719C1.75 20.2023 1.75 18.8022 1.75 16.002V12.002ZM16.4999 13.802C16.4999 12.1218 16.4999 11.2817 16.8269 10.64C17.1145 10.0755 17.5735 9.61656 18.138 9.32894C18.7797 9.00196 19.6198 9.00196 21.2999 9.00196H23.1999C24.8801 9.00196 25.7202 9.00196 26.3619 9.32894C26.9264 9.61656 27.3853 10.0755 27.673 10.64C27.9999 11.2817 27.9999 12.1218 27.9999 13.802V14.202C27.9999 15.8821 27.9999 16.7222 27.673 17.3639C27.3853 17.9284 26.9264 18.3874 26.3619 18.675C25.7202 19.002 24.8801 19.002 23.1999 19.002H21.2999C19.6198 19.002 18.7797 19.002 18.138 18.675C17.5735 18.3874 17.1145 17.9284 16.8269 17.3639C16.4999 16.7222 16.4999 15.8821 16.4999 14.202V13.802ZM22.4999 14.002C22.4999 14.9685 21.7164 15.752 20.7499 15.752C19.7834 15.752 18.9999 14.9685 18.9999 14.002C18.9999 13.0355 19.7834 12.252 20.7499 12.252C21.7164 12.252 22.4999 13.0355 22.4999 14.002Z\"></path></svg>");
var AtWalletIcon = function AtWalletIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.constant.white;
  };
  return function () {
    var _el$ = _tmpl$$b.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function (_p$) {
      var _v$ = props["class"],
        _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  }();
};
var _tmpl$$a = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M24.7803 7.21967C25.0732 7.51256 25.0732 7.98744 24.7803 8.28033L11.5303 21.5303C11.2374 21.8232 10.7626 21.8232 10.4697 21.5303L4.21967 15.2803C3.92678 14.9874 3.92678 14.5126 4.21967 14.2197C4.51256 13.9268 4.98744 13.9268 5.28033 14.2197L11 19.9393L23.7197 7.21967C24.0126 6.92678 24.4874 6.92678 24.7803 7.21967Z\"></path></svg>");
var DoneIcon = function DoneIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.secondary;
  };
  return function () {
    var _el$ = _tmpl$$a.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function (_p$) {
      var _v$ = props["class"],
        _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  }();
};
var _tmpl$$9 = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 28 28\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10.0001 10.0001C10.0016 8.02333 10.0267 6.98719 10.436 6.18404C10.8195 5.43139 11.4314 4.81947 12.184 4.43597C13.0397 4 14.1598 4 16.4 4H17.6C19.8402 4 20.9603 4 21.816 4.43597C22.5686 4.81947 23.1805 5.43139 23.564 6.18404C24 7.03969 24 8.15979 24 10.4V11.6C24 13.8402 24 14.9603 23.564 15.816C23.1805 16.5686 22.5686 17.1805 21.816 17.564C21.0128 17.9733 19.9767 17.9984 17.9999 17.9999C17.9984 19.9767 17.9733 21.0128 17.564 21.816C17.1805 22.5686 16.5686 23.1805 15.816 23.564C14.9603 24 13.8402 24 11.6 24H10.4C8.15979 24 7.03969 24 6.18404 23.564C5.43139 23.1805 4.81947 22.5686 4.43597 21.816C4 20.9603 4 19.8402 4 17.6V16.4C4 14.1598 4 13.0397 4.43597 12.184C4.81947 11.4314 5.43139 10.8195 6.18404 10.436C6.98719 10.0267 8.02333 10.0016 10.0001 10.0001ZM10 11.5H9.5C8.09987 11.5 7.3998 11.5 6.86502 11.7725C6.39462 12.0122 6.01217 12.3946 5.77248 12.865C5.5 13.3998 5.5 14.0999 5.5 15.5V18.5C5.5 19.9001 5.5 20.6002 5.77248 21.135C6.01217 21.6054 6.39462 21.9878 6.86502 22.2275C7.3998 22.5 8.09987 22.5 9.5 22.5H12.5C13.9001 22.5 14.6002 22.5 15.135 22.2275C15.6054 21.9878 15.9878 21.6054 16.2275 21.135C16.5 20.6002 16.5 19.9001 16.5 18.5V18H16.4C14.1598 18 13.0397 18 12.184 17.564C11.4314 17.1805 10.8195 16.5686 10.436 15.816C10 14.9603 10 13.8402 10 11.6V11.5ZM11.5 9.5C11.5 8.09987 11.5 7.3998 11.7725 6.86502C12.0122 6.39462 12.3946 6.01217 12.865 5.77248C13.3998 5.5 14.0999 5.5 15.5 5.5H18.5C19.9001 5.5 20.6002 5.5 21.135 5.77248C21.6054 6.01217 21.9878 6.39462 22.2275 6.86502C22.5 7.3998 22.5 8.09987 22.5 9.5V12.5C22.5 13.9001 22.5 14.6002 22.2275 15.135C21.9878 15.6054 21.6054 15.9878 21.135 16.2275C20.6002 16.5 19.9001 16.5 18.5 16.5H15.5C14.0999 16.5 13.3998 16.5 12.865 16.2275C12.3946 15.9878 12.0122 15.6054 11.7725 15.135C11.5 14.6002 11.5 13.9001 11.5 12.5V9.5Z\"></path></svg>");
var CopyLightIcon = function CopyLightIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.secondary;
  };
  return function () {
    var _el$ = _tmpl$$9.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function (_p$) {
      var _v$ = fill(),
        _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "fill", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  }();
};
var _tmpl$$8 = /* @__PURE__ */template$1("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"17\" viewBox=\"0 0 16 17\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1 4.12695C1 3.07754 1 2.55284 1.19202 2.14684C1.38986 1.72856 1.7266 1.39181 2.14489 1.19397C2.55088 1.00195 3.07559 1.00195 4.125 1.00195C5.17441 1.00195 5.69912 1.00195 6.10511 1.19397C6.5234 1.39181 6.86014 1.72856 7.05798 2.14684C7.25 2.55284 7.25 3.07754 7.25 4.12695C7.25 5.17636 7.25 5.70107 7.05798 6.10706C6.86014 6.52535 6.5234 6.8621 6.10511 7.05993C5.69912 7.25195 5.17441 7.25195 4.125 7.25195C3.07559 7.25195 2.55088 7.25195 2.14489 7.05993C1.7266 6.8621 1.38986 6.52535 1.19202 6.10706C1 5.70107 1 5.17636 1 4.12695ZM2.5 3.30195C2.5 3.02193 2.5 2.88191 2.5545 2.77496C2.60243 2.68088 2.67892 2.60439 2.773 2.55645C2.87996 2.50195 3.01997 2.50195 3.3 2.50195H4.95C5.23003 2.50195 5.37004 2.50195 5.477 2.55645C5.57108 2.60439 5.64757 2.68088 5.6955 2.77496C5.75 2.88191 5.75 3.02193 5.75 3.30195V4.95195C5.75 5.23198 5.75 5.37199 5.6955 5.47895C5.64757 5.57303 5.57108 5.64952 5.477 5.69746C5.37004 5.75195 5.23003 5.75195 4.95 5.75195H3.3C3.01997 5.75195 2.87996 5.75195 2.773 5.69746C2.67892 5.64952 2.60243 5.57303 2.5545 5.47895C2.5 5.37199 2.5 5.23198 2.5 4.95195V3.30195ZM1 11.877C1 10.8275 1 10.3028 1.19202 9.89684C1.38986 9.47856 1.7266 9.14181 2.14489 8.94397C2.55088 8.75195 3.07559 8.75195 4.125 8.75195C5.17441 8.75195 5.69912 8.75195 6.10511 8.94397C6.5234 9.14181 6.86014 9.47856 7.05798 9.89684C7.25 10.3028 7.25 10.8275 7.25 11.877C7.25 12.9264 7.25 13.4511 7.05798 13.8571C6.86014 14.2753 6.5234 14.6121 6.10511 14.8099C5.69912 15.002 5.17441 15.002 4.125 15.002C3.07559 15.002 2.55088 15.002 2.14489 14.8099C1.7266 14.6121 1.38986 14.2753 1.19202 13.8571C1 13.4511 1 12.9264 1 11.877ZM2.5 11.052C2.5 10.7719 2.5 10.6319 2.5545 10.525C2.60243 10.4309 2.67892 10.3544 2.773 10.3064C2.87996 10.252 3.01997 10.252 3.3 10.252H4.95C5.23003 10.252 5.37004 10.252 5.477 10.3064C5.57108 10.3544 5.64757 10.4309 5.6955 10.525C5.75 10.6319 5.75 10.7719 5.75 11.052V12.702C5.75 12.982 5.75 13.122 5.6955 13.2289C5.64757 13.323 5.57108 13.3995 5.477 13.4475C5.37004 13.502 5.23003 13.502 4.95 13.502H3.3C3.01997 13.502 2.87996 13.502 2.773 13.4475C2.67892 13.3995 2.60243 13.323 2.5545 13.2289C2.5 13.122 2.5 12.982 2.5 12.702V11.052ZM8.94202 2.14684C8.75 2.55284 8.75 3.07754 8.75 4.12695C8.75 5.17636 8.75 5.70107 8.94202 6.10706C9.13986 6.52535 9.4766 6.8621 9.89489 7.05993C10.3009 7.25195 10.8256 7.25195 11.875 7.25195C12.9244 7.25195 13.4491 7.25195 13.8551 7.05993C14.2734 6.8621 14.6101 6.52535 14.808 6.10706C15 5.70107 15 5.17636 15 4.12695C15 3.07754 15 2.55284 14.808 2.14684C14.6101 1.72856 14.2734 1.39181 13.8551 1.19397C13.4491 1.00195 12.9244 1.00195 11.875 1.00195C10.8256 1.00195 10.3009 1.00195 9.89489 1.19397C9.4766 1.39181 9.13986 1.72856 8.94202 2.14684ZM10.3045 2.77496C10.25 2.88191 10.25 3.02193 10.25 3.30195V4.95195C10.25 5.23198 10.25 5.37199 10.3045 5.47895C10.3524 5.57303 10.4289 5.64952 10.523 5.69746C10.63 5.75195 10.77 5.75195 11.05 5.75195H12.7C12.98 5.75195 13.12 5.75195 13.227 5.69746C13.3211 5.64952 13.3976 5.57303 13.4455 5.47895C13.5 5.37199 13.5 5.23198 13.5 4.95195V3.30195C13.5 3.02193 13.5 2.88191 13.4455 2.77496C13.3976 2.68088 13.3211 2.60439 13.227 2.55645C13.12 2.50195 12.98 2.50195 12.7 2.50195H11.05C10.77 2.50195 10.63 2.50195 10.523 2.55645C10.4289 2.60439 10.3524 2.68088 10.3045 2.77496ZM8.80727 9.13518C8.75 9.26242 8.75 9.4256 8.75 9.75195C8.75 10.0783 8.75 10.2415 8.80727 10.3687C8.87245 10.5136 8.9884 10.6295 9.13323 10.6947C9.26047 10.752 9.42365 10.752 9.75 10.752C10.0764 10.752 10.2395 10.752 10.3668 10.6947C10.5116 10.6295 10.6276 10.5136 10.6927 10.3687C10.75 10.2415 10.75 10.0783 10.75 9.75195C10.75 9.4256 10.75 9.26242 10.6927 9.13518C10.6276 8.99035 10.5116 8.8744 10.3668 8.80922C10.2395 8.75195 10.0764 8.75195 9.75 8.75195C9.42365 8.75195 9.26047 8.75195 9.13323 8.80922C8.9884 8.8744 8.87245 8.99035 8.80727 9.13518ZM10.87 11.8771C10.87 11.546 10.87 11.3805 10.9289 11.2517C10.9938 11.1098 11.1077 10.9959 11.2497 10.931C11.3784 10.8721 11.5439 10.8721 11.875 10.8721C12.2061 10.8721 12.3716 10.8721 12.5003 10.931C12.6423 10.9959 12.7562 11.1098 12.8211 11.2517C12.88 11.3805 12.88 11.546 12.88 11.8771C12.88 12.2081 12.88 12.3737 12.8211 12.5024C12.7562 12.6444 12.6423 12.7583 12.5003 12.8232C12.3716 12.8821 12.2061 12.8821 11.875 12.8821C11.5439 12.8821 11.3784 12.8821 11.2497 12.8232C11.1077 12.7583 10.9938 12.6444 10.9289 12.5024C10.87 12.3737 10.87 12.2081 10.87 11.8771ZM8.80727 13.3852C8.75 13.5124 8.75 13.6756 8.75 14.002C8.75 14.3283 8.75 14.4915 8.80727 14.6187C8.87245 14.7636 8.9884 14.8795 9.13323 14.9447C9.26047 15.002 9.42365 15.002 9.75 15.002C10.0764 15.002 10.2395 15.002 10.3668 14.9447C10.5116 14.8795 10.6276 14.7636 10.6927 14.6187C10.75 14.4915 10.75 14.3283 10.75 14.002C10.75 13.6756 10.75 13.5124 10.6927 13.3852C10.6276 13.2404 10.5116 13.1244 10.3668 13.0592C10.2395 13.002 10.0764 13.002 9.75 13.002C9.42365 13.002 9.26047 13.002 9.13323 13.0592C8.9884 13.1244 8.87245 13.2404 8.80727 13.3852ZM13 9.75195C13 9.4256 13 9.26242 13.0573 9.13518C13.1224 8.99035 13.2384 8.8744 13.3832 8.80922C13.5105 8.75195 13.6736 8.75195 14 8.75195C14.3264 8.75195 14.4895 8.75195 14.6168 8.80922C14.7616 8.8744 14.8776 8.99035 14.9427 9.13518C15 9.26242 15 9.4256 15 9.75195C15 10.0783 15 10.2415 14.9427 10.3687C14.8776 10.5136 14.7616 10.6295 14.6168 10.6947C14.4895 10.752 14.3264 10.752 14 10.752C13.6736 10.752 13.5105 10.752 13.3832 10.6947C13.2384 10.6295 13.1224 10.5136 13.0573 10.3687C13 10.2415 13 10.0783 13 9.75195ZM13.0573 13.3852C13 13.5124 13 13.6756 13 14.002C13 14.3283 13 14.4915 13.0573 14.6187C13.1224 14.7636 13.2384 14.8795 13.3832 14.9447C13.5105 15.002 13.6736 15.002 14 15.002C14.3264 15.002 14.4895 15.002 14.6168 14.9447C14.7616 14.8795 14.8776 14.7636 14.9427 14.6187C15 14.4915 15 14.3283 15 14.002C15 13.6756 15 13.5124 14.9427 13.3852C14.8776 13.2404 14.7616 13.1244 14.6168 13.0592C14.4895 13.002 14.3264 13.002 14 13.002C13.6736 13.002 13.5105 13.002 13.3832 13.0592C13.2384 13.1244 13.1224 13.2404 13.0573 13.3852Z\"></path></svg>");
var QRIcon = function QRIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.secondary;
  };
  return function () {
    var _el$ = _tmpl$$8.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function () {
      return setAttribute(_el$2, "fill", fill());
    });
    return _el$;
  }();
};
var containerBorders = {
  m: "16px",
  s: "12px",
  none: "0"
};
var walletBorders = {
  m: "6px",
  s: "6px",
  none: "0"
};
var FourWalletsCard = styled.div(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral(["\n    width: 60px;\n    height: 60px;\n    padding: 8px;\n    margin-bottom: 8px;\n    border-radius: ", ";\n    background-color: ", ";\n    display: grid;\n    grid-template: 1fr 1fr / 1fr 1fr;\n    gap: 4px;\n"])), function (props) {
  return containerBorders[props.theme.borderRadius];
}, function (props) {
  return props.theme.colors.background.tint;
});
var FourWalletsImage = styled(WalletImage)(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral(["\n    width: 20px;\n    height: 20px;\n    border-radius: ", ";\n"])), function (props) {
  return walletBorders[props.theme.borderRadius];
});
var FourWalletsItem = function FourWalletsItem(props) {
  return createComponent(WalletItem, {
    get name() {
      return props.labelLine1;
    },
    get secondLine() {
      return props.labelLine2;
    },
    get icon() {
      return createComponent(FourWalletsCard, {
        get children() {
          return createComponent(For, {
            each: [0, 1, 2, 3],
            children: function children(index) {
              return createComponent(FourWalletsImage, {
                get src() {
                  return props.images[index];
                }
              });
            }
          });
        }
      });
    },
    onClick: function onClick() {
      return props.onClick();
    }
  });
};
var AT_WALLET_APP_NAME = "telegram-wallet";
var IMG = {
  TON: "https://raw.githubusercontent.com/ton-connect/sdk/main/assets/ton-icon-48.png",
  TG: "https://raw.githubusercontent.com/ton-connect/sdk/main/assets/tg.png"
};
var WalletLabeledItem = function WalletLabeledItem(props) {
  var _useI18n9 = useI18n(),
    _useI18n10 = _slicedToArray(_useI18n9, 1),
    t2 = _useI18n10[0];
  var walletsSecondLine = function walletsSecondLine() {
    if (props.wallet.appName === AT_WALLET_APP_NAME) {
      return void 0;
    }
    if ("isPreferred" in props.wallet && props.wallet.isPreferred) {
      return t2("walletItem.recent", {}, "Recent");
    }
    if (isWalletInfoCurrentlyInjected(props.wallet)) {
      return t2("walletItem.installed", {}, "Installed");
    }
    if (props.wallet.name === "Tonkeeper") {
      return t2("walletItem.popular", {}, "Popular");
    }
    return void 0;
  };
  return createMemo(function () {
    var _c$ = createMemo(function () {
      return props.wallet.appName === AT_WALLET_APP_NAME;
    });
    return function () {
      return _c$() ? createComponent(WalletItem, {
        get icon() {
          return props.wallet.imageUrl;
        },
        get name() {
          return t2("walletItem.walletOn", {}, "Wallet On");
        },
        secondLine: "Telegram",
        get badgeUrl() {
          return IMG.TG;
        },
        onClick: function onClick() {
          return props.onClick();
        }
      }) : createComponent(WalletItem, {
        get icon() {
          return props.wallet.imageUrl;
        },
        get name() {
          return props.wallet.name;
        },
        get secondLine() {
          return walletsSecondLine();
        },
        secondLineColorPrimary: false,
        onClick: function onClick() {
          return props.onClick();
        }
      });
    };
  }());
};
var ScrollContainerStyled = styled.div(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral(["\n    width: 100%;\n    overflow-y: auto;\n    max-height: ", ";\n\n    scrollbar-width: none;\n    &&::-webkit-scrollbar {\n        display: none;\n    }\n\n    &&::-webkit-scrollbar-track {\n        background: transparent;\n    }\n\n    &&::-webkit-scrollbar-thumb {\n        display: none;\n    }\n"])), function (props) {
  return props.maxHeight;
});
var ScrollDivider = styled.div(_templateObject39 || (_templateObject39 = _taggedTemplateLiteral(["\n    height: 1px;\n    margin: 0 -24px;\n    width: calc(100% + 48px);\n    opacity: 0.08;\n    background: ", ";\n    transition: background 0.15s ease-in-out;\n\n    ", " {\n        width: 100%;\n        margin: 0;\n    }\n"])), function (props) {
  return props.isShown ? props.theme.colors.icon.secondary : "transparent";
}, media("mobile"));
var _createSignal37 = createSignal(((_h = getWindow$1()) == null ? void 0 : _h.innerHeight) || 0),
  _createSignal38 = _slicedToArray(_createSignal37, 2),
  windowHeight = _createSignal38[0],
  setWindowHeight = _createSignal38[1];
if (getWindow$1()) {
  window.addEventListener("resize", function () {
    return setWindowHeight(window.innerHeight);
  });
}
var _createSignal39 = createSignal(isDevice("mobile")),
  _createSignal40 = _slicedToArray(_createSignal39, 2),
  isMobile = _createSignal40[0],
  setIsMobile = _createSignal40[1];
var updateIsMobile = function updateIsMobile() {
  return setIsMobile(isDevice("mobile"));
};
if (getWindow$1()) {
  window.addEventListener("resize", function () {
    return updateIsMobile();
  });
  window.addEventListener("load", function () {
    return updateIsMobile();
  }, {
    once: true
  });
}
var ScrollContainer = function ScrollContainer(props) {
  var _createSignal41 = createSignal(false),
    _createSignal42 = _slicedToArray(_createSignal41, 2),
    scrolled = _createSignal42[0],
    setScrolled = _createSignal42[1];
  var onScroll = function onScroll(e2) {
    setScrolled(e2.target.scrollTop > 0);
  };
  var offset = function offset() {
    return isMobile() ? 150 : 200;
  };
  var maxHeight = function maxHeight() {
    return props.maxHeight !== void 0 ? "".concat(props.maxHeight, "px") : "".concat(windowHeight() - offset(), "px");
  };
  return [createComponent(ScrollDivider, {
    get isShown() {
      return scrolled();
    }
  }), createComponent(ScrollContainerStyled, _defineAccessor("get", _defineAccessor("get", {
    get maxHeight() {
      return maxHeight();
    },
    onScroll: onScroll
  }, "class", function () {
    return props["class"];
  }), "children", function () {
    return props.children;
  }))];
};
var AStyled = styled.a(_templateObject40 || (_templateObject40 = _taggedTemplateLiteral(["\n    display: block;\n    text-decoration: unset;\n"])));
var Link = function Link(props) {
  var attributes = function attributes() {
    return props.blank ? {
      rel: "noreferrer noopener"
    } : {};
  };
  return createComponent(AStyled, mergeProps(_defineAccessor("get", {
    get href() {
      return props.href;
    },
    get target() {
      return props.blank ? "_blank" : "_self";
    }
  }, "class", function () {
    return props["class"];
  }), attributes, {
    get children() {
      return props.children;
    }
  }));
};
var TonConnectUiContext = createContext();
var _tmpl$$7 = /* @__PURE__ */template$1("<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7.76228 2.09998H10.2378C11.0458 2.09997 11.7067 2.09996 12.2438 2.14384C12.7997 2.18926 13.3017 2.28614 13.7706 2.52505C14.5045 2.89896 15.1011 3.49558 15.475 4.22941C15.7139 4.6983 15.8108 5.20038 15.8562 5.75629C15.9001 6.29337 15.9001 6.95422 15.9001 7.76227V8.1H16.2377C17.0457 8.09999 17.7066 8.09998 18.2437 8.14386C18.7996 8.18928 19.3017 8.28616 19.7705 8.52507C20.5044 8.89898 21.101 9.4956 21.4749 10.2294C21.7138 10.6983 21.8107 11.2004 21.8561 11.7563C21.9 12.2934 21.9 12.9542 21.9 13.7623V16.2377C21.9 17.0458 21.9 17.7066 21.8561 18.2437C21.8107 18.7996 21.7138 19.3017 21.4749 19.7706C21.101 20.5044 20.5044 21.101 19.7705 21.4749C19.3017 21.7138 18.7996 21.8107 18.2437 21.8561C17.7066 21.9 17.0458 21.9 16.2378 21.9H13.7623C12.9543 21.9 12.2934 21.9 11.7563 21.8561C11.2004 21.8107 10.6983 21.7138 10.2294 21.4749C9.49561 21.101 8.89898 20.5044 8.52508 19.7706C8.28616 19.3017 8.18928 18.7996 8.14386 18.2437C8.09998 17.7066 8.09999 17.0458 8.1 16.2377V15.9H7.76227C6.95426 15.9 6.29335 15.9 5.75629 15.8561C5.20038 15.8107 4.6983 15.7138 4.22941 15.4749C3.49558 15.101 2.89896 14.5044 2.52505 13.7705C2.28614 13.3017 2.18926 12.7996 2.14384 12.2437C2.09996 11.7066 2.09997 11.0458 2.09998 10.2377V7.76228C2.09997 6.95424 2.09996 6.29336 2.14384 5.75629C2.18926 5.20038 2.28614 4.6983 2.52505 4.22941C2.89896 3.49558 3.49558 2.89896 4.22941 2.52505C4.6983 2.28614 5.20038 2.18926 5.75629 2.14384C6.29336 2.09996 6.95425 2.09997 7.76228 2.09998ZM8.1 14.1V13.7623C8.09999 12.9542 8.09998 12.2934 8.14386 11.7563C8.18928 11.2004 8.28616 10.6983 8.52508 10.2294C8.89898 9.4956 9.49561 8.89898 10.2294 8.52507C10.6983 8.28616 11.2004 8.18928 11.7563 8.14386C12.2934 8.09998 12.9542 8.09999 13.7623 8.1H14.1001V7.79998C14.1001 6.94505 14.0994 6.35798 14.0622 5.90287C14.0259 5.45827 13.9593 5.21944 13.8712 5.0466C13.6699 4.65146 13.3486 4.3302 12.9535 4.12886C12.7806 4.04079 12.5418 3.97419 12.0972 3.93786C11.6421 3.90068 11.055 3.89998 10.2001 3.89998H7.79998C6.94505 3.89998 6.35798 3.90068 5.90287 3.93786C5.45827 3.97419 5.21944 4.04079 5.0466 4.12886C4.65146 4.3302 4.3302 4.65146 4.12886 5.0466C4.04079 5.21944 3.97419 5.45827 3.93786 5.90287C3.90068 6.35798 3.89998 6.94505 3.89998 7.79998V10.2C3.89998 11.0549 3.90068 11.642 3.93786 12.0971C3.97419 12.5417 4.04079 12.7805 4.12886 12.9534C4.3302 13.3485 4.65146 13.6698 5.0466 13.8711C5.21944 13.9592 5.45827 14.0258 5.90287 14.0621C6.35798 14.0993 6.94505 14.1 7.79998 14.1H8.1ZM11.0466 10.1289C11.2195 10.0408 11.4583 9.97421 11.9029 9.93788C12.358 9.9007 12.9451 9.9 13.8 9.9H16.2C17.0549 9.9 17.642 9.9007 18.0971 9.93788C18.5417 9.97421 18.7805 10.0408 18.9534 10.1289C19.3485 10.3302 19.6698 10.6515 19.8711 11.0466C19.9592 11.2195 20.0258 11.4583 20.0621 11.9029C20.0993 12.358 20.1 12.9451 20.1 13.8V16.2C20.1 17.0549 20.0993 17.642 20.0621 18.0971C20.0258 18.5417 19.9592 18.7805 19.8711 18.9534C19.6698 19.3485 19.3485 19.6698 18.9534 19.8711C18.7805 19.9592 18.5417 20.0258 18.0971 20.0621C17.642 20.0993 17.0549 20.1 16.2 20.1H13.8C12.9451 20.1 12.358 20.0993 11.9029 20.0621C11.4583 20.0258 11.2195 19.9592 11.0466 19.8711C10.6515 19.6698 10.3302 19.3485 10.1289 18.9534C10.0408 18.7805 9.97421 18.5417 9.93788 18.0971C9.9007 17.642 9.9 17.0549 9.9 16.2V13.8C9.9 12.9451 9.9007 12.358 9.93788 11.9029C9.97421 11.4583 10.0408 11.2195 10.1289 11.0466C10.3302 10.6515 10.6515 10.3302 11.0466 10.1289Z\"></path></svg>");
var CopyIcon = function CopyIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.primary;
  };
  return function () {
    var _el$ = _tmpl$$7.cloneNode(true),
      _el$2 = _el$.firstChild;
    createRenderEffect(function (_p$) {
      var _v$ = props["class"],
        _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  }();
};
var _tmpl$$6 = /* @__PURE__ */template$1("<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8.7624 3.10001C7.95435 3.1 7.29349 3.09999 6.75642 3.14387C6.2005 3.18929 5.69842 3.28617 5.22954 3.52508C4.4957 3.89899 3.89908 4.49561 3.52517 5.22944C3.28626 5.69833 3.18938 6.20041 3.14396 6.75632C3.10008 7.2934 3.10009 7.95424 3.1001 8.76229V15.2377C3.10009 16.0458 3.10008 16.7066 3.14396 17.2437C3.18938 17.7996 3.28626 18.3017 3.52517 18.7706C3.89908 19.5044 4.4957 20.101 5.22954 20.4749C5.69842 20.7138 6.2005 20.8107 6.75642 20.8561C7.29349 20.9 7.95434 20.9 8.76239 20.9H12.0001C12.4972 20.9 12.9001 20.4971 12.9001 20C12.9001 19.503 12.4972 19.1 12.0001 19.1H8.8001C7.94517 19.1 7.3581 19.0993 6.90299 19.0621C6.45839 19.0258 6.21956 18.9592 6.04672 18.8711C5.65158 18.6698 5.33032 18.3485 5.12898 17.9534C5.04092 17.7805 4.97431 17.5417 4.93798 17.0971C4.9008 16.642 4.9001 16.0549 4.9001 15.2V8.80001C4.9001 7.94508 4.9008 7.35801 4.93798 6.9029C4.97431 6.4583 5.04092 6.21947 5.12898 6.04663C5.33032 5.65149 5.65158 5.33023 6.04672 5.12889C6.21956 5.04082 6.45839 4.97422 6.90299 4.93789C7.3581 4.90071 7.94517 4.90001 8.8001 4.90001H12.0001C12.4972 4.90001 12.9001 4.49706 12.9001 4.00001C12.9001 3.50295 12.4972 3.10001 12.0001 3.10001H8.7624Z\"></path><path d=\"M17.6364 7.3636C17.2849 7.01212 16.7151 7.01212 16.3636 7.3636C16.0121 7.71507 16.0121 8.28492 16.3636 8.63639L18.8272 11.1H9.00001C8.50295 11.1 8.10001 11.5029 8.10001 12C8.10001 12.497 8.50295 12.9 9.00001 12.9H18.8272L16.3636 15.3636C16.0121 15.7151 16.0121 16.2849 16.3636 16.6364C16.7151 16.9879 17.2849 16.9879 17.6364 16.6364L21.6364 12.6364C21.9879 12.2849 21.9879 11.7151 21.6364 11.3636L17.6364 7.3636Z\"></path></svg>");
var DisconnectIcon = function DisconnectIcon(props) {
  var theme = useTheme();
  var fill = function fill() {
    return props.fill || theme.colors.icon.primary;
  };
  return function () {
    var _el$ = _tmpl$$6.cloneNode(true),
      _el$2 = _el$.firstChild,
      _el$3 = _el$2.nextSibling;
    createRenderEffect(function (_p$) {
      var _v$ = fill(),
        _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$2, "fill", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$3, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  }();
};
var hoverBorders$1 = {
  m: "8px",
  s: "4px",
  none: "0"
};
var dropdownBorders = {
  m: "16px",
  s: "8px",
  none: "0"
};
var AccountButtonDropdownStyled = styled.div(_templateObject41 || (_templateObject41 = _taggedTemplateLiteral(["\n    width: 256px;\n    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);\n    border-radius: ", ";\n\n    background-color: ", "\n           \n    color: ", "\n"])), function (props) {
  return dropdownBorders[props.theme.borderRadius];
}, function (props) {
  return props.theme.colors.background.primary;
}, function (props) {
  return props.theme.colors.text.primary;
});
var UlStyled$1 = styled.ul(_templateObject42 || (_templateObject42 = _taggedTemplateLiteral(["\n    background-color: ", ";\n    padding: 8px;\n"])), function (props) {
  return props.theme.colors.background.primary;
});
var MenuButtonStyled = styled.button(_templateObject43 || (_templateObject43 = _taggedTemplateLiteral(["\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    height: 40px;\n    padding-left: 8px;\n    width: 100%;\n\n    background-color: ", ";\n    border: none;\n    border-radius: ", ";\n    cursor: pointer;\n\n    transition: background-color, transform 0.1s ease-in-out;\n\n    &:hover {\n        background-color: ", ";\n    }\n\n    &:active {\n        transform: scale(0.96);\n    }\n"])), function (props) {
  return props.theme.colors.background.primary;
}, function (props) {
  return hoverBorders$1[props.theme.borderRadius];
}, function (props) {
  return props.theme.colors.background.secondary;
});
var _tmpl$$5 = /* @__PURE__ */template$1("<li></li>");
var MenuItemText = function MenuItemText(props) {
  return createComponent(Text, {
    get translationKey() {
      return props.translationKey;
    },
    fontSize: "15px",
    fontWeight: "590",
    get children() {
      return props.children;
    }
  });
};
var AccountButtonDropdown = function AccountButtonDropdown(props) {
  var tonConnectUi = useContext(TonConnectUiContext);
  var _createSignal43 = createSignal(false),
    _createSignal44 = _slicedToArray(_createSignal43, 2),
    isCopiedShown = _createSignal44[0],
    setIsCopiedShown = _createSignal44[1];
  var onCopy = function onCopy() {
    return __async(void 0, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      var userFriendlyAddress;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            userFriendlyAddress = toUserFriendlyAddress(tonConnectUi.account.address, tonConnectUi.account.chain === CHAIN.TESTNET);
            _context4.next = 3;
            return copyToClipboard(userFriendlyAddress);
          case 3:
            setIsCopiedShown(true);
            setTimeout(function () {
              return setIsCopiedShown(false);
            }, 1e3);
          case 5:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }));
  };
  var onDisconnect = function onDisconnect() {
    tonConnectUi.disconnect();
    props.onClose();
  };
  return createComponent(AccountButtonDropdownStyled, _defineAccessor("get", _defineProperty$1(_defineAccessor("get", {
    ref: function ref(r$) {
      var _ref$ = props.ref;
      typeof _ref$ === "function" ? _ref$(r$) : props.ref = r$;
    }
  }, "class", function () {
    return props["class"];
  }), "data-tc-dropdown", "true"), "children", function () {
    return createComponent(UlStyled$1, {
      get children() {
        return [function () {
          var _el$ = _tmpl$$5.cloneNode(true);
          insert(_el$, createComponent(MenuButtonStyled, {
            onClick: function onClick() {
              return onCopy();
            },
            get children() {
              return [createComponent(CopyIcon, {}), createComponent(Show, {
                get when() {
                  return !isCopiedShown();
                },
                get children() {
                  return createComponent(MenuItemText, {
                    translationKey: "button.dropdown.copy",
                    children: "Copy address"
                  });
                }
              }), createComponent(Show, {
                get when() {
                  return isCopiedShown();
                },
                get children() {
                  return createComponent(MenuItemText, {
                    translationKey: "button.dropdown.copied",
                    children: "Address copied!"
                  });
                }
              })];
            }
          }));
          return _el$;
        }(), function () {
          var _el$2 = _tmpl$$5.cloneNode(true);
          insert(_el$2, createComponent(MenuButtonStyled, {
            onClick: function onClick() {
              return onDisconnect();
            },
            get children() {
              return [createComponent(DisconnectIcon, {}), createComponent(MenuItemText, {
                translationKey: "button.dropdown.disconnect",
                children: "Disconnect"
              })];
            }
          }));
          return _el$2;
        }()];
      }
    });
  }));
};
var borders$2 = {
  m: "16px",
  s: "8px",
  none: "0"
};
var NotificationStyled = styled.div(_templateObject44 || (_templateObject44 = _taggedTemplateLiteral(["\n    width: 256px;\n    padding: 12px 16px;\n    display: flex;\n    gap: 9px;\n\n    background-color: ", ";\n    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);\n    border-radius: ", ";\n"])), function (props) {
  return props.theme.colors.background.primary;
}, function (props) {
  return borders$2[props.theme.borderRadius];
});
var NotificationContentStyled = styled.div(_templateObject45 || (_templateObject45 = _taggedTemplateLiteral(["\n    width: 192px;\n\n    > h3 {\n        font-size: 15px;\n    }\n"])));
var TextStyled$2 = styled(Text)(_templateObject46 || (_templateObject46 = _taggedTemplateLiteral(["\n    margin-top: 4px;\n    color: ", ";\n"])), function (props) {
  return props.theme.colors.text.secondary;
});
var Notification$1 = function Notification(props) {
  var dataAttrs = useDataAttributes(props);
  return createComponent(NotificationStyled, mergeProps(_defineProperty$1(_defineAccessor("get", {}, "class", function () {
    return props["class"];
  }), "data-tc-notification", "true"), dataAttrs, {
    get children() {
      return [createComponent(NotificationContentStyled, {
        get children() {
          return [createComponent(H3, {
            get translationKey() {
              return props.header.translationKey;
            },
            get translationValues() {
              return props.header.translationValues;
            },
            get children() {
              return props.children;
            }
          }), createComponent(Show, {
            get when() {
              return props.text;
            },
            get children() {
              return createComponent(TextStyled$2, {
                get translationKey() {
                  return props.text.translationKey;
                },
                get translationValues() {
                  return props.text.translationValues;
                }
              });
            }
          })];
        }
      }), createMemo(function () {
        return props.icon;
      })];
    }
  }));
};
var LoaderIconStyled$2 = styled(LoaderIcon)(_templateObject47 || (_templateObject47 = _taggedTemplateLiteral(["\n    align-self: center;\n"])));
var ConfirmOperationNotification = function ConfirmOperationNotification(props) {
  var tonConnectUI = useContext(TonConnectUiContext);
  var _useI18n11 = useI18n(),
    _useI18n12 = _slicedToArray(_useI18n11, 1),
    t2 = _useI18n12[0];
  var name = function name() {
    return tonConnectUI.wallet && "name" in tonConnectUI.wallet ? tonConnectUI.wallet.name : t2("common.yourWallet", {}, "Your wallet");
  };
  return createComponent(Notification$1, _defineProperty$1(_defineProperty$1(_defineAccessor("get", _defineAccessor("get", {
    get header() {
      return {
        translationKey: "notifications.confirm.header",
        translationValues: {
          name: name()
        }
      };
    }
  }, "class", function () {
    return props["class"];
  }), "icon", function () {
    return createComponent(LoaderIconStyled$2, {});
  }), "data-tc-notification-confirm", "true"), "children", "Confirm operation in your wallet"));
};
var ErrorIconStyled$2 = styled(ErrorIcon)(_templateObject48 || (_templateObject48 = _taggedTemplateLiteral(["\n    margin-top: 2px;\n"])));
var ErrorTransactionNotification = function ErrorTransactionNotification(props) {
  return createComponent(Notification$1, _defineProperty$1(_defineProperty$1(_defineAccessor("get", {
    header: {
      translationKey: "notifications.transactionCanceled.header"
    },
    text: {
      translationKey: "notifications.transactionCanceled.text"
    },
    get icon() {
      return createComponent(ErrorIconStyled$2, {
        size: "xs"
      });
    }
  }, "class", function () {
    return props["class"];
  }), "data-tc-notification-tx-cancelled", "true"), "children", "Transaction cancelled"));
};
var SuccessIconStyled = styled(SuccessIcon)(_templateObject49 || (_templateObject49 = _taggedTemplateLiteral(["\n    margin-top: 2px;\n"])));
var SuccessTransactionNotification = function SuccessTransactionNotification(props) {
  return createComponent(Notification$1, _defineProperty$1(_defineProperty$1(_defineAccessor("get", {
    header: {
      translationKey: "notifications.transactionSent.header"
    },
    text: {
      translationKey: "notifications.transactionSent.text"
    },
    get icon() {
      return createComponent(SuccessIconStyled, {});
    }
  }, "class", function () {
    return props["class"];
  }), "data-tc-notification-tx-sent", "true"), "children", "Transaction sent"));
};
var NotificationClass = u(_templateObject50 || (_templateObject50 = _taggedTemplateLiteral(["\n    transform: translateY(-8px);\n    margin-bottom: 12px;\n"])));
var defaultConfig = {
  timeout: 4500
};
var _createSignal45 = createSignal(null),
  _createSignal46 = _slicedToArray(_createSignal45, 2),
  latestAction = _createSignal46[0],
  setLatestAction = _createSignal46[1];
function useOpenedNotifications(config) {
  var _spreadValues = __spreadValues(__spreadValues({}, defaultConfig), config),
    timeout = _spreadValues.timeout;
  var _createSignal47 = createSignal([]),
    _createSignal48 = _slicedToArray(_createSignal47, 2),
    openedNotifications = _createSignal48[0],
    setOpenedNotifications = _createSignal48[1];
  var _createSignal49 = createSignal([]),
    _createSignal50 = _slicedToArray(_createSignal49, 2),
    timeoutIds = _createSignal50[0],
    setTimeoutIds = _createSignal50[1];
  createEffect(on$1(action, function (action2) {
    var _a2;
    if (!action2 || !action2.showNotification) {
      return;
    }
    if (latestAction() === action2) {
      return;
    }
    if (((_a2 = latestAction()) == null ? void 0 : _a2.name) === "confirm-transaction" && action2.name === "confirm-transaction") {
      return;
    }
    setLatestAction(action2);
    setOpenedNotifications(function (openedNotifications2) {
      return openedNotifications2.filter(function (n2) {
        return n2.action !== "confirm-transaction";
      });
    });
    var notification = {
      action: action2.name
    };
    setOpenedNotifications(function (openedNotifications2) {
      return [].concat(_toConsumableArray(openedNotifications2), [notification]);
    });
    var timeoutId = setTimeout(function () {
      setOpenedNotifications(function (openedNotifications2) {
        return openedNotifications2.filter(function (n2) {
          return n2 !== notification;
        });
      });
      setTimeoutIds(function (timeoutIds2) {
        return timeoutIds2.filter(function (id) {
          return id !== timeoutId;
        });
      });
    }, timeout);
    setTimeoutIds(function (timeoutIds2) {
      return [].concat(_toConsumableArray(timeoutIds2), [timeoutId]);
    });
  }));
  onCleanup(function () {
    timeoutIds().forEach(function (id) {
      return clearTimeout(id);
    });
  });
  return openedNotifications;
}
var _tmpl$$4 = /* @__PURE__ */template$1("<div data-tc-list-notifications=\"true\"></div>");
var Notifications = function Notifications(props) {
  var openedNotifications = useOpenedNotifications();
  return function () {
    var _el$ = _tmpl$$4.cloneNode(true);
    insert(_el$, createComponent(TransitionGroup, {
      onBeforeEnter: function onBeforeEnter(el) {
        animate(el, [{
          opacity: 0,
          transform: "translateY(0)"
        }, {
          opacity: 1,
          transform: "translateY(-8px)"
        }], {
          duration: 200
        });
      },
      onExit: function onExit(el, done) {
        var a2 = animate(el, [{
          opacity: 1,
          transform: "translateY(-8px)"
        }, {
          opacity: 0,
          transform: "translateY(-30px)"
        }], {
          duration: 200
        });
        a2.finished.then(done);
      },
      get children() {
        return createComponent(For, {
          get each() {
            return openedNotifications();
          },
          children: function children(openedNotification) {
            return createComponent(Switch, {
              get children() {
                return [createComponent(Match, {
                  get when() {
                    return openedNotification.action === "transaction-sent";
                  },
                  get children() {
                    return createComponent(SuccessTransactionNotification, {
                      "class": NotificationClass
                    });
                  }
                }), createComponent(Match, {
                  get when() {
                    return openedNotification.action === "transaction-canceled";
                  },
                  get children() {
                    return createComponent(ErrorTransactionNotification, {
                      "class": NotificationClass
                    });
                  }
                }), createComponent(Match, {
                  get when() {
                    return openedNotification.action === "confirm-transaction";
                  },
                  get children() {
                    return createComponent(ConfirmOperationNotification, {
                      "class": NotificationClass
                    });
                  }
                })];
              }
            });
          }
        });
      }
    }));
    createRenderEffect(function () {
      return className(_el$, props["class"]);
    });
    return _el$;
  }();
};
var AccountButtonStyled = styled(Button)(_templateObject51 || (_templateObject51 = _taggedTemplateLiteral(["\n    background-color: ", ";\n    color: ", ";\n    box-shadow: ", ";\n    padding: 8px 16px 8px 12px;\n\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    height: 40px;\n"])), function (props) {
  return props.theme.colors.connectButton.background;
}, function (props) {
  return props.theme.colors.connectButton.foreground;
}, function (props) {
  return "0 4px 24px ".concat(rgba(props.theme.colors.constant.black, 0.16));
});
var DropdownButtonStyled = styled(AccountButtonStyled)(_templateObject52 || (_templateObject52 = _taggedTemplateLiteral(["\n    padding: 12px 16px;\n    min-width: 148px;\n    justify-content: center;\n    background-color: ", ";\n"])), function (props) {
  return props.theme.colors.background.primary;
});
var LoaderButtonStyled$1 = styled(Button)(_templateObject53 || (_templateObject53 = _taggedTemplateLiteral(["\n    min-width: 148px;\n    height: 40px;\n\n    background-color: ", ";\n    color: ", ";\n    box-shadow: ", ";\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n"])), function (props) {
  return props.theme.colors.background.primary;
}, function (props) {
  return props.theme.colors.connectButton.foreground;
}, function (props) {
  return "0 4px 24px ".concat(rgba(props.theme.colors.constant.black, 0.16));
});
var LoaderIconStyled$1 = styled(LoaderIcon)(_templateObject54 || (_templateObject54 = _taggedTemplateLiteral(["\n    height: 18px;\n    width: 18px;\n"])));
var DropdownContainerStyled = styled.div(_templateObject55 || (_templateObject55 = _taggedTemplateLiteral(["\n    width: fit-content;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n"])));
var DropdownStyled = styled(AccountButtonDropdown)(_templateObject56 || (_templateObject56 = _taggedTemplateLiteral(["\n    box-sizing: border-box;\n    overflow: hidden;\n    margin-top: 12px;\n"])));
var NotificationsStyled = styled(Notifications)(_templateObject57 || (_templateObject57 = _taggedTemplateLiteral(["\n    > div:first-child {\n        margin-top: 20px;\n    }\n"])));
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "x" : "y";
}
function getLengthFromAxis(axis) {
  return axis === "y" ? "height" : "width";
}
function computeCoordsFromPlacement(_ref, placement, rtl) {
  var reference = _ref.reference,
    floating = _ref.floating;
  var commonX = reference.x + reference.width / 2 - floating.width / 2;
  var commonY = reference.y + reference.height / 2 - floating.height / 2;
  var mainAxis = getMainAxisFromPlacement(placement);
  var length = getLengthFromAxis(mainAxis);
  var commonAlign = reference[length] / 2 - floating[length] / 2;
  var side = getSide(placement);
  var isVertical = mainAxis === "x";
  var coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition$1 = function computePosition$1(reference, floating, config) {
  return __async(void 0, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
    var _config$placement, placement, _config$strategy, strategy, _config$middleware, middleware, platform2, validMiddleware, rtl, rects, _computeCoordsFromPla, x, y, statefulPlacement, middlewareData, resetCount, i2, _validMiddleware$i, name, fn, _yield$fn, nextX, nextY, data, reset, _computeCoordsFromPla2;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _config$placement = config.placement, placement = _config$placement === void 0 ? "bottom" : _config$placement, _config$strategy = config.strategy, strategy = _config$strategy === void 0 ? "absolute" : _config$strategy, _config$middleware = config.middleware, middleware = _config$middleware === void 0 ? [] : _config$middleware, platform2 = config.platform;
          validMiddleware = middleware.filter(Boolean);
          _context5.next = 4;
          return platform2.isRTL == null ? void 0 : platform2.isRTL(floating);
        case 4:
          rtl = _context5.sent;
          if (!({}.NODE_ENV !== "production")) {
            _context5.next = 10;
            break;
          }
          if (platform2 == null) {
            console.error(["Floating UI: `platform` property was not passed to config. If you", "want to use Floating UI on the web, install @floating-ui/dom", "instead of the /core package. Otherwise, you can create your own", "`platform`: https://floating-ui.com/docs/platform"].join(" "));
          }
          if (!(validMiddleware.filter(function (_ref) {
            var name = _ref.name;
            return name === "autoPlacement" || name === "flip";
          }).length > 1)) {
            _context5.next = 9;
            break;
          }
          throw new Error(["Floating UI: duplicate `flip` and/or `autoPlacement` middleware", "detected. This will lead to an infinite loop. Ensure only one of", "either has been passed to the `middleware` array."].join(" "));
        case 9:
          if (!reference || !floating) {
            console.error(["Floating UI: The reference and/or floating element was not defined", "when `computePosition()` was called. Ensure that both elements have", "been created and can be measured."].join(" "));
          }
        case 10:
          _context5.next = 12;
          return platform2.getElementRects({
            reference: reference,
            floating: floating,
            strategy: strategy
          });
        case 12:
          rects = _context5.sent;
          _computeCoordsFromPla = computeCoordsFromPlacement(rects, placement, rtl), x = _computeCoordsFromPla.x, y = _computeCoordsFromPla.y;
          statefulPlacement = placement;
          middlewareData = {};
          resetCount = 0;
          i2 = 0;
        case 18:
          if (!(i2 < validMiddleware.length)) {
            _context5.next = 52;
            break;
          }
          _validMiddleware$i = validMiddleware[i2], name = _validMiddleware$i.name, fn = _validMiddleware$i.fn;
          _context5.next = 22;
          return fn({
            x: x,
            y: y,
            initialPlacement: placement,
            placement: statefulPlacement,
            strategy: strategy,
            middlewareData: middlewareData,
            rects: rects,
            platform: platform2,
            elements: {
              reference: reference,
              floating: floating
            }
          });
        case 22:
          _yield$fn = _context5.sent;
          nextX = _yield$fn.x;
          nextY = _yield$fn.y;
          data = _yield$fn.data;
          reset = _yield$fn.reset;
          x = nextX != null ? nextX : x;
          y = nextY != null ? nextY : y;
          middlewareData = __spreadProps(__spreadValues({}, middlewareData), _defineProperty$1({}, name, __spreadValues(__spreadValues({}, middlewareData[name]), data)));
          if ({}.NODE_ENV !== "production") {
            if (resetCount > 50) {
              console.warn(["Floating UI: The middleware lifecycle appears to be running in an", "infinite loop. This is usually caused by a `reset` continually", "being returned without a break condition."].join(" "));
            }
          }
          if (!(reset && resetCount <= 50)) {
            _context5.next = 49;
            break;
          }
          resetCount++;
          if (!(_typeof(reset) === "object")) {
            _context5.next = 47;
            break;
          }
          if (reset.placement) {
            statefulPlacement = reset.placement;
          }
          if (!reset.rects) {
            _context5.next = 44;
            break;
          }
          if (!(reset.rects === true)) {
            _context5.next = 42;
            break;
          }
          _context5.next = 39;
          return platform2.getElementRects({
            reference: reference,
            floating: floating,
            strategy: strategy
          });
        case 39:
          _context5.t0 = _context5.sent;
          _context5.next = 43;
          break;
        case 42:
          _context5.t0 = reset.rects;
        case 43:
          rects = _context5.t0;
        case 44:
          _computeCoordsFromPla2 = computeCoordsFromPlacement(rects, statefulPlacement, rtl);
          x = _computeCoordsFromPla2.x;
          y = _computeCoordsFromPla2.y;
        case 47:
          i2 = -1;
          return _context5.abrupt("continue", 49);
        case 49:
          i2++;
          _context5.next = 18;
          break;
        case 52:
          return _context5.abrupt("return", {
            x: x,
            y: y,
            placement: statefulPlacement,
            strategy: strategy,
            middlewareData: middlewareData
          });
        case 53:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
};
function rectToClientRect(rect) {
  return __spreadProps(__spreadValues({}, rect), {
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
function getWindow(node) {
  var _node$ownerDocument;
  return ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeName(node) {
  return isNode(node) ? (node.nodeName || "").toLowerCase() : "";
}
var uaString;
function getUAString() {
  if (uaString) {
    return uaString;
  }
  var uaData = navigator.userAgentData;
  if (uaData && Array.isArray(uaData.brands)) {
    uaString = uaData.brands.map(function (item) {
      return item.brand + "/" + item.version;
    }).join(" ");
    return uaString;
  }
  return navigator.userAgent;
}
function isHTMLElement(value) {
  return value instanceof getWindow(value).HTMLElement;
}
function isElement(value) {
  return value instanceof getWindow(value).Element;
}
function isNode(value) {
  return value instanceof getWindow(value).Node;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function isOverflowElement(element) {
  var _getComputedStyle$ = getComputedStyle$1(element),
    overflow = _getComputedStyle$.overflow,
    overflowX = _getComputedStyle$.overflowX,
    overflowY = _getComputedStyle$.overflowY,
    display = _getComputedStyle$.display;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var css = getComputedStyle$1(element);
  var backdropFilter = css.backdropFilter || css.WebkitBackdropFilter;
  return css.transform !== "none" || css.perspective !== "none" || (backdropFilter ? backdropFilter !== "none" : false) || isFirefox && css.willChange === "filter" || isFirefox && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective"].some(function (value) {
    return css.willChange.includes(value);
  }) || ["paint", "layout", "strict", "content"].some(function (value) {
    var contain = css.contain;
    return contain != null ? contain.includes(value) : false;
  });
}
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
var min$2 = Math.min;
var max$2 = Math.max;
var round = Math.round;
var FALLBACK_SCALE = {
  x: 1,
  y: 1
};
function getScale(element) {
  var domElement = !isElement(element) && element.contextElement ? element.contextElement : isElement(element) ? element : null;
  if (!domElement) {
    return FALLBACK_SCALE;
  }
  var rect = domElement.getBoundingClientRect();
  var css = getComputedStyle$1(domElement);
  if (css.boxSizing !== "border-box") {
    if (!isHTMLElement(domElement)) {
      return FALLBACK_SCALE;
    }
    return {
      x: domElement.offsetWidth > 0 ? round(rect.width) / domElement.offsetWidth || 1 : 1,
      y: domElement.offsetHeight > 0 ? round(rect.height) / domElement.offsetHeight || 1 : 1
    };
  }
  var x = rect.width / parseFloat(css.width);
  var y = rect.height / parseFloat(css.height);
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x: x,
    y: y
  };
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  var _win$visualViewport$o, _win$visualViewport, _win$visualViewport$o2, _win$visualViewport2;
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scale = FALLBACK_SCALE;
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  var win = isElement(element) ? getWindow(element) : window;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets ? (_win$visualViewport$o = (_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) != null ? _win$visualViewport$o : 0 : 0)) / scale.x;
  var y = (clientRect.top + (addVisualOffsets ? (_win$visualViewport$o2 = (_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) != null ? _win$visualViewport$o2 : 0 : 0)) / scale.y;
  var width = clientRect.width / scale.x;
  var height = clientRect.height / scale.y;
  return {
    width: width,
    height: height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x: x,
    y: y
  };
}
function getDocumentElement(node) {
  return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(element, true, strategy === "fixed", offsetParent);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      var offsetRect = getBoundingClientRect(offsetParent, true);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  var result = node.assignedSlot || node.parentNode || (isShadowRoot(node) ? node.host : null) || getDocumentElement(node);
  return isShadowRoot(result) ? result.host : result;
}
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode(currentNode);
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
function getDimensions(element) {
  if (isHTMLElement(element)) {
    return {
      width: element.offsetWidth,
      height: element.offsetHeight
    };
  }
  var rect = getBoundingClientRect(element);
  return {
    width: rect.width,
    height: rect.height
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  var rect = _ref.rect,
    offsetParent = _ref.offsetParent,
    strategy = _ref.strategy;
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var scale = {
    x: 1,
    y: 1
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      var offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var scroll = getNodeScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max$2(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max$2(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -scroll.scrollLeft + getWindowScrollBarX(element);
  var y = -scroll.scrollTop;
  if (getComputedStyle$1(body || html).direction === "rtl") {
    x += max$2(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}
function getNearestOverflowAncestor(node) {
  var parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list) {
  var _node$ownerDocument;
  if (list === void 0) {
    list = [];
  }
  var scrollableAncestor = getNearestOverflowAncestor(node);
  var isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
  var win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));
}
function getInnerBoundingClientRect(element, strategy) {
  var clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  var top = clientRect.top + element.clientTop;
  var left = clientRect.left + element.clientLeft;
  var scale = isHTMLElement(element) ? getScale(element) : {
    x: 1,
    y: 1
  };
  var width = element.clientWidth * scale.x;
  var height = element.clientHeight * scale.y;
  var x = left * scale.x;
  var y = top * scale.y;
  return {
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x: x,
    y: y,
    width: width,
    height: height
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  if (clippingAncestor === "viewport") {
    return rectToClientRect(getViewportRect(element, strategy));
  }
  if (isElement(clippingAncestor)) {
    return getInnerBoundingClientRect(clippingAncestor, strategy);
  }
  return rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingElementAncestors(element, cache) {
  var cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  var result = getOverflowAncestors(element).filter(function (el) {
    return isElement(el) && getNodeName(el) !== "body";
  });
  var currentContainingBlockComputedStyle = null;
  var elementIsFixed = getComputedStyle$1(element).position === "fixed";
  var currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    var computedStyle = getComputedStyle$1(currentNode);
    var containingBlock = isContainingBlock(currentNode);
    var shouldDropCurrentNode = elementIsFixed ? !containingBlock && !currentContainingBlockComputedStyle : !containingBlock && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position);
    if (shouldDropCurrentNode) {
      result = result.filter(function (ancestor) {
        return ancestor !== currentNode;
      });
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  var element = _ref.element,
    boundary = _ref.boundary,
    rootBoundary = _ref.rootBoundary,
    strategy = _ref.strategy;
  var elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
  var clippingAncestors = [].concat(_toConsumableArray(elementClippingAncestors), [rootBoundary]);
  var firstClippingAncestor = clippingAncestors[0];
  var clippingRect = clippingAncestors.reduce(function (accRect, clippingAncestor) {
    var rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max$2(rect.top, accRect.top);
    accRect.right = min$2(rect.right, accRect.right);
    accRect.bottom = min$2(rect.bottom, accRect.bottom);
    accRect.left = max$2(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
var platform$1 = {
  getClippingRect: getClippingRect,
  convertOffsetParentRelativeRectToViewportRelativeRect: convertOffsetParentRelativeRectToViewportRelativeRect,
  isElement: isElement,
  getDimensions: getDimensions,
  getOffsetParent: getOffsetParent,
  getDocumentElement: getDocumentElement,
  getScale: getScale,
  getElementRects: function getElementRects(_ref) {
    return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      var reference, floating, strategy, getOffsetParentFn, getDimensionsFn;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            reference = _ref.reference, floating = _ref.floating, strategy = _ref.strategy;
            getOffsetParentFn = this.getOffsetParent || getOffsetParent;
            getDimensionsFn = this.getDimensions;
            _context6.t0 = getRectRelativeToOffsetParent;
            _context6.t1 = reference;
            _context6.next = 7;
            return getOffsetParentFn(floating);
          case 7:
            _context6.t2 = _context6.sent;
            _context6.t3 = strategy;
            _context6.t4 = (0, _context6.t0)(_context6.t1, _context6.t2, _context6.t3);
            _context6.t5 = __spreadValues;
            _context6.t6 = {
              x: 0,
              y: 0
            };
            _context6.next = 14;
            return getDimensionsFn(floating);
          case 14:
            _context6.t7 = _context6.sent;
            _context6.t8 = (0, _context6.t5)(_context6.t6, _context6.t7);
            return _context6.abrupt("return", {
              reference: _context6.t4,
              floating: _context6.t8
            });
          case 17:
          case "end":
            return _context6.stop();
        }
      }, _callee6, this);
    }));
  },
  getClientRects: function getClientRects(element) {
    return Array.from(element.getClientRects());
  },
  isRTL: function isRTL(element) {
    return getComputedStyle$1(element).direction === "rtl";
  }
};
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  var _options2 = options,
    _options2$ancestorScr = _options2.ancestorScroll,
    _ancestorScroll = _options2$ancestorScr === void 0 ? true : _options2$ancestorScr,
    _options2$ancestorRes = _options2.ancestorResize,
    ancestorResize = _options2$ancestorRes === void 0 ? true : _options2$ancestorRes,
    _options2$elementResi = _options2.elementResize,
    elementResize = _options2$elementResi === void 0 ? true : _options2$elementResi,
    _options2$animationFr = _options2.animationFrame,
    animationFrame = _options2$animationFr === void 0 ? false : _options2$animationFr;
  var ancestorScroll = _ancestorScroll && !animationFrame;
  var ancestors = ancestorScroll || ancestorResize ? [].concat(_toConsumableArray(isElement(reference) ? getOverflowAncestors(reference) : reference.contextElement ? getOverflowAncestors(reference.contextElement) : []), _toConsumableArray(getOverflowAncestors(floating))) : [];
  ancestors.forEach(function (ancestor) {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  var observer = null;
  if (elementResize) {
    var initialUpdate = true;
    observer = new ResizeObserver(function () {
      if (!initialUpdate) {
        update();
      }
      initialUpdate = false;
    });
    isElement(reference) && !animationFrame && observer.observe(reference);
    if (!isElement(reference) && reference.contextElement && !animationFrame) {
      observer.observe(reference.contextElement);
    }
    observer.observe(floating);
  }
  var frameId;
  var prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    var nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return function () {
    var _observer;
    ancestors.forEach(function (ancestor) {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    (_observer = observer) == null ? void 0 : _observer.disconnect();
    observer = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var computePosition = function computePosition(reference, floating, options) {
  var cache = /* @__PURE__ */new Map();
  var mergedOptions = __spreadValues({
    platform: platform$1
  }, options);
  var platformWithCache = __spreadProps(__spreadValues({}, mergedOptions.platform), {
    _c: cache
  });
  return computePosition$1(reference, floating, __spreadProps(__spreadValues({}, mergedOptions), {
    platform: platformWithCache
  }));
};
function P(l2, u2, e2) {
  var c2 = function c2() {
      var t2;
      return (t2 = e2 == null ? void 0 : e2.placement) != null ? t2 : "bottom";
    },
    d = function d() {
      var t2;
      return (t2 = e2 == null ? void 0 : e2.strategy) != null ? t2 : "absolute";
    },
    _createSignal51 = createSignal({
      x: null,
      y: null,
      placement: c2(),
      strategy: d(),
      middlewareData: {}
    }),
    _createSignal52 = _slicedToArray(_createSignal51, 2),
    n2 = _createSignal52[0],
    o2 = _createSignal52[1],
    _createSignal53 = createSignal(),
    _createSignal54 = _slicedToArray(_createSignal53, 2),
    x = _createSignal54[0],
    F = _createSignal54[1];
  createEffect(function () {
    var t2 = x();
    if (t2) throw t2.value;
  });
  var s2 = createMemo(function () {
    return l2(), u2(), {};
  });
  function i2() {
    var t2 = l2(),
      r = u2();
    if (t2 && r) {
      var a2 = s2();
      computePosition(t2, r, {
        middleware: e2 == null ? void 0 : e2.middleware,
        placement: c2(),
        strategy: d()
      }).then(function (m) {
        a2 === s2() && o2(m);
      }, function (m) {
        F(m);
      });
    }
  }
  return createEffect(function () {
    var t2 = l2(),
      r = u2();
    if (e2 == null || e2.middleware, c2(), d(), t2 && r) if (e2 != null && e2.whileElementsMounted) {
      var a2 = e2.whileElementsMounted(t2, r, i2);
      a2 && onCleanup(a2);
    } else i2();
  }), {
    get x() {
      return n2().x;
    },
    get y() {
      return n2().y;
    },
    get placement() {
      return n2().placement;
    },
    get strategy() {
      return n2().strategy;
    },
    get middlewareData() {
      return n2().middlewareData;
    },
    update: i2
  };
}
var _tmpl$$3 = /* @__PURE__ */template$1("<tc-root data-tc-dropdown-container=\"true\"></tc-root>");
var AccountButton = function AccountButton() {
  var theme = useTheme();
  var connector = useContext(ConnectorContext);
  var tonConnectUI = useContext(TonConnectUiContext);
  var _createSignal55 = createSignal(false),
    _createSignal56 = _slicedToArray(_createSignal55, 2),
    isOpened = _createSignal56[0],
    setIsOpened = _createSignal56[1];
  var _createSignal57 = createSignal(connector.account),
    _createSignal58 = _slicedToArray(_createSignal57, 2),
    account = _createSignal58[0],
    setAccount = _createSignal58[1];
  var _createSignal59 = createSignal(!connector.account),
    _createSignal60 = _slicedToArray(_createSignal59, 2),
    restoringProcess = _createSignal60[0],
    setRestoringProcess = _createSignal60[1];
  var dropDownRef;
  var _createSignal61 = createSignal(),
    _createSignal62 = _slicedToArray(_createSignal61, 2),
    floating = _createSignal62[0],
    setFloating = _createSignal62[1];
  var _createSignal63 = createSignal(),
    _createSignal64 = _slicedToArray(_createSignal63, 2),
    anchor = _createSignal64[0],
    setAnchor = _createSignal64[1];
  var position = P(anchor, floating, {
    whileElementsMounted: autoUpdate,
    placement: "bottom-end"
  });
  var normalizedAddress = function normalizedAddress() {
    var acc = account();
    if (acc) {
      var userFriendlyAddress = toUserFriendlyAddress(acc.address, acc.chain === CHAIN.TESTNET);
      return userFriendlyAddress.slice(0, 4) + "\u2026" + userFriendlyAddress.slice(-4);
    }
    return "";
  };
  tonConnectUI.connectionRestored.then(function () {
    return setRestoringProcess(false);
  });
  var unsubscribe = connector.onStatusChange(function (wallet) {
    if (!wallet) {
      setIsOpened(false);
      setAccount(null);
      setRestoringProcess(false);
      return;
    }
    setAccount(wallet.account);
    setRestoringProcess(false);
  });
  var onClick = function onClick(e2) {
    if (!account() || !isOpened()) {
      return;
    }
    var clickToButton = anchor().contains(e2.target);
    var clickToDropdown = dropDownRef.contains(e2.target);
    if (!clickToButton && !clickToDropdown) {
      setIsOpened(false);
    }
  };
  onMount(function () {
    document.body.addEventListener("click", onClick);
  });
  onCleanup(function () {
    document.body.removeEventListener("click", onClick);
    unsubscribe();
  });
  return createComponent(Dynamic, {
    component: globalStylesTag,
    get children() {
      return [createComponent(Show, {
        get when() {
          return restoringProcess();
        },
        get children() {
          return createComponent(LoaderButtonStyled$1, {
            disabled: true,
            "data-tc-connect-button-loading": "true",
            get children() {
              return createComponent(LoaderIconStyled$1, {});
            }
          });
        }
      }), createComponent(Show, {
        get when() {
          return !restoringProcess();
        },
        get children() {
          return [createComponent(Show, {
            get when() {
              return !account();
            },
            get children() {
              return createComponent(AccountButtonStyled, {
                onClick: function onClick() {
                  return tonConnectUI.openModal();
                },
                "data-tc-connect-button": "true",
                scale: "s",
                get children() {
                  return [createComponent(TonIcon, {
                    get fill() {
                      return theme.colors.connectButton.foreground;
                    }
                  }), createComponent(Text, {
                    translationKey: "button.connectWallet",
                    fontSize: "15px",
                    lineHeight: "18px",
                    fontWeight: "590",
                    get color() {
                      return theme.colors.connectButton.foreground;
                    },
                    children: "Connect wallet"
                  })];
                }
              });
            }
          }), createComponent(Show, {
            get when() {
              return account();
            },
            get children() {
              return createComponent(DropdownContainerStyled, {
                get children() {
                  return [createComponent(DropdownButtonStyled, {
                    onClick: function onClick() {
                      return setIsOpened(function (v) {
                        return !v;
                      });
                    },
                    ref: setAnchor,
                    "data-tc-dropdown-button": "true",
                    scale: "s",
                    get children() {
                      return [createComponent(Text, {
                        fontSize: "15px",
                        fontWeight: "590",
                        lineHeight: "18px",
                        get children() {
                          return normalizedAddress();
                        }
                      }), createComponent(ArrowIcon, {
                        direction: "bottom"
                      })];
                    }
                  }), createComponent(Portal, {
                    get children() {
                      var _el$ = untrack(function () {
                        return document.importNode(_tmpl$$3, true);
                      });
                      use(setFloating, _el$);
                      _el$.style.setProperty("z-index", "999");
                      _el$._$owner = getOwner();
                      insert(_el$, createComponent(Transition, {
                        onBeforeEnter: function onBeforeEnter(el) {
                          animate(el, [{
                            opacity: 0,
                            transform: "translateY(-8px)"
                          }, {
                            opacity: 1,
                            transform: "translateY(0)"
                          }], {
                            duration: 150
                          });
                        },
                        onExit: function onExit(el, done) {
                          var a2 = animate(el, [{
                            opacity: 1,
                            transform: "translateY(0)"
                          }, {
                            opacity: 0,
                            transform: "translateY(-8px)"
                          }], {
                            duration: 150
                          });
                          a2.finished.then(done);
                        },
                        get children() {
                          return createComponent(Show, {
                            get when() {
                              return isOpened();
                            },
                            get children() {
                              return createComponent(DropdownStyled, {
                                get hidden() {
                                  return !isOpened();
                                },
                                onClose: function onClose() {
                                  return setIsOpened(false);
                                },
                                ref: function ref(r$) {
                                  var _ref$ = dropDownRef;
                                  typeof _ref$ === "function" ? _ref$(r$) : dropDownRef = r$;
                                }
                              });
                            }
                          });
                        }
                      }), null);
                      insert(_el$, createComponent(NotificationsStyled, {}), null);
                      createRenderEffect(function (_p$) {
                        var _a2, _b2;
                        var _v$ = position.strategy,
                          _v$2 = "".concat((_a2 = position.y) != null ? _a2 : 0, "px"),
                          _v$3 = "".concat((_b2 = position.x) != null ? _b2 : 0, "px");
                        _v$ !== _p$._v$ && _el$.style.setProperty("position", _p$._v$ = _v$);
                        _v$2 !== _p$._v$2 && _el$.style.setProperty("top", _p$._v$2 = _v$2);
                        _v$3 !== _p$._v$3 && _el$.style.setProperty("left", _p$._v$3 = _v$3);
                        return _p$;
                      }, {
                        _v$: void 0,
                        _v$2: void 0,
                        _v$3: void 0
                      });
                      return _el$;
                    }
                  })];
                }
              });
            }
          })];
        }
      })];
    }
  });
};
var StyledModal = styled(Modal)(_templateObject58 || (_templateObject58 = _taggedTemplateLiteral(["\n    padding-left: 24px;\n    padding-right: 24px;\n    padding-top: 18px;\n    padding-bottom: 0;\n\n    ", " {\n        padding-left: 0;\n        padding-right: 0;\n\n        min-height: 364px;\n    }\n"])), media("mobile"));
var H1Styled$8 = styled(H1)(_templateObject59 || (_templateObject59 = _taggedTemplateLiteral(["\n    margin-top: 12px;\n\n    ", " {\n        padding: 0 10px;\n    }\n"])), media("mobile"));
var LoaderContainerStyled = styled.div(_templateObject60 || (_templateObject60 = _taggedTemplateLiteral(["\n    margin: 30px 0;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n\n    ", " {\n        height: 160px;\n        align-items: center;\n    }\n"])), media("mobile"));
styled(Text)(_templateObject61 || (_templateObject61 = _taggedTemplateLiteral(["\n    min-width: 84px;\n    text-align: center;\n    font-weight: 590;\n"])));
styled(TabBar)(_templateObject62 || (_templateObject62 = _taggedTemplateLiteral(["\n    margin: 0 auto 22px;\n"])));
var _createStore5 = createStore({
    buttonRootId: null,
    language: "en",
    returnStrategy: "back",
    twaReturnUrl: void 0,
    walletsListConfiguration: {},
    enableAndroidBackHandler: true
  }),
  _createStore6 = _slicedToArray(_createStore5, 2),
  appState = _createStore6[0],
  setAppState = _createStore6[1];
function uniq(array) {
  return _toConsumableArray(new Set(array));
}
function mergeConcat(idKey, array1, array2) {
  return array1.map(function (item1) {
    var item2 = array2.find(function (elem) {
      return elem[idKey] === item1[idKey];
    });
    array2 = array2.filter(function (elem) {
      return elem[idKey] !== item1[idKey];
    });
    return item2 === void 0 ? item1 : item2;
  }).concat(array2);
}
function uiWalletToWalletInfo(uiWallet) {
  if ("jsBridgeKey" in uiWallet) {
    return __spreadProps(__spreadValues({}, uiWallet), {
      injected: TonConnect.isWalletInjected(uiWallet.jsBridgeKey),
      embedded: TonConnect.isInsideWalletBrowser(uiWallet.jsBridgeKey)
    });
  }
  return uiWallet;
}
function applyWalletsListConfiguration(walletsList, configuration) {
  var _a2;
  if (!configuration) {
    return walletsList;
  }
  if ((_a2 = configuration.includeWallets) == null ? void 0 : _a2.length) {
    walletsList = mergeConcat("name", walletsList, configuration.includeWallets.map(uiWalletToWalletInfo));
  }
  return walletsList;
}
function supportsDesktop(walletInfo) {
  return walletInfo.platforms.some(function (w) {
    return ["macos", "linux", "windows"].includes(w);
  });
}
function supportsMobile(walletInfo) {
  return walletInfo.platforms.some(function (w) {
    return ["ios", "android"].includes(w);
  });
}
function supportsExtension(walletInfo) {
  return walletInfo.platforms.some(function (w) {
    return ["chrome", "firefox", "safari"].includes(w);
  });
}
function eqWalletName(wallet1, name) {
  if (!name) {
    return false;
  }
  return wallet1.name.toLowerCase() === name.toLowerCase() || wallet1.appName.toLowerCase() === name.toLowerCase();
}
var DesktopSelectWalletModalStyled = styled.div(_templateObject63 || (_templateObject63 = _taggedTemplateLiteral(["\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n"])));
var H1Styled$7 = styled(H1)(_templateObject64 || (_templateObject64 = _taggedTemplateLiteral(["\n    margin-bottom: 18px;\n"])));
styled.div(_templateObject65 || (_templateObject65 = _taggedTemplateLiteral(["\n    height: 1px;\n    margin: 0 -24px;\n    width: calc(100% + 48px);\n    opacity: 0.12;\n    background: ", ";\n    transition: background 0.15s ease-in-out;\n\n    ", " {\n        width: 100%;\n    }\n"])), function (props) {
  return props.isShown ? props.theme.colors.icon.secondary : "transparent";
}, media("mobile"));
var WalletsUl = styled.ul(_templateObject66 || (_templateObject66 = _taggedTemplateLiteral(["\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 92px);\n    grid-template-rows: auto;\n    align-content: flex-start;\n    justify-content: center;\n    row-gap: 8px;\n    width: 100%;\n    padding: 0 0 16px;\n    align-self: flex-start;\n    max-width: 400px;\n    margin: 0 auto;\n\n    > li {\n        display: block;\n        height: fit-content;\n    }\n\n    ", " {\n        grid-template-columns: repeat(auto-fit, 82px);\n    }\n"])), media("mobile"));
styled(Button)(_templateObject67 || (_templateObject67 = _taggedTemplateLiteral(["\n    display: block;\n    margin: 0 auto 1px;\n    font-size: 15px;\n"])));
var StyledIconButton$3 = styled(IconButton)(_templateObject68 || (_templateObject68 = _taggedTemplateLiteral(["\n    position: absolute;\n    top: 16px;\n    left: 16px;\n"])));
var WalletLabeledItemStyled = styled(WalletLabeledItem)(_templateObject69 || (_templateObject69 = _taggedTemplateLiteral(["\n    height: 100%;\n"])));
var _tmpl$$2 = /* @__PURE__ */template$1("<li></li>");
var AllWalletsListModal = function AllWalletsListModal(props) {
  var maxHeight = function maxHeight() {
    return isMobile() ? void 0 : 510;
  };
  var walletsList = function walletsList() {
    return isMobile() ? props.walletsList.filter(supportsMobile) : props.walletsList;
  };
  return createComponent(DesktopSelectWalletModalStyled, {
    "data-tc-wallets-modal-list": "true",
    get children() {
      return [createComponent(StyledIconButton$3, {
        icon: "arrow",
        onClick: function onClick() {
          return props.onBack();
        }
      }), createComponent(H1Styled$7, {
        translationKey: "walletModal.wallets",
        children: "Wallets"
      }), createComponent(ScrollContainer, {
        get maxHeight() {
          return maxHeight();
        },
        get children() {
          return createComponent(WalletsUl, {
            get children() {
              return createComponent(For, {
                get each() {
                  return walletsList();
                },
                children: function children(wallet) {
                  return function () {
                    var _el$ = _tmpl$$2.cloneNode(true);
                    insert(_el$, createComponent(WalletLabeledItemStyled, {
                      wallet: wallet,
                      onClick: function onClick() {
                        return props.onSelect(wallet);
                      }
                    }));
                    return _el$;
                  }();
                }
              });
            }
          });
        }
      })];
    }
  });
};
var tgButtonBorders = {
  m: "16px",
  s: "12px",
  none: "0"
};
var tgIconBorders = {
  m: "6px",
  s: "6px",
  none: "0"
};
var DesktopConnectionModalStyled = styled.div(_templateObject70 || (_templateObject70 = _taggedTemplateLiteral(["\n    display: flex;\n    flex-direction: column;\n"])));
var BodyStyled$1 = styled.div(_templateObject71 || (_templateObject71 = _taggedTemplateLiteral(["\n    flex: 1;\n    margin-top: ", ";\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 232px;\n"])), function (props) {
  return props.qr ? "0" : "18px";
});
var QRCodeStyled$1 = styled(QRCode)(_templateObject72 || (_templateObject72 = _taggedTemplateLiteral(["\n    margin-bottom: 24px;\n"])));
var H1Styled$6 = styled(H1)(_templateObject73 || (_templateObject73 = _taggedTemplateLiteral(["\n    max-width: 288px;\n    margin: 0 auto 2px;\n"])));
var H2Styled$4 = styled(H2)(_templateObject74 || (_templateObject74 = _taggedTemplateLiteral(["\n    max-width: 288px;\n    text-align: center;\n    margin: 0 auto 20px;\n"])));
var StyledIconButton$2 = styled(IconButton)(_templateObject75 || (_templateObject75 = _taggedTemplateLiteral(["\n    position: absolute;\n    top: 16px;\n    left: 16px;\n"])));
var ButtonsContainerStyled$1 = styled.div(_templateObject76 || (_templateObject76 = _taggedTemplateLiteral(["\n    display: flex;\n    justify-content: center;\n    gap: 8px;\n    padding-bottom: 16px;\n"])));
var BottomButtonsContainerStyled = styled(ButtonsContainerStyled$1)(_templateObject77 || (_templateObject77 = _taggedTemplateLiteral(["\n    padding-bottom: 0;\n"])));
var FooterButton$1 = styled(Button)(_templateObject78 || (_templateObject78 = _taggedTemplateLiteral(["\n    margin-bottom: 24px;\n"])));
var LoaderStyled$1 = styled(LoaderIcon)(_templateObject79 || (_templateObject79 = _taggedTemplateLiteral(["\n    margin-bottom: 18px;\n    margin-top: 2px;\n"])));
var ErrorIconStyled$1 = styled(ErrorIcon)(_templateObject80 || (_templateObject80 = _taggedTemplateLiteral(["\n    margin-bottom: 16px;\n"])));
var BodyTextStyled$1 = styled(H2)(_templateObject81 || (_templateObject81 = _taggedTemplateLiteral(["\n    color: ", ";\n    text-align: center;\n    margin-bottom: 20px;\n"])), function (props) {
  return props.theme.colors.text.secondary;
});
var TgButtonStyled = styled(Button)(_templateObject82 || (_templateObject82 = _taggedTemplateLiteral(["\n    margin-top: -8px;\n    margin-bottom: 24px;\n    width: 100%;\n    padding: 12px 12px 12px 20px;\n    border-radius: ", ";\n    font-size: 16px;\n    line-height: 20px;\n"])), function (props) {
  return tgButtonBorders[props.theme.borderRadius];
});
var TgImageStyled = styled(Image)(_templateObject83 || (_templateObject83 = _taggedTemplateLiteral(["\n    width: 32px;\n    height: 32px;\n    border-radius: ", ";\n"])), function (props) {
  return tgIconBorders[props.theme.borderRadius];
});
var Translation = function Translation(props) {
  var _useI18n13 = useI18n(),
    _useI18n14 = _slicedToArray(_useI18n13, 1),
    t2 = _useI18n14[0];
  return createMemo(function () {
    var _a2;
    return t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString());
  });
};
function addReturnStrategy(url, strategy) {
  var returnStrategy;
  if (typeof strategy === "string") {
    returnStrategy = strategy;
  } else {
    returnStrategy = isInTMA() ? strategy.twaReturnUrl || strategy.returnStrategy : "none";
  }
  var newUrl = addQueryParameter(url, "ret", returnStrategy);
  if (!isTelegramUrl(url)) {
    return newUrl;
  }
  var lastParam = newUrl.slice(newUrl.lastIndexOf("&") + 1);
  return newUrl.slice(0, newUrl.lastIndexOf("&")) + "-" + encodeTelegramUrlParameters(lastParam);
}
function redirectToTelegram(universalLink, options) {
  options = __spreadValues({}, options);
  var directLink = convertToTGDirectLink(universalLink);
  var directLinkUrl = new URL(directLink);
  if (!directLinkUrl.searchParams.has("startapp")) {
    directLinkUrl.searchParams.append("startapp", "tonconnect");
  }
  if (isInTelegramBrowser()) {
    options.returnStrategy = "back";
    var linkWitStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
    openLinkBlank(linkWitStrategy);
  } else if (isInTMA()) {
    if (isTmaPlatform("ios", "android", "macos", "tdesktop", "web")) {
      options.returnStrategy = "back";
      var _linkWitStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
      sendOpenTelegramLink(_linkWitStrategy);
    } else if (isTmaPlatform("weba")) {
      sendOpenTelegramLink(addReturnStrategy(directLinkUrl.toString(), options));
    } else {
      openLinkBlank(addReturnStrategy(directLinkUrl.toString(), options));
    }
  } else {
    if (isOS("ios")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("safari")) {
          options.returnStrategy = "back";
        } else if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = location.href;
        }
      }
      var isChrome = isBrowser("chrome");
      var isFirefox = isBrowser("firefox");
      var useDeepLink = (isChrome || isFirefox) && !options.forceRedirect;
      if (useDeepLink) {
        var linkWithStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
        var deepLink = convertToTGDeepLink(linkWithStrategy);
        openDeeplinkWithFallback(deepLink, function () {
          return openLinkBlank(linkWithStrategy);
        });
      } else {
        var _linkWithStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
        openLinkBlank(_linkWithStrategy);
      }
    } else if (isOS("android")) {
      options.returnStrategy = "back";
      var _isChrome = isBrowser("chrome");
      var _isFirefox = isBrowser("firefox");
      var _useDeepLink = (_isChrome || _isFirefox) && !options.forceRedirect;
      if (_useDeepLink) {
        var _linkWithStrategy2 = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
        var _deepLink = convertToTGDeepLink(_linkWithStrategy2);
        openDeeplinkWithFallback(_deepLink, function () {
          return openLinkBlank(_linkWithStrategy2);
        });
      } else {
        var _linkWithStrategy3 = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
        openLinkBlank(_linkWithStrategy3);
      }
    } else if (isOS("ipad")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("safari")) {
          options.returnStrategy = "back";
        } else if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = location.href;
        }
      }
      var _isChrome2 = isBrowser("chrome");
      var _isFirefox2 = isBrowser("firefox");
      var _useDeepLink2 = (_isChrome2 || _isFirefox2) && !options.forceRedirect;
      var _linkWithStrategy4 = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
      if (_useDeepLink2) {
        var _deepLink2 = convertToTGDeepLink(_linkWithStrategy4);
        openDeeplinkWithFallback(_deepLink2, function () {
          return openLinkBlank(_linkWithStrategy4);
        });
      } else {
        openLinkBlank(_linkWithStrategy4);
      }
    } else if (isOS("macos", "windows", "linux")) {
      options.returnStrategy = "back";
      options.twaReturnUrl = void 0;
      var _linkWithStrategy5 = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
      if (options.forceRedirect) {
        openLinkBlank(_linkWithStrategy5);
      } else {
        var _deepLink3 = convertToTGDeepLink(_linkWithStrategy5);
        openDeeplinkWithFallback(_deepLink3, function () {
          return openLinkBlank(_linkWithStrategy5);
        });
      }
    } else {
      openLinkBlank(addReturnStrategy(directLinkUrl.toString(), options));
    }
  }
}
function redirectToWallet(universalLink, deepLink, options, setOpenMethod) {
  options = __spreadValues({}, options);
  if (isInTelegramBrowser()) {
    if (isOS("ios", "android")) {
      if (options.returnStrategy === "back") {
        options.returnStrategy = "tg://resolve";
      }
      setOpenMethod("universal-link");
      openLink(addReturnStrategy(universalLink, options.returnStrategy), "_self");
    } else {
      setOpenMethod("universal-link");
      var linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
      openLinkBlank(linkWitStrategy);
    }
  } else if (isInTMA()) {
    if (isTmaPlatform("ios", "android")) {
      if (options.returnStrategy === "back") {
        options.returnStrategy = "tg://resolve";
      }
      setOpenMethod("universal-link");
      var _linkWitStrategy2 = addReturnStrategy(universalLink, options.returnStrategy);
      sendOpenTelegramLink(_linkWitStrategy2, function () {
        setOpenMethod("universal-link");
        openLinkBlank(_linkWitStrategy2);
      });
    } else if (isTmaPlatform("macos", "tdesktop")) {
      if (options.returnStrategy === "back") {
        options.returnStrategy = "tg://resolve";
      }
      var _linkWitStrategy3 = addReturnStrategy(universalLink, options.returnStrategy);
      var useDeepLink = !!deepLink && !options.forceRedirect;
      if (useDeepLink) {
        setOpenMethod("custom-deeplink");
        openDeeplinkWithFallback(toDeeplink(_linkWitStrategy3, deepLink), function () {
          setOpenMethod("universal-link");
          openLinkBlank(_linkWitStrategy3);
        });
      } else {
        setOpenMethod("universal-link");
        openLinkBlank(_linkWitStrategy3);
      }
    } else if (isTmaPlatform("weba")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("safari")) {
          options.returnStrategy = location.href;
        } else if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = location.href;
        }
      }
      var _linkWitStrategy4 = addReturnStrategy(universalLink, options.returnStrategy);
      var _useDeepLink3 = !!deepLink && !options.forceRedirect;
      if (_useDeepLink3) {
        setOpenMethod("custom-deeplink");
        openDeeplinkWithFallback(toDeeplink(_linkWitStrategy4, deepLink), function () {
          setOpenMethod("universal-link");
          openLinkBlank(_linkWitStrategy4);
        });
      } else {
        setOpenMethod("universal-link");
        openLinkBlank(_linkWitStrategy4);
      }
    } else if (isTmaPlatform("web")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("safari")) {
          options.returnStrategy = location.href;
        } else if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = location.href;
        }
      }
      var _linkWitStrategy5 = addReturnStrategy(universalLink, options.returnStrategy);
      var _useDeepLink4 = !!deepLink && !options.forceRedirect;
      if (_useDeepLink4) {
        setOpenMethod("custom-deeplink");
        openDeeplinkWithFallback(toDeeplink(_linkWitStrategy5, deepLink), function () {
          setOpenMethod("universal-link");
          openLinkBlank(_linkWitStrategy5);
        });
      } else {
        setOpenMethod("universal-link");
        openLinkBlank(_linkWitStrategy5);
      }
    } else {
      setOpenMethod("universal-link");
      var _linkWitStrategy6 = addReturnStrategy(universalLink, options.returnStrategy);
      openLinkBlank(_linkWitStrategy6);
    }
  } else {
    if (isOS("ios")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("safari")) {
          options.returnStrategy = "none";
        } else if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = location.href;
        }
      }
      if (isBrowser("chrome")) {
        setOpenMethod("universal-link");
        openLink(addReturnStrategy(universalLink, options.returnStrategy), "_self");
      } else {
        setOpenMethod("universal-link");
        openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));
      }
    } else if (isOS("android")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = location.href;
        }
      }
      setOpenMethod("universal-link");
      openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));
    } else if (isOS("ipad")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("safari")) {
          options.returnStrategy = "none";
        } else if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = location.href;
        }
      }
      if (isBrowser("chrome")) {
        setOpenMethod("universal-link");
        openLink(addReturnStrategy(universalLink, options.returnStrategy), "_self");
      } else {
        setOpenMethod("universal-link");
        openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));
      }
    } else if (isOS("macos", "windows", "linux")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("safari")) {
          options.returnStrategy = "none";
        } else if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = "none";
        }
      }
      var _linkWitStrategy7 = addReturnStrategy(universalLink, options.returnStrategy);
      var _useDeepLink5 = !!deepLink && !options.forceRedirect;
      if (_useDeepLink5) {
        setOpenMethod("custom-deeplink");
        openDeeplinkWithFallback(toDeeplink(_linkWitStrategy7, deepLink), function () {
          setOpenMethod("universal-link");
          openLinkBlank(_linkWitStrategy7);
        });
      } else {
        setOpenMethod("universal-link");
        openLinkBlank(_linkWitStrategy7);
      }
    } else {
      setOpenMethod("universal-link");
      openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));
    }
  }
}
function addQueryParameter(url, key, value) {
  var parsed = new URL(url);
  parsed.searchParams.append(key, value);
  return parsed.toString();
}
function convertToTGDirectLink(universalLink) {
  var url = new URL(universalLink);
  if (url.searchParams.has("attach")) {
    url.searchParams["delete"]("attach");
    url.pathname += "/start";
  }
  return url.toString();
}
function convertToTGDeepLink(directLink) {
  var parsed = new URL(directLink);
  var _parsed$pathname$spli = parsed.pathname.split("/"),
    _parsed$pathname$spli2 = _slicedToArray(_parsed$pathname$spli, 3),
    domain = _parsed$pathname$spli2[1],
    appname = _parsed$pathname$spli2[2];
  var startapp = parsed.searchParams.get("startapp");
  return "tg://resolve?domain=".concat(domain, "&appname=").concat(appname, "&startapp=").concat(startapp);
}
var DesktopConnectionModal = function DesktopConnectionModal(props) {
  var _createSignal65 = createSignal("mobile"),
    _createSignal66 = _slicedToArray(_createSignal65, 2),
    mode = _createSignal66[0],
    setMode = _createSignal66[1];
  var _createSignal67 = createSignal(false),
    _createSignal68 = _slicedToArray(_createSignal67, 2),
    connectionErrored = _createSignal68[0],
    setConnectionErrored = _createSignal68[1];
  var _createSignal69 = createSignal(),
    _createSignal70 = _slicedToArray(_createSignal69, 2),
    universalLink = _createSignal70[0],
    setUniversalLink = _createSignal70[1];
  var _createSignal71 = createSignal(true),
    _createSignal72 = _slicedToArray(_createSignal71, 2),
    firstClick = _createSignal72[0],
    setFirstClick = _createSignal72[1];
  var connector = useContext(ConnectorContext);
  var unsubscribe = connector.onStatusChange(function () {}, function () {
    if (props.wallet.appName !== AT_WALLET_APP_NAME) {
      setConnectionErrored(true);
    }
  });
  onCleanup(unsubscribe);
  var generateUniversalLink = function generateUniversalLink() {
    try {
      var universalLink2 = connector.connect({
        universalLink: props.wallet.universalLink,
        bridgeUrl: props.wallet.bridgeUrl
      }, props.additionalRequest);
      setUniversalLink(universalLink2);
    } catch (e2) {}
  };
  createEffect(function () {
    if (untrack(mode) !== "extension" && (supportsMobile(props.wallet) || supportsDesktop(props.wallet))) {
      generateUniversalLink();
    }
  });
  var onClickMobile = function onClickMobile() {
    setConnectionErrored(false);
    if (mode() === "extension") {
      generateUniversalLink();
    }
    setMode("mobile");
    setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
      openMethod: "qrcode"
    }));
  };
  var onClickDesktop = function onClickDesktop() {
    setConnectionErrored(false);
    if (mode() === "extension") {
      generateUniversalLink();
    }
    setMode("desktop");
    if (isTelegramUrl(universalLink())) {
      onClickTelegram();
    } else {
      var forceRedirect = !firstClick();
      setFirstClick(false);
      redirectToWallet(universalLink(), props.wallet.deepLink, {
        returnStrategy: appState.returnStrategy,
        forceRedirect: forceRedirect
      }, function (method) {
        setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
          openMethod: method
        }));
      });
    }
  };
  var onClickTelegram = function onClickTelegram() {
    var forceRedirect = !firstClick();
    setFirstClick(false);
    setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
      openMethod: "universal-link"
    }));
    redirectToTelegram(universalLink(), {
      returnStrategy: appState.returnStrategy,
      twaReturnUrl: appState.twaReturnUrl,
      forceRedirect: forceRedirect
    });
  };
  var onClickExtension = function onClickExtension() {
    setConnectionErrored(false);
    setMode("extension");
    if (isWalletInfoCurrentlyInjected(props.wallet)) {
      setLastSelectedWalletInfo(props.wallet);
      connector.connect({
        jsBridgeKey: props.wallet.jsBridgeKey
      }, props.additionalRequest);
    }
  };
  if (supportsMobile(props.wallet)) {
    onClickMobile();
  } else if (supportsExtension(props.wallet)) {
    onClickExtension();
  } else {
    onClickDesktop();
  }
  return createComponent(DesktopConnectionModalStyled, {
    "data-tc-wallets-modal-connection-desktop": "true",
    get children() {
      return [createComponent(Show, {
        get when() {
          return !props.backDisabled;
        },
        get children() {
          return createComponent(StyledIconButton$2, {
            icon: "arrow",
            onClick: function onClick() {
              return props.onBackClick();
            }
          });
        }
      }), createComponent(H1Styled$6, {
        get children() {
          return props.wallet.name;
        }
      }), createComponent(Show, {
        get when() {
          return mode() === "mobile";
        },
        get children() {
          return createComponent(H2Styled$4, {
            translationKey: "walletModal.desktopConnectionModal.scanQR",
            get translationValues() {
              return {
                name: props.wallet.name
              };
            },
            get children() {
              return ["Scan the QR code below with your phone\u2019s or ", createMemo(function () {
                return props.wallet.name;
              }), "\u2019s camera"];
            }
          });
        }
      }), createComponent(BodyStyled$1, {
        get qr() {
          return mode() === "mobile";
        },
        get children() {
          return createComponent(Switch, {
            get children() {
              return [createComponent(Match, {
                get when() {
                  return mode() === "mobile";
                },
                get children() {
                  return createComponent(QRCodeStyled$1, {
                    disableCopy: false,
                    get sourceUrl() {
                      return addReturnStrategy(universalLink(), "none");
                    },
                    get imageUrl() {
                      return props.wallet.imageUrl;
                    }
                  });
                }
              }), createComponent(Match, {
                get when() {
                  return connectionErrored();
                },
                get children() {
                  return [createComponent(ErrorIconStyled$1, {
                    size: "s"
                  }), createComponent(BodyTextStyled$1, {
                    translationKey: "walletModal.desktopConnectionModal.connectionDeclined",
                    children: "Connection declined"
                  }), createComponent(ButtonsContainerStyled$1, {
                    get children() {
                      return createComponent(Button, {
                        get leftIcon() {
                          return createComponent(RetryIcon, {});
                        },
                        get onClick() {
                          return mode() === "extension" ? onClickExtension : onClickDesktop;
                        },
                        get children() {
                          return createComponent(Translation, {
                            translationKey: "common.retry",
                            children: "Retry"
                          });
                        }
                      });
                    }
                  })];
                }
              }), createComponent(Match, {
                get when() {
                  return mode() === "extension";
                },
                get children() {
                  return [createComponent(Show, {
                    get when() {
                      return isWalletInfoCurrentlyInjected(props.wallet);
                    },
                    get children() {
                      return [createComponent(LoaderStyled$1, {
                        size: "s"
                      }), createComponent(BodyTextStyled$1, {
                        translationKey: "walletModal.desktopConnectionModal.continueInExtension",
                        get translationValues() {
                          return {
                            name: props.wallet.name
                          };
                        },
                        get children() {
                          return ["Continue in ", createMemo(function () {
                            return props.wallet.name;
                          }), " browser extension\u2026"];
                        }
                      }), createComponent(ButtonsContainerStyled$1, {
                        get children() {
                          return createComponent(Button, {
                            get leftIcon() {
                              return createComponent(RetryIcon, {});
                            },
                            onClick: onClickExtension,
                            get children() {
                              return createComponent(Translation, {
                                translationKey: "common.retry",
                                children: "Retry"
                              });
                            }
                          });
                        }
                      })];
                    }
                  }), createComponent(Show, {
                    get when() {
                      return !isWalletInfoCurrentlyInjected(props.wallet);
                    },
                    get children() {
                      return [createComponent(BodyTextStyled$1, {
                        translationKey: "walletModal.desktopConnectionModal.dontHaveExtension",
                        get translationValues() {
                          return {
                            name: props.wallet.name
                          };
                        },
                        get children() {
                          return ["Seems you don't have installed ", createMemo(function () {
                            return props.wallet.name;
                          }), " browser extension"];
                        }
                      }), createComponent(ButtonsContainerStyled$1, {
                        get children() {
                          return createComponent(Link, {
                            get href() {
                              return props.wallet.aboutUrl;
                            },
                            blank: true,
                            get children() {
                              return createComponent(Button, {
                                get rightIcon() {
                                  return createComponent(LinkIcon, {});
                                },
                                onClick: onClickExtension,
                                get children() {
                                  return createComponent(Translation, {
                                    translationKey: "walletModal.desktopConnectionModal.getWallet",
                                    get translationValues() {
                                      return {
                                        name: props.wallet.name
                                      };
                                    },
                                    get children() {
                                      return ["Get ", createMemo(function () {
                                        return props.wallet.name;
                                      })];
                                    }
                                  });
                                }
                              });
                            }
                          });
                        }
                      })];
                    }
                  })];
                }
              }), createComponent(Match, {
                get when() {
                  return mode() === "desktop";
                },
                get children() {
                  return [createComponent(LoaderIcon, {
                    size: "m"
                  }), createComponent(BodyTextStyled$1, {
                    translationKey: "walletModal.desktopConnectionModal.continueOnDesktop",
                    get translationValues() {
                      return {
                        name: props.wallet.name
                      };
                    },
                    get children() {
                      return ["Continue in ", createMemo(function () {
                        return props.wallet.name;
                      }), " on desktop\u2026"];
                    }
                  }), createComponent(ButtonsContainerStyled$1, {
                    get children() {
                      return [createComponent(Button, {
                        get leftIcon() {
                          return createComponent(RetryIcon, {});
                        },
                        onClick: onClickDesktop,
                        get children() {
                          return createComponent(Translation, {
                            translationKey: "common.retry",
                            children: "Retry"
                          });
                        }
                      }), createComponent(Link, {
                        get href() {
                          return props.wallet.aboutUrl;
                        },
                        blank: true,
                        get children() {
                          return createComponent(Button, {
                            get rightIcon() {
                              return createComponent(LinkIcon, {});
                            },
                            get children() {
                              return createComponent(Translation, {
                                translationKey: "walletModal.desktopConnectionModal.getWallet",
                                get translationValues() {
                                  return {
                                    name: props.wallet.name
                                  };
                                },
                                get children() {
                                  return ["Get ", createMemo(function () {
                                    return props.wallet.name;
                                  })];
                                }
                              });
                            }
                          });
                        }
                      })];
                    }
                  })];
                }
              })];
            }
          });
        }
      }), createComponent(Show, {
        get when() {
          return props.wallet.appName === AT_WALLET_APP_NAME;
        },
        get children() {
          return createComponent(TgButtonStyled, {
            get rightIcon() {
              return createComponent(TgImageStyled, {
                get src() {
                  return IMG.TG;
                }
              });
            },
            scale: "s",
            onClick: onClickTelegram,
            get children() {
              return createComponent(Translation, {
                translationKey: "walletModal.desktopConnectionModal.openWalletOnTelegram",
                children: "Open Wallet in Telegram on desktop"
              });
            }
          });
        }
      }), createComponent(Show, {
        get when() {
          return props.wallet.appName !== AT_WALLET_APP_NAME;
        },
        get children() {
          return createComponent(BottomButtonsContainerStyled, {
            get children() {
              return [createComponent(Show, {
                get when() {
                  return createMemo(function () {
                    return mode() !== "mobile";
                  })() && supportsMobile(props.wallet);
                },
                get children() {
                  return createComponent(FooterButton$1, {
                    appearance: "secondary",
                    get leftIcon() {
                      return createComponent(MobileIcon, {});
                    },
                    onClick: onClickMobile,
                    get children() {
                      return createComponent(Translation, {
                        translationKey: "common.mobile",
                        children: "Mobile"
                      });
                    }
                  });
                }
              }), createComponent(Show, {
                get when() {
                  return createMemo(function () {
                    return mode() !== "extension";
                  })() && supportsExtension(props.wallet);
                },
                get children() {
                  return createComponent(FooterButton$1, {
                    appearance: "secondary",
                    get leftIcon() {
                      return createComponent(BrowserIcon, {});
                    },
                    onClick: onClickExtension,
                    get children() {
                      return createComponent(Translation, {
                        translationKey: "common.browserExtension",
                        children: "Browser Extension"
                      });
                    }
                  });
                }
              }), createComponent(Show, {
                get when() {
                  return createMemo(function () {
                    return mode() !== "desktop";
                  })() && supportsDesktop(props.wallet);
                },
                get children() {
                  return createComponent(FooterButton$1, {
                    appearance: "secondary",
                    get leftIcon() {
                      return createComponent(DesktopIcon, {});
                    },
                    onClick: onClickDesktop,
                    get children() {
                      return createComponent(Translation, {
                        translationKey: "common.desktop",
                        children: "Desktop"
                      });
                    }
                  });
                }
              })];
            }
          });
        }
      })];
    }
  });
};
var InfoModalStyled = styled.div(_templateObject84 || (_templateObject84 = _taggedTemplateLiteral([""])));
var StyledIconButton$1 = styled(IconButton)(_templateObject85 || (_templateObject85 = _taggedTemplateLiteral(["\n    position: absolute;\n    top: 16px;\n    left: 16px;\n"])));
var H1Styled$5 = styled(H1)(_templateObject86 || (_templateObject86 = _taggedTemplateLiteral(["\n    margin-bottom: 18px;\n"])));
var InfoBlock = styled.div(_templateObject87 || (_templateObject87 = _taggedTemplateLiteral(["\n    padding: 16px 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n"])));
var InfoBlockIconClass = u(_templateObject88 || (_templateObject88 = _taggedTemplateLiteral(["\n    margin-bottom: 12px;\n"])));
var H3Styled = styled(H3)(_templateObject89 || (_templateObject89 = _taggedTemplateLiteral(["\n    text-align: center;\n    margin-bottom: 4px;\n"])));
var TextStyled$1 = styled(Text)(_templateObject90 || (_templateObject90 = _taggedTemplateLiteral(["\n    text-align: center;\n    max-width: 352px;\n    color: ", ";\n"])), function (props) {
  return props.theme.colors.text.secondary;
});
var ButtonsBlock = styled.div(_templateObject91 || (_templateObject91 = _taggedTemplateLiteral(["\n    padding: 16px 24px 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 8px;\n"])));
var LINKS = {
  GET_A_WALLET: "https://ton.org/wallets?filters[wallet_features][slug][$in]=dapp-auth&pagination[limit]=-1"
};
var InfoModal = function InfoModal(props) {
  return createComponent(InfoModalStyled, {
    "data-tc-wallets-modal-info": "true",
    get children() {
      return [createComponent(StyledIconButton$1, {
        icon: "arrow",
        onClick: function onClick() {
          return props.onBackClick();
        }
      }), createComponent(H1Styled$5, {
        translationKey: "walletModal.infoModal.whatIsAWallet",
        children: "What is a wallet"
      }), createComponent(ScrollContainer, {
        get children() {
          return [createComponent(InfoBlock, {
            get children() {
              return [createComponent(SecurityIcon, {
                "class": InfoBlockIconClass
              }), createComponent(H3Styled, {
                translationKey: "walletModal.infoModal.secureDigitalAssets",
                children: "Secure digital assets storage"
              }), createComponent(TextStyled$1, {
                translationKey: "walletModal.infoModal.walletProtects",
                children: "A wallet protects and manages your digital assets including TON, tokens and collectables."
              })];
            }
          }), createComponent(InfoBlock, {
            get children() {
              return [createComponent(PersonalityIcon, {
                "class": InfoBlockIconClass
              }), createComponent(H3Styled, {
                translationKey: "walletModal.infoModal.controlIdentity",
                children: "Control your Web3 identity"
              }), createComponent(TextStyled$1, {
                translationKey: "walletModal.infoModal.manageIdentity",
                children: "Manage your digital identity and access decentralized applications with ease. Maintain control over your data and engage securely in the blockchain ecosystem."
              })];
            }
          }), createComponent(InfoBlock, {
            get children() {
              return [createComponent(SwapIcon, {
                "class": InfoBlockIconClass
              }), createComponent(H3Styled, {
                translationKey: "walletModal.infoModal.effortlessCryptoTransactions",
                children: "Effortless crypto transactions"
              }), createComponent(TextStyled$1, {
                translationKey: "walletModal.infoModal.easilySend",
                children: "Easily send, receive, monitor your cryptocurrencies. Streamline your operations with decentralized applications."
              })];
            }
          }), createComponent(ButtonsBlock, {
            get children() {
              return createComponent(Link, {
                get href() {
                  return LINKS.GET_A_WALLET;
                },
                blank: true,
                get children() {
                  return createComponent(Button, {
                    get rightIcon() {
                      return createComponent(WalletIcon, {});
                    },
                    get children() {
                      return createComponent(Translation, {
                        translationKey: "walletModal.infoModal.getAWallet",
                        children: "Get a Wallet"
                      });
                    }
                  });
                }
              });
            }
          })];
        }
      })];
    }
  });
};
var MobileConnectionModalStyled = styled.div(_templateObject92 || (_templateObject92 = _taggedTemplateLiteral([""])));
var BodyStyled = styled.div(_templateObject93 || (_templateObject93 = _taggedTemplateLiteral(["\n    flex: 1;\n    margin-top: 18px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 232px;\n"])));
var H1Styled$4 = styled(H1)(_templateObject94 || (_templateObject94 = _taggedTemplateLiteral(["\n    max-width: 262px;\n    margin: 0 auto 8px;\n"])));
var StyledIconButton = styled(IconButton)(_templateObject95 || (_templateObject95 = _taggedTemplateLiteral(["\n    position: absolute;\n    top: 16px;\n    left: 16px;\n"])));
var FooterStyled = styled.div(_templateObject96 || (_templateObject96 = _taggedTemplateLiteral(["\n    padding: 16px;\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    border-top: 0.5px solid ", ";\n"])), function (props) {
  return rgba(props.theme.colors.icon.secondary, 0.2);
});
var ImageStyled = styled(Image)(_templateObject97 || (_templateObject97 = _taggedTemplateLiteral(["\n    width: 36px;\n    height: 36px;\n    border-radius: 10px;\n"])));
var FooterButton = styled(Link)(_templateObject98 || (_templateObject98 = _taggedTemplateLiteral(["\n    margin-left: auto;\n"])));
var LoaderStyled = styled(LoaderIcon)(_templateObject99 || (_templateObject99 = _taggedTemplateLiteral(["\n    margin-bottom: 18px;\n    margin-top: 2px;\n"])));
var ErrorIconStyled = styled(ErrorIcon)(_templateObject100 || (_templateObject100 = _taggedTemplateLiteral(["\n    margin-bottom: 16px;\n"])));
var BodyTextStyled = styled(H2)(_templateObject101 || (_templateObject101 = _taggedTemplateLiteral(["\n    color: ", ";\n    text-align: center;\n    margin-bottom: 20px;\n"])), function (props) {
  return props.theme.colors.text.secondary;
});
var ButtonsContainerStyled = styled.div(_templateObject102 || (_templateObject102 = _taggedTemplateLiteral(["\n    display: flex;\n    justify-content: center;\n    gap: 8px;\n    padding-bottom: 16px;\n"])));
var H1Styled$3 = styled(H1)(_templateObject103 || (_templateObject103 = _taggedTemplateLiteral(["\n    margin-bottom: 2px;\n    padding: 0 64px;\n"])));
var H2Styled$3 = styled(H2)(_templateObject104 || (_templateObject104 = _taggedTemplateLiteral(["\n    margin-bottom: 20px;\n    padding: 0 64px;\n    min-height: 44px;\n"])));
var QrCodeWrapper$1 = styled.div(_templateObject105 || (_templateObject105 = _taggedTemplateLiteral(["\n    padding: 0 24px 24px;\n"])));
var MobileConnectionQR = function MobileConnectionQR(props) {
  return [createComponent(H1Styled$3, {
    get children() {
      return props.walletInfo.name;
    }
  }), createComponent(H2Styled$3, {
    translationKey: "walletModal.mobileConnectionModal.scanQR",
    get translationValues() {
      return {
        name: props.walletInfo.name
      };
    },
    get children() {
      return ["Scan the QR code below with your phone\u2019s or ", createMemo(function () {
        return props.walletInfo.name;
      }), "\u2019s camera"];
    }
  }), createComponent(QrCodeWrapper$1, {
    get children() {
      return createComponent(QRCode, {
        get imageUrl() {
          return props.walletInfo.imageUrl;
        },
        get sourceUrl() {
          return addReturnStrategy(props.universalLink, "none");
        },
        disableCopy: true
      });
    }
  })];
};
var MobileConnectionModal = function MobileConnectionModal(props) {
  var theme = useTheme();
  var _createSignal73 = createSignal(true),
    _createSignal74 = _slicedToArray(_createSignal73, 2),
    firstClick = _createSignal74[0],
    setFirstClick = _createSignal74[1];
  var _createSignal75 = createSignal(false),
    _createSignal76 = _slicedToArray(_createSignal75, 2),
    showQR = _createSignal76[0],
    setShowQR = _createSignal76[1];
  var _createSignal77 = createSignal(false),
    _createSignal78 = _slicedToArray(_createSignal77, 2),
    connectionErrored = _createSignal78[0],
    setConnectionErrored = _createSignal78[1];
  var connector = useContext(ConnectorContext);
  var unsubscribe = connector.onStatusChange(function () {}, function () {
    setConnectionErrored(true);
  });
  var universalLink = createMemo(function () {
    return connector.connect({
      universalLink: props.wallet.universalLink,
      bridgeUrl: props.wallet.bridgeUrl
    }, props.additionalRequest);
  });
  var onClickTelegram = function onClickTelegram() {
    var alwaysForceRedirect = true;
    setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
      openMethod: "universal-link"
    }));
    redirectToTelegram(universalLink(), {
      returnStrategy: appState.returnStrategy,
      twaReturnUrl: appState.twaReturnUrl,
      forceRedirect: alwaysForceRedirect
    });
  };
  var onRetry = function onRetry() {
    var currentUniversalLink = universalLink();
    if (isTelegramUrl(currentUniversalLink)) {
      return onClickTelegram();
    }
    setConnectionErrored(false);
    var forceRedirect = !firstClick();
    setFirstClick(false);
    redirectToWallet(universalLink(), props.wallet.deepLink, {
      returnStrategy: appState.returnStrategy,
      forceRedirect: forceRedirect
    }, function (method) {
      setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
        openMethod: method
      }));
    });
  };
  var onOpenQR = function onOpenQR() {
    setConnectionErrored(false);
    setShowQR(true);
    setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
      openMethod: "qrcode"
    }));
  };
  var onCloseQR = function onCloseQR() {
    setShowQR(false);
    setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
      openMethod: "universal-link"
    }));
  };
  var onBack = function onBack() {
    if (showQR()) {
      onCloseQR();
    } else {
      props.onBackClick();
    }
  };
  onCleanup(unsubscribe);
  onRetry();
  return createComponent(MobileConnectionModalStyled, {
    "data-tc-wallets-modal-connection-mobile": "true",
    get children() {
      return [createComponent(Show, {
        get when() {
          return !props.backDisabled || showQR();
        },
        get children() {
          return createComponent(StyledIconButton, {
            icon: "arrow",
            onClick: onBack
          });
        }
      }), createComponent(Show, {
        get when() {
          return showQR();
        },
        get children() {
          return createComponent(MobileConnectionQR, {
            get universalLink() {
              return universalLink();
            },
            get walletInfo() {
              return props.wallet;
            }
          });
        }
      }), createComponent(Show, {
        get when() {
          return !showQR();
        },
        get children() {
          return [createComponent(H1Styled$4, {
            get children() {
              return props.wallet.name;
            }
          }), createComponent(BodyStyled, {
            get children() {
              return [createComponent(Show, {
                get when() {
                  return connectionErrored();
                },
                get children() {
                  return [createComponent(ErrorIconStyled, {
                    size: "s"
                  }), createComponent(BodyTextStyled, {
                    translationKey: "walletModal.mobileConnectionModal.connectionDeclined",
                    children: "Connection declined"
                  }), createComponent(ButtonsContainerStyled, {
                    get children() {
                      return [createComponent(Button, {
                        get leftIcon() {
                          return createComponent(RetryIcon, {});
                        },
                        onClick: onRetry,
                        get children() {
                          return createComponent(Translation, {
                            translationKey: "common.retry",
                            children: "Retry"
                          });
                        }
                      }), createComponent(Button, {
                        get leftIcon() {
                          return createComponent(QRIcon, {
                            get fill() {
                              return theme.colors.accent;
                            }
                          });
                        },
                        onClick: onOpenQR,
                        get children() {
                          return createComponent(Translation, {
                            translationKey: "walletModal.mobileConnectionModal.showQR",
                            children: "Show QR Code"
                          });
                        }
                      })];
                    }
                  })];
                }
              }), createComponent(Show, {
                get when() {
                  return !connectionErrored();
                },
                get children() {
                  return [createComponent(LoaderStyled, {
                    size: "s"
                  }), createComponent(BodyTextStyled, {
                    translationKey: "walletModal.mobileConnectionModal.continueIn",
                    get translationValues() {
                      return {
                        name: props.wallet.name
                      };
                    },
                    get children() {
                      return ["Continue in ", createMemo(function () {
                        return props.wallet.name;
                      }), "\u2026"];
                    }
                  }), createComponent(ButtonsContainerStyled, {
                    get children() {
                      return [createComponent(Button, {
                        get leftIcon() {
                          return createComponent(RetryIcon, {});
                        },
                        onClick: onRetry,
                        get children() {
                          return createComponent(Translation, {
                            translationKey: "common.retry",
                            children: "Retry"
                          });
                        }
                      }), createComponent(Button, {
                        get leftIcon() {
                          return createComponent(QRIcon, {
                            get fill() {
                              return theme.colors.accent;
                            }
                          });
                        },
                        onClick: onOpenQR,
                        get children() {
                          return createComponent(Translation, {
                            translationKey: "walletModal.mobileConnectionModal.showQR",
                            children: "Show QR Code"
                          });
                        }
                      })];
                    }
                  })];
                }
              })];
            }
          }), createComponent(FooterStyled, {
            get children() {
              return [createComponent(ImageStyled, {
                get src() {
                  return props.wallet.imageUrl;
                }
              }), createComponent(H3, {
                get children() {
                  return props.wallet.name;
                }
              }), createComponent(FooterButton, {
                get href() {
                  return props.wallet.aboutUrl;
                },
                blank: true,
                get children() {
                  return createComponent(Button, {
                    get children() {
                      return createComponent(Translation, {
                        translationKey: "common.get",
                        children: "GET"
                      });
                    }
                  });
                }
              })];
            }
          })];
        }
      })];
    }
  });
};
var borders$1 = {
  m: "16px",
  s: "12px",
  none: "0"
};
var tgBorders = {
  m: "6px",
  s: "6px",
  none: "0"
};
var UlStyled = styled.ul(_templateObject106 || (_templateObject106 = _taggedTemplateLiteral(["\n    display: flex;\n    justify-content: space-between;\n    margin: 0 auto;\n    width: fit-content;\n    max-width: 100%;\n    min-width: 100%;\n    height: fit-content;\n    overflow-x: auto;\n    overflow-y: hidden;\n    padding: 0 13px 24px;\n\n    &&::-webkit-scrollbar {\n        display: none;\n    }\n\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n\n    > li {\n        height: fit-content;\n    }\n"])));
var OtherOptionButton = styled.li(_templateObject107 || (_templateObject107 = _taggedTemplateLiteral(["\n    width: 82px;\n    min-width: 82px;\n    height: 124px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 8px 4px;\n\n    text-align: center;\n    cursor: pointer;\n\n    transition: transform 0.1s ease-in-out;\n\n    ", " {\n        &:hover {\n            transform: scale(1.04);\n        }\n    }\n\n    &:active {\n        transform: scale(0.96);\n    }\n\n    ", " {\n        &:active {\n            transform: scale(0.92);\n        }\n    }\n"])), mediaNotTouch, mediaTouch);
var Divider = styled.div(_templateObject108 || (_templateObject108 = _taggedTemplateLiteral(["\n    width: 1px;\n    margin: 0 10px;\n    height: 24px;\n    position: relative;\n    top: 26px;\n\n    background-color: ", ";\n    opacity: 0.2;\n"])), function (props) {
  return props.theme.colors.icon.secondary;
});
var IconContainer = styled.div(_templateObject109 || (_templateObject109 = _taggedTemplateLiteral(["\n    width: 60px;\n    height: 60px;\n    border-radius: ", ";\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    background-color: ", ";\n    margin-bottom: 8px;\n"])), function (props) {
  return borders$1[props.theme.borderRadius];
}, function (props) {
  return props.theme.colors.background.tint;
});
var H1Styled$2 = styled(H1)(_templateObject110 || (_templateObject110 = _taggedTemplateLiteral(["\n    margin-top: 38px;\n    margin-bottom: 4px;\n    padding: 0 24px;\n"])));
var H2Styled$2 = styled(H2)(_templateObject111 || (_templateObject111 = _taggedTemplateLiteral(["\n    margin-bottom: 24px;\n    padding: 0 24px;\n    min-height: 44px;\n    max-width: ", "px;\n    margin-left: ", ";\n    margin-right: ", ";\n"])), function (props) {
  return props.maxWidth;
}, function (props) {
  return props.maxWidth ? "auto" : "0px";
}, function (props) {
  return props.maxWidth ? "auto" : "0px";
});
styled(Button)(_templateObject112 || (_templateObject112 = _taggedTemplateLiteral(["\n    display: block;\n    margin: 0 auto;\n"])));
var TelegramButtonStyled = styled(Button)(_templateObject113 || (_templateObject113 = _taggedTemplateLiteral(["\n    margin: 0 24px 24px;\n    width: calc(100% - 48px);\n    border-radius: ", ";\n    padding: 14px 16px 14px 14px;\n    background-color: ", ";\n\n    color: ", ";\n    font-weight: 510;\n    font-size: 16px;\n    line-height: 20px;\n"])), function (props) {
  return borders$1[props.theme.borderRadius];
}, function (props) {
  return props.theme.colors.telegramButton;
}, function (props) {
  return props.theme.colors.constant.white;
});
var TGImageStyled = styled(Image)(_templateObject114 || (_templateObject114 = _taggedTemplateLiteral(["\n    background-color: transparent;\n    border-radius: ", ";\n    width: 24px;\n    height: 24px;\n"])), function (props) {
  return tgBorders[props.theme.borderRadius];
});
var StyledLeftActionButton = styled(IconButton)(_templateObject115 || (_templateObject115 = _taggedTemplateLiteral(["\n    position: absolute;\n    top: 16px;\n    left: 16px;\n"])));
var H1Styled$1 = styled(H1)(_templateObject116 || (_templateObject116 = _taggedTemplateLiteral(["\n    margin-bottom: 2px;\n    padding: 0 64px;\n"])));
var H2Styled$1 = styled(H2)(_templateObject117 || (_templateObject117 = _taggedTemplateLiteral(["\n    margin-bottom: 20px;\n    padding: 0 64px;\n"])));
var QrCodeWrapper = styled.div(_templateObject118 || (_templateObject118 = _taggedTemplateLiteral(["\n    padding: 0 24px 24px;\n"])));
var MobileUniversalQR = function MobileUniversalQR(props) {
  return [createComponent(H1Styled$1, {
    translationKey: "walletModal.mobileUniversalModal.connectYourWallet",
    children: "Connect your wallet"
  }), createComponent(H2Styled$1, {
    translationKey: "walletModal.mobileUniversalModal.scan",
    children: "Scan with your mobile wallet"
  }), createComponent(QrCodeWrapper, {
    get children() {
      return createComponent(QRCode, {
        get imageUrl() {
          return IMG.TON;
        },
        get sourceUrl() {
          return addReturnStrategy(props.universalLink, "none");
        },
        disableCopy: true
      });
    }
  })];
};
function getUniqueBridges(walletsList) {
  var uniqueBridges = new Set(walletsList.filter(isWalletInfoRemote).map(function (item) {
    return item.bridgeUrl;
  }));
  return Array.from(uniqueBridges).map(function (bridgeUrl) {
    return {
      bridgeUrl: bridgeUrl
    };
  });
}
function bridgesIsEqual(left, right) {
  var leftSet = new Set(left == null ? void 0 : left.map(function (i2) {
    return i2.bridgeUrl;
  }));
  var rightSet = new Set(right == null ? void 0 : right.map(function (i2) {
    return i2.bridgeUrl;
  }));
  return leftSet.size === rightSet.size && _toConsumableArray(leftSet).every(function (value) {
    return rightSet.has(value);
  });
}
var _tmpl$$1 = /* @__PURE__ */template$1("<li></li>"),
  _tmpl$2 = /* @__PURE__ */template$1("<div data-tc-wallets-modal-universal-mobile=\"true\"></div>");
var MobileUniversalModal = function MobileUniversalModal(props) {
  var _createSignal79 = createSignal(false),
    _createSignal80 = _slicedToArray(_createSignal79, 2),
    showQR = _createSignal80[0],
    setShowQR = _createSignal80[1];
  var _createSignal81 = createSignal(true),
    _createSignal82 = _slicedToArray(_createSignal81, 2),
    firstClick = _createSignal82[0],
    setFirstClick = _createSignal82[1];
  var _createSignal83 = createSignal(null),
    _createSignal84 = _slicedToArray(_createSignal83, 2),
    universalLink = _createSignal84[0],
    setUniversalLink = _createSignal84[1];
  var connector = appState.connector;
  var walletsList = function walletsList() {
    return props.walletsList.filter(function (w) {
      return supportsMobile(w) && w.appName !== AT_WALLET_APP_NAME;
    });
  };
  var shouldShowMoreButton = function shouldShowMoreButton() {
    return walletsList().length > 7;
  };
  var walletsBridges = createMemo(function () {
    return getUniqueBridges(props.walletsList);
  }, null, {
    equals: bridgesIsEqual
  });
  var getUniversalLink = function getUniversalLink() {
    if (!universalLink()) {
      setUniversalLink(connector.connect(walletsBridges(), props.additionalRequest));
    }
    return universalLink();
  };
  setLastSelectedWalletInfo({
    openMethod: "universal-link"
  });
  var _createSignal85 = createSignal(void 0),
    _createSignal86 = _slicedToArray(_createSignal85, 2),
    isCopiedShown = _createSignal86[0],
    setIsCopiedShown = _createSignal86[1];
  var onCopy = function onCopy() {
    return __async(void 0, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
      var timeoutId;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            if (isCopiedShown() !== void 0) {
              clearTimeout(isCopiedShown());
            }
            _context7.next = 3;
            return copyToClipboard(getUniversalLink());
          case 3:
            timeoutId = setTimeout(function () {
              return setIsCopiedShown(void 0);
            }, 1500);
            setIsCopiedShown(timeoutId);
          case 5:
          case "end":
            return _context7.stop();
        }
      }, _callee7);
    }));
  };
  var onSelectUniversal = function onSelectUniversal() {
    var forceRedirect = !firstClick();
    setFirstClick(false);
    redirectToWallet(getUniversalLink(), void 0, {
      returnStrategy: appState.returnStrategy,
      forceRedirect: forceRedirect
    }, function (method) {
      setLastSelectedWalletInfo({
        openMethod: method
      });
    });
  };
  var onSelectTelegram = function onSelectTelegram() {
    setUniversalLink(null);
    var atWallet = props.walletsList.find(function (wallet) {
      return wallet.appName === AT_WALLET_APP_NAME;
    });
    if (!atWallet || !isWalletInfoRemote(atWallet)) {
      throw new TonConnectUIError("@wallet bot not found in the wallets list");
    }
    var walletLink = connector.connect({
      bridgeUrl: atWallet.bridgeUrl,
      universalLink: atWallet.universalLink
    }, props.additionalRequest);
    var forceRedirect = !firstClick();
    setFirstClick(false);
    redirectToTelegram(walletLink, {
      returnStrategy: appState.returnStrategy,
      twaReturnUrl: appState.twaReturnUrl,
      forceRedirect: forceRedirect
    });
  };
  var onOpenQR = function onOpenQR() {
    setShowQR(true);
    setLastSelectedWalletInfo({
      openMethod: "qrcode"
    });
  };
  var onCloseQR = function onCloseQR() {
    setShowQR(false);
    setLastSelectedWalletInfo({
      openMethod: "universal-link"
    });
  };
  return function () {
    var _el$ = _tmpl$2.cloneNode(true);
    insert(_el$, createComponent(Show, {
      get when() {
        return showQR();
      },
      get children() {
        return [createComponent(StyledLeftActionButton, {
          icon: "arrow",
          onClick: onCloseQR
        }), createComponent(MobileUniversalQR, {
          get universalLink() {
            return getUniversalLink();
          }
        })];
      }
    }), null);
    insert(_el$, createComponent(Show, {
      get when() {
        return !showQR();
      },
      get children() {
        return [createComponent(StyledLeftActionButton, {
          get icon() {
            return createComponent(QRIcon, {});
          },
          onClick: onOpenQR
        }), createComponent(H1Styled$2, {
          translationKey: "walletModal.mobileUniversalModal.connectYourWallet",
          children: "Connect your wallet"
        }), createComponent(H2Styled$2, {
          translationKey: "walletModal.mobileUniversalModal.openWalletOnTelegramOrSelect",
          maxWidth: 342,
          children: "Open Wallet in Telegram or select your wallet to connect"
        }), createComponent(TelegramButtonStyled, {
          get leftIcon() {
            return createComponent(AtWalletIcon, {});
          },
          get rightIcon() {
            return createComponent(TGImageStyled, {
              get src() {
                return IMG.TG;
              }
            });
          },
          onClick: onSelectTelegram,
          scale: "s",
          get children() {
            return createComponent(Translation, {
              translationKey: "walletModal.mobileUniversalModal.openWalletOnTelegram",
              children: "Open Wallet in Telegram"
            });
          }
        }), createComponent(UlStyled, {
          get children() {
            return [createComponent(For, {
              get each() {
                return createMemo(function () {
                  return !!shouldShowMoreButton();
                })() ? walletsList().slice(0, 4) : walletsList();
              },
              children: function children(wallet) {
                return function () {
                  var _el$3 = _tmpl$$1.cloneNode(true);
                  insert(_el$3, createComponent(WalletItem, {
                    get icon() {
                      return wallet.imageUrl;
                    },
                    get name() {
                      return wallet.name;
                    },
                    onClick: function onClick() {
                      return props.onSelect(wallet);
                    }
                  }));
                  return _el$3;
                }();
              }
            }), createComponent(Show, {
              get when() {
                return shouldShowMoreButton();
              },
              get children() {
                var _el$2 = _tmpl$$1.cloneNode(true);
                insert(_el$2, createComponent(FourWalletsItem, {
                  labelLine1: "View all",
                  labelLine2: "wallets",
                  get images() {
                    return walletsList().slice(3, 7).map(function (i2) {
                      return i2.imageUrl;
                    });
                  },
                  onClick: function onClick() {
                    return props.onSelectAllWallets();
                  }
                }));
                return _el$2;
              }
            }), createComponent(Divider, {
              children: "\xA0"
            }), createComponent(OtherOptionButton, {
              onClick: onSelectUniversal,
              get children() {
                return [createComponent(IconContainer, {
                  get children() {
                    return createComponent(LongArrowIcon, {});
                  }
                }), createComponent(Text, {
                  fontWeight: 590,
                  translationKey: "walletModal.mobileUniversalModal.openLink",
                  children: "Open Link"
                })];
              }
            }), createComponent(OtherOptionButton, {
              onClick: onCopy,
              get children() {
                return [createComponent(IconContainer, {
                  get children() {
                    return createMemo(function () {
                      return isCopiedShown() !== void 0;
                    })() ? createComponent(DoneIcon, {}) : createComponent(CopyLightIcon, {});
                  }
                }), createComponent(Text, {
                  fontWeight: 590,
                  get translationKey() {
                    return isCopiedShown() !== void 0 ? "common.copied" : "common.copyLink";
                  },
                  get children() {
                    return isCopiedShown() !== void 0 ? "Copied" : "Copy Link";
                  }
                })];
              }
            })];
          }
        })];
      }
    }), null);
    return _el$;
  }();
};
var borders = {
  m: "16px",
  s: "8px",
  none: "0"
};
var hoverBorders = {
  m: "8px",
  s: "4px",
  none: "0"
};
var DesktopUniversalModalStyled = styled.div(_templateObject119 || (_templateObject119 = _taggedTemplateLiteral(["\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding-bottom: 16px;\n"])));
var H2Styled = styled(H2)(_templateObject120 || (_templateObject120 = _taggedTemplateLiteral(["\n    max-width: 320px;\n    margin-top: 2px;\n    margin-bottom: 20px;\n"])));
var H2AvailableWalletsStyled = styled(H2)(_templateObject121 || (_templateObject121 = _taggedTemplateLiteral(["\n    margin-bottom: 16px;\n"])));
var QRCodeStyled = styled(QRCode)(_templateObject122 || (_templateObject122 = _taggedTemplateLiteral(["\n    margin-bottom: 24px;\n"])));
var WalletsContainerStyled = styled.ul(_templateObject123 || (_templateObject123 = _taggedTemplateLiteral(["\n    display: flex;\n"])));
styled.div(_templateObject124 || (_templateObject124 = _taggedTemplateLiteral(["\n    display: flex;\n    gap: 16px;\n    width: 100%;\n"])));
styled(Button)(_templateObject125 || (_templateObject125 = _taggedTemplateLiteral(["\n    position: relative;\n    font-size: 16px;\n    line-height: 20px;\n    width: 100%;\n    padding: 0 16px;\n    height: 56px;\n    border-radius: ", ";\n\n    &:hover {\n        ", "\n    }\n\n    &:active {\n        ", "\n    }\n"])), function (props) {
  return borders[props.theme.borderRadius];
}, function (props) {
  return props.disableEventsAnimation ? "transform: unset;" : "";
}, function (props) {
  return props.disableEventsAnimation ? "transform: unset;" : "";
});
styled.ul(_templateObject126 || (_templateObject126 = _taggedTemplateLiteral(["\n    position: absolute;\n    bottom: 100%;\n    left: 0;\n    margin: 0;\n    padding: 8px;\n    width: 188px;\n    transform: translateY(-16px);\n\n    background-color: ", ";\n    border-radius: ", ";\n    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);\n"])), function (props) {
  return props.theme.colors.background.primary;
}, function (props) {
  return borders[props.theme.borderRadius];
});
styled.li(_templateObject127 || (_templateObject127 = _taggedTemplateLiteral(["\n    padding: 8px;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    cursor: pointer;\n    border-radius: ", ";\n\n    transition: background-color, transform 0.1s ease-in-out;\n\n    &:hover {\n        background-color: ", ";\n    }\n\n    &:active {\n        transform: scale(0.96);\n    }\n"])), function (props) {
  return hoverBorders[props.theme.borderRadius];
}, function (props) {
  return props.theme.colors.background.secondary;
});
styled(Image)(_templateObject128 || (_templateObject128 = _taggedTemplateLiteral(["\n    width: 24px;\n    height: 24px;\n\n    border-radius: 6px;\n"])));
styled.div(_templateObject129 || (_templateObject129 = _taggedTemplateLiteral(["\n    margin-top: 23px;\n    margin-bottom: 1px;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n"])));
styled(Text)(_templateObject130 || (_templateObject130 = _taggedTemplateLiteral(["\n    color: ", ";\n    font-size: 16px;\n"])), function (props) {
  return props.theme.colors.text.secondary;
});
var _tmpl$ = /* @__PURE__ */template$1("<li></li>");
var DesktopUniversalModal = function DesktopUniversalModal(props) {
  var _createSignal87 = createSignal(false),
    _createSignal88 = _slicedToArray(_createSignal87, 2),
    popupOpened = _createSignal88[0],
    setPopupOpened = _createSignal88[1];
  var connector = appState.connector;
  var walletsBridges = createMemo(function () {
    return getUniqueBridges(props.walletsList);
  }, null, {
    equals: bridgesIsEqual
  });
  setLastSelectedWalletInfo({
    openMethod: "qrcode"
  });
  var request = createMemo(function () {
    return connector.connect(walletsBridges(), props.additionalRequest);
  });
  return createComponent(DesktopUniversalModalStyled, {
    onClick: function onClick() {
      return setPopupOpened(false);
    },
    "data-tc-wallets-modal-universal-desktop": "true",
    get children() {
      return [createComponent(H1, {
        translationKey: "walletModal.desktopUniversalModal.connectYourWallet",
        children: "Connect your wallet"
      }), createComponent(H2Styled, {
        translationKey: "walletModal.desktopUniversalModal.scan",
        children: "Scan with your mobile wallet"
      }), createComponent(QRCodeStyled, {
        get sourceUrl() {
          return addReturnStrategy(request(), "none");
        },
        get disableCopy() {
          return popupOpened();
        },
        get imageUrl() {
          return IMG.TON;
        }
      }), createComponent(H2AvailableWalletsStyled, {
        translationKey: "walletModal.desktopUniversalModal.availableWallets",
        children: "Available wallets"
      }), createComponent(WalletsContainerStyled, {
        get children() {
          return [createComponent(For, {
            get each() {
              return props.walletsList.slice(0, 3);
            },
            children: function children(wallet) {
              return function () {
                var _el$ = _tmpl$.cloneNode(true);
                insert(_el$, createComponent(WalletLabeledItem, {
                  wallet: wallet,
                  onClick: function onClick() {
                    return props.onSelect(wallet);
                  }
                }));
                return _el$;
              }();
            }
          }), createComponent(FourWalletsItem, {
            labelLine1: "View all",
            labelLine2: "wallets",
            get images() {
              return props.walletsList.slice(3, 7).map(function (i2) {
                return i2.imageUrl;
              });
            },
            onClick: function onClick() {
              return props.onSelectAllWallets();
            }
          })];
        }
      })];
    }
  });
};
var WalletsModal = function WalletsModal() {
  var locale = useI18n()[1].locale;
  createEffect(function () {
    return locale(appState.language);
  });
  createEffect(function () {
    if (getWalletsModalIsOpened()) {
      updateIsMobile();
    } else {
      setSelectedWalletInfo(null);
      setSelectedTab("universal");
      setInfoTab(false);
    }
  });
  var connector = useContext(ConnectorContext);
  var tonConnectUI = useContext(TonConnectUiContext);
  var _createResource = createResource(function () {
      return tonConnectUI.getWallets();
    }),
    _createResource2 = _slicedToArray(_createResource, 1),
    fetchedWalletsList = _createResource2[0];
  var _createSignal89 = createSignal(null),
    _createSignal90 = _slicedToArray(_createSignal89, 2),
    selectedWalletInfo = _createSignal90[0],
    setSelectedWalletInfo = _createSignal90[1];
  var _createSignal91 = createSignal("universal"),
    _createSignal92 = _slicedToArray(_createSignal91, 2),
    selectedTab = _createSignal92[0],
    setSelectedTab = _createSignal92[1];
  var _createSignal93 = createSignal(false),
    _createSignal94 = _slicedToArray(_createSignal93, 2),
    infoTab = _createSignal94[0],
    setInfoTab = _createSignal94[1];
  var walletsList = createMemo(function () {
    if (fetchedWalletsList.state !== "ready") {
      return null;
    }
    var walletsList2 = applyWalletsListConfiguration(fetchedWalletsList(), appState.walletsListConfiguration);
    var injectedWallets = walletsList2.filter(isWalletInfoCurrentlyInjected);
    var notInjectedWallets = walletsList2.filter(function (w) {
      return !isWalletInfoCurrentlyInjected(w);
    });
    walletsList2 = (injectedWallets || []).concat(notInjectedWallets);
    var preferredWalletAppName = appState.preferredWalletAppName;
    var preferredWallet = walletsList2.find(function (item) {
      return eqWalletName(item, preferredWalletAppName);
    });
    var someWalletsWithSameName = walletsList2.filter(function (item) {
      return eqWalletName(item, preferredWalletAppName);
    }).length >= 2;
    if (preferredWalletAppName && preferredWallet && !someWalletsWithSameName) {
      walletsList2 = [__spreadProps(__spreadValues({}, preferredWallet), {
        isPreferred: true
      })].concat(walletsList2.filter(function (item) {
        return !eqWalletName(item, preferredWalletAppName);
      }));
    }
    var atWallet = walletsList2.find(function (item) {
      return eqWalletName(item, AT_WALLET_APP_NAME);
    });
    if (atWallet) {
      walletsList2 = [atWallet].concat(walletsList2.filter(function (item) {
        return !eqWalletName(item, AT_WALLET_APP_NAME);
      }));
    }
    return walletsList2;
  });
  var additionalRequestLoading = function additionalRequestLoading() {
    var _a2;
    return ((_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.state) === "loading";
  };
  var additionalRequest = createMemo(function () {
    var _a2;
    if (additionalRequestLoading()) {
      return void 0;
    }
    return (_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.value;
  });
  var _onClose = function onClose(closeReason) {
    tonConnectUI.closeModal(closeReason);
  };
  var unsubscribe = connector.onStatusChange(function (wallet) {
    if (wallet) {
      _onClose("wallet-selected");
    }
  });
  var onSelectAllWallets = function onSelectAllWallets() {
    setSelectedTab("all-wallets");
  };
  var onSelectUniversal = function onSelectUniversal() {
    setSelectedTab("universal");
  };
  var clearSelectedWalletInfo = function clearSelectedWalletInfo() {
    setSelectedWalletInfo(null);
  };
  onCleanup(function () {
    setSelectedWalletInfo(null);
    setInfoTab(false);
  });
  onCleanup(unsubscribe);
  return createComponent(StyledModal, {
    get opened() {
      return getWalletsModalIsOpened();
    },
    get enableAndroidBackHandler() {
      return appState.enableAndroidBackHandler;
    },
    onClose: function onClose() {
      return _onClose("action-cancelled");
    },
    onClickQuestion: function onClickQuestion() {
      return setInfoTab(function (v) {
        return !v;
      });
    },
    "data-tc-wallets-modal-container": "true",
    get children() {
      return [createComponent(Show, {
        get when() {
          return infoTab();
        },
        get children() {
          return createComponent(InfoModal, {
            onBackClick: function onBackClick() {
              return setInfoTab(false);
            }
          });
        }
      }), createComponent(Show, {
        get when() {
          return !infoTab();
        },
        get children() {
          return [createComponent(Show, {
            get when() {
              return additionalRequestLoading() || !walletsList();
            },
            get children() {
              return [createComponent(H1Styled$8, {
                translationKey: "walletModal.loading",
                children: "Wallets list is loading"
              }), createComponent(LoaderContainerStyled, {
                get children() {
                  return createComponent(LoaderIcon, {
                    size: "m"
                  });
                }
              })];
            }
          }), createComponent(Show, {
            get when() {
              return createMemo(function () {
                return !!!additionalRequestLoading();
              })() && walletsList();
            },
            get children() {
              return createComponent(Switch, {
                get children() {
                  return [createComponent(Match, {
                    get when() {
                      return selectedWalletInfo();
                    },
                    get children() {
                      return createComponent(Dynamic, {
                        get component() {
                          return isMobile() ? MobileConnectionModal : DesktopConnectionModal;
                        },
                        get wallet() {
                          return selectedWalletInfo();
                        },
                        get additionalRequest() {
                          return additionalRequest();
                        },
                        onBackClick: clearSelectedWalletInfo
                      });
                    }
                  }), createComponent(Match, {
                    get when() {
                      return selectedTab() === "universal";
                    },
                    get children() {
                      return createComponent(Dynamic, {
                        get component() {
                          return isMobile() ? MobileUniversalModal : DesktopUniversalModal;
                        },
                        onSelect: setSelectedWalletInfo,
                        get walletsList() {
                          return walletsList();
                        },
                        get additionalRequest() {
                          return additionalRequest();
                        },
                        onSelectAllWallets: onSelectAllWallets
                      });
                    }
                  }), createComponent(Match, {
                    get when() {
                      return selectedTab() === "all-wallets";
                    },
                    get children() {
                      return createComponent(AllWalletsListModal, {
                        get walletsList() {
                          return walletsList();
                        },
                        onBack: onSelectUniversal,
                        onSelect: setSelectedWalletInfo
                      });
                    }
                  })];
                }
              });
            }
          })];
        }
      })];
    }
  });
};
var ActionModalStyled = styled.div(_templateObject131 || (_templateObject131 = _taggedTemplateLiteral(["\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding-bottom: 8px;\n"])));
var H1Styled = styled(H1)(_templateObject132 || (_templateObject132 = _taggedTemplateLiteral(["\n    margin-top: 16px;\n"])));
var TextStyled = styled(Text)(_templateObject133 || (_templateObject133 = _taggedTemplateLiteral(["\n    font-weight: 510;\n    font-size: 16px;\n    line-height: 20px;\n    text-align: center;\n    max-width: 250px;\n\n    color: ", ";\n"])), function (props) {
  return props.theme.colors.text.secondary;
});
var LoaderButtonStyled = styled(Button)(_templateObject134 || (_templateObject134 = _taggedTemplateLiteral(["\n    min-width: 112px;\n    margin-top: 32px;\n"])));
var LoaderIconStyled = styled(LoaderIcon)(_templateObject135 || (_templateObject135 = _taggedTemplateLiteral(["\n    height: 16px;\n    width: 16px;\n"])));
var ButtonStyled = styled(Button)(_templateObject136 || (_templateObject136 = _taggedTemplateLiteral(["\n    margin-top: 32px;\n"])));
var ActionModal = function ActionModal(props) {
  var dataAttrs = useDataAttributes(props);
  var tonConnectUI = useContext(TonConnectUiContext);
  var _createSignal95 = createSignal(true),
    _createSignal96 = _slicedToArray(_createSignal95, 2),
    firstClick = _createSignal96[0],
    setFirstClick = _createSignal96[1];
  var _createSignal97 = createSignal(false),
    _createSignal98 = _slicedToArray(_createSignal97, 2),
    sent = _createSignal98[0],
    setSent = _createSignal98[1];
  createEffect(function () {
    var currentAction = action();
    setSent(!!currentAction && "sent" in currentAction && currentAction.sent);
  });
  var universalLink;
  if ((tonConnectUI == null ? void 0 : tonConnectUI.wallet) && "universalLink" in tonConnectUI.wallet && (tonConnectUI.wallet.openMethod === "universal-link" || isTelegramUrl(tonConnectUI.wallet.universalLink) && isInTMA())) {
    universalLink = tonConnectUI.wallet.universalLink;
  }
  var deepLink;
  if ((tonConnectUI == null ? void 0 : tonConnectUI.wallet) && "deepLink" in tonConnectUI.wallet && (tonConnectUI.wallet.openMethod === "custom-deeplink" || isTelegramUrl(tonConnectUI.wallet.deepLink) && isInTMA())) {
    deepLink = tonConnectUI.wallet.deepLink;
  }
  var onOpenWallet = function onOpenWallet() {
    var currentAction = action();
    var returnStrategy = "returnStrategy" in currentAction ? currentAction.returnStrategy : appState.returnStrategy;
    var forceRedirect = !firstClick();
    setFirstClick(false);
    if (isTelegramUrl(universalLink)) {
      redirectToTelegram(universalLink, {
        returnStrategy: returnStrategy,
        twaReturnUrl: "twaReturnUrl" in currentAction ? currentAction.twaReturnUrl : appState.twaReturnUrl,
        forceRedirect: forceRedirect
      });
    } else {
      redirectToWallet(universalLink, deepLink, {
        returnStrategy: returnStrategy,
        forceRedirect: forceRedirect
      }, function () {});
    }
  };
  return createComponent(ActionModalStyled, mergeProps(dataAttrs, {
    get children() {
      return [createMemo(function () {
        return props.icon;
      }), createComponent(H1Styled, {
        get translationKey() {
          return props.headerTranslationKey;
        },
        get translationValues() {
          return props.headerTranslationValues;
        }
      }), createComponent(TextStyled, {
        get translationKey() {
          return props.textTranslationKey;
        },
        get translationValues() {
          return props.textTranslationValues;
        }
      }), createComponent(Show, {
        get when() {
          return !sent() && (props.showButton === "open-wallet" && universalLink || props.showButton !== "open-wallet");
        },
        get children() {
          return createComponent(LoaderButtonStyled, {
            disabled: true,
            "data-tc-connect-button-loading": "true",
            get children() {
              return createComponent(LoaderIconStyled, {});
            }
          });
        }
      }), createComponent(Show, {
        get when() {
          return sent();
        },
        get children() {
          return [createComponent(Show, {
            get when() {
              return props.showButton !== "open-wallet";
            },
            get children() {
              return createComponent(ButtonStyled, {
                onClick: function onClick() {
                  return props.onClose();
                },
                get children() {
                  return createComponent(Translation, {
                    translationKey: "common.close",
                    children: "Close"
                  });
                }
              });
            }
          }), createComponent(Show, {
            get when() {
              return props.showButton === "open-wallet" && universalLink;
            },
            get children() {
              return createComponent(ButtonStyled, {
                onClick: onOpenWallet,
                get children() {
                  return createComponent(Translation, {
                    translationKey: "common.openWallet",
                    children: "Open wallet"
                  });
                }
              });
            }
          })];
        }
      })];
    }
  }));
};
var ConfirmTransactionModal = function ConfirmTransactionModal(props) {
  var tonConnectUI = useContext(TonConnectUiContext);
  var _useI18n15 = useI18n(),
    _useI18n16 = _slicedToArray(_useI18n15, 1),
    t2 = _useI18n16[0];
  var name = function name() {
    return tonConnectUI.wallet && "name" in tonConnectUI.wallet ? tonConnectUI.wallet.name : t2("common.yourWallet", {}, "Your wallet");
  };
  return createComponent(ActionModal, {
    headerTranslationKey: "actionModal.confirmTransaction.header",
    get headerTranslationValues() {
      return {
        name: name()
      };
    },
    textTranslationKey: "actionModal.confirmTransaction.text",
    get icon() {
      return createComponent(LoaderIcon, {
        size: "m"
      });
    },
    onClose: function onClose() {
      return props.onClose();
    },
    showButton: "open-wallet",
    "data-tc-confirm-modal": "true"
  });
};
var TransactionCanceledModal = function TransactionCanceledModal(props) {
  return createComponent(ActionModal, {
    headerTranslationKey: "actionModal.transactionCanceled.header",
    textTranslationKey: "actionModal.transactionCanceled.text",
    get icon() {
      return createComponent(ErrorIcon, {
        size: "m"
      });
    },
    onClose: function onClose() {
      return props.onClose();
    },
    "data-tc-transaction-canceled-modal": "true"
  });
};
var TransactionSentModal = function TransactionSentModal(props) {
  return createComponent(ActionModal, {
    headerTranslationKey: "actionModal.transactionSent.header",
    textTranslationKey: "actionModal.transactionSent.text",
    get icon() {
      return createComponent(SuccessIcon, {
        size: "m"
      });
    },
    onClose: function onClose() {
      return props.onClose();
    },
    "data-tc-transaction-sent-modal": "true"
  });
};
var ActionsModal = function ActionsModal() {
  return createComponent(Modal, {
    get opened() {
      var _a2;
      return createMemo(function () {
        return action() !== null;
      })() && ((_a2 = action()) == null ? void 0 : _a2.openModal) === true;
    },
    get enableAndroidBackHandler() {
      return appState.enableAndroidBackHandler;
    },
    onClose: function onClose() {
      return _setAction(null);
    },
    "data-tc-actions-modal-container": "true",
    get children() {
      return createComponent(Switch, {
        get children() {
          return [createComponent(Match, {
            get when() {
              return action().name === "transaction-sent";
            },
            get children() {
              return createComponent(TransactionSentModal, {
                onClose: function onClose() {
                  return _setAction(null);
                }
              });
            }
          }), createComponent(Match, {
            get when() {
              return action().name === "transaction-canceled";
            },
            get children() {
              return createComponent(TransactionCanceledModal, {
                onClose: function onClose() {
                  return _setAction(null);
                }
              });
            }
          }), createComponent(Match, {
            get when() {
              return action().name === "confirm-transaction";
            },
            get children() {
              return createComponent(ConfirmTransactionModal, {
                onClose: function onClose() {
                  return _setAction(null);
                }
              });
            }
          })];
        }
      });
    }
  });
};
var SingleWalletModal = function SingleWalletModal() {
  var locale = useI18n()[1].locale;
  createEffect(function () {
    return locale(appState.language);
  });
  createEffect(function () {
    if (getSingleWalletModalIsOpened()) {
      updateIsMobile();
    }
  });
  var connector = useContext(ConnectorContext);
  var tonConnectUI = useContext(TonConnectUiContext);
  var _createSignal99 = createSignal(false),
    _createSignal100 = _slicedToArray(_createSignal99, 2),
    infoTab = _createSignal100[0],
    setInfoTab = _createSignal100[1];
  var additionalRequestLoading = function additionalRequestLoading() {
    var _a2;
    return ((_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.state) === "loading";
  };
  var additionalRequest = createMemo(function () {
    var _a2;
    if (additionalRequestLoading()) {
      return void 0;
    }
    return (_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.value;
  });
  var _onClose2 = function onClose(closeReason) {
    tonConnectUI.closeSingleWalletModal(closeReason);
  };
  var unsubscribe = connector.onStatusChange(function (wallet) {
    if (wallet) {
      _onClose2("wallet-selected");
    }
  });
  onCleanup(unsubscribe);
  onCleanup(function () {
    setInfoTab(false);
  });
  return createComponent(StyledModal, {
    get opened() {
      return getSingleWalletModalIsOpened();
    },
    get enableAndroidBackHandler() {
      return appState.enableAndroidBackHandler;
    },
    onClose: function onClose() {
      return _onClose2("action-cancelled");
    },
    onClickQuestion: function onClickQuestion() {
      return setInfoTab(function (v) {
        return !v;
      });
    },
    "data-tc-wallets-modal-container": "true",
    get children() {
      return [createComponent(Show, {
        get when() {
          return infoTab();
        },
        get children() {
          return createComponent(InfoModal, {
            onBackClick: function onBackClick() {
              return setInfoTab(false);
            }
          });
        }
      }), createComponent(Show, {
        get when() {
          return !infoTab();
        },
        get children() {
          return [createComponent(Show, {
            get when() {
              return additionalRequestLoading();
            },
            get children() {
              return [createComponent(H1Styled$8, {
                translationKey: "walletModal.loading",
                children: "Wallets list is loading"
              }), createComponent(LoaderContainerStyled, {
                get children() {
                  return createComponent(LoaderIcon, {
                    size: "m"
                  });
                }
              })];
            }
          }), createComponent(Show, {
            get when() {
              return !additionalRequestLoading();
            },
            get children() {
              return createComponent(Dynamic, {
                get component() {
                  return isMobile() ? MobileConnectionModal : DesktopConnectionModal;
                },
                get wallet() {
                  return getSingleWalletModalWalletInfo();
                },
                get additionalRequest() {
                  return additionalRequest();
                },
                onBackClick: function onBackClick() {},
                backDisabled: true
              });
            }
          })];
        }
      })];
    }
  });
};
var App = function App(props) {
  var translations = createI18nContext(i18nDictionary, appState.language);
  defineStylesRoot();
  fixMobileSafariActiveTransition();
  return createComponent(I18nContext.Provider, {
    value: translations,
    get children() {
      return createComponent(TonConnectUiContext.Provider, {
        get value() {
          return props.tonConnectUI;
        },
        get children() {
          return createComponent(ConnectorContext.Provider, {
            get value() {
              return appState.connector;
            },
            get children() {
              return [createComponent(GlobalStyles, {}), createComponent(ThemeProvider, {
                theme: themeState,
                get children() {
                  return [createComponent(Show, {
                    get when() {
                      return appState.buttonRootId;
                    },
                    get children() {
                      return createComponent(Portal, {
                        get mount() {
                          return document.getElementById(appState.buttonRootId);
                        },
                        get children() {
                          return createComponent(AccountButton, {});
                        }
                      });
                    }
                  }), createComponent(Dynamic, {
                    component: globalStylesTag,
                    get children() {
                      return [createComponent(WalletsModal, {}), createComponent(SingleWalletModal, {}), createComponent(ActionsModal, {})];
                    }
                  })];
                }
              })];
            }
          });
        }
      });
    }
  });
};
var widgetController = {
  openWalletsModal: function openWalletsModal() {
    return void setTimeout(function () {
      return setWalletsModalState({
        status: "opened",
        closeReason: null
      });
    });
  },
  closeWalletsModal: function closeWalletsModal(reason) {
    return void setTimeout(function () {
      return setWalletsModalState({
        status: "closed",
        closeReason: reason
      });
    });
  },
  openSingleWalletModal: function openSingleWalletModal(walletInfo) {
    void setTimeout(function () {
      return setSingleWalletModalState({
        status: "opened",
        closeReason: null,
        walletInfo: walletInfo
      });
    });
  },
  closeSingleWalletModal: function closeSingleWalletModal(reason) {
    return void setTimeout(function () {
      return setSingleWalletModalState({
        status: "closed",
        closeReason: reason
      });
    });
  },
  setAction: function setAction(action2) {
    return void setTimeout(function () {
      return _setAction(action2);
    });
  },
  clearAction: function clearAction() {
    return void setTimeout(function () {
      return _setAction(null);
    });
  },
  getSelectedWalletInfo: function getSelectedWalletInfo() {
    return lastSelectedWalletInfo();
  },
  removeSelectedWalletInfo: function removeSelectedWalletInfo() {
    return setLastSelectedWalletInfo(null);
  },
  renderApp: function renderApp(root, tonConnectUI) {
    return render(function () {
      return createComponent(App, {
        tonConnectUI: tonConnectUI
      });
    }, document.getElementById(root));
  }
};
var WalletsModalManager = /*#__PURE__*/function () {
  function WalletsModalManager(options) {
    var _this5 = this;
    _classCallCheck(this, WalletsModalManager);
    __publicField(this, "connector");
    __publicField(this, "setConnectRequestParametersCallback");
    __publicField(this, "consumers", []);
    __publicField(this, "tracker");
    __publicField(this, "state", walletsModalState());
    this.connector = options.connector;
    this.tracker = options.tracker;
    this.setConnectRequestParametersCallback = options.setConnectRequestParametersCallback;
    createEffect(function () {
      var state = walletsModalState();
      _this5.state = state;
      _this5.consumers.forEach(function (consumer) {
        return consumer(state);
      });
    });
  }
  return _createClass(WalletsModalManager, [{
    key: "open",
    value: function open() {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
        var walletsList, embeddedWallet;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              this.tracker.trackConnectionStarted();
              _context8.next = 3;
              return this.connector.getWallets();
            case 3:
              walletsList = _context8.sent;
              embeddedWallet = walletsList.find(isWalletInfoCurrentlyEmbedded);
              if (!embeddedWallet) {
                _context8.next = 9;
                break;
              }
              return _context8.abrupt("return", this.connectEmbeddedWallet(embeddedWallet));
            case 9:
              return _context8.abrupt("return", this.openWalletsModal());
            case 10:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
    }
  }, {
    key: "close",
    value: function close() {
      var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "action-cancelled";
      if (reason === "action-cancelled") {
        this.tracker.trackConnectionError("Connection was cancelled");
      }
      widgetController.closeWalletsModal(reason);
    }
  }, {
    key: "onStateChange",
    value: function onStateChange(onChange) {
      var _this6 = this;
      this.consumers.push(onChange);
      return function () {
        _this6.consumers = _this6.consumers.filter(function (consumer) {
          return consumer !== onChange;
        });
      };
    }
  }, {
    key: "connectEmbeddedWallet",
    value: function connectEmbeddedWallet(embeddedWallet) {
      var _this7 = this;
      var connect = function connect(parameters) {
        setLastSelectedWalletInfo(embeddedWallet);
        _this7.connector.connect({
          jsBridgeKey: embeddedWallet.jsBridgeKey
        }, parameters);
      };
      var additionalRequest = appState.connectRequestParameters;
      if ((additionalRequest == null ? void 0 : additionalRequest.state) === "loading") {
        this.setConnectRequestParametersCallback(connect);
      } else {
        connect(additionalRequest == null ? void 0 : additionalRequest.value);
      }
    }
  }, {
    key: "openWalletsModal",
    value: function openWalletsModal() {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
        var _this8 = this;
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (isInTMA()) {
                sendExpand();
              }
              widgetController.openWalletsModal();
              return _context9.abrupt("return", new Promise(function (resolve) {
                var unsubscribe = _this8.onStateChange(function (state) {
                  var status = state.status;
                  if (status === "opened") {
                    unsubscribe();
                    resolve();
                  }
                });
              }));
            case 3:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
    }
  }]);
}();
var TransactionModalManager = /*#__PURE__*/function () {
  function TransactionModalManager(options) {
    var _this9 = this;
    _classCallCheck(this, TransactionModalManager);
    __publicField(this, "connector");
    __publicField(this, "consumers", []);
    this.connector = options.connector;
    createEffect(function () {
      var currentAction = action();
      _this9.consumers.forEach(function (consumer) {
        return consumer(currentAction);
      });
    });
  }
  return _createClass(TransactionModalManager, [{
    key: "onStateChange",
    value: function onStateChange(consumer) {
      var _this10 = this;
      this.consumers.push(consumer);
      return function () {
        _this10.consumers = _this10.consumers.filter(function (c2) {
          return c2 !== consumer;
        });
      };
    }
  }]);
}();
var SingleWalletModalManager = /*#__PURE__*/function () {
  function SingleWalletModalManager(options) {
    var _this11 = this;
    _classCallCheck(this, SingleWalletModalManager);
    __publicField(this, "connector");
    __publicField(this, "setConnectRequestParametersCallback");
    __publicField(this, "consumers", []);
    __publicField(this, "tracker");
    __publicField(this, "state", singleWalletModalState());
    this.connector = options.connector;
    this.tracker = options.tracker;
    this.setConnectRequestParametersCallback = options.setConnectRequestParametersCallback;
    createEffect(function () {
      var state = singleWalletModalState();
      _this11.state = state;
      _this11.consumers.forEach(function (consumer) {
        return consumer(state);
      });
    });
  }
  return _createClass(SingleWalletModalManager, [{
    key: "open",
    value: function open(wallet) {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        var fetchedWalletsList, walletsList, embeddedWallet, isEmbeddedWalletExist, externalWallets, externalWallet, isExternalWalletExist, error;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              this.tracker.trackConnectionStarted();
              _context10.next = 3;
              return this.connector.getWallets();
            case 3:
              fetchedWalletsList = _context10.sent;
              walletsList = applyWalletsListConfiguration(fetchedWalletsList, appState.walletsListConfiguration);
              embeddedWallet = walletsList.find(isWalletInfoCurrentlyEmbedded);
              isEmbeddedWalletExist = !!embeddedWallet;
              if (!isEmbeddedWalletExist) {
                _context10.next = 9;
                break;
              }
              return _context10.abrupt("return", this.connectEmbeddedWallet(embeddedWallet));
            case 9:
              externalWallets = walletsList.filter(isWalletInfoRemote);
              externalWallet = externalWallets.find(function (walletInfo) {
                return eqWalletName(walletInfo, wallet);
              });
              isExternalWalletExist = !!externalWallet;
              if (!isExternalWalletExist) {
                _context10.next = 14;
                break;
              }
              return _context10.abrupt("return", this.openSingleWalletModal(externalWallet));
            case 14:
              error = "Trying to open modal window with unknown wallet \"".concat(wallet, "\".");
              this.tracker.trackConnectionError(error);
              throw new TonConnectUIError(error);
            case 17:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
    }
  }, {
    key: "close",
    value: function close() {
      var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "action-cancelled";
      if (reason === "action-cancelled") {
        this.tracker.trackConnectionError("Connection was cancelled");
      }
      widgetController.closeSingleWalletModal("action-cancelled");
    }
  }, {
    key: "onStateChange",
    value: function onStateChange(onChange) {
      var _this12 = this;
      this.consumers.push(onChange);
      return function () {
        _this12.consumers = _this12.consumers.filter(function (consumer) {
          return consumer !== onChange;
        });
      };
    }
  }, {
    key: "connectEmbeddedWallet",
    value: function connectEmbeddedWallet(embeddedWallet) {
      var _this13 = this;
      var connect = function connect(parameters) {
        setLastSelectedWalletInfo(embeddedWallet);
        _this13.connector.connect({
          jsBridgeKey: embeddedWallet.jsBridgeKey
        }, parameters);
      };
      var additionalRequest = appState.connectRequestParameters;
      if ((additionalRequest == null ? void 0 : additionalRequest.state) === "loading") {
        this.setConnectRequestParametersCallback(connect);
      } else {
        connect(additionalRequest == null ? void 0 : additionalRequest.value);
      }
    }
  }, {
    key: "openSingleWalletModal",
    value: function openSingleWalletModal(wallet) {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        var _this14 = this;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (isInTMA()) {
                sendExpand();
              }
              widgetController.openSingleWalletModal(wallet);
              return _context11.abrupt("return", new Promise(function (resolve) {
                var unsubscribe = _this14.onStateChange(function (state) {
                  var status = state.status;
                  if (status === "opened") {
                    unsubscribe();
                    resolve();
                  }
                });
              }));
            case 3:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
    }
  }]);
}();
var TonConnectUITracker = /*#__PURE__*/function () {
  function TonConnectUITracker(options) {
    _classCallCheck(this, TonConnectUITracker);
    __publicField(this, "eventPrefix", "ton-connect-ui-");
    __publicField(this, "tonConnectUiVersion");
    __publicField(this, "tonConnectSdkVersion", null);
    __publicField(this, "eventDispatcher");
    var _a2;
    this.eventDispatcher = (_a2 = options == null ? void 0 : options.eventDispatcher) != null ? _a2 : new BrowserEventDispatcher();
    this.tonConnectUiVersion = options.tonConnectUiVersion;
    this.init()["catch"]();
  }
  return _createClass(TonConnectUITracker, [{
    key: "version",
    get: function get() {
      return createVersionInfo({
        ton_connect_sdk_lib: this.tonConnectSdkVersion,
        ton_connect_ui_lib: this.tonConnectUiVersion
      });
    }
  }, {
    key: "init",
    value: function init() {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.prev = 0;
              _context12.next = 3;
              return this.setRequestVersionHandler();
            case 3:
              _context12.next = 5;
              return this.requestTonConnectSdkVersion();
            case 5:
              this.tonConnectSdkVersion = _context12.sent;
              _context12.next = 10;
              break;
            case 8:
              _context12.prev = 8;
              _context12.t0 = _context12["catch"](0);
            case 10:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this, [[0, 8]]);
      }));
    }
  }, {
    key: "setRequestVersionHandler",
    value: function setRequestVersionHandler() {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
        var _this15 = this;
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.eventDispatcher.addEventListener("ton-connect-ui-request-version", function () {
                return __async(_this15, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
                  return _regeneratorRuntime().wrap(function _callee13$(_context13) {
                    while (1) switch (_context13.prev = _context13.next) {
                      case 0:
                        _context13.next = 2;
                        return this.eventDispatcher.dispatchEvent("ton-connect-ui-response-version", createResponseVersionEvent(this.tonConnectUiVersion));
                      case 2:
                      case "end":
                        return _context13.stop();
                    }
                  }, _callee13, this);
                }));
              });
            case 2:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
    }
  }, {
    key: "requestTonConnectSdkVersion",
    value: function requestTonConnectSdkVersion() {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
        var _this16 = this;
        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", new Promise(function (resolve, reject) {
                return __async(_this16, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
                  return _regeneratorRuntime().wrap(function _callee15$(_context15) {
                    while (1) switch (_context15.prev = _context15.next) {
                      case 0:
                        _context15.prev = 0;
                        _context15.next = 3;
                        return this.eventDispatcher.addEventListener("ton-connect-response-version", function (event) {
                          resolve(event.detail.version);
                        }, {
                          once: true
                        });
                      case 3:
                        _context15.next = 5;
                        return this.eventDispatcher.dispatchEvent("ton-connect-request-version", createRequestVersionEvent());
                      case 5:
                        _context15.next = 10;
                        break;
                      case 7:
                        _context15.prev = 7;
                        _context15.t0 = _context15["catch"](0);
                        reject(_context15.t0);
                      case 10:
                      case "end":
                        return _context15.stop();
                    }
                  }, _callee15, this, [[0, 7]]);
                }));
              }));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
    }
  }, {
    key: "dispatchUserActionEvent",
    value: function dispatchUserActionEvent(eventDetails) {
      var _a2;
      try {
        (_a2 = this.eventDispatcher) == null ? void 0 : _a2.dispatchEvent("".concat(this.eventPrefix).concat(eventDetails.type), eventDetails)["catch"]();
      } catch (e2) {}
    }
  }, {
    key: "trackConnectionStarted",
    value: function trackConnectionStarted() {
      try {
        for (var _len13 = arguments.length, args = new Array(_len13), _key14 = 0; _key14 < _len13; _key14++) {
          args[_key14] = arguments[_key14];
        }
        var event = createConnectionStartedEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e2) {}
    }
  }, {
    key: "trackConnectionCompleted",
    value: function trackConnectionCompleted() {
      try {
        for (var _len14 = arguments.length, args = new Array(_len14), _key15 = 0; _key15 < _len14; _key15++) {
          args[_key15] = arguments[_key15];
        }
        var event = createConnectionCompletedEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e2) {}
    }
  }, {
    key: "trackConnectionError",
    value: function trackConnectionError() {
      try {
        for (var _len15 = arguments.length, args = new Array(_len15), _key16 = 0; _key16 < _len15; _key16++) {
          args[_key16] = arguments[_key16];
        }
        var event = createConnectionErrorEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e2) {}
    }
  }, {
    key: "trackConnectionRestoringStarted",
    value: function trackConnectionRestoringStarted() {
      try {
        for (var _len16 = arguments.length, args = new Array(_len16), _key17 = 0; _key17 < _len16; _key17++) {
          args[_key17] = arguments[_key17];
        }
        var event = createConnectionRestoringStartedEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e2) {}
    }
  }, {
    key: "trackConnectionRestoringCompleted",
    value: function trackConnectionRestoringCompleted() {
      try {
        for (var _len17 = arguments.length, args = new Array(_len17), _key18 = 0; _key18 < _len17; _key18++) {
          args[_key18] = arguments[_key18];
        }
        var event = createConnectionRestoringCompletedEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e2) {}
    }
  }, {
    key: "trackConnectionRestoringError",
    value: function trackConnectionRestoringError() {
      try {
        for (var _len18 = arguments.length, args = new Array(_len18), _key19 = 0; _key19 < _len18; _key19++) {
          args[_key19] = arguments[_key19];
        }
        var event = createConnectionRestoringErrorEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e2) {}
    }
  }, {
    key: "trackDisconnection",
    value: function trackDisconnection() {
      try {
        for (var _len19 = arguments.length, args = new Array(_len19), _key20 = 0; _key20 < _len19; _key20++) {
          args[_key20] = arguments[_key20];
        }
        var event = createDisconnectionEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e2) {}
    }
  }, {
    key: "trackTransactionSentForSignature",
    value: function trackTransactionSentForSignature() {
      try {
        for (var _len20 = arguments.length, args = new Array(_len20), _key21 = 0; _key21 < _len20; _key21++) {
          args[_key21] = arguments[_key21];
        }
        var event = createTransactionSentForSignatureEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e2) {}
    }
  }, {
    key: "trackTransactionSigned",
    value: function trackTransactionSigned() {
      try {
        for (var _len21 = arguments.length, args = new Array(_len21), _key22 = 0; _key22 < _len21; _key22++) {
          args[_key22] = arguments[_key22];
        }
        var event = createTransactionSignedEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e2) {}
    }
  }, {
    key: "trackTransactionSigningFailed",
    value: function trackTransactionSigningFailed() {
      try {
        for (var _len22 = arguments.length, args = new Array(_len22), _key23 = 0; _key23 < _len22; _key23++) {
          args[_key23] = arguments[_key23];
        }
        var event = createTransactionSigningFailedEvent.apply(void 0, [this.version].concat(args));
        this.dispatchUserActionEvent(event);
      } catch (e2) {}
    }
  }]);
}();
var tonConnectUiVersion = "2.0.9";
var TonConnectUI = /*#__PURE__*/function () {
  function TonConnectUI(options) {
    var _this17 = this;
    _classCallCheck(this, TonConnectUI);
    __publicField(this, "walletInfoStorage", new WalletInfoStorage());
    __publicField(this, "preferredWalletStorage", new PreferredWalletStorage());
    __publicField(this, "tracker");
    __publicField(this, "walletInfo", null);
    __publicField(this, "systemThemeChangeUnsubscribe", null);
    __publicField(this, "actionsConfiguration");
    __publicField(this, "walletsList");
    __publicField(this, "connectRequestParametersCallback");
    __publicField(this, "connector");
    __publicField(this, "modal");
    __publicField(this, "singleWalletModal");
    __publicField(this, "transactionModal");
    __publicField(this, "connectionRestored", Promise.resolve(false));
    if (options && "connector" in options && options.connector) {
      this.connector = options.connector;
    } else if (options && "manifestUrl" in options && options.manifestUrl) {
      this.connector = new TonConnect({
        manifestUrl: options.manifestUrl,
        eventDispatcher: options == null ? void 0 : options.eventDispatcher
      });
    } else {
      throw new TonConnectUIError("You have to specify a `manifestUrl` or a `connector` in the options.");
    }
    this.tracker = new TonConnectUITracker({
      eventDispatcher: options == null ? void 0 : options.eventDispatcher,
      tonConnectUiVersion: tonConnectUiVersion
    });
    this.modal = new WalletsModalManager({
      connector: this.connector,
      tracker: this.tracker,
      setConnectRequestParametersCallback: function setConnectRequestParametersCallback(callback) {
        _this17.connectRequestParametersCallback = callback;
      }
    });
    this.singleWalletModal = new SingleWalletModalManager({
      connector: this.connector,
      tracker: this.tracker,
      setConnectRequestParametersCallback: function setConnectRequestParametersCallback(callback) {
        _this17.connectRequestParametersCallback = callback;
      }
    });
    this.transactionModal = new TransactionModalManager({
      connector: this.connector
    });
    this.walletsList = this.getWallets();
    this.walletsList.then(function (list) {
      return preloadImages(uniq(list.map(function (item) {
        return item.imageUrl;
      })));
    });
    var rootId = this.normalizeWidgetRoot(options == null ? void 0 : options.widgetRootId);
    this.subscribeToWalletChange();
    if ((options == null ? void 0 : options.restoreConnection) !== false) {
      this.connectionRestored = createMacrotaskAsync(function () {
        return __async(_this17, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
          return _regeneratorRuntime().wrap(function _callee17$(_context17) {
            while (1) switch (_context17.prev = _context17.next) {
              case 0:
                this.tracker.trackConnectionRestoringStarted();
                _context17.next = 3;
                return this.connector.restoreConnection();
              case 3:
                if (!this.connector.connected) {
                  this.tracker.trackConnectionRestoringError("Connection was not restored");
                  this.walletInfoStorage.removeWalletInfo();
                } else {
                  this.tracker.trackConnectionRestoringCompleted(this.wallet);
                }
                return _context17.abrupt("return", this.connector.connected);
              case 5:
              case "end":
                return _context17.stop();
            }
          }, _callee17, this);
        }));
      });
    }
    this.uiOptions = mergeOptions(options, {
      uiPreferences: {
        theme: "SYSTEM"
      }
    });
    var preferredWalletName = this.preferredWalletStorage.getPreferredWalletAppName();
    setAppState({
      connector: this.connector,
      preferredWalletAppName: preferredWalletName
    });
    widgetController.renderApp(rootId, this);
  }
  return _createClass(TonConnectUI, [{
    key: "connected",
    get: function get() {
      return this.connector.connected;
    }
  }, {
    key: "account",
    get: function get() {
      return this.connector.account;
    }
  }, {
    key: "wallet",
    get: function get() {
      if (!this.connector.wallet) {
        return null;
      }
      return __spreadValues(__spreadValues({}, this.connector.wallet), this.walletInfo);
    }
  }, {
    key: "uiOptions",
    set: function set(options) {
      var _a2, _b2, _c2, _d2, _e2;
      this.checkButtonRootExist(options.buttonRootId);
      this.actionsConfiguration = options.actionsConfiguration;
      if ((_a2 = options.uiPreferences) == null ? void 0 : _a2.theme) {
        if (((_b2 = options.uiPreferences) == null ? void 0 : _b2.theme) !== "SYSTEM") {
          (_c2 = this.systemThemeChangeUnsubscribe) == null ? void 0 : _c2.call(this);
          setTheme(options.uiPreferences.theme, options.uiPreferences.colorsSet);
        } else {
          setTheme(getSystemTheme(), options.uiPreferences.colorsSet);
          if (!this.systemThemeChangeUnsubscribe) {
            this.systemThemeChangeUnsubscribe = subscribeToThemeChange(setTheme);
          }
        }
      } else {
        if ((_d2 = options.uiPreferences) == null ? void 0 : _d2.colorsSet) {
          setColors(options.uiPreferences.colorsSet);
        }
      }
      if ((_e2 = options.uiPreferences) == null ? void 0 : _e2.borderRadius) {
        setBorderRadius(options.uiPreferences.borderRadius);
      }
      setAppState(function (state) {
        var _a3, _b3;
        var merged = mergeOptions(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, options.language && {
          language: options.language
        }), !!((_a3 = options.actionsConfiguration) == null ? void 0 : _a3.returnStrategy) && {
          returnStrategy: options.actionsConfiguration.returnStrategy
        }), !!((_b3 = options.actionsConfiguration) == null ? void 0 : _b3.twaReturnUrl) && {
          twaReturnUrl: options.actionsConfiguration.twaReturnUrl
        }), !!options.walletsListConfiguration && {
          walletsListConfiguration: options.walletsListConfiguration
        }), unwrap(state));
        if (options.buttonRootId !== void 0) {
          merged.buttonRootId = options.buttonRootId;
        }
        if (options.enableAndroidBackHandler !== void 0) {
          merged.enableAndroidBackHandler = options.enableAndroidBackHandler;
        }
        return merged;
      });
    }
  }, {
    key: "setConnectRequestParameters",
    value: function setConnectRequestParameters(connectRequestParameters) {
      var _a2;
      setAppState({
        connectRequestParameters: connectRequestParameters
      });
      if ((connectRequestParameters == null ? void 0 : connectRequestParameters.state) === "ready" || !connectRequestParameters) {
        (_a2 = this.connectRequestParametersCallback) == null ? void 0 : _a2.call(this, connectRequestParameters == null ? void 0 : connectRequestParameters.value);
      }
    }
  }, {
    key: "getWallets",
    value: function getWallets() {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
        return _regeneratorRuntime().wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              return _context18.abrupt("return", this.connector.getWallets());
            case 1:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
    }
  }, {
    key: "onStatusChange",
    value: function onStatusChange(callback, errorsHandler) {
      var _this18 = this;
      return this.connector.onStatusChange(function (wallet) {
        return __async(_this18, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
          var lastSelectedWalletInfo2;
          return _regeneratorRuntime().wrap(function _callee19$(_context19) {
            while (1) switch (_context19.prev = _context19.next) {
              case 0:
                if (!wallet) {
                  _context19.next = 7;
                  break;
                }
                _context19.next = 3;
                return this.getSelectedWalletInfo(wallet);
              case 3:
                lastSelectedWalletInfo2 = _context19.sent;
                callback(__spreadValues(__spreadValues({}, wallet), lastSelectedWalletInfo2 || this.walletInfoStorage.getWalletInfo()));
                _context19.next = 8;
                break;
              case 7:
                callback(wallet);
              case 8:
              case "end":
                return _context19.stop();
            }
          }, _callee19, this);
        }));
      }, errorsHandler);
    }
  }, {
    key: "openModal",
    value: function openModal() {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
        return _regeneratorRuntime().wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              return _context20.abrupt("return", this.modal.open());
            case 1:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
    }
  }, {
    key: "closeModal",
    value: function closeModal(reason) {
      this.modal.close(reason);
    }
  }, {
    key: "onModalStateChange",
    value: function onModalStateChange(onChange) {
      return this.modal.onStateChange(onChange);
    }
  }, {
    key: "modalState",
    get: function get() {
      return this.modal.state;
    }
  }, {
    key: "openSingleWalletModal",
    value: function openSingleWalletModal(wallet) {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
        return _regeneratorRuntime().wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              return _context21.abrupt("return", this.singleWalletModal.open(wallet));
            case 1:
            case "end":
              return _context21.stop();
          }
        }, _callee21, this);
      }));
    }
  }, {
    key: "closeSingleWalletModal",
    value: function closeSingleWalletModal(closeReason) {
      this.singleWalletModal.close(closeReason);
    }
  }, {
    key: "onSingleWalletModalStateChange",
    value: function onSingleWalletModalStateChange(onChange) {
      return this.singleWalletModal.onStateChange(onChange);
    }
  }, {
    key: "singleWalletModalState",
    get: function get() {
      return this.singleWalletModal.state;
    }
  }, {
    key: "connectWallet",
    value: function connectWallet() {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
        var walletsList, embeddedWallet;
        return _regeneratorRuntime().wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return this.getWallets();
            case 2:
              walletsList = _context22.sent;
              embeddedWallet = walletsList.find(isWalletInfoCurrentlyEmbedded);
              if (!embeddedWallet) {
                _context22.next = 10;
                break;
              }
              _context22.next = 7;
              return this.connectEmbeddedWallet(embeddedWallet);
            case 7:
              return _context22.abrupt("return", _context22.sent);
            case 10:
              _context22.next = 12;
              return this.connectExternalWallet();
            case 12:
              return _context22.abrupt("return", _context22.sent);
            case 13:
            case "end":
              return _context22.stop();
          }
        }, _callee22, this);
      }));
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      this.tracker.trackDisconnection(this.wallet, "dapp");
      widgetController.clearAction();
      widgetController.removeSelectedWalletInfo();
      this.walletInfoStorage.removeWalletInfo();
      return this.connector.disconnect();
    }
  }, {
    key: "sendTransaction",
    value: function sendTransaction(tx, options) {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {
        var _this19 = this;
        var _this$getModalsAndNot, notifications2, modals, returnStrategy, twaReturnUrl, onRequestSent, abortController, unsubscribe, result;
        return _regeneratorRuntime().wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              this.tracker.trackTransactionSentForSignature(this.wallet, tx);
              if (this.connected) {
                _context23.next = 4;
                break;
              }
              this.tracker.trackTransactionSigningFailed(this.wallet, tx, "Wallet was not connected");
              throw new TonConnectUIError("Connect wallet to send a transaction.");
            case 4:
              if (isInTMA()) {
                sendExpand();
              }
              _this$getModalsAndNot = this.getModalsAndNotificationsConfiguration(options), notifications2 = _this$getModalsAndNot.notifications, modals = _this$getModalsAndNot.modals, returnStrategy = _this$getModalsAndNot.returnStrategy, twaReturnUrl = _this$getModalsAndNot.twaReturnUrl, _this$getModalsAndNot.skipRedirectToWallet;
              widgetController.setAction({
                name: "confirm-transaction",
                showNotification: notifications2.includes("before"),
                openModal: modals.includes("before"),
                sent: false
              });
              onRequestSent = function onRequestSent() {
                if (abortController.signal.aborted) {
                  return;
                }
                widgetController.setAction({
                  name: "confirm-transaction",
                  showNotification: notifications2.includes("before"),
                  openModal: modals.includes("before"),
                  sent: true
                });
                if (_this19.walletInfo && "universalLink" in _this19.walletInfo && (_this19.walletInfo.openMethod === "universal-link" || _this19.walletInfo.openMethod === "custom-deeplink")) {
                  if (isTelegramUrl(_this19.walletInfo.universalLink)) {
                    redirectToTelegram(_this19.walletInfo.universalLink, {
                      returnStrategy: returnStrategy,
                      twaReturnUrl: twaReturnUrl || appState.twaReturnUrl,
                      forceRedirect: false
                    });
                  } else {
                    redirectToWallet(_this19.walletInfo.universalLink, _this19.walletInfo.deepLink, {
                      returnStrategy: returnStrategy,
                      forceRedirect: false
                    }, function () {});
                  }
                }
              };
              abortController = new AbortController();
              unsubscribe = this.onTransactionModalStateChange(function (action2) {
                if (action2 == null ? void 0 : action2.openModal) {
                  return;
                }
                unsubscribe();
                if (!action2) {
                  abortController.abort();
                }
              });
              _context23.prev = 10;
              _context23.next = 13;
              return this.waitForSendTransaction({
                transaction: tx,
                signal: abortController.signal
              }, onRequestSent);
            case 13:
              result = _context23.sent;
              this.tracker.trackTransactionSigned(this.wallet, tx, result);
              widgetController.setAction({
                name: "transaction-sent",
                showNotification: notifications2.includes("success"),
                openModal: modals.includes("success")
              });
              return _context23.abrupt("return", result);
            case 19:
              _context23.prev = 19;
              _context23.t0 = _context23["catch"](10);
              widgetController.setAction({
                name: "transaction-canceled",
                showNotification: notifications2.includes("error"),
                openModal: modals.includes("error")
              });
              if (!(_context23.t0 instanceof TonConnectError)) {
                _context23.next = 26;
                break;
              }
              throw _context23.t0;
            case 26:
              console.error(_context23.t0);
              throw new TonConnectUIError("Unhandled error:" + _context23.t0);
            case 28:
              _context23.prev = 28;
              unsubscribe();
              return _context23.finish(28);
            case 31:
            case "end":
              return _context23.stop();
          }
        }, _callee23, this, [[10, 19, 28, 31]]);
      }));
    }
  }, {
    key: "connectEmbeddedWallet",
    value: function connectEmbeddedWallet(embeddedWallet) {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {
        var _this20 = this;
        var connect, additionalRequest;
        return _regeneratorRuntime().wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              connect = function connect(parameters) {
                setLastSelectedWalletInfo(embeddedWallet);
                _this20.connector.connect({
                  jsBridgeKey: embeddedWallet.jsBridgeKey
                }, parameters);
              };
              additionalRequest = appState.connectRequestParameters;
              if ((additionalRequest == null ? void 0 : additionalRequest.state) === "loading") {
                this.connectRequestParametersCallback = connect;
              } else {
                connect(additionalRequest == null ? void 0 : additionalRequest.value);
              }
              _context24.next = 5;
              return this.waitForWalletConnection({
                ignoreErrors: false
              });
            case 5:
              return _context24.abrupt("return", _context24.sent);
            case 6:
            case "end":
              return _context24.stop();
          }
        }, _callee24, this);
      }));
    }
  }, {
    key: "connectExternalWallet",
    value: function connectExternalWallet() {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {
        var abortController, unsubscribe;
        return _regeneratorRuntime().wrap(function _callee25$(_context25) {
          while (1) switch (_context25.prev = _context25.next) {
            case 0:
              abortController = new AbortController();
              widgetController.openWalletsModal();
              unsubscribe = this.onModalStateChange(function (state) {
                var status = state.status,
                  closeReason = state.closeReason;
                if (status === "opened") {
                  return;
                }
                unsubscribe();
                if (closeReason === "action-cancelled") {
                  abortController.abort();
                }
              });
              _context25.next = 5;
              return this.waitForWalletConnection({
                ignoreErrors: true,
                signal: abortController.signal
              });
            case 5:
              return _context25.abrupt("return", _context25.sent);
            case 6:
            case "end":
              return _context25.stop();
          }
        }, _callee25, this);
      }));
    }
  }, {
    key: "waitForWalletConnection",
    value: function waitForWalletConnection(options) {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {
        var _this21 = this;
        return _regeneratorRuntime().wrap(function _callee27$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              return _context27.abrupt("return", new Promise(function (resolve, reject) {
                _this21.tracker.trackConnectionStarted();
                var _options$ignoreErrors = options.ignoreErrors,
                  ignoreErrors = _options$ignoreErrors === void 0 ? false : _options$ignoreErrors,
                  _options$signal = options.signal,
                  signal = _options$signal === void 0 ? null : _options$signal;
                if (signal && signal.aborted) {
                  _this21.tracker.trackConnectionError("Connection was cancelled");
                  return reject(new TonConnectUIError("Wallet was not connected"));
                }
                var onStatusChangeHandler = function onStatusChangeHandler(wallet) {
                  return __async(_this21, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {
                    return _regeneratorRuntime().wrap(function _callee26$(_context26) {
                      while (1) switch (_context26.prev = _context26.next) {
                        case 0:
                          if (wallet) {
                            _context26.next = 8;
                            break;
                          }
                          this.tracker.trackConnectionError("Connection was cancelled");
                          if (!ignoreErrors) {
                            _context26.next = 4;
                            break;
                          }
                          return _context26.abrupt("return");
                        case 4:
                          unsubscribe();
                          reject(new TonConnectUIError("Wallet was not connected"));
                          _context26.next = 11;
                          break;
                        case 8:
                          this.tracker.trackConnectionCompleted(wallet);
                          unsubscribe();
                          resolve(wallet);
                        case 11:
                        case "end":
                          return _context26.stop();
                      }
                    }, _callee26, this);
                  }));
                };
                var onErrorsHandler = function onErrorsHandler(reason) {
                  _this21.tracker.trackConnectionError(reason.message);
                  if (ignoreErrors) {
                    return;
                  }
                  unsubscribe();
                  reject(reason);
                };
                var unsubscribe = _this21.onStatusChange(function (wallet) {
                  return onStatusChangeHandler(wallet);
                }, function (reason) {
                  return onErrorsHandler(reason);
                });
                if (signal) {
                  signal.addEventListener("abort", function () {
                    unsubscribe();
                    reject(new TonConnectUIError("Wallet was not connected"));
                  }, {
                    once: true
                  });
                }
              }));
            case 1:
            case "end":
              return _context27.stop();
          }
        }, _callee27);
      }));
    }
  }, {
    key: "waitForSendTransaction",
    value: function waitForSendTransaction(options, onRequestSent) {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {
        var _this22 = this;
        return _regeneratorRuntime().wrap(function _callee29$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              return _context29.abrupt("return", new Promise(function (resolve, reject) {
                var transaction = options.transaction,
                  signal = options.signal;
                if (signal.aborted) {
                  _this22.tracker.trackTransactionSigningFailed(_this22.wallet, transaction, "Transaction was cancelled");
                  return reject(new TonConnectUIError("Transaction was not sent"));
                }
                var onTransactionHandler = function onTransactionHandler(transaction2) {
                  return __async(_this22, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {
                    return _regeneratorRuntime().wrap(function _callee28$(_context28) {
                      while (1) switch (_context28.prev = _context28.next) {
                        case 0:
                          resolve(transaction2);
                        case 1:
                        case "end":
                          return _context28.stop();
                      }
                    }, _callee28);
                  }));
                };
                var onErrorsHandler = function onErrorsHandler(reason) {
                  reject(reason);
                };
                var onCanceledHandler = function onCanceledHandler() {
                  _this22.tracker.trackTransactionSigningFailed(_this22.wallet, transaction, "Transaction was cancelled");
                  reject(new TonConnectUIError("Transaction was not sent"));
                };
                signal.addEventListener("abort", onCanceledHandler, {
                  once: true
                });
                _this22.connector.sendTransaction(transaction, {
                  onRequestSent: onRequestSent,
                  signal: signal
                }).then(function (result) {
                  signal.removeEventListener("abort", onCanceledHandler);
                  return onTransactionHandler(result);
                })["catch"](function (reason) {
                  signal.removeEventListener("abort", onCanceledHandler);
                  return onErrorsHandler(reason);
                });
              }));
            case 1:
            case "end":
              return _context29.stop();
          }
        }, _callee29);
      }));
    }
  }, {
    key: "onTransactionModalStateChange",
    value: function onTransactionModalStateChange(onChange) {
      return this.transactionModal.onStateChange(onChange);
    }
  }, {
    key: "subscribeToWalletChange",
    value: function subscribeToWalletChange() {
      var _this23 = this;
      this.connector.onStatusChange(function (wallet) {
        return __async(_this23, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {
          var _a2;
          return _regeneratorRuntime().wrap(function _callee30$(_context30) {
            while (1) switch (_context30.prev = _context30.next) {
              case 0:
                if (!wallet) {
                  _context30.next = 6;
                  break;
                }
                _context30.next = 3;
                return this.updateWalletInfo(wallet);
              case 3:
                this.setPreferredWalletAppName(((_a2 = this.walletInfo) == null ? void 0 : _a2.appName) || wallet.device.appName);
                _context30.next = 7;
                break;
              case 6:
                this.walletInfoStorage.removeWalletInfo();
              case 7:
              case "end":
                return _context30.stop();
            }
          }, _callee30, this);
        }));
      });
    }
  }, {
    key: "setPreferredWalletAppName",
    value: function setPreferredWalletAppName(value) {
      this.preferredWalletStorage.setPreferredWalletAppName(value);
      setAppState({
        preferredWalletAppName: value
      });
    }
  }, {
    key: "getSelectedWalletInfo",
    value: function getSelectedWalletInfo(wallet) {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {
        var lastSelectedWalletInfo2, fullLastSelectedWalletInfo, walletsList, walletInfo;
        return _regeneratorRuntime().wrap(function _callee31$(_context31) {
          while (1) switch (_context31.prev = _context31.next) {
            case 0:
              lastSelectedWalletInfo2 = widgetController.getSelectedWalletInfo();
              if (lastSelectedWalletInfo2) {
                _context31.next = 3;
                break;
              }
              return _context31.abrupt("return", null);
            case 3:
              if ("name" in lastSelectedWalletInfo2) {
                _context31.next = 16;
                break;
              }
              _context31.t0 = applyWalletsListConfiguration;
              _context31.next = 7;
              return this.walletsList;
            case 7:
              _context31.t1 = _context31.sent;
              _context31.t2 = appState.walletsListConfiguration;
              walletsList = (0, _context31.t0)(_context31.t1, _context31.t2);
              walletInfo = walletsList.find(function (item) {
                return eqWalletName(item, wallet.device.appName);
              });
              if (walletInfo) {
                _context31.next = 13;
                break;
              }
              throw new TonConnectUIError("Cannot find WalletInfo for the '".concat(wallet.device.appName, "' wallet"));
            case 13:
              fullLastSelectedWalletInfo = __spreadValues(__spreadValues({}, walletInfo), lastSelectedWalletInfo2);
              _context31.next = 17;
              break;
            case 16:
              fullLastSelectedWalletInfo = lastSelectedWalletInfo2;
            case 17:
              return _context31.abrupt("return", fullLastSelectedWalletInfo);
            case 18:
            case "end":
              return _context31.stop();
          }
        }, _callee31, this);
      }));
    }
  }, {
    key: "updateWalletInfo",
    value: function updateWalletInfo(wallet) {
      return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {
        var selectedWalletInfo, storedWalletInfo;
        return _regeneratorRuntime().wrap(function _callee32$(_context32) {
          while (1) switch (_context32.prev = _context32.next) {
            case 0:
              _context32.next = 2;
              return this.getSelectedWalletInfo(wallet);
            case 2:
              selectedWalletInfo = _context32.sent;
              if (!selectedWalletInfo) {
                _context32.next = 7;
                break;
              }
              this.walletInfo = selectedWalletInfo;
              this.walletInfoStorage.setWalletInfo(selectedWalletInfo);
              return _context32.abrupt("return");
            case 7:
              storedWalletInfo = this.walletInfoStorage.getWalletInfo();
              if (!storedWalletInfo) {
                _context32.next = 11;
                break;
              }
              this.walletInfo = storedWalletInfo;
              return _context32.abrupt("return");
            case 11:
              _context32.next = 13;
              return this.walletsList;
            case 13:
              _context32.t0 = _context32.sent.find(function (walletInfo) {
                return eqWalletName(walletInfo, wallet.device.appName);
              });
              if (_context32.t0) {
                _context32.next = 16;
                break;
              }
              _context32.t0 = null;
            case 16:
              this.walletInfo = _context32.t0;
            case 17:
            case "end":
              return _context32.stop();
          }
        }, _callee32, this);
      }));
    }
  }, {
    key: "normalizeWidgetRoot",
    value: function normalizeWidgetRoot(rootId) {
      if (!rootId || !document.getElementById(rootId)) {
        rootId = "tc-widget-root";
        var rootElement = document.createElement("div");
        rootElement.id = rootId;
        document.body.appendChild(rootElement);
      }
      return rootId;
    }
  }, {
    key: "checkButtonRootExist",
    value: function checkButtonRootExist(buttonRootId) {
      if (buttonRootId == null) {
        return;
      }
      if (!document.getElementById(buttonRootId)) {
        throw new TonConnectUIError("".concat(buttonRootId, " element not found in the document."));
      }
    }
  }, {
    key: "getModalsAndNotificationsConfiguration",
    value: function getModalsAndNotificationsConfiguration(options) {
      var _a2, _b2, _c2, _d2, _e2, _f2;
      var allActions = ["before", "success", "error"];
      var notifications2 = allActions;
      if (((_a2 = this.actionsConfiguration) == null ? void 0 : _a2.notifications) && ((_b2 = this.actionsConfiguration) == null ? void 0 : _b2.notifications) !== "all") {
        notifications2 = this.actionsConfiguration.notifications;
      }
      if (options == null ? void 0 : options.notifications) {
        if (options.notifications === "all") {
          notifications2 = allActions;
        } else {
          notifications2 = options.notifications;
        }
      }
      var modals = ["before"];
      if ((_c2 = this.actionsConfiguration) == null ? void 0 : _c2.modals) {
        if (this.actionsConfiguration.modals === "all") {
          modals = allActions;
        } else {
          modals = this.actionsConfiguration.modals;
        }
      }
      if (options == null ? void 0 : options.modals) {
        if (options.modals === "all") {
          modals = allActions;
        } else {
          modals = options.modals;
        }
      }
      var returnStrategy = (options == null ? void 0 : options.returnStrategy) || ((_d2 = this.actionsConfiguration) == null ? void 0 : _d2.returnStrategy) || "back";
      var twaReturnUrl = (options == null ? void 0 : options.twaReturnUrl) || ((_e2 = this.actionsConfiguration) == null ? void 0 : _e2.twaReturnUrl);
      var skipRedirectToWallet = (options == null ? void 0 : options.skipRedirectToWallet) || ((_f2 = this.actionsConfiguration) == null ? void 0 : _f2.skipRedirectToWallet) || "ios";
      if (isInTMA()) {
        skipRedirectToWallet = "never";
      }
      return {
        notifications: notifications2,
        modals: modals,
        returnStrategy: returnStrategy,
        twaReturnUrl: twaReturnUrl,
        skipRedirectToWallet: skipRedirectToWallet
      };
    }
  }], [{
    key: "getWallets",
    value: function getWallets() {
      return TonConnect.getWallets();
    }
  }]);
}();

var bn$2 = {exports: {}};

var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(bufferEs6);

bn$2.exports;
(function (module) {
  (function (module, exports) {

    // Utils
    function assert(val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function TempCtor() {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;
      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (_typeof(module) === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
      Buffer = require$$0$2.Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && _typeof(num) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };
    BN.prototype._init = function init(number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }
      if (_typeof(number) === 'object') {
        return this._initArray(number, base, endian);
      }
      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }
      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }
      if (number[0] === '-') {
        this.negative = 1;
      }
      this._strip();
      if (endian !== 'le') return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [number & 0x3ffffff];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
        this.length = 3;
      }
      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [0];
        this.length = 1;
        return this;
      }
      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }
      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this._strip();
    };
    function parseHex(str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      var z = 0;
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
        r <<= 4;
        var b;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          b = c - 49 + 0xa;

          // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          b = c - 17 + 0xa;

          // '0' - '9'
        } else {
          b = c;
        }
        r |= b;
        z |= b;
      }
      assert(!(z & 0xf0), 'Invalid character in ' + str);
      return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }
      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= w << off & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
      }
      this._strip();
    };
    function parseBase(str, start, end, mul) {
      var r = 0;
      var b = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
        r *= mul;

        // 'a'
        if (c >= 49) {
          b = c - 49 + 0xa;

          // 'A'
        } else if (c >= 17) {
          b = c - 17 + 0xa;

          // '0' - '9'
        } else {
          b = c;
        }
        assert(c >= 0 && b < mul, 'Invalid character');
        r += b;
      }
      return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      // Initialize as zero
      this.words = [0];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);
        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);
        for (i = 0; i < mod; i++) {
          pow *= base;
        }
        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };
    function move(dest, src) {
      dest.words = src.words;
      dest.length = src.length;
      dest.negative = src.negative;
      dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
      move(dest, this);
    };
    BN.prototype.clone = function clone() {
      var r = new BN(null);
      this.copy(r);
      return r;
    };
    BN.prototype._expand = function _expand(size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol["for"] === 'function') {
      BN.prototype[Symbol["for"]('nodejs.util.inspect.custom')] = inspect;
    } else {
      BN.prototype.inspect = inspect;
    }
    function inspect() {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }

    /*
     var zeros = [];
    var groupSizes = [];
    var groupBases = [];
     var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }
     */

    var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = ((w << off | carry) & 0xffffff).toString(16);
          carry = w >>> 24 - off & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modrn(groupBase).toString(base);
          c = c.idivn(groupBase);
          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }
      assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
      return this.toString(16, 2);
    };
    if (Buffer) {
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
      };
    }
    BN.prototype.toArray = function toArray(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
      if (ArrayType.allocUnsafe) {
        return ArrayType.allocUnsafe(size);
      }
      return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      this._strip();
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');
      var res = allocate(ArrayType, reqLength);
      var postfix = endian === 'le' ? 'LE' : 'BE';
      this['_toArrayLike' + postfix](res, byteLength);
      return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
      var position = 0;
      var carry = 0;
      for (var i = 0, shift = 0; i < this.length; i++) {
        var word = this.words[i] << shift | carry;
        res[position++] = word & 0xff;
        if (position < res.length) {
          res[position++] = word >> 8 & 0xff;
        }
        if (position < res.length) {
          res[position++] = word >> 16 & 0xff;
        }
        if (shift === 6) {
          if (position < res.length) {
            res[position++] = word >> 24 & 0xff;
          }
          carry = 0;
          shift = 0;
        } else {
          carry = word >>> 24;
          shift += 2;
        }
      }
      if (position < res.length) {
        res[position++] = carry;
        while (position < res.length) {
          res[position++] = 0;
        }
      }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
      var position = res.length - 1;
      var carry = 0;
      for (var i = 0, shift = 0; i < this.length; i++) {
        var word = this.words[i] << shift | carry;
        res[position--] = word & 0xff;
        if (position >= 0) {
          res[position--] = word >> 8 & 0xff;
        }
        if (position >= 0) {
          res[position--] = word >> 16 & 0xff;
        }
        if (shift === 6) {
          if (position >= 0) {
            res[position--] = word >> 24 & 0xff;
          }
          carry = 0;
          shift = 0;
        } else {
          carry = word >>> 24;
          shift += 2;
        }
      }
      if (position >= 0) {
        res[position--] = carry;
        while (position >= 0) {
          res[position--] = 0;
        }
      }
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w) {
      // Short-cut
      if (w === 0) return 26;
      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w = new Array(num.bitLength());
      for (var bit = 0; bit < w.length; bit++) {
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        w[bit] = num.words[off] >>> wbit & 0x01;
      }
      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero()) return 0;
      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        this.negative ^= 1;
      }
      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }
      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }
      return this._strip();
    };
    BN.prototype.ior = function ior(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or(num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }
      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }
      this.length = b.length;
      return this._strip();
    };
    BN.prototype.iand = function iand(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and(num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }
      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      this.length = a.length;
      return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
      assert(typeof width === 'number' && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
      }

      // And remove leading zeroes
      return this._strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
      assert(typeof bit === 'number' && bit >= 0);
      var off = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off + 1);
      if (val) {
        this.words[off] = this.words[off] | 1 << wbit;
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }
      return this._strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

        // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
        // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }
      if (this.length > num.length) return this.clone().iadd(num);
      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

        // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      this.length = Math.max(this.length, i);
      if (a !== this) {
        this.negative = 1;
      }
      return this._strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = self.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;
      var lo = r & 0x3ffffff;
      var carry = r / 0x4000000 | 0;
      out.words[0] = lo;
      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += r / 0x4000000 | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }
      return out._strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;
      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;
          var lo = r & 0x3ffffff;
          ncarry = ncarry + (r / 0x4000000 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 0x3ffffff;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }
      return out._strip();
    }
    function jumboMulTo(self, num, out) {
      // Temporary disable, see https://github.com/indutny/bn.js/issues/211
      // var fftm = new FFTM();
      // return fftm.mulp(self, num, out);
      return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }
      return res;
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
      var isNegNum = num < 0;
      if (isNegNum) num = -num;
      assert(typeof num === 'number');
      assert(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += w / 0x4000000 | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr() {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }
      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;
          res = res.mul(q);
        }
      }
      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
      var i;
      if (r !== 0) {
        var carry = 0;
        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = (this.words[i] | 0) - newCarry << r;
          this.words[i] = c | carry;
          carry = newCarry >>> 26 - r;
        }
        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }
      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }
        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }
        this.length += s;
      }
      return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - hint % 26) / 26;
      } else {
        h = 0;
      }
      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
      var maskedWords = extended;
      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }
      if (s === 0) ; else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }
      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = carry << 26 - r | word >>> r;
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }
      return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];
      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      assert(this.negative === 0, 'imaskn works only with positive numbers');
      if (this.length <= s) {
        return this;
      }
      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);
      if (r !== 0) {
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        this.words[this.length - 1] &= mask;
      }
      return this._strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) <= num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }
        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);
      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);
      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }
      this.words[0] -= num;
      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }
      return this._strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      this.negative = 0;
      return this;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i;
      this._expand(len);
      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - (right / 0x4000000 | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }
      if (carry === 0) return this._strip();

      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;
      return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = this.length - num.length;
      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;
      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }
      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }
      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min(qj / bhi | 0, 0x3ffffff);
        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q._strip();
      }
      a._strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }
      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== 'mod') {
          div = res.div.neg();
        }
        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div: div,
          mod: mod
        };
      }
      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== 'mod') {
          div = res.div.neg();
        }
        return {
          div: div,
          mod: res.mod
        };
      }
      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modrn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modrn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div(num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
      var isNegNum = num < 0;
      if (isNegNum) num = -num;
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;
      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }
      return isNegNum ? -acc : acc;
    };

    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
      return this.modrn(num);
    };

    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
      var isNegNum = num < 0;
      if (isNegNum) num = -num;
      assert(num <= 0x3ffffff);
      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = w / num | 0;
        carry = w % num;
      }
      this._strip();
      return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
      assert(p.negative === 0);
      assert(!p.isZero());
      var x = this;
      var y = p.clone();
      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);
      var g = 0;
      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }
      var yp = y.clone();
      var xp = x.clone();
      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }
            A.iushrn(1);
            B.iushrn(1);
          }
        }
        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }
            C.iushrn(1);
            D.iushrn(1);
          }
        }
        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }
      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
      assert(p.negative === 0);
      assert(!p.isZero());
      var a = this;
      var b = p.clone();
      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }
      var x1 = new BN(1);
      var x2 = new BN(0);
      var delta = b.clone();
      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }
            x2.iushrn(1);
          }
        }
        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }
      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();
      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }
      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }
        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }
        a.isub(b);
      } while (true);
      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln(num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };
    BN.prototype.isZero = function isZero() {
      return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;
      this._strip();
      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert(num <= 0x3ffffff, 'Number is too big');
        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;
      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;
      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;
        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      this.red = ctx;
      return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime(name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);
      this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;
      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);
      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r._strip();
      }
      return r;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul(this.k);
    };
    function K256() {
      MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;
      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + (lo / 0x4000000 | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
      MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
      // 2 ^ 255 - 19
      MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;
        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
      // Cached version of prime
      if (primes[name]) return primes[name];
      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;
      return prime;
    };

    //
    // Base reduction engine
    //
    function Red(m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      move(a, a.umod(this.m)._forceRed(this));
      return a;
    };
    Red.prototype.neg = function neg(a) {
      if (a.isZero()) {
        return a.clone();
      }
      return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
      this._verify2(a, b);
      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
      this._verify2(a, b);
      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a, b) {
      this._verify2(a, b);
      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
      this._verify2(a, b);
      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
      return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
      return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
      if (a.isZero()) return a.clone();
      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());
      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);
      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }
      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));
        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }
      return r;
    };
    Red.prototype.invm = function invm(a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = word >> j & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r = num.umod(this.m);
      return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m) {
      Red.call(this, m);
      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - this.shift % 26;
      }
      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);
      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };
    Mont.prototype.imul = function imul(a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }
      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module, commonjsGlobal);
})(bn$2);
var bnExports$2 = bn$2.exports;

var bn$1 = {exports: {}};

bn$1.exports;
(function (module) {
  (function (module, exports) {

    // Utils
    function assert(val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function TempCtor() {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;
      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (_typeof(module) === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
      Buffer = commonjsRequire('buf' + 'fer').Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && _typeof(num) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };
    BN.prototype._init = function init(number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }
      if (_typeof(number) === 'object') {
        return this._initArray(number, base, endian);
      }
      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }
      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }
      if (number[0] === '-') {
        this.negative = 1;
      }
      this.strip();
      if (endian !== 'le') return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [number & 0x3ffffff];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
        this.length = 3;
      }
      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [0];
        this.length = 1;
        return this;
      }
      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }
      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };
    function parseHex(str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
        r <<= 4;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;

          // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;

          // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }
      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= w << off & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

          // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

          // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      // Initialize as zero
      this.words = [0];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);
        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);
        for (i = 0; i < mod; i++) {
          pow *= base;
        }
        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
      var r = new BN(null);
      this.copy(r);
      return r;
    };
    BN.prototype._expand = function _expand(size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };
    BN.prototype.inspect = function inspect() {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*
     var zeros = [];
    var groupSizes = [];
    var groupBases = [];
     var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }
     */

    var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = ((w << off | carry) & 0xffffff).toString(16);
          carry = w >>> 24 - off & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);
          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }
      assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');
      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);
      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);
          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);
          res[i] = b;
        }
        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w) {
      // Short-cut
      if (w === 0) return 26;
      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w = new Array(num.bitLength());
      for (var bit = 0; bit < w.length; bit++) {
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
      }
      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero()) return 0;
      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        this.negative ^= 1;
      }
      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }
      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or(num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }
      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }
      this.length = b.length;
      return this.strip();
    };
    BN.prototype.iand = function iand(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and(num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }
      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      this.length = a.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
      assert(typeof width === 'number' && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
      }

      // And remove leading zeroes
      return this.strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
      assert(typeof bit === 'number' && bit >= 0);
      var off = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off + 1);
      if (val) {
        this.words[off] = this.words[off] | 1 << wbit;
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }
      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

        // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
        // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }
      if (this.length > num.length) return this.clone().iadd(num);
      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

        // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      this.length = Math.max(this.length, i);
      if (a !== this) {
        this.negative = 1;
      }
      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = self.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;
      var lo = r & 0x3ffffff;
      var carry = r / 0x4000000 | 0;
      out.words[0] = lo;
      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += r / 0x4000000 | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;
      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;
          var lo = r & 0x3ffffff;
          ncarry = ncarry + (r / 0x4000000 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 0x3ffffff;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo(self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }
      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM(x, y) {
      this.x = x;
      this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }
      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
      if (x === 0 || x === N - 1) return x;
      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << l - i - 1;
        x >>= 1;
      }
      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);
      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;
        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);
        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];
            var ro = rtws[p + j + s];
            var io = itws[p + j + s];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;
            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }
      return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
      if (N <= 1) return;
      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];
        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;
        t = iws[i];
        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
        ws[i] = w & 0x3ffffff;
        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);
        rws[2 * i] = carry & 0x1fff;
        carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff;
        carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }
      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);
      var rbt = this.makeRBT(N);
      var _ = this.stub(N);
      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);
      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);
      var rmws = out.words;
      rmws.length = N;
      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);
      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);
      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }
      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);
      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += w / 0x4000000 | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr() {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }
      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;
          res = res.mul(q);
        }
      }
      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
      var i;
      if (r !== 0) {
        var carry = 0;
        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = (this.words[i] | 0) - newCarry << r;
          this.words[i] = c | carry;
          carry = newCarry >>> 26 - r;
        }
        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }
      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }
        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }
        this.length += s;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - hint % 26) / 26;
      } else {
        h = 0;
      }
      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
      var maskedWords = extended;
      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }
      if (s === 0) ; else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }
      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = carry << 26 - r | word >>> r;
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];
      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      assert(this.negative === 0, 'imaskn works only with positive numbers');
      if (this.length <= s) {
        return this;
      }
      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);
      if (r !== 0) {
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        this.words[this.length - 1] &= mask;
      }
      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }
        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);
      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);
      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }
      this.words[0] -= num;
      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      this.negative = 0;
      return this;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i;
      this._expand(len);
      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - (right / 0x4000000 | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }
      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = this.length - num.length;
      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;
      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }
      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }
      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min(qj / bhi | 0, 0x3ffffff);
        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }
      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== 'mod') {
          div = res.div.neg();
        }
        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div: div,
          mod: mod
        };
      }
      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== 'mod') {
          div = res.div.neg();
        }
        return {
          div: div,
          mod: res.mod
        };
      }
      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div(num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;
      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }
      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
      assert(num <= 0x3ffffff);
      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = w / num | 0;
        carry = w % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
      assert(p.negative === 0);
      assert(!p.isZero());
      var x = this;
      var y = p.clone();
      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);
      var g = 0;
      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }
      var yp = y.clone();
      var xp = x.clone();
      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }
            A.iushrn(1);
            B.iushrn(1);
          }
        }
        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }
            C.iushrn(1);
            D.iushrn(1);
          }
        }
        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }
      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
      assert(p.negative === 0);
      assert(!p.isZero());
      var a = this;
      var b = p.clone();
      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }
      var x1 = new BN(1);
      var x2 = new BN(0);
      var delta = b.clone();
      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }
            x2.iushrn(1);
          }
        }
        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }
      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();
      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }
      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }
        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }
        a.isub(b);
      } while (true);
      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln(num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };
    BN.prototype.isZero = function isZero() {
      return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;
      this.strip();
      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert(num <= 0x3ffffff, 'Number is too big');
        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;
      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;
      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;
        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      this.red = ctx;
      return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime(name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);
      this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;
      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);
      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }
      return r;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul(this.k);
    };
    function K256() {
      MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;
      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + (lo / 0x4000000 | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
      MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
      // 2 ^ 255 - 19
      MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;
        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
      // Cached version of prime
      if (primes[name]) return primes[name];
      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;
      return prime;
    };

    //
    // Base reduction engine
    //
    function Red(m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
      if (a.isZero()) {
        return a.clone();
      }
      return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
      this._verify2(a, b);
      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
      this._verify2(a, b);
      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a, b) {
      this._verify2(a, b);
      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
      this._verify2(a, b);
      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
      return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
      return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
      if (a.isZero()) return a.clone();
      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());
      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);
      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }
      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));
        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }
      return r;
    };
    Red.prototype.invm = function invm(a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a, num) {
      if (num.isZero()) return new BN(1);
      if (num.cmpn(1) === 0) return a.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = word >> j & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r = num.umod(this.m);
      return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m) {
      Red.call(this, m);
      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - this.shift % 26;
      }
      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);
      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };
    Mont.prototype.imul = function imul(a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }
      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module, commonjsGlobal);
})(bn$1);
var bnExports$1 = bn$1.exports;

var bn = {exports: {}};

bn.exports;
(function (module) {
  (function (module, exports) {

    // Utils
    function assert(val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function TempCtor() {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;
      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (_typeof(module) === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
      Buffer = commonjsRequire('buf' + 'fer').Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && _typeof(num) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };
    BN.prototype._init = function init(number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }
      if (_typeof(number) === 'object') {
        return this._initArray(number, base, endian);
      }
      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }
      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }
      if (number[0] === '-') {
        this.negative = 1;
      }
      this.strip();
      if (endian !== 'le') return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [number & 0x3ffffff];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
        this.length = 3;
      }
      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [0];
        this.length = 1;
        return this;
      }
      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }
      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };
    function parseHex(str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
        r <<= 4;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;

          // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;

          // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }
      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= w << off & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

          // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

          // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      // Initialize as zero
      this.words = [0];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);
        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);
        for (i = 0; i < mod; i++) {
          pow *= base;
        }
        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
      var r = new BN(null);
      this.copy(r);
      return r;
    };
    BN.prototype._expand = function _expand(size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };
    BN.prototype.inspect = function inspect() {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*
     var zeros = [];
    var groupSizes = [];
    var groupBases = [];
     var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }
     */

    var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = ((w << off | carry) & 0xffffff).toString(16);
          carry = w >>> 24 - off & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);
          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }
      assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');
      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);
      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);
          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);
          res[i] = b;
        }
        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w) {
      // Short-cut
      if (w === 0) return 26;
      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w = new Array(num.bitLength());
      for (var bit = 0; bit < w.length; bit++) {
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
      }
      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero()) return 0;
      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        this.negative ^= 1;
      }
      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }
      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or(num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }
      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }
      this.length = b.length;
      return this.strip();
    };
    BN.prototype.iand = function iand(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and(num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }
      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      this.length = a.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
      assert(typeof width === 'number' && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
      }

      // And remove leading zeroes
      return this.strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
      assert(typeof bit === 'number' && bit >= 0);
      var off = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off + 1);
      if (val) {
        this.words[off] = this.words[off] | 1 << wbit;
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }
      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

        // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
        // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }
      if (this.length > num.length) return this.clone().iadd(num);
      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

        // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      this.length = Math.max(this.length, i);
      if (a !== this) {
        this.negative = 1;
      }
      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = self.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;
      var lo = r & 0x3ffffff;
      var carry = r / 0x4000000 | 0;
      out.words[0] = lo;
      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += r / 0x4000000 | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;
      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;
          var lo = r & 0x3ffffff;
          ncarry = ncarry + (r / 0x4000000 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 0x3ffffff;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo(self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }
      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM(x, y) {
      this.x = x;
      this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }
      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
      if (x === 0 || x === N - 1) return x;
      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << l - i - 1;
        x >>= 1;
      }
      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);
      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;
        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);
        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];
            var ro = rtws[p + j + s];
            var io = itws[p + j + s];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;
            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }
      return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
      if (N <= 1) return;
      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];
        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;
        t = iws[i];
        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
        ws[i] = w & 0x3ffffff;
        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);
        rws[2 * i] = carry & 0x1fff;
        carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff;
        carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }
      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);
      var rbt = this.makeRBT(N);
      var _ = this.stub(N);
      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);
      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);
      var rmws = out.words;
      rmws.length = N;
      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);
      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);
      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }
      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);
      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += w / 0x4000000 | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr() {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }
      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;
          res = res.mul(q);
        }
      }
      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
      var i;
      if (r !== 0) {
        var carry = 0;
        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = (this.words[i] | 0) - newCarry << r;
          this.words[i] = c | carry;
          carry = newCarry >>> 26 - r;
        }
        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }
      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }
        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }
        this.length += s;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - hint % 26) / 26;
      } else {
        h = 0;
      }
      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
      var maskedWords = extended;
      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }
      if (s === 0) ; else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }
      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = carry << 26 - r | word >>> r;
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];
      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      assert(this.negative === 0, 'imaskn works only with positive numbers');
      if (this.length <= s) {
        return this;
      }
      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);
      if (r !== 0) {
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        this.words[this.length - 1] &= mask;
      }
      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }
        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);
      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);
      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }
      this.words[0] -= num;
      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      this.negative = 0;
      return this;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i;
      this._expand(len);
      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - (right / 0x4000000 | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }
      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = this.length - num.length;
      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;
      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }
      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }
      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min(qj / bhi | 0, 0x3ffffff);
        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }
      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== 'mod') {
          div = res.div.neg();
        }
        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div: div,
          mod: mod
        };
      }
      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== 'mod') {
          div = res.div.neg();
        }
        return {
          div: div,
          mod: res.mod
        };
      }
      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div(num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;
      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }
      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
      assert(num <= 0x3ffffff);
      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = w / num | 0;
        carry = w % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
      assert(p.negative === 0);
      assert(!p.isZero());
      var x = this;
      var y = p.clone();
      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);
      var g = 0;
      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }
      var yp = y.clone();
      var xp = x.clone();
      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }
            A.iushrn(1);
            B.iushrn(1);
          }
        }
        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }
            C.iushrn(1);
            D.iushrn(1);
          }
        }
        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }
      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
      assert(p.negative === 0);
      assert(!p.isZero());
      var a = this;
      var b = p.clone();
      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }
      var x1 = new BN(1);
      var x2 = new BN(0);
      var delta = b.clone();
      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }
            x2.iushrn(1);
          }
        }
        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }
      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();
      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }
      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }
        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }
        a.isub(b);
      } while (true);
      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln(num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };
    BN.prototype.isZero = function isZero() {
      return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;
      this.strip();
      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert(num <= 0x3ffffff, 'Number is too big');
        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;
      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;
      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;
        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      this.red = ctx;
      return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime(name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);
      this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;
      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);
      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }
      return r;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul(this.k);
    };
    function K256() {
      MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;
      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + (lo / 0x4000000 | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
      MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
      // 2 ^ 255 - 19
      MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;
        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
      // Cached version of prime
      if (primes[name]) return primes[name];
      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;
      return prime;
    };

    //
    // Base reduction engine
    //
    function Red(m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
      if (a.isZero()) {
        return a.clone();
      }
      return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
      this._verify2(a, b);
      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
      this._verify2(a, b);
      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a, b) {
      this._verify2(a, b);
      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
      this._verify2(a, b);
      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
      return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
      return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
      if (a.isZero()) return a.clone();
      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());
      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);
      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }
      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));
        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }
      return r;
    };
    Red.prototype.invm = function invm(a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a, num) {
      if (num.isZero()) return new BN(1);
      if (num.cmpn(1) === 0) return a.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = word >> j & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r = num.umod(this.m);
      return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m) {
      Red.call(this, m);
      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - this.shift % 26;
      }
      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);
      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };
    Mont.prototype.imul = function imul(a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }
      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module, commonjsGlobal);
})(bn);
var bnExports = bn.exports;

var src$3 = function isHexPrefixed(str) {
  if (typeof str !== 'string') {
    throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + _typeof(str) + ", while checking isHexPrefixed.");
  }
  return str.slice(0, 2) === '0x';
};

var isHexPrefixed = src$3;

/**
 * Removes '0x' from a given `String` is present
 * @param {String} str the string value
 * @return {String|Optional} a string by pass if necessary
 */
var src$2 = function stripHexPrefix(str) {
  if (typeof str !== 'string') {
    return str;
  }
  return isHexPrefixed(str) ? str.slice(2) : str;
};

var BN$h = bnExports;
var stripHexPrefix = src$2;

/**
 * Returns a BN object, converts a number value to a BN
 * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object
 * @return {Object} `output` BN object of the number
 * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number
 */
var src$1 = function numberToBN(arg) {
  if (typeof arg === 'string' || typeof arg === 'number') {
    var multiplier = new BN$h(1); // eslint-disable-line
    var formattedString = String(arg).toLowerCase().trim();
    var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';
    var stringArg = stripHexPrefix(formattedString); // eslint-disable-line
    if (stringArg.substr(0, 1) === '-') {
      stringArg = stripHexPrefix(stringArg.slice(1));
      multiplier = new BN$h(-1, 10);
    }
    stringArg = stringArg === '' ? '0' : stringArg;
    if (!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/) || stringArg.match(/^[a-fA-F]+$/) || isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/)) {
      return new BN$h(stringArg, 16).mul(multiplier);
    }
    if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {
      return new BN$h(stringArg, 10).mul(multiplier);
    }
  } else if (_typeof(arg) === 'object' && arg.toString && !arg.pop && !arg.push) {
    if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
      return new BN$h(arg.toString(10), 10);
    }
  }
  throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');
};

var BN$g = bnExports$1;
var numberToBN = src$1;
var zero = new BN$g(0);
var negative1 = new BN$g(-1);

// complete ethereum unit map
var unitMap = {
  'noether': '0',
  // eslint-disable-line
  'wei': '1',
  // eslint-disable-line
  'kwei': '1000',
  // eslint-disable-line
  'Kwei': '1000',
  // eslint-disable-line
  'babbage': '1000',
  // eslint-disable-line
  'femtoether': '1000',
  // eslint-disable-line
  'mwei': '1000000',
  // eslint-disable-line
  'Mwei': '1000000',
  // eslint-disable-line
  'lovelace': '1000000',
  // eslint-disable-line
  'picoether': '1000000',
  // eslint-disable-line
  'gwei': '1000000000',
  // eslint-disable-line
  'Gwei': '1000000000',
  // eslint-disable-line
  'shannon': '1000000000',
  // eslint-disable-line
  'nanoether': '1000000000',
  // eslint-disable-line
  'nano': '1000000000',
  // eslint-disable-line
  'szabo': '1000000000000',
  // eslint-disable-line
  'microether': '1000000000000',
  // eslint-disable-line
  'micro': '1000000000000',
  // eslint-disable-line
  'finney': '1000000000000000',
  // eslint-disable-line
  'milliether': '1000000000000000',
  // eslint-disable-line
  'milli': '1000000000000000',
  // eslint-disable-line
  'ether': '1000000000000000000',
  // eslint-disable-line
  'kether': '1000000000000000000000',
  // eslint-disable-line
  'grand': '1000000000000000000000',
  // eslint-disable-line
  'mether': '1000000000000000000000000',
  // eslint-disable-line
  'gether': '1000000000000000000000000000',
  // eslint-disable-line
  'tether': '1000000000000000000000000000000'
};

/**
 * Returns value of unit in Wei
 *
 * @method getValueOfUnit
 * @param {String} unit the unit to convert to, default ether
 * @returns {BigNumber} value of the unit (in Wei)
 * @throws error if the unit is not correct:w
 */
function getValueOfUnit(unitInput) {
  var unit = unitInput ? unitInput.toLowerCase() : 'ether';
  var unitValue = unitMap[unit]; // eslint-disable-line

  if (typeof unitValue !== 'string') {
    throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));
  }
  return new BN$g(unitValue, 10);
}
function numberToString(arg) {
  if (typeof arg === 'string') {
    if (!arg.match(/^-?[0-9.]+$/)) {
      throw new Error('while converting number to string, invalid number value \'' + arg + '\', should be a number matching (^-?[0-9.]+).');
    }
    return arg;
  } else if (typeof arg === 'number') {
    return String(arg);
  } else if (_typeof(arg) === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
    if (arg.toPrecision) {
      return String(arg.toPrecision());
    } else {
      // eslint-disable-line
      return arg.toString(10);
    }
  }
  throw new Error('while converting number to string, invalid number value \'' + arg + '\' type ' + _typeof(arg) + '.');
}
function fromWei(weiInput, unit, optionsInput) {
  var wei = numberToBN(weiInput); // eslint-disable-line
  var negative = wei.lt(zero); // eslint-disable-line
  var base = getValueOfUnit(unit);
  var baseLength = unitMap[unit].length - 1 || 1;
  var options = optionsInput || {};
  if (negative) {
    wei = wei.mul(negative1);
  }
  var fraction = wei.mod(base).toString(10); // eslint-disable-line

  while (fraction.length < baseLength) {
    fraction = '0' + fraction;
  }
  if (!options.pad) {
    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  }
  var whole = wei.div(base).toString(10); // eslint-disable-line

  if (options.commify) {
    whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  }
  var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line

  if (negative) {
    value = '-' + value;
  }
  return value;
}
function toWei(etherInput, unit) {
  var ether = numberToString(etherInput); // eslint-disable-line
  var base = getValueOfUnit(unit);
  var baseLength = unitMap[unit].length - 1 || 1;

  // Is it negative?
  var negative = ether.substring(0, 1) === '-'; // eslint-disable-line
  if (negative) {
    ether = ether.substring(1);
  }
  if (ether === '.') {
    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');
  }

  // Split it into a whole and fractional part
  var comps = ether.split('.'); // eslint-disable-line
  if (comps.length > 2) {
    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');
  }
  var whole = comps[0],
    fraction = comps[1]; // eslint-disable-line

  if (!whole) {
    whole = '0';
  }
  if (!fraction) {
    fraction = '0';
  }
  if (fraction.length > baseLength) {
    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');
  }
  while (fraction.length < baseLength) {
    fraction += '0';
  }
  whole = new BN$g(whole);
  fraction = new BN$g(fraction);
  var wei = whole.mul(base).add(fraction); // eslint-disable-line

  if (negative) {
    wei = wei.mul(negative1);
  }
  return new BN$g(wei.toString(10), 10);
}
var lib$2 = {
  unitMap: unitMap,
  numberToString: numberToString,
  getValueOfUnit: getValueOfUnit,
  fromWei: fromWei,
  toWei: toWei
};

/**
 * @file Web Cryptography API shim
 * @author Artem S Vybornov <vybornov@gmail.com>
 * @license MIT
 */
(function (global, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], function () {
      return factory(global);
    });
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports
    module.exports = factory(global);
  } else {
    factory(global);
  }
})(typeof self !== 'undefined' ? self : undefined, function (global) {

  if (typeof Promise !== 'function') throw "Promise support required";
  var _crypto = global.crypto || global.msCrypto;
  if (!_crypto) return;
  var _subtle = _crypto.subtle || _crypto.webkitSubtle;
  if (!_subtle) return;
  var _Crypto = global.Crypto || _crypto.constructor || Object,
    _SubtleCrypto = global.SubtleCrypto || _subtle.constructor || Object;
    global.CryptoKey || global.Key || Object;
  var isEdge = global.navigator.userAgent.indexOf('Edge/') > -1;
  var isIE = !!global.msCrypto && !isEdge;
  var isWebkit = !_crypto.subtle && !!_crypto.webkitSubtle;
  if (!isIE && !isWebkit) return;
  function s2a(s) {
    return btoa(s).replace(/\=+$/, '').replace(/\+/g, '-').replace(/\//g, '_');
  }
  function a2s(s) {
    s += '===', s = s.slice(0, -s.length % 4);
    return atob(s.replace(/-/g, '+').replace(/_/g, '/'));
  }
  function s2b(s) {
    var b = new Uint8Array(s.length);
    for (var i = 0; i < s.length; i++) b[i] = s.charCodeAt(i);
    return b;
  }
  function b2s(b) {
    if (b instanceof ArrayBuffer) b = new Uint8Array(b);
    return String.fromCharCode.apply(String, b);
  }
  function alg(a) {
    var r = {
      'name': (a.name || a || '').toUpperCase().replace('V', 'v')
    };
    switch (r.name) {
      case 'SHA-1':
      case 'SHA-256':
      case 'SHA-384':
      case 'SHA-512':
        break;
      case 'AES-CBC':
      case 'AES-GCM':
      case 'AES-KW':
        if (a.length) r['length'] = a.length;
        break;
      case 'HMAC':
        if (a.hash) r['hash'] = alg(a.hash);
        if (a.length) r['length'] = a.length;
        break;
      case 'RSAES-PKCS1-v1_5':
        if (a.publicExponent) r['publicExponent'] = new Uint8Array(a.publicExponent);
        if (a.modulusLength) r['modulusLength'] = a.modulusLength;
        break;
      case 'RSASSA-PKCS1-v1_5':
      case 'RSA-OAEP':
        if (a.hash) r['hash'] = alg(a.hash);
        if (a.publicExponent) r['publicExponent'] = new Uint8Array(a.publicExponent);
        if (a.modulusLength) r['modulusLength'] = a.modulusLength;
        break;
      default:
        throw new SyntaxError("Bad algorithm name");
    }
    return r;
  }
  function jwkAlg(a) {
    return {
      'HMAC': {
        'SHA-1': 'HS1',
        'SHA-256': 'HS256',
        'SHA-384': 'HS384',
        'SHA-512': 'HS512'
      },
      'RSASSA-PKCS1-v1_5': {
        'SHA-1': 'RS1',
        'SHA-256': 'RS256',
        'SHA-384': 'RS384',
        'SHA-512': 'RS512'
      },
      'RSAES-PKCS1-v1_5': {
        '': 'RSA1_5'
      },
      'RSA-OAEP': {
        'SHA-1': 'RSA-OAEP',
        'SHA-256': 'RSA-OAEP-256'
      },
      'AES-KW': {
        '128': 'A128KW',
        '192': 'A192KW',
        '256': 'A256KW'
      },
      'AES-GCM': {
        '128': 'A128GCM',
        '192': 'A192GCM',
        '256': 'A256GCM'
      },
      'AES-CBC': {
        '128': 'A128CBC',
        '192': 'A192CBC',
        '256': 'A256CBC'
      }
    }[a.name][(a.hash || {}).name || a.length || ''];
  }
  function b2jwk(k) {
    if (k instanceof ArrayBuffer || k instanceof Uint8Array) k = JSON.parse(decodeURIComponent(escape(b2s(k))));
    var jwk = {
      'kty': k.kty,
      'alg': k.alg,
      'ext': k.ext || k.extractable
    };
    switch (jwk.kty) {
      case 'oct':
        jwk.k = k.k;
      case 'RSA':
        ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi', 'oth'].forEach(function (x) {
          if (x in k) jwk[x] = k[x];
        });
        break;
      default:
        throw new TypeError("Unsupported key type");
    }
    return jwk;
  }
  function jwk2b(k) {
    var jwk = b2jwk(k);
    if (isIE) jwk['extractable'] = jwk.ext, delete jwk.ext;
    return s2b(unescape(encodeURIComponent(JSON.stringify(jwk)))).buffer;
  }
  function pkcs2jwk(k) {
    var info = b2der(k),
      prv = false;
    if (info.length > 2) prv = true, info.shift(); // remove version from PKCS#8 PrivateKeyInfo structure
    var jwk = {
      'ext': true
    };
    switch (info[0][0]) {
      case '1.2.840.113549.1.1.1':
        var rsaComp = ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi'],
          rsaKey = b2der(info[1]);
        if (prv) rsaKey.shift(); // remove version from PKCS#1 RSAPrivateKey structure
        for (var i = 0; i < rsaKey.length; i++) {
          if (!rsaKey[i][0]) rsaKey[i] = rsaKey[i].subarray(1);
          jwk[rsaComp[i]] = s2a(b2s(rsaKey[i]));
        }
        jwk['kty'] = 'RSA';
        break;
      default:
        throw new TypeError("Unsupported key type");
    }
    return jwk;
  }
  function jwk2pkcs(k) {
    var key,
      info = [['', null]],
      prv = false;
    switch (k.kty) {
      case 'RSA':
        var rsaComp = ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi'],
          rsaKey = [];
        for (var i = 0; i < rsaComp.length; i++) {
          if (!(rsaComp[i] in k)) break;
          var b = rsaKey[i] = s2b(a2s(k[rsaComp[i]]));
          if (b[0] & 0x80) rsaKey[i] = new Uint8Array(b.length + 1), rsaKey[i].set(b, 1);
        }
        if (rsaKey.length > 2) prv = true, rsaKey.unshift(new Uint8Array([0])); // add version to PKCS#1 RSAPrivateKey structure
        info[0][0] = '1.2.840.113549.1.1.1';
        key = rsaKey;
        break;
      default:
        throw new TypeError("Unsupported key type");
    }
    info.push(new Uint8Array(der2b(key)).buffer);
    if (!prv) info[1] = {
      'tag': 0x03,
      'value': info[1]
    };else info.unshift(new Uint8Array([0])); // add version to PKCS#8 PrivateKeyInfo structure
    return new Uint8Array(der2b(info)).buffer;
  }
  var oid2str = {
      'KoZIhvcNAQEB': '1.2.840.113549.1.1.1'
    },
    str2oid = {
      '1.2.840.113549.1.1.1': 'KoZIhvcNAQEB'
    };
  function b2der(buf, ctx) {
    if (buf instanceof ArrayBuffer) buf = new Uint8Array(buf);
    if (!ctx) ctx = {
      pos: 0,
      end: buf.length
    };
    if (ctx.end - ctx.pos < 2 || ctx.end > buf.length) throw new RangeError("Malformed DER");
    var tag = buf[ctx.pos++],
      len = buf[ctx.pos++];
    if (len >= 0x80) {
      len &= 0x7f;
      if (ctx.end - ctx.pos < len) throw new RangeError("Malformed DER");
      for (var xlen = 0; len--;) xlen <<= 8, xlen |= buf[ctx.pos++];
      len = xlen;
    }
    if (ctx.end - ctx.pos < len) throw new RangeError("Malformed DER");
    var rv;
    switch (tag) {
      case 0x02:
        // Universal Primitive INTEGER
        rv = buf.subarray(ctx.pos, ctx.pos += len);
        break;
      case 0x03:
        // Universal Primitive BIT STRING
        if (buf[ctx.pos++]) throw new Error("Unsupported bit string");
        len--;
      case 0x04:
        // Universal Primitive OCTET STRING
        rv = new Uint8Array(buf.subarray(ctx.pos, ctx.pos += len)).buffer;
        break;
      case 0x05:
        // Universal Primitive NULL
        rv = null;
        break;
      case 0x06:
        // Universal Primitive OBJECT IDENTIFIER
        var oid = btoa(b2s(buf.subarray(ctx.pos, ctx.pos += len)));
        if (!(oid in oid2str)) throw new Error("Unsupported OBJECT ID " + oid);
        rv = oid2str[oid];
        break;
      case 0x30:
        // Universal Constructed SEQUENCE
        rv = [];
        for (var end = ctx.pos + len; ctx.pos < end;) rv.push(b2der(buf, ctx));
        break;
      default:
        throw new Error("Unsupported DER tag 0x" + tag.toString(16));
    }
    return rv;
  }
  function der2b(val, buf) {
    if (!buf) buf = [];
    var tag = 0,
      len = 0,
      pos = buf.length + 2;
    buf.push(0, 0); // placeholder

    if (val instanceof Uint8Array) {
      // Universal Primitive INTEGER
      tag = 0x02, len = val.length;
      for (var i = 0; i < len; i++) buf.push(val[i]);
    } else if (val instanceof ArrayBuffer) {
      // Universal Primitive OCTET STRING
      tag = 0x04, len = val.byteLength, val = new Uint8Array(val);
      for (var i = 0; i < len; i++) buf.push(val[i]);
    } else if (val === null) {
      // Universal Primitive NULL
      tag = 0x05, len = 0;
    } else if (typeof val === 'string' && val in str2oid) {
      // Universal Primitive OBJECT IDENTIFIER
      var oid = s2b(atob(str2oid[val]));
      tag = 0x06, len = oid.length;
      for (var i = 0; i < len; i++) buf.push(oid[i]);
    } else if (val instanceof Array) {
      // Universal Constructed SEQUENCE
      for (var i = 0; i < val.length; i++) der2b(val[i], buf);
      tag = 0x30, len = buf.length - pos;
    } else if (_typeof(val) === 'object' && val.tag === 0x03 && val.value instanceof ArrayBuffer) {
      // Tag hint
      val = new Uint8Array(val.value), tag = 0x03, len = val.byteLength;
      buf.push(0);
      for (var i = 0; i < len; i++) buf.push(val[i]);
      len++;
    } else {
      throw new Error("Unsupported DER value " + val);
    }
    if (len >= 0x80) {
      var xlen = len,
        len = 4;
      buf.splice(pos, 0, xlen >> 24 & 0xff, xlen >> 16 & 0xff, xlen >> 8 & 0xff, xlen & 0xff);
      while (len > 1 && !(xlen >> 24)) xlen <<= 8, len--;
      if (len < 4) buf.splice(pos, 4 - len);
      len |= 0x80;
    }
    buf.splice(pos - 2, 2, tag, len);
    return buf;
  }
  function CryptoKey(key, alg, ext, use) {
    Object.defineProperties(this, {
      _key: {
        value: key
      },
      type: {
        value: key.type,
        enumerable: true
      },
      extractable: {
        value: ext === undefined ? key.extractable : ext,
        enumerable: true
      },
      algorithm: {
        value: alg === undefined ? key.algorithm : alg,
        enumerable: true
      },
      usages: {
        value: use === undefined ? key.usages : use,
        enumerable: true
      }
    });
  }
  function isPubKeyUse(u) {
    return u === 'verify' || u === 'encrypt' || u === 'wrapKey';
  }
  function isPrvKeyUse(u) {
    return u === 'sign' || u === 'decrypt' || u === 'unwrapKey';
  }
  ['generateKey', 'importKey', 'unwrapKey'].forEach(function (m) {
    var _fn = _subtle[m];
    _subtle[m] = function (a, b, c) {
      var args = [].slice.call(arguments),
        ka,
        kx,
        ku;
      switch (m) {
        case 'generateKey':
          ka = alg(a), kx = b, ku = c;
          break;
        case 'importKey':
          ka = alg(c), kx = args[3], ku = args[4];
          if (a === 'jwk') {
            b = b2jwk(b);
            if (!b.alg) b.alg = jwkAlg(ka);
            if (!b.key_ops) b.key_ops = b.kty !== 'oct' ? 'd' in b ? ku.filter(isPrvKeyUse) : ku.filter(isPubKeyUse) : ku.slice();
            args[1] = jwk2b(b);
          }
          break;
        case 'unwrapKey':
          ka = args[4], kx = args[5], ku = args[6];
          args[2] = c._key;
          break;
      }
      if (m === 'generateKey' && ka.name === 'HMAC' && ka.hash) {
        ka.length = ka.length || {
          'SHA-1': 512,
          'SHA-256': 512,
          'SHA-384': 1024,
          'SHA-512': 1024
        }[ka.hash.name];
        return _subtle.importKey('raw', _crypto.getRandomValues(new Uint8Array(ka.length + 7 >> 3)), ka, kx, ku);
      }
      if (isWebkit && m === 'generateKey' && ka.name === 'RSASSA-PKCS1-v1_5' && (!ka.modulusLength || ka.modulusLength >= 2048)) {
        a = alg(a), a.name = 'RSAES-PKCS1-v1_5', delete a.hash;
        return _subtle.generateKey(a, true, ['encrypt', 'decrypt']).then(function (k) {
          return Promise.all([_subtle.exportKey('jwk', k.publicKey), _subtle.exportKey('jwk', k.privateKey)]);
        }).then(function (keys) {
          keys[0].alg = keys[1].alg = jwkAlg(ka);
          keys[0].key_ops = ku.filter(isPubKeyUse), keys[1].key_ops = ku.filter(isPrvKeyUse);
          return Promise.all([_subtle.importKey('jwk', keys[0], ka, true, keys[0].key_ops), _subtle.importKey('jwk', keys[1], ka, kx, keys[1].key_ops)]);
        }).then(function (keys) {
          return {
            publicKey: keys[0],
            privateKey: keys[1]
          };
        });
      }
      if ((isWebkit || isIE && (ka.hash || {}).name === 'SHA-1') && m === 'importKey' && a === 'jwk' && ka.name === 'HMAC' && b.kty === 'oct') {
        return _subtle.importKey('raw', s2b(a2s(b.k)), c, args[3], args[4]);
      }
      if (isWebkit && m === 'importKey' && (a === 'spki' || a === 'pkcs8')) {
        return _subtle.importKey('jwk', pkcs2jwk(b), c, args[3], args[4]);
      }
      if (isIE && m === 'unwrapKey') {
        return _subtle.decrypt(args[3], c, b).then(function (k) {
          return _subtle.importKey(a, k, args[4], args[5], args[6]);
        });
      }
      var op;
      try {
        op = _fn.apply(_subtle, args);
      } catch (e) {
        return Promise.reject(e);
      }
      if (isIE) {
        op = new Promise(function (res, rej) {
          op.onabort = op.onerror = function (e) {
            rej(e);
          };
          op.oncomplete = function (r) {
            res(r.target.result);
          };
        });
      }
      op = op.then(function (k) {
        if (ka.name === 'HMAC') {
          if (!ka.length) ka.length = 8 * k.algorithm.length;
        }
        if (ka.name.search('RSA') == 0) {
          if (!ka.modulusLength) ka.modulusLength = (k.publicKey || k).algorithm.modulusLength;
          if (!ka.publicExponent) ka.publicExponent = (k.publicKey || k).algorithm.publicExponent;
        }
        if (k.publicKey && k.privateKey) {
          k = {
            publicKey: new CryptoKey(k.publicKey, ka, kx, ku.filter(isPubKeyUse)),
            privateKey: new CryptoKey(k.privateKey, ka, kx, ku.filter(isPrvKeyUse))
          };
        } else {
          k = new CryptoKey(k, ka, kx, ku);
        }
        return k;
      });
      return op;
    };
  });
  ['exportKey', 'wrapKey'].forEach(function (m) {
    var _fn = _subtle[m];
    _subtle[m] = function (a, b, c) {
      var args = [].slice.call(arguments);
      switch (m) {
        case 'exportKey':
          args[1] = b._key;
          break;
        case 'wrapKey':
          args[1] = b._key, args[2] = c._key;
          break;
      }
      if ((isWebkit || isIE && (b.algorithm.hash || {}).name === 'SHA-1') && m === 'exportKey' && a === 'jwk' && b.algorithm.name === 'HMAC') {
        args[0] = 'raw';
      }
      if (isWebkit && m === 'exportKey' && (a === 'spki' || a === 'pkcs8')) {
        args[0] = 'jwk';
      }
      if (isIE && m === 'wrapKey') {
        return _subtle.exportKey(a, b).then(function (k) {
          if (a === 'jwk') k = s2b(unescape(encodeURIComponent(JSON.stringify(b2jwk(k)))));
          return _subtle.encrypt(args[3], c, k);
        });
      }
      var op;
      try {
        op = _fn.apply(_subtle, args);
      } catch (e) {
        return Promise.reject(e);
      }
      if (isIE) {
        op = new Promise(function (res, rej) {
          op.onabort = op.onerror = function (e) {
            rej(e);
          };
          op.oncomplete = function (r) {
            res(r.target.result);
          };
        });
      }
      if (m === 'exportKey' && a === 'jwk') {
        op = op.then(function (k) {
          if ((isWebkit || isIE && (b.algorithm.hash || {}).name === 'SHA-1') && b.algorithm.name === 'HMAC') {
            return {
              'kty': 'oct',
              'alg': jwkAlg(b.algorithm),
              'key_ops': b.usages.slice(),
              'ext': true,
              'k': s2a(b2s(k))
            };
          }
          k = b2jwk(k);
          if (!k.alg) k['alg'] = jwkAlg(b.algorithm);
          if (!k.key_ops) k['key_ops'] = b.type === 'public' ? b.usages.filter(isPubKeyUse) : b.type === 'private' ? b.usages.filter(isPrvKeyUse) : b.usages.slice();
          return k;
        });
      }
      if (isWebkit && m === 'exportKey' && (a === 'spki' || a === 'pkcs8')) {
        op = op.then(function (k) {
          k = jwk2pkcs(b2jwk(k));
          return k;
        });
      }
      return op;
    };
  });
  ['encrypt', 'decrypt', 'sign', 'verify'].forEach(function (m) {
    var _fn = _subtle[m];
    _subtle[m] = function (a, b, c, d) {
      if (isIE && (!c.byteLength || d && !d.byteLength)) throw new Error("Empy input is not allowed");
      var args = [].slice.call(arguments),
        ka = alg(a);
      if (isIE && m === 'decrypt' && ka.name === 'AES-GCM') {
        var tl = a.tagLength >> 3;
        args[2] = (c.buffer || c).slice(0, c.byteLength - tl), a.tag = (c.buffer || c).slice(c.byteLength - tl);
      }
      args[1] = b._key;
      var op;
      try {
        op = _fn.apply(_subtle, args);
      } catch (e) {
        return Promise.reject(e);
      }
      if (isIE) {
        op = new Promise(function (res, rej) {
          op.onabort = op.onerror = function (e) {
            rej(e);
          };
          op.oncomplete = function (r) {
            var r = r.target.result;
            if (m === 'encrypt' && r instanceof AesGcmEncryptResult) {
              var c = r.ciphertext,
                t = r.tag;
              r = new Uint8Array(c.byteLength + t.byteLength);
              r.set(new Uint8Array(c), 0);
              r.set(new Uint8Array(t), c.byteLength);
              r = r.buffer;
            }
            res(r);
          };
        });
      }
      return op;
    };
  });
  if (isIE) {
    var _digest = _subtle.digest;
    _subtle['digest'] = function (a, b) {
      if (!b.byteLength) throw new Error("Empy input is not allowed");
      var op;
      try {
        op = _digest.call(_subtle, a, b);
      } catch (e) {
        return Promise.reject(e);
      }
      op = new Promise(function (res, rej) {
        op.onabort = op.onerror = function (e) {
          rej(e);
        };
        op.oncomplete = function (r) {
          res(r.target.result);
        };
      });
      return op;
    };
    global.crypto = Object.create(_crypto, {
      getRandomValues: {
        value: function value(a) {
          return _crypto.getRandomValues(a);
        }
      },
      subtle: {
        value: _subtle
      }
    });
    global.CryptoKey = CryptoKey;
  }
  if (isWebkit) {
    _crypto.subtle = _subtle;
    global.Crypto = _Crypto;
    global.SubtleCrypto = _SubtleCrypto;
    global.CryptoKey = CryptoKey;
  }
});
 // section modified by isomorphic-webcrypto build

var browser$1 = window.crypto;

var browser$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: browser$1
});

var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(browser$2);

var main_browser;
var hasRequiredMain_browser;
function requireMain_browser() {
  if (hasRequiredMain_browser) return main_browser;
  hasRequiredMain_browser = 1;
  main_browser = require$$0$1;
  return main_browser;
}

var BN$f = bnExports$2;
var nacl$4 = naclFastExports;
var ethunit = lib$2;
var isCryptoAvailable = typeof self !== 'undefined' && self.crypto && self.crypto.subtle;
var myCrypto = null;
if (isCryptoAvailable) ; else {
  // nodejs or react-native
  myCrypto = requireMain_browser();
}

/**
 * @param bytes {Uint8Array}
 * @return  {Promise<ArrayBuffer>}
 */
function sha256$3(bytes) {
  if (isCryptoAvailable) {
    // web
    return crypto.subtle.digest("SHA-256", bytes);
  } else {
    // nodejs or react-native
    return myCrypto.subtle.digest({
      name: "SHA-256"
    }, bytes);
  }
}

/**
 * from coins to nanocoins
 * @param amount {BN | string}
 * @return {BN}
 */
function toNano$2(amount) {
  if (!BN$f.isBN(amount) && !(typeof amount === 'string')) {
    throw new Error('Please pass numbers as strings or BN objects to avoid precision errors.');
  }
  return ethunit.toWei(amount, 'gwei');
}

/**
 * from nanocoins to coins
 * @param amount  {BN | string}
 * @return {string}
 */
function fromNano$1(amount) {
  if (!BN$f.isBN(amount) && !(typeof amount === 'string')) {
    throw new Error('Please pass numbers as strings or BN objects to avoid precision errors.');
  }
  return ethunit.fromWei(amount, 'gwei');
}

// look up tables
var to_hex_array = [];
var to_byte_map = {};
for (var ord = 0; ord <= 0xff; ord++) {
  var s = ord.toString(16);
  if (s.length < 2) {
    s = "0" + s;
  }
  to_hex_array.push(s);
  to_byte_map[s] = ord;
}

//  converter using lookups
/**
 * @param buffer  {Uint8Array}
 * @return {string}
 */
function bytesToHex$c(buffer) {
  var hex_array = [];
  //(new Uint8Array(buffer)).forEach((v) => { hex_array.push(to_hex_array[v]) });
  for (var i = 0; i < buffer.byteLength; i++) {
    hex_array.push(to_hex_array[buffer[i]]);
  }
  return hex_array.join("");
}

// reverse conversion using lookups
/**
 * @param s {string}
 * @return {Uint8Array}
 */
function hexToBytes$6(s) {
  s = s.toLowerCase();
  var length2 = s.length;
  if (length2 % 2 !== 0) {
    throw "hex string must have length a multiple of 2";
  }
  var length = length2 / 2;
  var result = new Uint8Array(length);
  for (var i = 0; i < length; i++) {
    var i2 = i * 2;
    var b = s.substring(i2, i2 + 2);
    if (!to_byte_map.hasOwnProperty(b)) throw new Error('invalid hex character ' + b);
    result[i] = to_byte_map[b];
  }
  return result;
}

/**
 * @param str {string}
 * @param size  {number}
 * @return {Uint8Array}
 */
function stringToBytes$2(str) {
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var buf;
  var bufView;
  if (size === 1) {
    buf = new ArrayBuffer(str.length);
    bufView = new Uint8Array(buf);
  }
  if (size === 2) {
    buf = new ArrayBuffer(str.length * 2);
    bufView = new Uint16Array(buf);
  }
  if (size === 4) {
    buf = new ArrayBuffer(str.length * 4);
    bufView = new Uint32Array(buf);
  }
  for (var i = 0, strLen = str.length; i < strLen; i++) {
    bufView[i] = str.charCodeAt(i);
  }
  return new Uint8Array(bufView.buffer);
}

/**
 * @private
 * @param crc {number}
 * @param bytes {Uint8Array}
 * @return {number}
 */
function _crc32c(crc, bytes) {
  var POLY = 0x82f63b78;
  crc ^= 0xffffffff;
  for (var n = 0; n < bytes.length; n++) {
    crc ^= bytes[n];
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
  }
  return crc ^ 0xffffffff;
}

/**
 * @param bytes {Uint8Array}
 * @return {Uint8Array}
 */
function crc32c$2(bytes) {
  //Version suitable for crc32-c of BOC
  var int_crc = _crc32c(0, bytes);
  var arr = new ArrayBuffer(4);
  var view = new DataView(arr);
  view.setUint32(0, int_crc, false);
  return new Uint8Array(arr).reverse();
}

/**
 * @param data  {ArrayLike<number>}
 * @return {Uint8Array}
 */
function crc16$2(data) {
  var poly = 0x1021;
  var reg = 0;
  var message = new Uint8Array(data.length + 2);
  message.set(data);
  var _iterator = _createForOfIteratorHelper(message),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _byte = _step.value;
      var mask = 0x80;
      while (mask > 0) {
        reg <<= 1;
        if (_byte & mask) {
          reg += 1;
        }
        mask >>= 1;
        if (reg > 0xffff) {
          reg &= 0xffff;
          reg ^= poly;
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return new Uint8Array([Math.floor(reg / 256), reg % 256]);
}

/**
 * @param a {Uint8Array}
 * @param b {Uint8Array}
 * @return {Uint8Array}
 */
function concatBytes$2(a, b) {
  var c = new Uint8Array(a.length + b.length);
  c.set(a);
  c.set(b, a.length);
  return c;
}

/**
 * @param a {Uint8Array}
 * @param b {Uint8Array}
 * @return {boolean}
 */
function compareBytes$2(a, b) {
  // TODO Make it smarter
  return a.toString() === b.toString();
}
var base64abc = function () {
  var abc = [];
  var A = "A".charCodeAt(0);
  var a = "a".charCodeAt(0);
  var n = "0".charCodeAt(0);
  for (var i = 0; i < 26; ++i) {
    abc.push(String.fromCharCode(A + i));
  }
  for (var _i = 0; _i < 26; ++_i) {
    abc.push(String.fromCharCode(a + _i));
  }
  for (var _i2 = 0; _i2 < 10; ++_i2) {
    abc.push(String.fromCharCode(n + _i2));
  }
  abc.push("+");
  abc.push("/");
  return abc;
}();

/**
 * @param bytes {Uint8Array}
 * @return {string}
 */
function bytesToBase64$5(bytes) {
  var result = "";
  var i;
  var l = bytes.length;
  for (i = 2; i < l; i += 3) {
    result += base64abc[bytes[i - 2] >> 2];
    result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];
    result += base64abc[(bytes[i - 1] & 0x0f) << 2 | bytes[i] >> 6];
    result += base64abc[bytes[i] & 0x3f];
  }
  if (i === l + 1) {
    // 1 octet missing
    result += base64abc[bytes[i - 2] >> 2];
    result += base64abc[(bytes[i - 2] & 0x03) << 4];
    result += "==";
  }
  if (i === l) {
    // 2 octets missing
    result += base64abc[bytes[i - 2] >> 2];
    result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];
    result += base64abc[(bytes[i - 1] & 0x0f) << 2];
    result += "=";
  }
  return result;
}

// todo: base64 decoding process could ignore one extra character at the end of string and the byte-length check below won't be able to catch it.
function base64toString$2(base64) {
  if (typeof self === 'undefined') {
    return Buffer.from(base64, 'base64').toString('binary'); // todo: (tolya-yanot) Buffer silently ignore incorrect base64 symbols, we need to throw error
  } else {
    return atob(base64);
  }
}
function stringToBase64$2(s) {
  if (typeof self === 'undefined') {
    return Buffer.from(s, 'binary').toString('base64'); // todo: (tolya-yanot) Buffer silently ignore incorrect base64 symbols, we need to throw error
  } else {
    return btoa(s);
  }
}

/**
 * @param base64  {string}
 * @return {Uint8Array}
 */
function base64ToBytes$4(base64) {
  var binary_string = base64toString$2(base64);
  var len = binary_string.length;
  var bytes = new Uint8Array(len);
  for (var i = 0; i < len; i++) {
    bytes[i] = binary_string.charCodeAt(i);
  }
  return bytes;
}

/**
 * @param n  {number}
 * @param ui8array  {Uint8Array}
 * @return {number}
 */
function readNBytesUIntFromArray$2(n, ui8array) {
  var res = 0;
  for (var c = 0; c < n; c++) {
    res *= 256;
    res += ui8array[c];
  }
  return res;
}

/**
 * @param seed  {Uint8Array}
 * @returns {nacl.SignKeyPair}
 */
function keyPairFromSeed$1(seed) {
  return nacl$4.sign.keyPair.fromSeed(seed);
}

/**
 * @returns {nacl.SignKeyPair}
 */
function newKeyPair$1() {
  return nacl$4.sign.keyPair();
}

/**
 * @returns {Uint8Array}
 */
function newSeed$1() {
  return nacl$4.sign.keyPair().secretKey.slice(0, 32);
}
var Utils = {
  BN: BN$f,
  nacl: nacl$4,
  sha256: sha256$3,
  fromNano: fromNano$1,
  toNano: toNano$2,
  bytesToHex: bytesToHex$c,
  hexToBytes: hexToBytes$6,
  stringToBytes: stringToBytes$2,
  crc32c: crc32c$2,
  crc16: crc16$2,
  concatBytes: concatBytes$2,
  bytesToBase64: bytesToBase64$5,
  base64ToBytes: base64ToBytes$4,
  base64toString: base64toString$2,
  stringToBase64: stringToBase64$2,
  compareBytes: compareBytes$2,
  readNBytesUIntFromArray: readNBytesUIntFromArray$2,
  keyPairFromSeed: keyPairFromSeed$1,
  newKeyPair: newKeyPair$1,
  newSeed: newSeed$1
};

var Address$a = {};

var crc16$1 = Utils.crc16,
  hexToBytes$5 = Utils.hexToBytes,
  bytesToHex$b = Utils.bytesToHex,
  stringToBytes$1 = Utils.stringToBytes,
  base64toString$1 = Utils.base64toString,
  stringToBase64$1 = Utils.stringToBase64;
var bounceable_tag = 0x11;
var non_bounceable_tag = 0x51;
var test_flag = 0x80;

/**
 * @private
 * @param addressString {string}
 * @return {{isTestOnly: boolean, workchain: number, hashPart: Uint8Array, isBounceable: boolean}}
 */
function parseFriendlyAddress(addressString) {
  if (addressString.length !== 48) {
    throw new Error("User-friendly address should contain strictly 48 characters");
  }
  var data = stringToBytes$1(base64toString$1(addressString));
  if (data.length !== 36) {
    // 1byte tag + 1byte workchain + 32 bytes hash + 2 byte crc
    throw "Unknown address type: byte length is not equal to 36";
  }
  var addr = data.slice(0, 34);
  var crc = data.slice(34, 36);
  var calcedCrc = crc16$1(addr);
  if (!(calcedCrc[0] === crc[0] && calcedCrc[1] === crc[1])) {
    throw "Wrong crc16 hashsum";
  }
  var tag = addr[0];
  var isTestOnly = false;
  var isBounceable = false;
  if (tag & test_flag) {
    isTestOnly = true;
    tag = tag ^ test_flag;
  }
  if (tag !== bounceable_tag && tag !== non_bounceable_tag) throw "Unknown address tag";
  isBounceable = tag === bounceable_tag;
  var workchain = null;
  if (addr[1] === 0xff) {
    // TODO we should read signed integer here
    workchain = -1;
  } else {
    workchain = addr[1];
  }
  if (workchain !== 0 && workchain !== -1) throw new Error('Invalid address wc ' + workchain);
  var hashPart = addr.slice(2, 34);
  return {
    isTestOnly: isTestOnly,
    isBounceable: isBounceable,
    workchain: workchain,
    hashPart: hashPart
  };
}
var Address$9 = /*#__PURE__*/function () {
  /**
   * @param anyForm {string | Address}
   */
  function Address(anyForm) {
    _classCallCheck(this, Address);
    if (anyForm == null) {
      throw "Invalid address";
    }
    if (anyForm instanceof Address) {
      this.wc = anyForm.wc;
      this.hashPart = anyForm.hashPart;
      this.isTestOnly = anyForm.isTestOnly;
      this.isUserFriendly = anyForm.isUserFriendly;
      this.isBounceable = anyForm.isBounceable;
      this.isUrlSafe = anyForm.isUrlSafe;
      return;
    }
    this.isUrlSafe = true;
    if (anyForm.search(/\-/) > 0 || anyForm.search(/_/) > 0) {
      anyForm = anyForm.replace(/\-/g, '+').replace(/_/g, '\/');
    } else {
      this.isUrlSafe = false;
    }
    if (anyForm.indexOf(':') > -1) {
      var arr = anyForm.split(':');
      if (arr.length !== 2) throw new Error('Invalid address ' + anyForm);
      var wc = parseInt(arr[0]);
      if (wc !== 0 && wc !== -1) throw new Error('Invalid address wc ' + anyForm);
      var hex = arr[1];
      if (hex.length !== 64) throw new Error('Invalid address hex ' + anyForm);
      this.isUserFriendly = false;
      this.wc = wc;
      this.hashPart = hexToBytes$5(hex);
      this.isTestOnly = false;
      this.isBounceable = false;
    } else {
      this.isUserFriendly = true;
      var parseResult = parseFriendlyAddress(anyForm);
      this.wc = parseResult.workchain;
      this.hashPart = parseResult.hashPart;
      this.isTestOnly = parseResult.isTestOnly;
      this.isBounceable = parseResult.isBounceable;
    }
  }

  /**
   * @param isUserFriendly? {boolean}
   * @param isUrlSafe? {boolean}
   * @param isBounceable? {boolean}
   * @param isTestOnly? {boolean}
   * @return {string}
   */
  return _createClass(Address, [{
    key: "toString",
    value: function toString(isUserFriendly, isUrlSafe, isBounceable, isTestOnly) {
      if (isUserFriendly === undefined) isUserFriendly = this.isUserFriendly;
      if (isUrlSafe === undefined) isUrlSafe = this.isUrlSafe;
      if (isBounceable === undefined) isBounceable = this.isBounceable;
      if (isTestOnly === undefined) isTestOnly = this.isTestOnly;
      if (!isUserFriendly) {
        return this.wc + ":" + bytesToHex$b(this.hashPart);
      } else {
        var tag = isBounceable ? bounceable_tag : non_bounceable_tag;
        if (isTestOnly) {
          tag |= test_flag;
        }
        var addr = new Int8Array(34);
        addr[0] = tag;
        addr[1] = this.wc;
        addr.set(this.hashPart, 2);
        var addressWithChecksum = new Uint8Array(36);
        addressWithChecksum.set(addr);
        addressWithChecksum.set(crc16$1(addr), 34);
        var addressBase64 = stringToBase64$1(String.fromCharCode.apply(null, new Uint8Array(addressWithChecksum)));
        if (isUrlSafe) {
          addressBase64 = addressBase64.replace(/\+/g, '-').replace(/\//g, '_');
        }
        return addressBase64;
      }
    }
  }], [{
    key: "isValid",
    value:
    /**
     * @param anyForm {string | Address}
     */
    function isValid(anyForm) {
      try {
        new Address(anyForm);
        return true;
      } catch (e) {
        return false;
      }
    }
  }]);
}();
Address$a["default"] = Address$9;

var AdnlAddress$3 = {};

var hexToBytes$4 = Utils.hexToBytes,
  bytesToHex$a = Utils.bytesToHex;
var AdnlAddress$2 = /*#__PURE__*/function () {
  /**
   * @param anyForm {string | Uint8Array | AdnlAddress}
   */
  function AdnlAddress(anyForm) {
    _classCallCheck(this, AdnlAddress);
    if (anyForm == null) {
      throw "Invalid address";
    }
    if (anyForm instanceof AdnlAddress) {
      this.bytes = anyForm.bytes;
    } else if (anyForm instanceof Uint8Array) {
      if (anyForm.length !== 32) {
        throw new Error('invalid adnl bytes length');
      }
      this.bytes = anyForm;
    } else if (typeof anyForm === 'string') {
      if (anyForm.length !== 64) {
        throw new Error('invalid adnl hex length');
      }
      this.bytes = hexToBytes$4(anyForm);
    } else {
      throw new Error('unsupported type');
    }
  }
  return _createClass(AdnlAddress, [{
    key: "toHex",
    value: function toHex() {
      var hex = bytesToHex$a(this.bytes);
      while (hex.length < 64) {
        hex = '0' + hex;
      }
      return hex;
    }
  }], [{
    key: "isValid",
    value:
    /**
     * @param anyForm {string | Uint8Array | AdnlAddress}
     */
    function isValid(anyForm) {
      try {
        new AdnlAddress(anyForm);
        return true;
      } catch (e) {
        return false;
      }
    }
  }]);
}();
AdnlAddress$3["default"] = AdnlAddress$2;

var StorageBagId$3 = {};

var hexToBytes$3 = Utils.hexToBytes,
  bytesToHex$9 = Utils.bytesToHex;
var StorageBagId$2 = /*#__PURE__*/function () {
  /**
   * @param anyForm {string | Uint8Array | StorageBagId}
   */
  function StorageBagId(anyForm) {
    _classCallCheck(this, StorageBagId);
    if (anyForm == null) {
      throw "Invalid address";
    }
    if (anyForm instanceof StorageBagId) {
      this.bytes = anyForm.bytes;
    } else if (anyForm instanceof Uint8Array) {
      if (anyForm.length !== 32) {
        throw new Error('invalid bag id bytes length');
      }
      this.bytes = anyForm;
    } else if (typeof anyForm === 'string') {
      if (anyForm.length !== 64) {
        throw new Error('invalid bag id hex length');
      }
      this.bytes = hexToBytes$3(anyForm);
    } else {
      throw new Error('unsupported type');
    }
  }
  return _createClass(StorageBagId, [{
    key: "toHex",
    value: function toHex() {
      var hex = bytesToHex$9(this.bytes);
      while (hex.length < 64) {
        hex = '0' + hex;
      }
      return hex;
    }
  }], [{
    key: "isValid",
    value:
    /**
     * @param anyForm {string | Uint8Array | StorageBagId}
     */
    function isValid(anyForm) {
      try {
        new StorageBagId(anyForm);
        return true;
      } catch (e) {
        return false;
      }
    }
  }]);
}();
StorageBagId$3["default"] = StorageBagId$2;

var BN$e = Utils.BN,
  nacl$3 = Utils.nacl,
  sha256$2 = Utils.sha256,
  fromNano = Utils.fromNano,
  toNano$1 = Utils.toNano,
  bytesToHex$8 = Utils.bytesToHex,
  hexToBytes$2 = Utils.hexToBytes,
  stringToBytes = Utils.stringToBytes,
  crc32c$1 = Utils.crc32c,
  crc16 = Utils.crc16,
  concatBytes$1 = Utils.concatBytes,
  bytesToBase64$4 = Utils.bytesToBase64,
  base64ToBytes$3 = Utils.base64ToBytes,
  base64toString = Utils.base64toString,
  stringToBase64 = Utils.stringToBase64,
  compareBytes$1 = Utils.compareBytes,
  readNBytesUIntFromArray$1 = Utils.readNBytesUIntFromArray,
  keyPairFromSeed = Utils.keyPairFromSeed,
  newKeyPair = Utils.newKeyPair,
  newSeed = Utils.newSeed;
var Address$8 = Address$a["default"];
var AdnlAddress$1 = AdnlAddress$3["default"];
var StorageBagId$1 = StorageBagId$3["default"];

// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG
// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000
// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000&text=data
// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000&text=foo%3A%2F%2Fbar%2C%2Fbaz%3Famount%3D1%26text%3D%D1%80%D1%83
/**
 * @param url {string}
 * @return {{address: string, amount?: string, text?: string}}
 * @throws if invalid url
 */
function parseTransferUrl(url) {
  var PREFIX = 'ton://transfer/';
  if (!url.startsWith(PREFIX)) {
    throw new Error('must starts with ' + PREFIX);
  }
  var arr = url.substring(PREFIX.length).split('?');
  if (arr.length > 2) {
    throw new Error('multiple "?"');
  }
  var address = arr[0];
  if (!Address$8.isValid(address)) {
    throw new Error('invalid address format ' + address);
  }
  var result = {
    address: address
  };
  var rest = arr[1];
  if (rest && rest.length) {
    var pairs = rest.split('&').map(function (s) {
      return s.split('=');
    });
    var _iterator = _createForOfIteratorHelper(pairs),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var pair = _step.value;
        if (pair.length !== 2) throw new Error('invalid url pair');
        var key = pair[0];
        var value = pair[1];
        if (key === 'amount') {
          if (result.amount) {
            throw new Error('amount already set');
          }
          var bn = new BN$e(value);
          if (bn.isNeg()) {
            throw new Error('negative amount');
          }
          result.amount = value;
        } else if (key === 'text') {
          if (result.text) {
            throw new Error('text already set');
          }
          result.text = decodeURIComponent(value);
        } else {
          throw new Error('unknown url var ' + key);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  return result;
}

/**
 * @param address   {string}
 * @param amount?    {string} in nano
 * @param text?   {string}
 * @return {string}
 */
function formatTransferUrl(address, amount, text) {
  var url = 'ton://transfer/' + address;
  var params = [];
  if (amount) {
    params.push('amount=' + amount);
  }
  if (text) {
    params.push('text=' + encodeURIComponent(text));
  }
  if (params.length === 0) return url;
  return url + '?' + params.join('&');
}
var utils$1 = {
  Address: Address$8,
  AdnlAddress: AdnlAddress$1,
  StorageBagId: StorageBagId$1,
  BN: BN$e,
  nacl: nacl$3,
  sha256: sha256$2,
  fromNano: fromNano,
  toNano: toNano$1,
  bytesToHex: bytesToHex$8,
  hexToBytes: hexToBytes$2,
  stringToBytes: stringToBytes,
  crc32c: crc32c$1,
  crc16: crc16,
  concatBytes: concatBytes$1,
  bytesToBase64: bytesToBase64$4,
  base64ToBytes: base64ToBytes$3,
  base64toString: base64toString,
  stringToBase64: stringToBase64,
  compareBytes: compareBytes$1,
  readNBytesUIntFromArray: readNBytesUIntFromArray$1,
  parseTransferUrl: parseTransferUrl,
  formatTransferUrl: formatTransferUrl,
  keyPairFromSeed: keyPairFromSeed,
  newKeyPair: newKeyPair,
  newSeed: newSeed
};

var BN$d = utils$1.BN,
  bytesToHex$7 = utils$1.bytesToHex;
var BitString$3 = /*#__PURE__*/function () {
  /**
   * @param length {number}    length of BitString in bits
   */
  function BitString(length) {
    _classCallCheck(this, BitString);
    this.array = Uint8Array.from({
      length: Math.ceil(length / 8)
    }, function () {
      return 0;
    });
    this.cursor = 0;
    this.length = length;
  }

  /**
   * @return {number}
   */
  return _createClass(BitString, [{
    key: "getFreeBits",
    value: function getFreeBits() {
      return this.length - this.cursor;
    }

    /**
     * @return {number}
     */
  }, {
    key: "getUsedBits",
    value: function getUsedBits() {
      return this.cursor;
    }

    /**
     * @return {number}
     */
  }, {
    key: "getUsedBytes",
    value: function getUsedBytes() {
      return Math.ceil(this.cursor / 8);
    }

    /**
     * @param n {number}
     * @return {boolean}    bit value at position `n`
     */
  }, {
    key: "get",
    value: function get(n) {
      return (this.array[n / 8 | 0] & 1 << 7 - n % 8) > 0;
    }

    /**
     * @private
     * @param n {number}
     */
  }, {
    key: "checkRange",
    value: function checkRange(n) {
      if (n > this.length) {
        throw Error("BitString overflow");
      }
    }

    /**
     * Set bit value to 1 at position `n`
     * @param n {number}
     */
  }, {
    key: "on",
    value: function on(n) {
      this.checkRange(n);
      this.array[n / 8 | 0] |= 1 << 7 - n % 8;
    }

    /**
     * Set bit value to 0 at position `n`
     * @param n {number}
     */
  }, {
    key: "off",
    value: function off(n) {
      this.checkRange(n);
      this.array[n / 8 | 0] &= ~(1 << 7 - n % 8);
    }

    /**
     * Toggle bit value at position `n`
     * @param n {number}
     */
  }, {
    key: "toggle",
    value: function toggle(n) {
      this.checkRange(n);
      this.array[n / 8 | 0] ^= 1 << 7 - n % 8;
    }

    /**
     * forEach every bit
     * @param callback  {function(boolean): void}
     */
  }, {
    key: "forEach",
    value: function forEach(callback) {
      var max = this.cursor;
      for (var x = 0; x < max; x++) {
        callback(this.get(x));
      }
    }

    /**
     * Write bit and increase cursor
     * @param b  {boolean | number}
     */
  }, {
    key: "writeBit",
    value: function writeBit(b) {
      if (b && b > 0) {
        this.on(this.cursor);
      } else {
        this.off(this.cursor);
      }
      this.cursor = this.cursor + 1;
    }

    /**
     * @param ba  {Array<boolean | number>}
     */
  }, {
    key: "writeBitArray",
    value: function writeBitArray(ba) {
      for (var i = 0; i < ba.length; i++) {
        this.writeBit(ba[i]);
      }
    }

    /**
     * Write unsigned int
     * @param number  {number | BN}
     * @param bitLength  {number}  size of uint in bits
     */
  }, {
    key: "writeUint",
    value: function writeUint(number, bitLength) {
      if (isNaN(number)) throw new Error('writeUint: value is NaN');
      if (number === null) throw new Error('writeUint: value is null');
      if (number === undefined) throw new Error('writeUint: value is undefined');
      if (!bitLength) throw new Error('writeUint: no bitLength');
      number = new BN$d(number);
      if (bitLength == 0 || number.toString(2).length > bitLength) {
        if (number == 0) return;
        throw Error("bitLength is too small for number, got number=" + number + ",bitLength=" + bitLength);
      }
      var s = number.toString(2, bitLength);
      for (var i = 0; i < bitLength; i++) {
        this.writeBit(s[i] == 1);
      }
    }

    /**
     * Write signed int
     * @param number  {number | BN}
     * @param bitLength  {number}  size of int in bits
     */
  }, {
    key: "writeInt",
    value: function writeInt(number, bitLength) {
      if (isNaN(number)) throw new Error('writeInt: value is NaN');
      if (number === null) throw new Error('writeInt: value is null');
      if (number === undefined) throw new Error('writeInt: value is undefined');
      if (!bitLength) throw new Error('writeInt: no bitLength');
      number = new BN$d(number);
      if (bitLength == 1) {
        if (number == -1) {
          this.writeBit(true);
          return;
        }
        if (number == 0) {
          this.writeBit(false);
          return;
        }
        throw Error("Bitlength is too small for number");
      } else {
        if (number.isNeg()) {
          this.writeBit(true);
          var b = new BN$d(2);
          var nb = b.pow(new BN$d(bitLength - 1));
          this.writeUint(nb.add(number), bitLength - 1);
        } else {
          this.writeBit(false);
          this.writeUint(number, bitLength - 1);
        }
      }
    }

    /**
     * Write unsigned 8-bit int
     * @param ui8 {number}
     */
  }, {
    key: "writeUint8",
    value: function writeUint8(ui8) {
      this.writeUint(ui8, 8);
    }

    /**
     * Write array of unsigned 8-bit ints
     * @param ui8 {Uint8Array}
     */
  }, {
    key: "writeBytes",
    value: function writeBytes(ui8) {
      for (var i = 0; i < ui8.length; i++) {
        this.writeUint8(ui8[i]);
      }
    }

    /**
     * Write UTF-8 string
     *
     * @param value {string}
     */
  }, {
    key: "writeString",
    value: function writeString(value) {
      this.writeBytes(new TextEncoder().encode(value));
    }

    /**
     * @param amount  {number | BN} in nanograms
     */
  }, {
    key: "writeGrams",
    value: function writeGrams(amount) {
      if (amount == 0) {
        this.writeUint(0, 4);
      } else {
        amount = new BN$d(amount);
        var l = Math.ceil(amount.toString(16).length / 2);
        this.writeUint(l, 4);
        this.writeUint(amount, l * 8);
      }
    }

    /**
     * @param amount  {number | BN} in nanotons
     */
  }, {
    key: "writeCoins",
    value: function writeCoins(amount) {
      this.writeGrams(amount);
    }

    //addr_none$00 = MsgAddressExt;
    //addr_std$10 anycast:(Maybe Anycast)
    // workchain_id:int8 address:uint256 = MsgAddressInt;
    /**
     * @param address {Address | null}
     */
  }, {
    key: "writeAddress",
    value: function writeAddress(address) {
      if (address == null) {
        this.writeUint(0, 2);
      } else {
        this.writeUint(2, 2);
        this.writeUint(0, 1); // TODO split addresses (anycast)
        this.writeInt(address.wc, 8);
        this.writeBytes(address.hashPart);
      }
    }

    /**
     * write another BitString to this BitString
     * @param anotherBitString  {BitString}
     */
  }, {
    key: "writeBitString",
    value: function writeBitString(anotherBitString) {
      var _this = this;
      anotherBitString.forEach(function (x) {
        _this.writeBit(x);
      });
    }
  }, {
    key: "clone",
    value: function clone() {
      var result = new BitString(0);
      result.array = this.array.slice(0);
      result.length = this.length;
      result.cursor = this.cursor;
      return result;
    }

    /**
     * @return {string} hex
     */
  }, {
    key: "toString",
    value: function toString() {
      return this.toHex();
    }

    /**
     * @return {Uint8Array}
     */
  }, {
    key: "getTopUppedArray",
    value: function getTopUppedArray() {
      var ret = this.clone();
      var tu = Math.ceil(ret.cursor / 8) * 8 - ret.cursor;
      if (tu > 0) {
        tu = tu - 1;
        ret.writeBit(true);
        while (tu > 0) {
          tu = tu - 1;
          ret.writeBit(false);
        }
      }
      ret.array = ret.array.slice(0, Math.ceil(ret.cursor / 8));
      return ret.array;
    }

    /**
     * like Fift
     * @return {string}
     */
  }, {
    key: "toHex",
    value: function toHex() {
      if (this.cursor % 4 === 0) {
        var s = bytesToHex$7(this.array.slice(0, Math.ceil(this.cursor / 8))).toUpperCase();
        if (this.cursor % 8 === 0) {
          return s;
        } else {
          return s.substr(0, s.length - 1);
        }
      } else {
        var temp = this.clone();
        temp.writeBit(1);
        while (temp.cursor % 4 !== 0) {
          temp.writeBit(0);
        }
        var hex = temp.toHex().toUpperCase();
        return hex + '_';
      }
    }

    /**
     * set this cell data to match provided topUppedArray
     * @param array  {Uint8Array}
     * @param fullfilledBytes  {boolean}
     */
  }, {
    key: "setTopUppedArray",
    value: function setTopUppedArray(array) {
      var fullfilledBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.length = array.length * 8;
      this.array = array;
      this.cursor = this.length;
      if (fullfilledBytes || !this.length) {
        return;
      } else {
        var foundEndBit = false;
        for (var c = 0; c < 7; c++) {
          this.cursor -= 1;
          if (this.get(this.cursor)) {
            foundEndBit = true;
            this.off(this.cursor);
            break;
          }
        }
        if (!foundEndBit) {
          console.log(array, fullfilledBytes);
          throw new Error("Incorrect TopUppedArray");
        }
      }
    }
  }]);
}();
var BitString_1 = {
  BitString: BitString$3
};

var BN$c = utils$1.BN,
  Address$7 = utils$1.Address,
  bytesToHex$6 = utils$1.bytesToHex;
var BitString$2 = BitString_1.BitString;

/**
 * A partial view of a TVM cell, used for parsing data from Cells.
 */
var Slice$2 = /*#__PURE__*/function () {
  /**
   * @param array {Uint8Array}
   * @param length {number} length in bits
   * @param refs {Slice[]} child cells
   */
  function Slice(array, length, refs) {
    _classCallCheck(this, Slice);
    this.array = array;
    this.length = length;
    this.readCursor = 0;
    this.refs = refs;
    this.refCursor = 0;
  }

  /**
   * @return {number}
   */
  return _createClass(Slice, [{
    key: "getFreeBits",
    value: function getFreeBits() {
      return this.length - this.readCursor;
    }

    /**
     * @private
     * @param n {number}
     */
  }, {
    key: "checkRange",
    value: function checkRange(n) {
      if (n > this.length) {
        throw Error("BitString overflow");
      }
    }

    /**
     * @private
     * @param n {number}
     * @return {boolean}    bit value at position `n`
     */
  }, {
    key: "get",
    value: function get(n) {
      this.checkRange(n);
      return (this.array[n / 8 | 0] & 1 << 7 - n % 8) > 0;
    }

    /**
     * @return {boolean}   read bit
     */
  }, {
    key: "loadBit",
    value: function loadBit() {
      var result = this.get(this.readCursor);
      this.readCursor++;
      return result;
    }

    /**
     * @param bitLength {number}
     * @return {Uint8Array}
     */
  }, {
    key: "loadBits",
    value: function loadBits(bitLength) {
      var result = new BitString$2(bitLength);
      for (var i = 0; i < bitLength; i++) {
        result.writeBit(this.loadBit());
      }
      return result.array;
    }

    /**
     * Reads unsigned int
     *
     * @param {number} bitLength Size of uint in bits
     * @returns {BN} number
     */
  }, {
    key: "loadUint",
    value: function loadUint(bitLength) {
      if (bitLength < 1) {
        throw "Incorrect bitLength";
      }
      var s = '';
      for (var i = 0; i < bitLength; i++) {
        s += this.loadBit() ? '1' : '0';
      }
      return new BN$c(s, 2);
    }

    /**
     * Reads signed int
     *
     * @param {number} bitLength Size of uint in bits
     * @returns {BN} number
     */
  }, {
    key: "loadInt",
    value: function loadInt(bitLength) {
      if (bitLength < 1) {
        throw "Incorrect bitLength";
      }
      var sign = this.loadBit();
      if (bitLength === 1) {
        return sign ? new BN$c(-1) : new BN$c(0);
      }
      var number = this.loadUint(bitLength - 1);
      if (sign) {
        var b = new BN$c(2);
        var nb = b.pow(new BN$c(bitLength - 1));
        number = number.sub(nb);
      }
      return number;
    }

    /**
     * @param bitLength {number}
     * @return {BN}
     */
  }, {
    key: "loadVarUint",
    value: function loadVarUint(bitLength) {
      var len = this.loadUint(new BN$c(bitLength).toString(2).length - 1);
      if (len.toNumber() === 0) {
        return new BN$c(0);
      } else {
        return this.loadUint(len * 8);
      }
    }

    /**
     * @return {BN}
     */
  }, {
    key: "loadCoins",
    value: function loadCoins() {
      return this.loadVarUint(16);
    }
  }, {
    key: "loadAddress",
    value: function loadAddress() {
      var b = this.loadUint(2);
      if (b.toNumber() === 0) return null; // null address
      if (b.toNumber() !== 2) throw new Error('unsupported address type');
      if (this.loadBit()) throw new Error('unsupported address type');
      var wc = this.loadInt(8).toNumber();
      var hashPart = this.loadBits(256);
      return new Address$7(wc + ':' + bytesToHex$6(hashPart));
    }

    /**
     * @return {Slice}
     */
  }, {
    key: "loadRef",
    value: function loadRef() {
      if (this.refCursor >= 4) throw new Error('refs overflow');
      var result = this.refs[this.refCursor];
      this.refCursor++;
      return result;
    }
  }]);
}();
var Slice_1 = {
  Slice: Slice$2
};

var BitString$1 = BitString_1.BitString;
utils$1.bytesToBase64;
  var compareBytes = utils$1.compareBytes,
  concatBytes = utils$1.concatBytes,
  crc32c = utils$1.crc32c,
  hexToBytes$1 = utils$1.hexToBytes,
  readNBytesUIntFromArray = utils$1.readNBytesUIntFromArray,
  sha256$1 = utils$1.sha256;
  utils$1.bytesToHex;
var Slice$1 = Slice_1.Slice;
var reachBocMagicPrefix = hexToBytes$1('B5EE9C72');
var leanBocMagicPrefix = hexToBytes$1('68ff65f3');
var leanBocMagicPrefixCRC = hexToBytes$1('acc3a728');
var Cell$r = /*#__PURE__*/function () {
  function Cell() {
    _classCallCheck(this, Cell);
    this.bits = new BitString$1(1023);
    this.refs = [];
    this.isExotic = false;
  }

  /**
   * @param serializedBoc  {string | Uint8Array} hex or bytearray
   * @return {Cell[]} root cells
   */
  return _createClass(Cell, [{
    key: "writeCell",
    value:
    /**
     * Write another cell to this cell
     * @param anotherCell  {Cell}
     */
    function writeCell(anotherCell) {
      // XXX we do not check that there are anough place in cell
      this.bits.writeBitString(anotherCell.bits);
      this.refs = this.refs.concat(anotherCell.refs);
    }

    /**
     * @return {number}
     */
  }, {
    key: "getMaxLevel",
    value: function getMaxLevel() {
      //TODO level calculation differ for exotic cells
      var maxLevel = 0;
      for (var k in this.refs) {
        var i = this.refs[k];
        if (i.getMaxLevel() > maxLevel) {
          maxLevel = i.getMaxLevel();
        }
      }
      return maxLevel;
    }

    /**
     * @return {number}
     */
  }, {
    key: "isExplicitlyStoredHashes",
    value: function isExplicitlyStoredHashes() {
      return 0;
    }

    /**
     * @return {number}
     */
  }, {
    key: "getMaxDepth",
    value: function getMaxDepth() {
      var maxDepth = 0;
      if (this.refs.length > 0) {
        for (var k = 0; k < this.refs.length; k++) {
          var child = this.refs[k];
          var childMaxDepth = child.getMaxDepth();
          if (childMaxDepth > maxDepth) {
            maxDepth = childMaxDepth;
          }
        }
        maxDepth = maxDepth + 1;
      }
      return maxDepth;
    }

    /**
     * @private
     * @return {Uint8Array}
     */
  }, {
    key: "getMaxDepthAsArray",
    value: function getMaxDepthAsArray() {
      var maxDepth = this.getMaxDepth();
      var d = Uint8Array.from({
        length: 2
      }, function () {
        return 0;
      });
      d[1] = maxDepth % 256;
      d[0] = Math.floor(maxDepth / 256);
      return d;
    }

    /**
     * @return {Uint8Array}
     */
  }, {
    key: "getRefsDescriptor",
    value: function getRefsDescriptor() {
      var d1 = Uint8Array.from({
        length: 1
      }, function () {
        return 0;
      });
      d1[0] = this.refs.length + this.isExotic * 8 + this.getMaxLevel() * 32;
      return d1;
    }

    /**
     * @return {Uint8Array}
     */
  }, {
    key: "getBitsDescriptor",
    value: function getBitsDescriptor() {
      var d2 = Uint8Array.from({
        length: 1
      }, function () {
        return 0;
      });
      d2[0] = Math.ceil(this.bits.cursor / 8) + Math.floor(this.bits.cursor / 8);
      return d2;
    }

    /**
     * @return {Uint8Array}
     */
  }, {
    key: "getDataWithDescriptors",
    value: function getDataWithDescriptors() {
      var d1 = this.getRefsDescriptor();
      var d2 = this.getBitsDescriptor();
      var tuBits = this.bits.getTopUppedArray();
      return concatBytes(concatBytes(d1, d2), tuBits);
    }

    /**
     * @return {Promise<Uint8Array>}
     */
  }, {
    key: "getRepr",
    value: (function () {
      var _getRepr = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var reprArray, k, i, _k, _i, x, _k2, _i2;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              reprArray = [];
              reprArray.push(this.getDataWithDescriptors());
              for (k in this.refs) {
                i = this.refs[k];
                reprArray.push(i.getMaxDepthAsArray());
              }
              _context.t0 = _regeneratorRuntime().keys(this.refs);
            case 4:
              if ((_context.t1 = _context.t0()).done) {
                _context.next = 14;
                break;
              }
              _k = _context.t1.value;
              _i = this.refs[_k];
              _context.t2 = reprArray;
              _context.next = 10;
              return _i.hash();
            case 10:
              _context.t3 = _context.sent;
              _context.t2.push.call(_context.t2, _context.t3);
              _context.next = 4;
              break;
            case 14:
              x = new Uint8Array();
              for (_k2 in reprArray) {
                _i2 = reprArray[_k2];
                x = concatBytes(x, _i2);
              }
              return _context.abrupt("return", x);
            case 17:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getRepr() {
        return _getRepr.apply(this, arguments);
      }
      return getRepr;
    }()
    /**
     * @return {Promise<Uint8Array>}
     */
    )
  }, {
    key: "hash",
    value: (function () {
      var _hash = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.t0 = Uint8Array;
              _context2.t1 = sha256$1;
              _context2.next = 4;
              return this.getRepr();
            case 4:
              _context2.t2 = _context2.sent;
              _context2.next = 7;
              return (0, _context2.t1)(_context2.t2);
            case 7:
              _context2.t3 = _context2.sent;
              return _context2.abrupt("return", new _context2.t0(_context2.t3));
            case 9:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function hash() {
        return _hash.apply(this, arguments);
      }
      return hash;
    }())
  }, {
    key: "beginParse",
    value: function beginParse() {
      var refs = this.refs.map(function (ref) {
        return ref.beginParse();
      });
      return new Slice$1(this.bits.array.slice(), this.bits.length, refs);
    }

    /**
     * Recursively prints cell's content like Fift
     * @return  {string}
     */
  }, {
    key: "print",
    value: function print(indent) {
      indent = indent || '';
      var s = indent + 'x{' + this.bits.toHex() + '}\n';
      for (var k in this.refs) {
        var i = this.refs[k];
        s += i.print(indent + ' ');
      }
      return s;
    }

    //serialized_boc#b5ee9c72 has_idx:(## 1) has_crc32c:(## 1)
    //  has_cache_bits:(## 1) flags:(## 2) { flags = 0 }
    //  size:(## 3) { size <= 4 }
    //  off_bytes:(## 8) { off_bytes <= 8 }
    //  cells:(##(size * 8))
    //  roots:(##(size * 8)) { roots >= 1 }
    //  absent:(##(size * 8)) { roots + absent <= cells }
    //  tot_cells_size:(##(off_bytes * 8))
    //  root_list:(roots * ##(size * 8))
    //  index:has_idx?(cells * ##(off_bytes * 8))
    //  cell_data:(tot_cells_size * [ uint8 ])
    //  crc32c:has_crc32c?uint32
    // = BagOfCells;
    /**
     * create boc bytearray
     * @param has_idx? {boolean}
     * @param hash_crc32?  {boolean}
     * @param has_cache_bits?  {boolean}
     * @param flags? {number}
     * @return {Promise<Uint8Array>}
     */
  }, {
    key: "toBoc",
    value: function () {
      var _toBoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var has_idx,
          hash_crc32,
          has_cache_bits,
          flags,
          root_cell,
          allcells,
          topologicalOrder,
          cellsIndex,
          cells_num,
          s,
          s_bytes,
          full_size,
          sizeIndex,
          _iterator,
          _step,
          cell_info,
          offset_bits,
          offset_bytes,
          serialization,
          _iterator2,
          _step2,
          _cell_info,
          refcell_ser,
          ser_arr,
          _args3 = arguments;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              has_idx = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : true;
              hash_crc32 = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : true;
              has_cache_bits = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : false;
              flags = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : 0;
              root_cell = this;
              _context3.next = 7;
              return root_cell.treeWalk();
            case 7:
              allcells = _context3.sent;
              topologicalOrder = allcells[0];
              cellsIndex = allcells[1];
              cells_num = topologicalOrder.length;
              s = cells_num.toString(2).length; // Minimal number of bits to represent reference (unused?)
              s_bytes = Math.min(Math.ceil(s / 8), 1);
              full_size = 0;
              sizeIndex = [];
              _iterator = _createForOfIteratorHelper(topologicalOrder);
              _context3.prev = 16;
              _iterator.s();
            case 18:
              if ((_step = _iterator.n()).done) {
                _context3.next = 28;
                break;
              }
              cell_info = _step.value;
              //TODO it should be async map or async for
              sizeIndex.push(full_size);
              _context3.t0 = full_size;
              _context3.next = 24;
              return cell_info[1].bocSerializationSize(cellsIndex, s_bytes);
            case 24:
              _context3.t1 = _context3.sent;
              full_size = _context3.t0 + _context3.t1;
            case 26:
              _context3.next = 18;
              break;
            case 28:
              _context3.next = 33;
              break;
            case 30:
              _context3.prev = 30;
              _context3.t2 = _context3["catch"](16);
              _iterator.e(_context3.t2);
            case 33:
              _context3.prev = 33;
              _iterator.f();
              return _context3.finish(33);
            case 36:
              offset_bits = full_size.toString(2).length; // Minimal number of bits to offset/len (unused?)
              offset_bytes = Math.max(Math.ceil(offset_bits / 8), 1);
              serialization = new BitString$1((1023 + 32 * 4 + 32 * 3) * topologicalOrder.length);
              serialization.writeBytes(reachBocMagicPrefix);
              serialization.writeBitArray([has_idx, hash_crc32, has_cache_bits]);
              serialization.writeUint(flags, 2);
              serialization.writeUint(s_bytes, 3);
              serialization.writeUint8(offset_bytes);
              serialization.writeUint(cells_num, s_bytes * 8);
              serialization.writeUint(1, s_bytes * 8); // One root for now
              serialization.writeUint(0, s_bytes * 8); // Complete BOCs only
              serialization.writeUint(full_size, offset_bytes * 8);
              serialization.writeUint(0, s_bytes * 8); // Root shoulh have index 0
              if (has_idx) {
                topologicalOrder.forEach(function (cell_data, index) {
                  return serialization.writeUint(sizeIndex[index], offset_bytes * 8);
                });
              }
              _iterator2 = _createForOfIteratorHelper(topologicalOrder);
              _context3.prev = 51;
              _iterator2.s();
            case 53:
              if ((_step2 = _iterator2.n()).done) {
                _context3.next = 61;
                break;
              }
              _cell_info = _step2.value;
              _context3.next = 57;
              return _cell_info[1].serializeForBoc(cellsIndex, s_bytes);
            case 57:
              refcell_ser = _context3.sent;
              serialization.writeBytes(refcell_ser);
            case 59:
              _context3.next = 53;
              break;
            case 61:
              _context3.next = 66;
              break;
            case 63:
              _context3.prev = 63;
              _context3.t3 = _context3["catch"](51);
              _iterator2.e(_context3.t3);
            case 66:
              _context3.prev = 66;
              _iterator2.f();
              return _context3.finish(66);
            case 69:
              ser_arr = serialization.getTopUppedArray();
              if (hash_crc32) {
                ser_arr = concatBytes(ser_arr, crc32c(ser_arr));
              }
              return _context3.abrupt("return", ser_arr);
            case 72:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this, [[16, 30, 33, 36], [51, 63, 66, 69]]);
      }));
      function toBoc() {
        return _toBoc.apply(this, arguments);
      }
      return toBoc;
    }()
    /**
     * @private
     * @param cellsIndex
     * @param refSize
     * @return {Promise<Uint8Array>}
     */
  }, {
    key: "serializeForBoc",
    value: (function () {
      var _serializeForBoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(cellsIndex, refSize) {
        var reprArray, k, i, refHash, refIndexInt, refIndexHex, reference, x, _k3, _i3;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              reprArray = [];
              reprArray.push(this.getDataWithDescriptors());
              if (!this.isExplicitlyStoredHashes()) {
                _context4.next = 4;
                break;
              }
              throw new Error("Cell hashes explicit storing is not implemented");
            case 4:
              _context4.t0 = _regeneratorRuntime().keys(this.refs);
            case 5:
              if ((_context4.t1 = _context4.t0()).done) {
                _context4.next = 18;
                break;
              }
              k = _context4.t1.value;
              i = this.refs[k];
              _context4.next = 10;
              return i.hash();
            case 10:
              refHash = _context4.sent;
              refIndexInt = cellsIndex[refHash];
              refIndexHex = refIndexInt.toString(16);
              if (refIndexHex.length % 2) {
                refIndexHex = "0" + refIndexHex;
              }
              reference = hexToBytes$1(refIndexHex);
              reprArray.push(reference);
              _context4.next = 5;
              break;
            case 18:
              x = new Uint8Array();
              for (_k3 in reprArray) {
                _i3 = reprArray[_k3];
                x = concatBytes(x, _i3);
              }
              return _context4.abrupt("return", x);
            case 21:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function serializeForBoc(_x, _x2) {
        return _serializeForBoc.apply(this, arguments);
      }
      return serializeForBoc;
    }()
    /**
     * @private
     * @param cellsIndex
     * @param refSize
     * @return {Promise<number>}
     */
    )
  }, {
    key: "bocSerializationSize",
    value: (function () {
      var _bocSerializationSize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(cellsIndex, refSize) {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.serializeForBoc(cellsIndex, refSize);
            case 2:
              return _context5.abrupt("return", _context5.sent.length);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function bocSerializationSize(_x3, _x4) {
        return _bocSerializationSize.apply(this, arguments);
      }
      return bocSerializationSize;
    }()
    /**
     * @private
     * @return {[[], {}]} topologicalOrderArray and indexHashmap
     */
    )
  }, {
    key: "treeWalk",
    value: (function () {
      var _treeWalk2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", _treeWalk(this, [], {}));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function treeWalk() {
        return _treeWalk2.apply(this, arguments);
      }
      return treeWalk;
    }())
  }], [{
    key: "fromBoc",
    value: function fromBoc(serializedBoc) {
      return deserializeBoc(serializedBoc);
    }

    /**
     * @param serializedBoc  {string | Uint8Array} hex or bytearray
     * @return {Cell} root cell
     */
  }, {
    key: "oneFromBoc",
    value: function oneFromBoc(serializedBoc) {
      var cells = deserializeBoc(serializedBoc);
      if (cells.length !== 1) throw new Error('expected 1 root cell but have ' + cells.length);
      return cells[0];
    }
  }]);
}();
function moveToTheEnd(_x5, _x6, _x7) {
  return _moveToTheEnd.apply(this, arguments);
}
/**
 * @param cell  {Cell}
 * @param topologicalOrderArray array of pairs: cellHash: Uint8Array, cell: Cell, ...
 * @param indexHashmap cellHash: Uint8Array -> cellIndex: number
 * @return {[[], {}]} topologicalOrderArray and indexHashmap
 */
function _moveToTheEnd() {
  _moveToTheEnd = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(indexHashmap, topologicalOrderArray, target) {
    var targetIndex, h, data, _iterator4, _step4, subCell;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          targetIndex = indexHashmap[target];
          for (h in indexHashmap) {
            if (indexHashmap[h] > targetIndex) {
              indexHashmap[h] = indexHashmap[h] - 1;
            }
          }
          indexHashmap[target] = topologicalOrderArray.length - 1;
          data = topologicalOrderArray.splice(targetIndex, 1)[0];
          topologicalOrderArray.push(data);
          _iterator4 = _createForOfIteratorHelper(data[1].refs);
          _context7.prev = 6;
          _iterator4.s();
        case 8:
          if ((_step4 = _iterator4.n()).done) {
            _context7.next = 20;
            break;
          }
          subCell = _step4.value;
          _context7.t0 = moveToTheEnd;
          _context7.t1 = indexHashmap;
          _context7.t2 = topologicalOrderArray;
          _context7.next = 15;
          return subCell.hash();
        case 15:
          _context7.t3 = _context7.sent;
          _context7.next = 18;
          return (0, _context7.t0)(_context7.t1, _context7.t2, _context7.t3);
        case 18:
          _context7.next = 8;
          break;
        case 20:
          _context7.next = 25;
          break;
        case 22:
          _context7.prev = 22;
          _context7.t4 = _context7["catch"](6);
          _iterator4.e(_context7.t4);
        case 25:
          _context7.prev = 25;
          _iterator4.f();
          return _context7.finish(25);
        case 28:
        case "end":
          return _context7.stop();
      }
    }, _callee7, null, [[6, 22, 25, 28]]);
  }));
  return _moveToTheEnd.apply(this, arguments);
}
function _treeWalk(_x8, _x9, _x10) {
  return _treeWalk3.apply(this, arguments);
}
function _treeWalk3() {
  _treeWalk3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(cell, topologicalOrderArray, indexHashmap) {
    var parentHash,
      cellHash,
      _iterator5,
      _step5,
      subCell,
      res,
      _args8 = arguments;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          parentHash = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : null;
          _context8.next = 3;
          return cell.hash();
        case 3:
          cellHash = _context8.sent;
          if (!(cellHash in indexHashmap)) {
            _context8.next = 10;
            break;
          }
          if (!parentHash) {
            _context8.next = 9;
            break;
          }
          if (!(indexHashmap[parentHash] > indexHashmap[cellHash])) {
            _context8.next = 9;
            break;
          }
          _context8.next = 9;
          return moveToTheEnd(indexHashmap, topologicalOrderArray, cellHash);
        case 9:
          return _context8.abrupt("return", [topologicalOrderArray, indexHashmap]);
        case 10:
          indexHashmap[cellHash] = topologicalOrderArray.length;
          topologicalOrderArray.push([cellHash, cell]);
          _iterator5 = _createForOfIteratorHelper(cell.refs);
          _context8.prev = 13;
          _iterator5.s();
        case 15:
          if ((_step5 = _iterator5.n()).done) {
            _context8.next = 24;
            break;
          }
          subCell = _step5.value;
          _context8.next = 19;
          return _treeWalk(subCell, topologicalOrderArray, indexHashmap, cellHash);
        case 19:
          res = _context8.sent;
          topologicalOrderArray = res[0];
          indexHashmap = res[1];
        case 22:
          _context8.next = 15;
          break;
        case 24:
          _context8.next = 29;
          break;
        case 26:
          _context8.prev = 26;
          _context8.t0 = _context8["catch"](13);
          _iterator5.e(_context8.t0);
        case 29:
          _context8.prev = 29;
          _iterator5.f();
          return _context8.finish(29);
        case 32:
          return _context8.abrupt("return", [topologicalOrderArray, indexHashmap]);
        case 33:
        case "end":
          return _context8.stop();
      }
    }, _callee8, null, [[13, 26, 29, 32]]);
  }));
  return _treeWalk3.apply(this, arguments);
}
function parseBocHeader(serializedBoc) {
  // snake_case is used to match TON docs
  if (serializedBoc.length < 4 + 1) throw "Not enough bytes for magic prefix";
  var inputData = serializedBoc; // Save copy for crc32
  var prefix = serializedBoc.slice(0, 4);
  serializedBoc = serializedBoc.slice(4);
  var has_idx, hash_crc32, has_cache_bits, flags, size_bytes;
  if (compareBytes(prefix, reachBocMagicPrefix)) {
    var flags_byte = serializedBoc[0];
    has_idx = flags_byte & 128;
    hash_crc32 = flags_byte & 64;
    has_cache_bits = flags_byte & 32;
    flags = (flags_byte & 16) * 2 + (flags_byte & 8);
    size_bytes = flags_byte % 8;
  }
  if (compareBytes(prefix, leanBocMagicPrefix)) {
    has_idx = 1;
    hash_crc32 = 0;
    has_cache_bits = 0;
    flags = 0;
    size_bytes = serializedBoc[0];
  }
  if (compareBytes(prefix, leanBocMagicPrefixCRC)) {
    has_idx = 1;
    hash_crc32 = 1;
    has_cache_bits = 0;
    flags = 0;
    size_bytes = serializedBoc[0];
  }
  serializedBoc = serializedBoc.slice(1);
  if (serializedBoc.length < 1 + 5 * size_bytes) throw "Not enough bytes for encoding cells counters";
  var offset_bytes = serializedBoc[0];
  serializedBoc = serializedBoc.slice(1);
  var cells_num = readNBytesUIntFromArray(size_bytes, serializedBoc);
  serializedBoc = serializedBoc.slice(size_bytes);
  var roots_num = readNBytesUIntFromArray(size_bytes, serializedBoc);
  serializedBoc = serializedBoc.slice(size_bytes);
  var absent_num = readNBytesUIntFromArray(size_bytes, serializedBoc);
  serializedBoc = serializedBoc.slice(size_bytes);
  var tot_cells_size = readNBytesUIntFromArray(offset_bytes, serializedBoc);
  serializedBoc = serializedBoc.slice(offset_bytes);
  if (serializedBoc.length < roots_num * size_bytes) throw "Not enough bytes for encoding root cells hashes";
  var root_list = [];
  for (var c = 0; c < roots_num; c++) {
    root_list.push(readNBytesUIntFromArray(size_bytes, serializedBoc));
    serializedBoc = serializedBoc.slice(size_bytes);
  }
  var index = false;
  if (has_idx) {
    index = [];
    if (serializedBoc.length < offset_bytes * cells_num) throw "Not enough bytes for index encoding";
    for (var _c = 0; _c < cells_num; _c++) {
      index.push(readNBytesUIntFromArray(offset_bytes, serializedBoc));
      serializedBoc = serializedBoc.slice(offset_bytes);
    }
  }
  if (serializedBoc.length < tot_cells_size) throw "Not enough bytes for cells data";
  var cells_data = serializedBoc.slice(0, tot_cells_size);
  serializedBoc = serializedBoc.slice(tot_cells_size);
  if (hash_crc32) {
    if (serializedBoc.length < 4) throw "Not enough bytes for crc32c hashsum";
    var length = inputData.length;
    if (!compareBytes(crc32c(inputData.slice(0, length - 4)), serializedBoc.slice(0, 4))) throw "Crc32c hashsum mismatch";
    serializedBoc = serializedBoc.slice(4);
  }
  if (serializedBoc.length) throw "Too much bytes in BoC serialization";
  return {
    has_idx: has_idx,
    hash_crc32: hash_crc32,
    has_cache_bits: has_cache_bits,
    flags: flags,
    size_bytes: size_bytes,
    off_bytes: offset_bytes,
    cells_num: cells_num,
    roots_num: roots_num,
    absent_num: absent_num,
    tot_cells_size: tot_cells_size,
    root_list: root_list,
    index: index,
    cells_data: cells_data
  };
}
function deserializeCellData(cellData, referenceIndexSize) {
  if (cellData.length < 2) throw "Not enough bytes to encode cell descriptors";
  var d1 = cellData[0],
    d2 = cellData[1];
  cellData = cellData.slice(2);
  var isExotic = d1 & 8;
  var refNum = d1 % 8;
  var dataBytesize = Math.ceil(d2 / 2);
  var fullfilledBytes = !(d2 % 2);
  var cell = new Cell$r();
  cell.isExotic = isExotic;
  if (cellData.length < dataBytesize + referenceIndexSize * refNum) throw "Not enough bytes to encode cell data";
  cell.bits.setTopUppedArray(cellData.slice(0, dataBytesize), fullfilledBytes);
  cellData = cellData.slice(dataBytesize);
  for (var r = 0; r < refNum; r++) {
    cell.refs.push(readNBytesUIntFromArray(referenceIndexSize, cellData));
    cellData = cellData.slice(referenceIndexSize);
  }
  return {
    cell: cell,
    residue: cellData
  };
}

/**
 * @param serializedBoc  {string | Uint8Array} hex or bytearray
 * @return {Cell[]} root cells
 */
function deserializeBoc(serializedBoc) {
  if (typeof serializedBoc == 'string') {
    serializedBoc = hexToBytes$1(serializedBoc);
  }
  var header = parseBocHeader(serializedBoc);
  var cells_data = header.cells_data;
  var cells_array = [];
  for (var ci = 0; ci < header.cells_num; ci++) {
    var dd = deserializeCellData(cells_data, header.size_bytes);
    cells_data = dd.residue;
    cells_array.push(dd.cell);
  }
  for (var _ci = header.cells_num - 1; _ci >= 0; _ci--) {
    var c = cells_array[_ci];
    for (var ri = 0; ri < c.refs.length; ri++) {
      var r = c.refs[ri];
      if (r < _ci) {
        throw "Topological order is broken";
      }
      c.refs[ri] = cells_array[r];
    }
  }
  var root_cells = [];
  var _iterator3 = _createForOfIteratorHelper(header.root_list),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _ri = _step3.value;
      root_cells.push(cells_array[_ri]);
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  return root_cells;
}
var Cell_1 = {
  Cell: Cell$r
};

var BitString = BitString_1.BitString;
var Cell$q = Cell_1.Cell;
var Slice = Slice_1.Slice;
var boc$1 = {
  BitString: BitString,
  Cell: Cell$q,
  Slice: Slice
};

var Cell$p = boc$1.Cell;
var Address$6 = utils$1.Address,
  bytesToBase64$3 = utils$1.bytesToBase64,
  bytesToHex$5 = utils$1.bytesToHex,
  BN$b = utils$1.BN;
var Contract$g = /*#__PURE__*/function () {
  /**
   * @param provider    {HttpProvider}
   * @param options    {{code?: Cell, address?: Address | string, wc?: number}}
   */
  function Contract(provider, options) {
    _classCallCheck(this, Contract);
    this.provider = provider;
    this.options = options;
    this.address = options.address ? new Address$6(options.address) : null;
    if (!options.wc) options.wc = this.address ? this.address.wc : 0;
    this.methods = {};
  }

  /**
   * @return {Promise<Address>}
   */
  return _createClass(Contract, [{
    key: "getAddress",
    value: (function () {
      var _getAddress = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (this.address) {
                _context.next = 4;
                break;
              }
              _context.next = 3;
              return this.createStateInit();
            case 3:
              this.address = _context.sent.address;
            case 4:
              return _context.abrupt("return", this.address);
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getAddress() {
        return _getAddress.apply(this, arguments);
      }
      return getAddress;
    }()
    /**
     * @private
     * @return {Cell} cell contains contact code
     */
    )
  }, {
    key: "createCodeCell",
    value: function createCodeCell() {
      if (!this.options.code) throw new Error('Contract: options.code is not defined');
      return this.options.code;
    }

    /**
     * Method to override
     * @protected
     * @return {Cell} cell contains contract data
     */
  }, {
    key: "createDataCell",
    value: function createDataCell() {
      return new Cell$p();
    }

    /**
     * @protected
     * @return {Promise<{stateInit: Cell, address: Address, code: Cell, data: Cell}>}
     */
  }, {
    key: "createStateInit",
    value: (function () {
      var _createStateInit = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var codeCell, dataCell, stateInit, stateInitHash, address;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              codeCell = this.createCodeCell();
              dataCell = this.createDataCell();
              stateInit = Contract.createStateInit(codeCell, dataCell);
              _context2.next = 5;
              return stateInit.hash();
            case 5:
              stateInitHash = _context2.sent;
              address = new Address$6(this.options.wc + ":" + bytesToHex$5(stateInitHash));
              return _context2.abrupt("return", {
                stateInit: stateInit,
                address: address,
                code: codeCell,
                data: dataCell
              });
            case 8:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function createStateInit() {
        return _createStateInit.apply(this, arguments);
      }
      return createStateInit;
    }() // _ split_depth:(Maybe (## 5)) special:(Maybe TickTock)
    // code:(Maybe ^Cell) data:(Maybe ^Cell)
    // library:(Maybe ^Cell) = StateInit;
    /**
     * @param code  {Cell}
     * @param data  {Cell}
     * @param library {null}
     * @param splitDepth {null}
     * @param ticktock  {null}
     * @return {Cell}
     */
    )
  }], [{
    key: "createStateInit",
    value: function createStateInit(code, data) {
      var library = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var splitDepth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var ticktock = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      if (library) throw "Library in state init is not implemented";
      if (splitDepth) throw "Split depth in state init is not implemented";
      if (ticktock) throw "Ticktock in state init is not implemented";
      var stateInit = new Cell$p();
      stateInit.bits.writeBitArray([Boolean(splitDepth), Boolean(ticktock), Boolean(code), Boolean(data), Boolean(library)]);
      if (code) stateInit.refs.push(code);
      if (data) stateInit.refs.push(data);
      if (library) stateInit.refs.push(library);
      return stateInit;
    }

    // extra_currencies$_ dict:(HashmapE 32 (VarUInteger 32))
    // = ExtraCurrencyCollection;
    // currencies$_ grams:Grams other:ExtraCurrencyCollection
    // = CurrencyCollection;

    //int_msg_info$0 ihr_disabled:Bool bounce:Bool
    //src:MsgAddressInt dest:MsgAddressInt
    //value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams
    //created_lt:uint64 created_at:uint32 = CommonMsgInfo;
    /**
     * @param dest  {Address | string}
     * @param gramValue  {number | BN}
     * @param ihrDisabled  {boolean}
     * @param bounce  {null | boolean}
     * @param bounced {boolean}
     * @param src  {Address | string}
     * @param currencyCollection  {null}
     * @param ihrFees  {number | BN}
     * @param fwdFees  {number | BN}
     * @param createdLt  {number | BN}
     * @param createdAt  {number | BN}
     * @return {Cell}
     */
  }, {
    key: "createInternalMessageHeader",
    value: function createInternalMessageHeader(dest) {
      var gramValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var ihrDisabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var bounce = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var bounced = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var src = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
      var currencyCollection = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
      var ihrFees = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var fwdFees = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
      var createdLt = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
      var createdAt = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 0;
      var message = new Cell$p();
      message.bits.writeBit(false);
      message.bits.writeBit(ihrDisabled);
      if (!(bounce === null)) {
        message.bits.writeBit(bounce);
      } else {
        message.bits.writeBit(new Address$6(dest).isBounceable);
      }
      message.bits.writeBit(bounced);
      message.bits.writeAddress(src ? new Address$6(src) : null);
      message.bits.writeAddress(new Address$6(dest));
      message.bits.writeGrams(gramValue);
      if (currencyCollection) {
        throw "Currency collections are not implemented yet";
      }
      message.bits.writeBit(Boolean(currencyCollection));
      message.bits.writeGrams(ihrFees);
      message.bits.writeGrams(fwdFees);
      message.bits.writeUint(createdLt, 64);
      message.bits.writeUint(createdAt, 32);
      return message;
    }

    //ext_in_msg_info$10 src:MsgAddressExt dest:MsgAddressInt
    //import_fee:Grams = CommonMsgInfo;
    /**
     * @param dest  {Address | string}
     * @param src  {Address | string}
     * @param importFee  {number | BN}
     * @return {Cell}
     */
  }, {
    key: "createExternalMessageHeader",
    value: function createExternalMessageHeader(dest) {
      var src = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var importFee = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var message = new Cell$p();
      message.bits.writeUint(2, 2);
      message.bits.writeAddress(src ? new Address$6(src) : null);
      message.bits.writeAddress(new Address$6(dest));
      message.bits.writeGrams(importFee);
      return message;
    }

    /**
     * @param address {Address | string}
     * @param amount {BN} in nanotons
     * @param payload   {string | Uint8Array | Cell}
     * @param stateInit? {Cell}
     * @return {Cell}
     */
  }, {
    key: "createOutMsg",
    value: function createOutMsg(address, amount, payload) {
      var stateInit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var payloadCell = new Cell$p();
      if (payload) {
        if (payload.refs) {
          // is Cell
          payloadCell = payload;
        } else if (typeof payload === 'string') {
          if (payload.length > 0) {
            payloadCell.bits.writeUint(0, 32);
            payloadCell.bits.writeString(payload);
          }
        } else {
          payloadCell.bits.writeBytes(payload);
        }
      }
      var orderHeader = Contract.createInternalMessageHeader(new Address$6(address), new BN$b(amount));
      var order = Contract.createCommonMsgInfo(orderHeader, stateInit, payloadCell);
      return order;
    }

    //tblkch.pdf, page 57
    /**
     * Create CommonMsgInfo contains header, stateInit, body
     * @param header {Cell}
     * @param stateInit?  {Cell}
     * @param body?  {Cell}
     * @return {Cell}
     */
  }, {
    key: "createCommonMsgInfo",
    value: function createCommonMsgInfo(header) {
      var stateInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var commonMsgInfo = new Cell$p();
      commonMsgInfo.writeCell(header);
      if (stateInit) {
        commonMsgInfo.bits.writeBit(true);
        //-1:  need at least one bit for body
        // TODO we also should check for free refs here
        // TODO: temporary always push in ref because WalletQueryParser can parse only ref
        {
          commonMsgInfo.bits.writeBit(true);
          commonMsgInfo.refs.push(stateInit);
        }
      } else {
        commonMsgInfo.bits.writeBit(false);
      }
      // TODO we also should check for free refs here
      if (body) {
        if (commonMsgInfo.bits.getFreeBits() >= body.bits.getUsedBits() && commonMsgInfo.refs.length + body.refs.length <= 4) {
          commonMsgInfo.bits.writeBit(false);
          commonMsgInfo.writeCell(body);
        } else {
          commonMsgInfo.bits.writeBit(true);
          commonMsgInfo.refs.push(body);
        }
      } else {
        commonMsgInfo.bits.writeBit(false);
      }
      return commonMsgInfo;
    }
  }, {
    key: "createMethod",
    value: function createMethod(provider, queryPromise) {
      return {
        /**
         * @return {Promise<Cell>}
         */
        getBody: function () {
          var _getBody = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return queryPromise;
                case 2:
                  return _context3.abrupt("return", _context3.sent.body);
                case 3:
                case "end":
                  return _context3.stop();
              }
            }, _callee3);
          }));
          function getBody() {
            return _getBody.apply(this, arguments);
          }
          return getBody;
        }(),
        /**
         * @return {Promise<Cell>}
         */
        getQuery: function () {
          var _getQuery = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return queryPromise;
                case 2:
                  return _context4.abrupt("return", _context4.sent.message);
                case 3:
                case "end":
                  return _context4.stop();
              }
            }, _callee4);
          }));
          function getQuery() {
            return _getQuery.apply(this, arguments);
          }
          return getQuery;
        }(),
        send: function () {
          var _send = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
            var query, boc;
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return queryPromise;
                case 2:
                  query = _context5.sent;
                  _context5.t0 = bytesToBase64$3;
                  _context5.next = 6;
                  return query.message.toBoc(false);
                case 6:
                  _context5.t1 = _context5.sent;
                  boc = (0, _context5.t0)(_context5.t1);
                  return _context5.abrupt("return", provider.sendBoc(boc));
                case 9:
                case "end":
                  return _context5.stop();
              }
            }, _callee5);
          }));
          function send() {
            return _send.apply(this, arguments);
          }
          return send;
        }(),
        estimateFee: function () {
          var _estimateFee = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
            var query, serialized;
            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return queryPromise;
                case 2:
                  query = _context6.sent;
                  if (!query.code) {
                    _context6.next = 23;
                    break;
                  }
                  _context6.t1 = query.address.toString(true, true, false);
                  _context6.t2 = bytesToBase64$3;
                  _context6.next = 8;
                  return query.body.toBoc(false);
                case 8:
                  _context6.t3 = _context6.sent;
                  _context6.t4 = (0, _context6.t2)(_context6.t3);
                  _context6.t5 = bytesToBase64$3;
                  _context6.next = 13;
                  return query.code.toBoc(false);
                case 13:
                  _context6.t6 = _context6.sent;
                  _context6.t7 = (0, _context6.t5)(_context6.t6);
                  _context6.t8 = bytesToBase64$3;
                  _context6.next = 18;
                  return query.data.toBoc(false);
                case 18:
                  _context6.t9 = _context6.sent;
                  _context6.t10 = (0, _context6.t8)(_context6.t9);
                  _context6.t0 = {
                    address: _context6.t1,
                    body: _context6.t4,
                    init_code: _context6.t7,
                    init_data: _context6.t10
                  };
                  _context6.next = 30;
                  break;
                case 23:
                  _context6.t11 = query.address.toString(true, true, true);
                  _context6.t12 = bytesToBase64$3;
                  _context6.next = 27;
                  return query.body.toBoc(false);
                case 27:
                  _context6.t13 = _context6.sent;
                  _context6.t14 = (0, _context6.t12)(_context6.t13);
                  _context6.t0 = {
                    address: _context6.t11,
                    body: _context6.t14
                  };
                case 30:
                  serialized = _context6.t0;
                  return _context6.abrupt("return", provider.getEstimateFee(serialized));
                case 32:
                case "end":
                  return _context6.stop();
              }
            }, _callee6);
          }));
          function estimateFee() {
            return _estimateFee.apply(this, arguments);
          }
          return estimateFee;
        }()
      };
    }
  }]);
}();
var contract = {
  Contract: Contract$g
};

var Cell$o = boc$1.Cell;
var Address$5 = utils$1.Address;
  utils$1.BN;
  var bytesToHex$4 = utils$1.bytesToHex;
var Contract$f = contract.Contract;
var AppTon$1 = /*#__PURE__*/function () {
  /**
   * @param transport {Transport} @ledgerhq/hw-transport
   * @param ton   {TonWeb}
   */
  function AppTon(transport, ton) {
    _classCallCheck(this, AppTon);
    this.transport = transport;
    this.ton = ton;
    this.ADDRESS_FORMAT_HEX = 0;
    this.ADDRESS_FORMAT_USER_FRIENDLY = 1;
    this.ADDRESS_FORMAT_URL_SAFE = 2;
    this.ADDRESS_FORMAT_BOUNCEABLE = 4;
    this.ADDRESS_FORMAT_TEST_ONLY = 8;

    // todo: узнать зачем вызывается decorateAppAPIMethods
    // const scrambleKey = "w0w";
    // transport.decorateAppAPIMethods(
    //     this,
    //     [
    //         "getAppConfiguration",
    //         "getAddress",
    //         "sign",
    //         "signTransfer",
    //     ],
    //     scrambleKey
    // );
  }

  /***
   * Get App version
   * @return {{version: string}}
   */
  return _createClass(AppTon, [{
    key: "getAppConfiguration",
    value: (function () {
      var _getAppConfiguration = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var response;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.transport.send(0xe0, 0x01, 0x00, 0x00);
            case 2:
              response = _context.sent;
              return _context.abrupt("return", {
                version: "" + response[0] + "." + response[1] + "." + response[2] // major version, minor version, patch version
              });
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getAppConfiguration() {
        return _getAppConfiguration.apply(this, arguments);
      }
      return getAppConfiguration;
    }()
    /**
     * This command returns a public key for the given account number
     * @param accountNumber {number}
     * @param isDisplay {boolean} display public key and confirm before returning
     * @return {{publicKey: Uint8Array}}
     */
    )
  }, {
    key: "getPublicKey",
    value: (function () {
      var _getPublicKey = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(accountNumber, isDisplay) {
        var buffer, response, len, publicKey;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              buffer = Buffer.alloc(4);
              buffer.writeInt32BE(accountNumber);
              _context2.next = 4;
              return this.transport.send(0xe0, 0x02, isDisplay ? 0x01 : 0x00, 0x00, buffer);
            case 4:
              response = _context2.sent;
              len = response[0];
              publicKey = new Uint8Array(response.slice(1, 1 + len));
              return _context2.abrupt("return", {
                publicKey: publicKey
              });
            case 8:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getPublicKey(_x, _x2) {
        return _getPublicKey.apply(this, arguments);
      }
      return getPublicKey;
    }()
    /**
     * This command returns a wallet v3R1 address for the given account number
     * @param accountNumber {number}
     * @param isDisplay {boolean} display address and confirm before returning
     * @param addressFormat {number} display address format (use sum of ADDRESS_FORMAT_ constants)
     * @return {{address: Address}}
     */
    )
  }, {
    key: "getAddress",
    value: (function () {
      var _getAddress = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(accountNumber, isDisplay, addressFormat) {
        var buffer, response, len, addressHex, address;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              buffer = Buffer.alloc(4);
              buffer.writeInt32BE(accountNumber);
              _context3.next = 4;
              return this.transport.send(0xe0, 0x05, isDisplay ? 0x01 : 0x00, addressFormat, buffer);
            case 4:
              response = _context3.sent;
              len = response[0];
              addressHex = new Uint8Array(response.slice(1, 1 + len));
              address = new Address$5('0:' + bytesToHex$4(addressHex));
              return _context3.abrupt("return", {
                address: address
              });
            case 9:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getAddress(_x3, _x4, _x5) {
        return _getAddress.apply(this, arguments);
      }
      return getAddress;
    }()
    /**
     * Sign a bytes
     * @param accountNumber {number}
     * @param buffer    {Buffer}
     * @return {{signature: Buffer}}
     */
    )
  }, {
    key: "sign",
    value: (function () {
      var _sign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(accountNumber, buffer) {
        var accountNumberBuffer, signBuffer, response, len, signature;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              accountNumberBuffer = Buffer.alloc(4);
              accountNumberBuffer.writeInt32BE(accountNumber);
              signBuffer = Buffer.concat([accountNumberBuffer, Buffer.from(buffer)]);
              _context4.next = 5;
              return this.transport.send(0xe0, 0x03, 0x00, 0x00, signBuffer);
            case 5:
              response = _context4.sent;
              len = response[0];
              signature = response.slice(1, 1 + len);
              return _context4.abrupt("return", {
                signature: signature
              });
            case 9:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function sign(_x6, _x7) {
        return _sign.apply(this, arguments);
      }
      return sign;
    }()
    /**
     * Sign a transfer coins message (same with TonWeb.WalletContract.createTransferMessage)
     * if seqno === 0 it will be deploy wallet + transfer coins message
     * @param accountNumber {number}
     * @param wallet {WalletContract}  Sender wallet
     * @param toAddress {String | Address}  Destination address in any format
     * @param amount    {BN | number}  Transfer value in nanograms
     * @param seqno {number}
     * @param addressFormat {number} display address format (use sum of ADDRESS_FORMAT_ constants)
     * @return
     */
    )
  }, {
    key: "transfer",
    value: (function () {
      var _transfer = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(accountNumber, wallet, toAddress, amount, seqno, addressFormat) {
        var sendMode, query, accountNumberBuffer, msgBuffer, response, len, signatureBuffer, signature, body, stateInit, code, data, deploy, selfAddress, header, resultMessage, resultPromise;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              sendMode = 3;
              _context5.next = 3;
              return wallet.createTransferMessage(null, toAddress, amount, seqno, null, sendMode, true);
            case 3:
              query = _context5.sent;
              accountNumberBuffer = Buffer.alloc(4);
              accountNumberBuffer.writeInt32BE(accountNumber);
              _context5.t0 = Buffer;
              _context5.t1 = accountNumberBuffer;
              _context5.t2 = Buffer;
              _context5.next = 11;
              return query.signingMessage.toBoc();
            case 11:
              _context5.t3 = _context5.sent;
              _context5.t4 = _context5.t2.from.call(_context5.t2, _context5.t3);
              _context5.t5 = [_context5.t1, _context5.t4];
              msgBuffer = _context5.t0.concat.call(_context5.t0, _context5.t5);
              _context5.next = 17;
              return this.transport.send(0xe0, 0x04, addressFormat, 0x00, msgBuffer);
            case 17:
              response = _context5.sent;
              len = response[0];
              signatureBuffer = response.slice(1, 1 + len);
              signature = new Uint8Array(signatureBuffer);
              body = new Cell$o();
              body.bits.writeBytes(signature);
              body.writeCell(query.signingMessage);
              stateInit = null, code = null, data = null;
              if (!(seqno === 0)) {
                _context5.next = 32;
                break;
              }
              _context5.next = 28;
              return wallet.createStateInit();
            case 28:
              deploy = _context5.sent;
              stateInit = deploy.stateInit;
              code = deploy.code;
              data = deploy.data;
            case 32:
              _context5.next = 34;
              return wallet.getAddress();
            case 34:
              selfAddress = _context5.sent;
              header = Contract$f.createExternalMessageHeader(selfAddress);
              resultMessage = Contract$f.createCommonMsgInfo(header, stateInit, body);
              resultPromise = new Promise(function (resolve) {
                resolve({
                  address: selfAddress,
                  message: resultMessage,
                  // old wallet_send_generate_external_message

                  body: body,
                  signature: signature,
                  signingMessage: query.signingMessage,
                  stateInit: stateInit,
                  code: code,
                  data: data
                });
              });
              return _context5.abrupt("return", Contract$f.createMethod(this.ton.provider, resultPromise));
            case 39:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function transfer(_x8, _x9, _x10, _x11, _x12, _x13) {
        return _transfer.apply(this, arguments);
      }
      return transfer;
    }())
  }]);
}();
var AppTon_1 = AppTon$1;

var providers = {};

var HttpProviderUtils$2 = {};

var BN$a = utils$1.BN,
  base64ToBytes$2 = utils$1.base64ToBytes;
var Cell$n = boc$1.Cell;
var HttpProviderUtils$1 = /*#__PURE__*/function () {
  function HttpProviderUtils() {
    _classCallCheck(this, HttpProviderUtils);
  }
  return _createClass(HttpProviderUtils, null, [{
    key: "parseObject",
    value: function parseObject(x) {
      var typeName = x['@type'];
      switch (typeName) {
        case 'tvm.list':
        case 'tvm.tuple':
          return x.elements.map(HttpProviderUtils.parseObject);
        case 'tvm.cell':
          return Cell$n.oneFromBoc(base64ToBytes$2(x.bytes));
        case 'tvm.stackEntryCell':
          return HttpProviderUtils.parseObject(x.cell);
        case 'tvm.stackEntryTuple':
          return HttpProviderUtils.parseObject(x.tuple);
        case 'tvm.stackEntryNumber':
          return HttpProviderUtils.parseObject(x.number);
        case 'tvm.numberDecimal':
          return new BN$a(x.number, 10);
        default:
          throw new Error('unknown type ' + typeName);
      }
    }

    /**
     * @param pair  {any[]}
     * @return {any}
     */
  }, {
    key: "parseResponseStack",
    value: function parseResponseStack(pair) {
      var typeName = pair[0];
      var value = pair[1];
      switch (typeName) {
        case 'num':
          return new BN$a(value.replace(/0x/, ''), 16);
        case 'list':
        case 'tuple':
          return HttpProviderUtils.parseObject(value);
        case 'cell':
          var contentBytes = base64ToBytes$2(value.bytes);
          return Cell$n.oneFromBoc(contentBytes);
        default:
          throw new Error('unknown type ' + typeName);
      }
    }
  }, {
    key: "parseResponse",
    value: function parseResponse(result) {
      if (result.exit_code !== 0) {
        var err = new Error('http provider parse response error');
        err.result = result;
        throw err;
      }
      var arr = result.stack.map(HttpProviderUtils.parseResponseStack);
      return arr.length === 1 ? arr[0] : arr;
    }
  }, {
    key: "makeArg",
    value: function makeArg(arg) {
      if (arg instanceof BN$a || arg instanceof Number) {
        return ['num', arg];
      } else {
        throw new Error('unknown arg type ' + arg);
      }
    }
  }, {
    key: "makeArgs",
    value: function makeArgs(args) {
      return args.map(this.makeArg);
    }
  }]);
}();
HttpProviderUtils$2["default"] = HttpProviderUtils$1;

var _nodeResolve_empty = {};

var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: _nodeResolve_empty
});

var require$$3 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

var Cell$m = boc$1.Cell;
var base64ToBytes$1 = utils$1.base64ToBytes;
var HttpProviderUtils = HttpProviderUtils$2["default"];
if (typeof fetch === 'undefined') {
  fetch = require$$3;
}
var SHARD_ID_ALL = '-9223372036854775808'; // 0x8000000000000000
var HttpProvider$1 = /*#__PURE__*/function () {
  /**
   * @param host? {string}
   * @param options? {{apiKey: string}}
   */
  function HttpProvider(host, options) {
    _classCallCheck(this, HttpProvider);
    this.host = host || "https://toncenter.com/api/v2/jsonRPC";
    this.options = options || {};
  }

  /**
   * @private
   * @param apiUrl   {string}
   * @param request   {any}
   * @return {Promise<any>}
   */
  return _createClass(HttpProvider, [{
    key: "sendImpl",
    value: function sendImpl(apiUrl, request) {
      var headers = {
        'Content-Type': 'application/json'
      };
      if (this.options.apiKey) {
        headers['X-API-Key'] = this.options.apiKey;
      }
      return fetch(apiUrl, {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(request)
      }).then(function (response) {
        return response.json();
      }).then(function (_ref) {
        var result = _ref.result,
          error = _ref.error;
        return result || Promise.reject(error);
      });
    }

    /**
     * @param method    {string}
     * @param params    {any}  todo: Array<any>
     * @return {Promise<any>}
     */
  }, {
    key: "send",
    value: function send(method, params) {
      return this.sendImpl(this.host, {
        id: 1,
        jsonrpc: "2.0",
        method: method,
        params: params
      });
    }

    /**
     * Use this method to get information about address: balance, code, data, last_transaction_id.
     * @param address {string}
     */
  }, {
    key: "getAddressInfo",
    value: (function () {
      var _getAddressInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(address) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this.send('getAddressInformation', {
                address: address
              }));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getAddressInfo(_x) {
        return _getAddressInfo.apply(this, arguments);
      }
      return getAddressInfo;
    }()
    /**
     * Similar to previous one but tries to parse additional information for known contract types. This method is based on generic.getAccountState thus number of recognizable contracts may grow. For wallets we recommend to use getWalletInformation.
     * @param address {string}
     */
    )
  }, {
    key: "getExtendedAddressInfo",
    value: (function () {
      var _getExtendedAddressInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(address) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.send('getExtendedAddressInformation', {
                address: address
              }));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getExtendedAddressInfo(_x2) {
        return _getExtendedAddressInfo.apply(this, arguments);
      }
      return getExtendedAddressInfo;
    }()
    /**
     * Use this method to retrieve wallet information, this method parse contract state and currently supports more wallet types than getExtendedAddressInformation: simple wallet, stadart wallet and v3 wallet.
     * @param address {string}
     */
    )
  }, {
    key: "getWalletInfo",
    value: (function () {
      var _getWalletInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(address) {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this.send('getWalletInformation', {
                address: address
              }));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getWalletInfo(_x3) {
        return _getWalletInfo.apply(this, arguments);
      }
      return getWalletInfo;
    }()
    /**
     * Use this method to get transaction history of a given address.
     * @param address   {string}
     * @param limit?    {number}
     * @param lt?    {number | string}
     * @param hash?    {string}
     * @param to_lt?    {number | string}
     * @return array of transaction object
     */
    )
  }, {
    key: "getTransactions",
    value: (function () {
      var _getTransactions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(address) {
        var limit,
          lt,
          hash,
          to_lt,
          archival,
          _args4 = arguments;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              limit = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : 20;
              lt = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : undefined;
              hash = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : undefined;
              to_lt = _args4.length > 4 && _args4[4] !== undefined ? _args4[4] : undefined;
              archival = _args4.length > 5 && _args4[5] !== undefined ? _args4[5] : undefined;
              return _context4.abrupt("return", this.send("getTransactions", {
                address: address,
                limit: limit,
                lt: lt,
                hash: hash,
                to_lt: to_lt,
                archival: archival
              }));
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getTransactions(_x4) {
        return _getTransactions.apply(this, arguments);
      }
      return getTransactions;
    }())
  }, {
    key: "getBalance",
    value: (
    /**
     * Use this method to get balance (in nanograms) of a given address.
     * @param address {string}
     */
    function () {
      var _getBalance = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(address) {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", this.send('getAddressBalance', {
                address: address
              }));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getBalance(_x5) {
        return _getBalance.apply(this, arguments);
      }
      return getBalance;
    }()
    /**
     * Use this method to send serialized boc file: fully packed and serialized external message.
     * @param base64 {string} base64 of boc bytes Cell.toBoc
     */
    )
  }, {
    key: "sendBoc",
    value: (function () {
      var _sendBoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(base64) {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", this.send("sendBoc", {
                'boc': base64
              }));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function sendBoc(_x6) {
        return _sendBoc.apply(this, arguments);
      }
      return sendBoc;
    }())
  }, {
    key: "sendQuery",
    value: (
    /**
     * @deprecated
     * Send external message
     * @param query     object as described https://toncenter.com/api/test/v2/#sendQuerySimple
     */
    function () {
      var _sendQuery = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(query) {
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", this.send("sendQuerySimple", query));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function sendQuery(_x7) {
        return _sendQuery.apply(this, arguments);
      }
      return sendQuery;
    }())
  }, {
    key: "getEstimateFee",
    value: (
    /**
     * @param query     object as described https://toncenter.com/api/test/v2/#estimateFee
     * @return fees object
     */
    function () {
      var _getEstimateFee = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(query) {
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", this.send("estimateFee", query));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getEstimateFee(_x8) {
        return _getEstimateFee.apply(this, arguments);
      }
      return getEstimateFee;
    }())
  }, {
    key: "call",
    value: (
    /**
     * Invoke get-method of smart contract
     * todo: think about throw error if result.exit_code !== 0 (the change breaks backward compatibility)
     * @param address   {string}    contract address
     * @param method   {string | number}        method name or method id
     * @param params?   Array of stack elements: [['num',3], ['cell', cell_object], ['slice', slice_object]]
     */
    function () {
      var _call = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(address, method) {
        var params,
          _args9 = arguments;
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              params = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : [];
              return _context9.abrupt("return", this.send('runGetMethod', {
                address: address,
                method: method,
                stack: params
              }));
            case 2:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function call(_x9, _x10) {
        return _call.apply(this, arguments);
      }
      return call;
    }()
    /**
     * Invoke get-method of smart contract
     * @param address   {string}    contract address
     * @param method   {string | number}        method name or method id
     * @param params?   Array of stack elements: [['num',3], ['cell', cell_object], ['slice', slice_object]]
     */
    )
  }, {
    key: "call2",
    value: (function () {
      var _call2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(address, method) {
        var params,
          result,
          _args10 = arguments;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              params = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : [];
              _context10.next = 3;
              return this.send('runGetMethod', {
                address: address,
                method: method,
                stack: params
              });
            case 3:
              result = _context10.sent;
              return _context10.abrupt("return", HttpProviderUtils.parseResponse(result));
            case 5:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function call2(_x11, _x12) {
        return _call2.apply(this, arguments);
      }
      return call2;
    }()
    /**
     * Returns network config param
     * @param configParamId {number}
     * @return {Cell}
     */
    )
  }, {
    key: "getConfigParam",
    value: (function () {
      var _getConfigParam = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11(configParamId) {
        var rawResult;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.send('getConfigParam', {
                config_id: configParamId
              });
            case 2:
              rawResult = _context11.sent;
              if (!(rawResult['@type'] !== 'configInfo')) {
                _context11.next = 5;
                break;
              }
              throw new Error('getConfigParam expected type configInfo');
            case 5:
              if (rawResult.config) {
                _context11.next = 7;
                break;
              }
              throw new Error('getConfigParam expected config');
            case 7:
              if (!(rawResult.config['@type'] !== 'tvm.cell')) {
                _context11.next = 9;
                break;
              }
              throw new Error('getConfigParam expected type tvm.cell');
            case 9:
              if (rawResult.config.bytes) {
                _context11.next = 11;
                break;
              }
              throw new Error('getConfigParam expected bytes');
            case 11:
              return _context11.abrupt("return", Cell$m.oneFromBoc(base64ToBytes$1(rawResult.config.bytes)));
            case 12:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function getConfigParam(_x13) {
        return _getConfigParam.apply(this, arguments);
      }
      return getConfigParam;
    }()
    /**
     * Returns ID's of last and init block of masterchain
     */
    )
  }, {
    key: "getMasterchainInfo",
    value: (function () {
      var _getMasterchainInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", this.send('getMasterchainInfo', {}));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function getMasterchainInfo() {
        return _getMasterchainInfo.apply(this, arguments);
      }
      return getMasterchainInfo;
    }()
    /**
     * Returns ID's of shardchain blocks included in this masterchain block
     * @param masterchainBlockNumber {number}
     */
    )
  }, {
    key: "getBlockShards",
    value: (function () {
      var _getBlockShards = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13(masterchainBlockNumber) {
        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", this.send('shards', {
                seqno: masterchainBlockNumber
              }));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function getBlockShards(_x14) {
        return _getBlockShards.apply(this, arguments);
      }
      return getBlockShards;
    }()
    /**
     * Returns transactions hashes included in this block
     * @param workchain {number}
     * @param shardId   {string}
     * @param shardBlockNumber  {number}
     * @param limit? {number}
     * @param afterLt? {number} pivot transaction LT to start with
     * @param addressHash? {string} take the account address where the pivot transaction took place, convert it to raw format and take the part of the address without the workchain (address hash)
     */
    )
  }, {
    key: "getBlockTransactions",
    value: (function () {
      var _getBlockTransactions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee14(workchain, shardId, shardBlockNumber, limit, afterLt, addressHash) {
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", this.send('getBlockTransactions', {
                workchain: workchain,
                shard: shardId,
                seqno: shardBlockNumber,
                count: limit,
                after_lt: afterLt,
                after_hash: addressHash
              }));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function getBlockTransactions(_x15, _x16, _x17, _x18, _x19, _x20) {
        return _getBlockTransactions.apply(this, arguments);
      }
      return getBlockTransactions;
    }()
    /**
     * Returns transactions hashes included in this masterhcain block
     * @param masterchainBlockNumber  {number}
     * @param limit? {number}
     * @param afterLt? {number | string} pivot transaction LT to start with
     * @param addressHash? {string}  take the account address where the pivot transaction took place, convert it to raw format and take the part of the address without the workchain (address hash)
     */
    )
  }, {
    key: "getMasterchainBlockTransactions",
    value: (function () {
      var _getMasterchainBlockTransactions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee15(masterchainBlockNumber, limit, afterLt, addressHash) {
        return _regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", this.getBlockTransactions(-1, SHARD_ID_ALL, masterchainBlockNumber, limit, afterLt, addressHash));
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function getMasterchainBlockTransactions(_x21, _x22, _x23, _x24) {
        return _getMasterchainBlockTransactions.apply(this, arguments);
      }
      return getMasterchainBlockTransactions;
    }()
    /**
     * Returns block header and his previous blocks ID's
     * @param workchain {number}
     * @param shardId   {string}
     * @param shardBlockNumber  {number}
     */
    )
  }, {
    key: "getBlockHeader",
    value: (function () {
      var _getBlockHeader = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee16(workchain, shardId, shardBlockNumber) {
        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", this.send('getBlockHeader', {
                workchain: workchain,
                shard: shardId,
                seqno: shardBlockNumber
              }));
            case 1:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function getBlockHeader(_x25, _x26, _x27) {
        return _getBlockHeader.apply(this, arguments);
      }
      return getBlockHeader;
    }()
    /**
     * Returns masterchain block header and his previous block ID
     * @param masterchainBlockNumber  {number}
     */
    )
  }, {
    key: "getMasterchainBlockHeader",
    value: (function () {
      var _getMasterchainBlockHeader = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee17(masterchainBlockNumber) {
        return _regeneratorRuntime().wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", this.getBlockHeader(-1, SHARD_ID_ALL, masterchainBlockNumber));
            case 1:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function getMasterchainBlockHeader(_x28) {
        return _getMasterchainBlockHeader.apply(this, arguments);
      }
      return getMasterchainBlockHeader;
    }())
  }]);
}();
HttpProvider$1.SHARD_ID_ALL = SHARD_ID_ALL;
providers["default"] = HttpProvider$1;

var wallet = {};

var Contract$e = contract.Contract;
var Cell$l = boc$1.Cell;
var nacl$2 = utils$1.nacl;
  utils$1.stringToBytes;
  utils$1.Address;
  utils$1.BN;

/**
 * Abstract standard wallet class
 */
var WalletContract$7 = /*#__PURE__*/function (_Contract) {
  /**
   * @param provider    {HttpProvider}
   * @param options?    {{code: Cell, publicKey?: Uint8Array, address?: Address | string, wc?: number}}
   */
  function WalletContract(provider, options) {
    var _this;
    _classCallCheck(this, WalletContract);
    if (!options.publicKey && !options.address) throw new Error('WalletContract required publicKey or address in options');
    _this = _callSuper(this, WalletContract, [provider, options]);
    _this.methods = {
      /**
       * @param   params {{secretKey: Uint8Array, seqno: number, expireAt?: number, toAddress: Address | string, amount: BN, payload?: string | Uint8Array | Cell, sendMode?: number, stateInit?: Cell }}
       */
      transfer: function transfer(params) {
        return Contract$e.createMethod(provider, _this.createTransferMessage(params.secretKey, params.toAddress, params.amount, params.seqno, params.payload, params.sendMode, !Boolean(params.secretKey), params.stateInit, params.expireAt));
      },
      /**
       * @param   params {{secretKey: Uint8Array, seqno: number, expireAt?: number, messages: [{toAddress: Address | string, amount: BN, payload?: string | Uint8Array | Cell, sendMode?: number, stateInit?: Cell }]}}
       */
      transfers: function transfers(params) {
        return Contract$e.createMethod(provider, _this.createTransferMessages(params.secretKey, params.seqno, params.messages, !Boolean(params.secretKey), params.expireAt));
      },
      seqno: function seqno() {
        return {
          /**
           * @return {Promise<number|null>}
           */
          call: function () {
            var _call = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
              var address, n;
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return _this.getAddress();
                  case 2:
                    address = _context.sent;
                    n = null;
                    _context.prev = 4;
                    _context.next = 7;
                    return provider.call2(address.toString(), 'seqno');
                  case 7:
                    n = _context.sent.toNumber();
                    _context.next = 12;
                    break;
                  case 10:
                    _context.prev = 10;
                    _context.t0 = _context["catch"](4);
                  case 12:
                    return _context.abrupt("return", n);
                  case 13:
                  case "end":
                    return _context.stop();
                }
              }, _callee, null, [[4, 10]]);
            }));
            function call() {
              return _call.apply(this, arguments);
            }
            return call;
          }()
        };
      }
    };

    /**
     * @param secretKey {Uint8Array}
     */
    _this.deploy = function (secretKey) {
      return Contract$e.createMethod(provider, _this.createInitExternalMessage(secretKey));
    };
    return _this;
  }
  _inherits(WalletContract, _Contract);
  return _createClass(WalletContract, [{
    key: "getName",
    value: function getName() {
      throw new Error('override me');
    }

    /**
     * @override
     * @protected
     * @return {Cell} cell contains wallet data
     */
  }, {
    key: "createDataCell",
    value: function createDataCell() {
      // 4 byte seqno, 32 byte publicKey
      var cell = new Cell$l();
      cell.bits.writeUint(0, 32); // seqno
      cell.bits.writeBytes(this.options.publicKey);
      return cell;
    }

    /**
     * @protected
     * @param   seqno?   {number}
     * @return {Cell}
     */
  }, {
    key: "createSigningMessage",
    value: function createSigningMessage(seqno) {
      seqno = seqno || 0;
      var cell = new Cell$l();
      cell.bits.writeUint(seqno, 32);
      return cell;
    }

    /**
     * External message for initialization
     * @param secretKey  {Uint8Array} nacl.KeyPair.secretKey
     * @return {{address: Address, message: Cell, body: Cell, sateInit: Cell, code: Cell, data: Cell}}
     */
  }, {
    key: "createInitExternalMessage",
    value: (function () {
      var _createInitExternalMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(secretKey) {
        var keyPair, _yield$this$createSta, stateInit, address, code, data, signingMessage, signature, body, header, externalMessage;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!this.options.publicKey) {
                keyPair = nacl$2.sign.keyPair.fromSecretKey(secretKey);
                this.options.publicKey = keyPair.publicKey;
              }
              _context2.next = 3;
              return this.createStateInit();
            case 3:
              _yield$this$createSta = _context2.sent;
              stateInit = _yield$this$createSta.stateInit;
              address = _yield$this$createSta.address;
              code = _yield$this$createSta.code;
              data = _yield$this$createSta.data;
              signingMessage = this.createSigningMessage();
              _context2.t0 = nacl$2.sign;
              _context2.next = 12;
              return signingMessage.hash();
            case 12:
              _context2.t1 = _context2.sent;
              _context2.t2 = secretKey;
              signature = _context2.t0.detached.call(_context2.t0, _context2.t1, _context2.t2);
              body = new Cell$l();
              body.bits.writeBytes(signature);
              body.writeCell(signingMessage);
              header = Contract$e.createExternalMessageHeader(address);
              externalMessage = Contract$e.createCommonMsgInfo(header, stateInit, body);
              return _context2.abrupt("return", {
                address: address,
                message: externalMessage,
                body: body,
                signingMessage: signingMessage,
                stateInit: stateInit,
                code: code,
                data: data
              });
            case 21:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function createInitExternalMessage(_x) {
        return _createInitExternalMessage.apply(this, arguments);
      }
      return createInitExternalMessage;
    }()
    /**
     * @protected
     * @param signingMessage {Cell}
     * @param secretKey {Uint8Array}  nacl.KeyPair.secretKey
     * @param seqno {number}
     * @param dummySignature?    {boolean}
     * @return {Promise<{address: Address, signature: Uint8Array, message: Cell, cell: Cell, body: Cell, resultMessage: Cell}>}
     */
    )
  }, {
    key: "createExternalMessage",
    value: (function () {
      var _createExternalMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(signingMessage, secretKey, seqno) {
        var dummySignature,
          signature,
          body,
          stateInit,
          code,
          data,
          keyPair,
          deploy,
          selfAddress,
          header,
          resultMessage,
          _args3 = arguments;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              dummySignature = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : false;
              if (!dummySignature) {
                _context3.next = 5;
                break;
              }
              _context3.t0 = new Uint8Array(64);
              _context3.next = 11;
              break;
            case 5:
              _context3.t1 = nacl$2.sign;
              _context3.next = 8;
              return signingMessage.hash();
            case 8:
              _context3.t2 = _context3.sent;
              _context3.t3 = secretKey;
              _context3.t0 = _context3.t1.detached.call(_context3.t1, _context3.t2, _context3.t3);
            case 11:
              signature = _context3.t0;
              body = new Cell$l();
              body.bits.writeBytes(signature);
              body.writeCell(signingMessage);
              stateInit = null, code = null, data = null;
              if (!(seqno === 0)) {
                _context3.next = 24;
                break;
              }
              if (!this.options.publicKey) {
                keyPair = nacl$2.sign.keyPair.fromSecretKey(secretKey);
                this.options.publicKey = keyPair.publicKey;
              }
              _context3.next = 20;
              return this.createStateInit();
            case 20:
              deploy = _context3.sent;
              stateInit = deploy.stateInit;
              code = deploy.code;
              data = deploy.data;
            case 24:
              _context3.next = 26;
              return this.getAddress();
            case 26:
              selfAddress = _context3.sent;
              header = Contract$e.createExternalMessageHeader(selfAddress);
              resultMessage = Contract$e.createCommonMsgInfo(header, stateInit, body);
              return _context3.abrupt("return", {
                address: selfAddress,
                message: resultMessage,
                // old wallet_send_generate_external_message

                body: body,
                signature: signature,
                signingMessage: signingMessage,
                stateInit: stateInit,
                code: code,
                data: data
              });
            case 30:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function createExternalMessage(_x2, _x3, _x4) {
        return _createExternalMessage.apply(this, arguments);
      }
      return createExternalMessage;
    }()
    /**
     * @param secretKey {Uint8Array}  nacl.KeyPair.secretKey
     * @param address   {Address | string}
     * @param amount    {BN | number} in nanotons
     * @param seqno {number}
     * @param payload?   {string | Uint8Array | Cell}
     * @param sendMode?  {number}
     * @param dummySignature?    {boolean}
     * @param stateInit? {Cell}
     * @param expireAt? {number}
     * @return {Promise<{address: Address, signature: Uint8Array, message: Cell, cell: Cell, body: Cell, resultMessage: Cell}>}
     */
    )
  }, {
    key: "createTransferMessage",
    value: (function () {
      var _createTransferMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(secretKey, address, amount, seqno) {
        var payload,
          sendMode,
          dummySignature,
          stateInit,
          expireAt,
          signingMessage,
          _args4 = arguments;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              payload = _args4.length > 4 && _args4[4] !== undefined ? _args4[4] : "";
              sendMode = _args4.length > 5 && _args4[5] !== undefined ? _args4[5] : 3;
              dummySignature = _args4.length > 6 && _args4[6] !== undefined ? _args4[6] : false;
              stateInit = _args4.length > 7 && _args4[7] !== undefined ? _args4[7] : null;
              expireAt = _args4.length > 8 && _args4[8] !== undefined ? _args4[8] : undefined;
              if (!(seqno === null || seqno === undefined || seqno < 0)) {
                _context4.next = 7;
                break;
              }
              throw new Error('seqno must be number >= 0');
            case 7:
              signingMessage = this.createSigningMessage(seqno, expireAt);
              if (sendMode === null || sendMode === undefined) {
                sendMode = 3;
              }
              signingMessage.bits.writeUint8(sendMode);
              signingMessage.refs.push(Contract$e.createOutMsg(address, amount, payload, stateInit));
              return _context4.abrupt("return", this.createExternalMessage(signingMessage, secretKey, seqno, dummySignature));
            case 12:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function createTransferMessage(_x5, _x6, _x7, _x8) {
        return _createTransferMessage.apply(this, arguments);
      }
      return createTransferMessage;
    }()
    /**
     * @param secretKey {Uint8Array}  nacl.KeyPair.secretKey
     * @param seqno {number}
     * @param messages {[{toAddress: Address | string, amount: BN, payload?: string | Uint8Array | Cell, sendMode?: number, stateInit?: Cell }]} up to 4 messages
     * @param dummySignature?    {boolean}
     * @param expireAt? {number}
     * @return {Promise<{address: Address, signature: Uint8Array, message: Cell, cell: Cell, body: Cell, resultMessage: Cell}>}
     */
    )
  }, {
    key: "createTransferMessages",
    value: (function () {
      var _createTransferMessages = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(secretKey, seqno, messages) {
        var dummySignature,
          expireAt,
          signingMessage,
          _iterator,
          _step,
          msg,
          sendMode,
          _args5 = arguments;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              dummySignature = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : false;
              expireAt = _args5.length > 4 && _args5[4] !== undefined ? _args5[4] : undefined;
              if (!(seqno === null || seqno === undefined || seqno < 0)) {
                _context5.next = 4;
                break;
              }
              throw new Error('seqno must be number >= 0');
            case 4:
              signingMessage = this.createSigningMessage(seqno, expireAt);
              if (!(messages.length < 1 || messages.length > 4)) {
                _context5.next = 7;
                break;
              }
              throw new Error('put 1-4 messages');
            case 7:
              _iterator = _createForOfIteratorHelper(messages);
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  msg = _step.value;
                  sendMode = msg.sendMode;
                  if (sendMode === null || sendMode === undefined) {
                    sendMode = 3;
                  }
                  signingMessage.bits.writeUint8(sendMode);
                  signingMessage.refs.push(Contract$e.createOutMsg(msg.toAddress, msg.amount, msg.payload, msg.stateInit));
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              return _context5.abrupt("return", this.createExternalMessage(signingMessage, secretKey, seqno, dummySignature));
            case 10:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function createTransferMessages(_x9, _x10, _x11) {
        return _createTransferMessages.apply(this, arguments);
      }
      return createTransferMessages;
    }())
  }]);
}(Contract$e);
var WalletContract_1 = {
  WalletContract: WalletContract$7
};

var Cell$k = boc$1.Cell;
var WalletContract$6 = WalletContract_1.WalletContract;

// attention: no seqno get-method in this wallet
var SimpleWalletContractR1$1 = /*#__PURE__*/function (_WalletContract) {
  /**
   * @param provider    {HttpProvider}
   * @param options? {any}
   */
  function SimpleWalletContractR1(provider, options) {
    _classCallCheck(this, SimpleWalletContractR1);
    options.code = Cell$k.oneFromBoc("B5EE9C72410101010044000084FF0020DDA4F260810200D71820D70B1FED44D0D31FD3FFD15112BAF2A122F901541044F910F2A2F80001D31F3120D74A96D307D402FB00DED1A4C8CB1FCBFFC9ED5441FDF089");
    return _callSuper(this, SimpleWalletContractR1, [provider, options]);
  }
  _inherits(SimpleWalletContractR1, _WalletContract);
  return _createClass(SimpleWalletContractR1, [{
    key: "getName",
    value: function getName() {
      return 'simpleR1';
    }
  }]);
}(WalletContract$6);
var SimpleWalletContractR2$1 = /*#__PURE__*/function (_WalletContract2) {
  /**
   * @param provider    {HttpProvider}
   * @param options? {any}
   */
  function SimpleWalletContractR2(provider, options) {
    _classCallCheck(this, SimpleWalletContractR2);
    options.code = Cell$k.oneFromBoc("B5EE9C724101010100530000A2FF0020DD2082014C97BA9730ED44D0D70B1FE0A4F260810200D71820D70B1FED44D0D31FD3FFD15112BAF2A122F901541044F910F2A2F80001D31F3120D74A96D307D402FB00DED1A4C8CB1FCBFFC9ED54D0E2786F");
    return _callSuper(this, SimpleWalletContractR2, [provider, options]);
  }
  _inherits(SimpleWalletContractR2, _WalletContract2);
  return _createClass(SimpleWalletContractR2, [{
    key: "getName",
    value: function getName() {
      return 'simpleR2';
    }
  }]);
}(WalletContract$6);
var SimpleWalletContractR3$1 = /*#__PURE__*/function (_WalletContract3) {
  /**
   * @param provider    {HttpProvider}
   * @param options? {any}
   */
  function SimpleWalletContractR3(provider, options) {
    _classCallCheck(this, SimpleWalletContractR3);
    options.code = Cell$k.oneFromBoc("B5EE9C7241010101005F0000BAFF0020DD2082014C97BA218201339CBAB19C71B0ED44D0D31FD70BFFE304E0A4F260810200D71820D70B1FED44D0D31FD3FFD15112BAF2A122F901541044F910F2A2F80001D31F3120D74A96D307D402FB00DED1A4C8CB1FCBFFC9ED54B5B86E42");
    return _callSuper(this, SimpleWalletContractR3, [provider, options]);
  }
  _inherits(SimpleWalletContractR3, _WalletContract3);
  return _createClass(SimpleWalletContractR3, [{
    key: "getName",
    value: function getName() {
      return 'simpleR3';
    }
  }]);
}(WalletContract$6);
var WalletContractSimple = {
  SimpleWalletContractR1: SimpleWalletContractR1$1,
  SimpleWalletContractR2: SimpleWalletContractR2$1,
  SimpleWalletContractR3: SimpleWalletContractR3$1
};

var Cell$j = boc$1.Cell;
var WalletContract$5 = WalletContract_1.WalletContract;
var WalletV2ContractBase = /*#__PURE__*/function (_WalletContract) {
  function WalletV2ContractBase() {
    _classCallCheck(this, WalletV2ContractBase);
    return _callSuper(this, WalletV2ContractBase, arguments);
  }
  _inherits(WalletV2ContractBase, _WalletContract);
  return _createClass(WalletV2ContractBase, [{
    key: "createSigningMessage",
    value:
    /**
     * @override
     * @private
     * @param   seqno?   {number}
     * @param   expireAt? {number}
     * @return {Cell}
     */
    function createSigningMessage(seqno, expireAt) {
      seqno = seqno || 0;
      expireAt = expireAt || Math.floor(Date.now() / 1e3) + 60;
      var message = new Cell$j();
      message.bits.writeUint(seqno, 32);
      if (seqno === 0) {
        // message.bits.writeInt(-1, 32);// todo: dont work
        for (var i = 0; i < 32; i++) {
          message.bits.writeBit(1);
        }
      } else {
        message.bits.writeUint(expireAt, 32);
      }
      return message;
    }
  }]);
}(WalletContract$5);
var WalletV2ContractR1$1 = /*#__PURE__*/function (_WalletV2ContractBase) {
  /**
   * @param provider    {HttpProvider}
   * @param options? {any}
   */
  function WalletV2ContractR1(provider, options) {
    _classCallCheck(this, WalletV2ContractR1);
    options.code = Cell$j.oneFromBoc("B5EE9C724101010100570000AAFF0020DD2082014C97BA9730ED44D0D70B1FE0A4F2608308D71820D31FD31F01F823BBF263ED44D0D31FD3FFD15131BAF2A103F901541042F910F2A2F800029320D74A96D307D402FB00E8D1A4C8CB1FCBFFC9ED54A1370BB6");
    return _callSuper(this, WalletV2ContractR1, [provider, options]);
  }
  _inherits(WalletV2ContractR1, _WalletV2ContractBase);
  return _createClass(WalletV2ContractR1, [{
    key: "getName",
    value: function getName() {
      return 'v2R1';
    }
  }]);
}(WalletV2ContractBase);
var WalletV2ContractR2$1 = /*#__PURE__*/function (_WalletV2ContractBase2) {
  /**
   * @param provider    {HttpProvider}
   * @param options? {any}
   */
  function WalletV2ContractR2(provider, options) {
    _classCallCheck(this, WalletV2ContractR2);
    options.code = Cell$j.oneFromBoc("B5EE9C724101010100630000C2FF0020DD2082014C97BA218201339CBAB19C71B0ED44D0D31FD70BFFE304E0A4F2608308D71820D31FD31F01F823BBF263ED44D0D31FD3FFD15131BAF2A103F901541042F910F2A2F800029320D74A96D307D402FB00E8D1A4C8CB1FCBFFC9ED54044CD7A1");
    return _callSuper(this, WalletV2ContractR2, [provider, options]);
  }
  _inherits(WalletV2ContractR2, _WalletV2ContractBase2);
  return _createClass(WalletV2ContractR2, [{
    key: "getName",
    value: function getName() {
      return 'v2R2';
    }
  }]);
}(WalletV2ContractBase);
var WalletContractV2 = {
  WalletV2ContractR1: WalletV2ContractR1$1,
  WalletV2ContractR2: WalletV2ContractR2$1
};

var BN$9 = utils$1.BN;

/**
 * @param slice {Slice}
 * @return {{seqno: number, bounce: boolean, payload: string, expireAt: number, toAddress: Address, value: BN}}
 */
function parseWalletV3TransferBody$3(slice) {
  slice.loadBits(512);

  // signing message

  var walletId = slice.loadUint(32).toNumber();
  if (walletId !== 698983191) throw new Error('invalid walletId');
  var expireAt = slice.loadUint(32).toNumber();
  var seqno = slice.loadUint(32).toNumber();
  var sendMode = slice.loadUint(8).toNumber();
  if (sendMode !== 3) throw new Error('invalid sendMode');
  var order = slice.loadRef();

  // order internal header
  if (order.loadBit()) throw Error('invalid internal header');
  if (!order.loadBit()) throw Error('invalid ihrDisabled');
  var bounce = order.loadBit();
  if (order.loadBit()) throw Error('invalid bounced');
  var sourceAddress = order.loadAddress();
  if (sourceAddress !== null) throw Error('invalid externalSourceAddress');
  var destAddress = order.loadAddress();
  var value = order.loadCoins();
  if (order.loadBit()) throw Error('invalid currencyCollection');
  var ihrFees = order.loadCoins();
  if (!ihrFees.eq(new BN$9(0))) throw new Error('invalid ihrFees');
  var fwdFees = order.loadCoins();
  if (!fwdFees.eq(new BN$9(0))) throw new Error('invalid fwdFees');
  var createdLt = order.loadUint(64);
  if (!createdLt.eq(new BN$9(0))) throw new Error('invalid createdLt');
  var createdAt = order.loadUint(32);
  if (!createdAt.eq(new BN$9(0))) throw new Error('invalid createdAt');

  // order stateInit
  if (order.loadBit()) {
    order.loadRef(); // don't parse stateInit
  }

  // order body
  var payload = null;
  if (order.getFreeBits() > 0) {
    if (order.loadBit()) {
      order = order.loadRef();
    }
    if (order.getFreeBits() > 32) {
      var op = order.loadUint(32);
      var payloadBytes = order.loadBits(order.getFreeBits());
      payload = op.eq(new BN$9(0)) ? new TextDecoder().decode(payloadBytes) : '';
    }
  }

  // console.log(bytesToHex(signature));
  // console.log(walletId);
  // console.log(expireAt);
  // console.log(seqno);
  // console.log(sendMode);
  // console.log(bounce);
  // console.log(sourceAddress?.toString(true, true, true));
  // console.log(destAddress?.toString(true, true, true));
  // console.log(value.toNumber());
  // console.log(ihrFees);
  // console.log(fwdFees);
  // console.log(createdLt);
  // console.log(createdAt);
  // console.log(payload);

  return {
    toAddress: destAddress,
    value: value,
    bounce: bounce,
    seqno: seqno,
    expireAt: expireAt,
    payload: payload
  };
}

/**
 * @param cell {Cell}
 * @return {{seqno: number, bounce: boolean, payload: string, fromAddress: Address|null, expireAt: number, toAddress: Address, value: BN}}
 */
function parseWalletV3TransferQuery$3(cell) {
  var slice = cell.beginParse();

  // header

  if (slice.loadUint(2).toNumber() !== 2) throw Error('invalid header');
  var externalSourceAddress = slice.loadAddress();
  if (externalSourceAddress !== null) throw Error('invalid externalSourceAddress');
  var externalDestAddress = slice.loadAddress();
  var externalImportFee = slice.loadCoins();
  if (!externalImportFee.eq(new BN$9(0))) throw new Error('invalid externalImportFee');

  // stateInit

  if (slice.loadBit()) {
    if (slice.loadBit()) {
      slice.loadRef(); // don't parse stateInit
    }
  }

  // body

  var bodySlice = slice.loadBit() ? slice.loadRef() : slice;

  // console.log(externalSourceAddress);
  // console.log(externalDestAddress.toString(true, true, true));
  // console.log(externalImportFee);

  return _objectSpread2({
    fromAddress: externalDestAddress
  }, parseWalletV3TransferBody$3(bodySlice));
}
var WalletQueryParser = {
  parseWalletV3TransferQuery: parseWalletV3TransferQuery$3,
  parseWalletV3TransferBody: parseWalletV3TransferBody$3
};

var Cell$i = boc$1.Cell;
var WalletContract$4 = WalletContract_1.WalletContract;
var parseWalletV3TransferQuery$2 = WalletQueryParser.parseWalletV3TransferQuery,
  parseWalletV3TransferBody$2 = WalletQueryParser.parseWalletV3TransferBody;
var WalletV3ContractBase = /*#__PURE__*/function (_WalletContract) {
  function WalletV3ContractBase() {
    _classCallCheck(this, WalletV3ContractBase);
    return _callSuper(this, WalletV3ContractBase, arguments);
  }
  _inherits(WalletV3ContractBase, _WalletContract);
  return _createClass(WalletV3ContractBase, [{
    key: "createSigningMessage",
    value:
    /**
     * @override
     * @private
     * @param   seqno?   {number}
     * @param   expireAt? {number}
     * @return {Cell}
     */
    function createSigningMessage(seqno, expireAt) {
      seqno = seqno || 0;
      expireAt = expireAt || Math.floor(Date.now() / 1e3) + 60;
      var message = new Cell$i();
      message.bits.writeUint(this.options.walletId, 32);
      if (seqno === 0) {
        // message.bits.writeInt(-1, 32);// todo: dont work
        for (var i = 0; i < 32; i++) {
          message.bits.writeBit(1);
        }
      } else {
        message.bits.writeUint(expireAt, 32);
      }
      message.bits.writeUint(seqno, 32);
      return message;
    }

    /**
     * @override
     * @return {Cell} cell contains wallet data
     */
  }, {
    key: "createDataCell",
    value: function createDataCell() {
      var cell = new Cell$i();
      cell.bits.writeUint(0, 32);
      cell.bits.writeUint(this.options.walletId, 32);
      cell.bits.writeBytes(this.options.publicKey);
      return cell;
    }
  }]);
}(WalletContract$4);
var WalletV3ContractR1$1 = /*#__PURE__*/function (_WalletV3ContractBase) {
  /**
   * @param provider    {HttpProvider}
   * @param options {any}
   */
  function WalletV3ContractR1(provider, options) {
    var _this;
    _classCallCheck(this, WalletV3ContractR1);
    options.code = Cell$i.oneFromBoc("B5EE9C724101010100620000C0FF0020DD2082014C97BA9730ED44D0D70B1FE0A4F2608308D71820D31FD31FD31FF82313BBF263ED44D0D31FD31FD3FFD15132BAF2A15144BAF2A204F901541055F910F2A3F8009320D74A96D307D402FB00E8D101A4C8CB1FCB1FCBFFC9ED543FBE6EE0");
    _this = _callSuper(this, WalletV3ContractR1, [provider, options]);
    if (!_this.options.walletId) _this.options.walletId = 698983191 + _this.options.wc;
    return _this;
  }
  _inherits(WalletV3ContractR1, _WalletV3ContractBase);
  return _createClass(WalletV3ContractR1, [{
    key: "getName",
    value: function getName() {
      return 'v3R1';
    }
  }]);
}(WalletV3ContractBase);
WalletV3ContractR1$1.parseTransferQuery = parseWalletV3TransferQuery$2;
WalletV3ContractR1$1.parseTransferBody = parseWalletV3TransferBody$2;
var WalletV3ContractR2$1 = /*#__PURE__*/function (_WalletV3ContractBase2) {
  /**
   * @param provider    {HttpProvider}
   * @param options {any}
   */
  function WalletV3ContractR2(provider, options) {
    var _this2;
    _classCallCheck(this, WalletV3ContractR2);
    options.code = Cell$i.oneFromBoc("B5EE9C724101010100710000DEFF0020DD2082014C97BA218201339CBAB19F71B0ED44D0D31FD31F31D70BFFE304E0A4F2608308D71820D31FD31FD31FF82313BBF263ED44D0D31FD31FD3FFD15132BAF2A15144BAF2A204F901541055F910F2A3F8009320D74A96D307D402FB00E8D101A4C8CB1FCB1FCBFFC9ED5410BD6DAD");
    _this2 = _callSuper(this, WalletV3ContractR2, [provider, options]);
    if (!_this2.options.walletId) _this2.options.walletId = 698983191 + _this2.options.wc;
    return _this2;
  }
  _inherits(WalletV3ContractR2, _WalletV3ContractBase2);
  return _createClass(WalletV3ContractR2, [{
    key: "getName",
    value: function getName() {
      return 'v3R2';
    }
  }]);
}(WalletV3ContractBase);
WalletV3ContractR2$1.parseTransferQuery = parseWalletV3TransferQuery$2;
WalletV3ContractR2$1.parseTransferBody = parseWalletV3TransferBody$2;
var WalletContractV3 = {
  WalletV3ContractR1: WalletV3ContractR1$1,
  WalletV3ContractR2: WalletV3ContractR2$1
};

var Cell$h = boc$1.Cell;
contract.Contract;
utils$1.Address;
  utils$1.bytesToHex;
  utils$1.BN;
var WalletContract$3 = WalletContract_1.WalletContract;
var parseWalletV3TransferQuery$1 = WalletQueryParser.parseWalletV3TransferQuery,
  parseWalletV3TransferBody$1 = WalletQueryParser.parseWalletV3TransferBody;
var WalletV4ContractR1$1 = /*#__PURE__*/function (_WalletContract) {
  /**
   * @param provider    {HttpProvider}
   * @param options {any}
   */
  function WalletV4ContractR1(provider, options) {
    var _this;
    _classCallCheck(this, WalletV4ContractR1);
    options.code = Cell$h.oneFromBoc
    _this = _callSuper(this, WalletV4ContractR1, [provider, options]);
    if (!_this.options.walletId) _this.options.walletId = 698983191 + _this.options.wc;
    _this.methods.getPublicKey = _this.getPublicKey.bind(_this);
    return _this;
  }
  _inherits(WalletV4ContractR1, _WalletContract);
  return _createClass(WalletV4ContractR1, [{
    key: "getName",
    value: function getName() {
      return 'v4R1';
    }

    /**
     * @override
     * @private
     * @param   seqno?   {number}
     * @param   expireAt? {number}
     * @param   withoutOp? {boolean}
     * @return {Cell}
     */
  }, {
    key: "createSigningMessage",
    value: function createSigningMessage(seqno, expireAt, withoutOp) {
      seqno = seqno || 0;
      expireAt = expireAt || Math.floor(Date.now() / 1e3) + 60;
      var message = new Cell$h();
      message.bits.writeUint(this.options.walletId, 32);
      if (seqno === 0) {
        // message.bits.writeInt(-1, 32);// todo: dont work
        for (var i = 0; i < 32; i++) {
          message.bits.writeBit(1);
        }
      } else {
        message.bits.writeUint(expireAt, 32);
      }
      message.bits.writeUint(seqno, 32);
      if (!withoutOp) {
        message.bits.writeUint(0, 8); // op
      }
      return message;
    }

    /**
     * @override
     * @return {Cell} cell contains wallet data
     */
  }, {
    key: "createDataCell",
    value: function createDataCell() {
      var cell = new Cell$h();
      cell.bits.writeUint(0, 32);
      cell.bits.writeUint(this.options.walletId, 32);
      cell.bits.writeBytes(this.options.publicKey);
      cell.bits.writeUint(0, 1); // plugins dict empty
      return cell;
    }

    /**
     * @return {Promise<BN>}
     */
  }, {
    key: "getPublicKey",
    value: (function () {
      var _getPublicKey = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var myAddress;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context.sent;
              return _context.abrupt("return", this.provider.call2(myAddress.toString(), 'get_public_key'));
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getPublicKey() {
        return _getPublicKey.apply(this, arguments);
      }
      return getPublicKey;
    }())
  }]);
}(WalletContract$3);
WalletV4ContractR1$1.parseTransferQuery = parseWalletV3TransferQuery$1;
WalletV4ContractR1$1.parseTransferBody = parseWalletV3TransferBody$1;
var WalletContractV4 = {
  WalletV4ContractR1: WalletV4ContractR1$1
};

var Cell$g = boc$1.Cell;
var Contract$d = contract.Contract;
var Address$4 = utils$1.Address,
  bytesToHex$3 = utils$1.bytesToHex;
  utils$1.BN;
  var toNano = utils$1.toNano;
var WalletContract$2 = WalletContract_1.WalletContract;
var parseWalletV3TransferQuery = WalletQueryParser.parseWalletV3TransferQuery,
  parseWalletV3TransferBody = WalletQueryParser.parseWalletV3TransferBody;
var WalletV4ContractR2$1 = /*#__PURE__*/function (_WalletContract) {
  /**
   * @param provider    {HttpProvider}
   * @param options {any}
   */
  function WalletV4ContractR2(provider, options) {
    var _this;
    _classCallCheck(this, WalletV4ContractR2);
    options.code = Cell$g.oneFromBoc
    _this = _callSuper(this, WalletV4ContractR2, [provider, options]);
    if (!_this.options.walletId) _this.options.walletId = 698983191 + _this.options.wc;
    _this.methods.deployAndInstallPlugin = function (params) {
      return Contract$d.createMethod(provider, _this.deployAndInstallPlugin(params));
    };
    _this.methods.installPlugin = function (params) {
      return Contract$d.createMethod(provider, _this.installPlugin(params));
    };
    _this.methods.removePlugin = function (params) {
      return Contract$d.createMethod(provider, _this.removePlugin(params));
    };
    _this.methods.getPublicKey = _this.getPublicKey.bind(_this);
    _this.methods.getWalletId = _this.getWalletId.bind(_this);
    _this.methods.isPluginInstalled = _this.isPluginInstalled.bind(_this);
    _this.methods.getPluginsList = _this.getPluginsList.bind(_this);
    return _this;
  }
  _inherits(WalletV4ContractR2, _WalletContract);
  return _createClass(WalletV4ContractR2, [{
    key: "getName",
    value: function getName() {
      return 'v4R2';
    }

    /**
     * @override
     * @private
     * @param   seqno?   {number}
     * @param   expireAt? {number}
     * @param   withoutOp? {boolean}
     * @return {Cell}
     */
  }, {
    key: "createSigningMessage",
    value: function createSigningMessage(seqno, expireAt, withoutOp) {
      seqno = seqno || 0;
      expireAt = expireAt || Math.floor(Date.now() / 1e3) + 60;
      var message = new Cell$g();
      message.bits.writeUint(this.options.walletId, 32);
      if (seqno === 0) {
        // message.bits.writeInt(-1, 32);// todo: dont work
        for (var i = 0; i < 32; i++) {
          message.bits.writeBit(1);
        }
      } else {
        message.bits.writeUint(expireAt, 32);
      }
      message.bits.writeUint(seqno, 32);
      if (!withoutOp) {
        message.bits.writeUint(0, 8); // op
      }
      return message;
    }

    /**
     * @override
     * @return {Cell} cell contains wallet data
     */
  }, {
    key: "createDataCell",
    value: function createDataCell() {
      var cell = new Cell$g();
      cell.bits.writeUint(0, 32); // seqno
      cell.bits.writeUint(this.options.walletId, 32);
      cell.bits.writeBytes(this.options.publicKey);
      cell.bits.writeUint(0, 1); // plugins dict empty
      return cell;
    }

    /**
     * @param   params {{secretKey: Uint8Array, seqno: number, pluginWc: number, amount: BN, stateInit: Cell, body: Cell, expireAt?: number}}
     */
  }, {
    key: "deployAndInstallPlugin",
    value: (function () {
      var _deployAndInstallPlugin = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {
        var secretKey, seqno, pluginWc, amount, stateInit, body, expireAt, signingMessage;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              secretKey = params.secretKey, seqno = params.seqno, pluginWc = params.pluginWc, amount = params.amount, stateInit = params.stateInit, body = params.body, expireAt = params.expireAt;
              signingMessage = this.createSigningMessage(seqno, expireAt, true);
              signingMessage.bits.writeUint(1, 8); // op
              signingMessage.bits.writeInt(pluginWc, 8);
              signingMessage.bits.writeGrams(amount);
              signingMessage.refs.push(stateInit);
              signingMessage.refs.push(body);
              return _context.abrupt("return", this.createExternalMessage(signingMessage, secretKey, seqno, false));
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function deployAndInstallPlugin(_x) {
        return _deployAndInstallPlugin.apply(this, arguments);
      }
      return deployAndInstallPlugin;
    }()
    /**
     * @private
     * @param   params {{secretKey: Uint8Array, seqno: number, pluginAddress: string | Address, amount?: BN, queryId?: number, expireAt?: number}}
     * @param   isInstall {boolean} install or uninstall
     */
    )
  }, {
    key: "_setPlugin",
    value: (function () {
      var _setPlugin2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params, isInstall) {
        var secretKey, seqno, amount, queryId, expireAt, pluginAddress, signingMessage;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              secretKey = params.secretKey, seqno = params.seqno, amount = params.amount, queryId = params.queryId, expireAt = params.expireAt;
              pluginAddress = new Address$4(params.pluginAddress);
              signingMessage = this.createSigningMessage(seqno, expireAt, true);
              signingMessage.bits.writeUint(isInstall ? 2 : 3, 8); // op
              signingMessage.bits.writeInt(pluginAddress.wc, 8);
              signingMessage.bits.writeBytes(pluginAddress.hashPart);
              signingMessage.bits.writeGrams(amount || toNano('0.1'));
              signingMessage.bits.writeUint(queryId || 0, 64);
              return _context2.abrupt("return", this.createExternalMessage(signingMessage, secretKey, seqno, false));
            case 9:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function _setPlugin(_x2, _x3) {
        return _setPlugin2.apply(this, arguments);
      }
      return _setPlugin;
    }()
    /**
     * @param   params {{secretKey: Uint8Array, seqno: number, pluginAddress: string | Address, amount?: BN, queryId?: number, expireAt?: number}}
     */
    )
  }, {
    key: "installPlugin",
    value: (function () {
      var _installPlugin = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(params) {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this._setPlugin(params, true));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function installPlugin(_x4) {
        return _installPlugin.apply(this, arguments);
      }
      return installPlugin;
    }()
    /**
     * @param   params {{secretKey: Uint8Array, seqno: number, pluginAddress: string | Address, amount?: BN, queryId?: number, expireAt?: number}}
     */
    )
  }, {
    key: "removePlugin",
    value: (function () {
      var _removePlugin = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(params) {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", this._setPlugin(params, false));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function removePlugin(_x5) {
        return _removePlugin.apply(this, arguments);
      }
      return removePlugin;
    }()
    /**
     * @return {Promise<number>}
     */
    )
  }, {
    key: "getWalletId",
    value: (function () {
      var _getWalletId = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        var myAddress, id;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context5.sent;
              _context5.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_subwallet_id');
            case 5:
              id = _context5.sent;
              return _context5.abrupt("return", id.toNumber());
            case 7:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getWalletId() {
        return _getWalletId.apply(this, arguments);
      }
      return getWalletId;
    }()
    /**
     * @return {Promise<BN>}
     */
    )
  }, {
    key: "getPublicKey",
    value: (function () {
      var _getPublicKey = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        var myAddress;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context6.sent;
              return _context6.abrupt("return", this.provider.call2(myAddress.toString(), 'get_public_key'));
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getPublicKey() {
        return _getPublicKey.apply(this, arguments);
      }
      return getPublicKey;
    }()
    /**
     * @param pluginAddress {string | Address}
     * @return {Promise<boolean>}
     */
    )
  }, {
    key: "isPluginInstalled",
    value: (function () {
      var _isPluginInstalled = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(pluginAddress) {
        var hashPart, myAddress, result;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              pluginAddress = new Address$4(pluginAddress);
              hashPart = '0x' + bytesToHex$3(pluginAddress.hashPart);
              _context7.next = 4;
              return this.getAddress();
            case 4:
              myAddress = _context7.sent;
              _context7.next = 7;
              return this.provider.call2(myAddress.toString(), 'is_plugin_installed', [['num', pluginAddress.wc], ['num', hashPart]]);
            case 7:
              result = _context7.sent;
              return _context7.abrupt("return", !result.isZero());
            case 9:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function isPluginInstalled(_x6) {
        return _isPluginInstalled.apply(this, arguments);
      }
      return isPluginInstalled;
    }()
    /**
     * @return {Promise<string[]>} plugins addresses
     */
    )
  }, {
    key: "getPluginsList",
    value: (function () {
      var _getPluginsList = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
        var parseAddress, myAddress, result;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              parseAddress = function parseAddress(tuple) {
                return tuple[0].toNumber() + ':' + tuple[1].toString(16);
              };
              _context8.next = 3;
              return this.getAddress();
            case 3:
              myAddress = _context8.sent;
              _context8.next = 6;
              return this.provider.call2(myAddress.toString(), 'get_plugin_list');
            case 6:
              result = _context8.sent;
              return _context8.abrupt("return", result.map(parseAddress));
            case 8:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function getPluginsList() {
        return _getPluginsList.apply(this, arguments);
      }
      return getPluginsList;
    }())
  }]);
}(WalletContract$2);
WalletV4ContractR2$1.parseTransferQuery = parseWalletV3TransferQuery;
WalletV4ContractR2$1.parseTransferBody = parseWalletV3TransferBody;
var WalletContractV4R2 = {
  WalletV4ContractR2: WalletV4ContractR2$1
};

boc$1.Cell;
utils$1.Address;
  utils$1.BN;
  utils$1.toNano;
  utils$1.bytesToHex;
  utils$1.hexToBytes;
  utils$1.nacl;
  utils$1.stringToBytes;
  utils$1.bytesToBase64;
contract.Contract;
var SimpleWalletContractR1 = WalletContractSimple.SimpleWalletContractR1,
  SimpleWalletContractR2 = WalletContractSimple.SimpleWalletContractR2,
  SimpleWalletContractR3 = WalletContractSimple.SimpleWalletContractR3;
var WalletV2ContractR1 = WalletContractV2.WalletV2ContractR1,
  WalletV2ContractR2 = WalletContractV2.WalletV2ContractR2;
var WalletV3ContractR1 = WalletContractV3.WalletV3ContractR1,
  WalletV3ContractR2 = WalletContractV3.WalletV3ContractR2;
var WalletV4ContractR1 = WalletContractV4.WalletV4ContractR1;
var WalletV4ContractR2 = WalletContractV4R2.WalletV4ContractR2;
var ALL = {
  'simpleR1': SimpleWalletContractR1,
  'simpleR2': SimpleWalletContractR2,
  'simpleR3': SimpleWalletContractR3,
  'v2R1': WalletV2ContractR1,
  'v2R2': WalletV2ContractR2,
  'v3R1': WalletV3ContractR1,
  'v3R2': WalletV3ContractR2,
  'v4R1': WalletV4ContractR1,
  'v4R2': WalletV4ContractR2
};
var LIST = [SimpleWalletContractR1, SimpleWalletContractR2, SimpleWalletContractR3, WalletV2ContractR1, WalletV2ContractR2, WalletV3ContractR1, WalletV3ContractR2, WalletV4ContractR1, WalletV4ContractR2];
var Wallets$1 = /*#__PURE__*/function () {
  /**
   * @param provider    {HttpProvider}
   */
  function Wallets(provider) {
    _classCallCheck(this, Wallets);
    this.provider = provider;
    this.all = ALL;
    this.list = LIST;
    this.defaultVersion = 'v3R1';
    this["default"] = this.all[this.defaultVersion];
  }
  return _createClass(Wallets, [{
    key: "create",
    value: function create(options) {
      return new this["default"](this.provider, options);
    }
  }]);
}();
Wallets$1.all = ALL;
Wallets$1.list = LIST;
wallet["default"] = Wallets$1;

var lockup = {};

var Cell$f = boc$1.Cell;
utils$1.Address;
  utils$1.BN;
  var base64ToBytes = utils$1.base64ToBytes;
var WalletContract$1 = WalletContract_1.WalletContract;
var WALLET_ID_BASE$1 = 698983191;
var LockupWalletV1$1 = /*#__PURE__*/function (_WalletContract) {
  /**
   * @param provider    {HttpProvider}
   * @param options {{publicKey?: Uint8Array, address?: Address | string, wc?: number, config: any}}
   *
   * Config json is {config}
   */
  function LockupWalletV1(provider, options) {
    var _this;
    _classCallCheck(this, LockupWalletV1);
    // options.config:
    // {
    //     wallet_type: "lockup-0.1",
    //     config_pubkey: <base64-encoded pubkey>,
    //     allowed_destinations: [ "addr1", "addr2", ... ]
    // }

    options.code = Cell$f.oneFromBoc
    _this = _callSuper(this, LockupWalletV1, [provider, options]);
    if (!_this.options.walletId) _this.options.walletId = WALLET_ID_BASE$1 + _this.options.wc;
    _this.methods.getPublicKey = _this.getPublicKey.bind(_this);
    _this.methods.getWalletId = _this.getWalletId.bind(_this);
    _this.methods.getLiquidBalance = _this.getLiquidBalance.bind(_this);
    _this.methods.getNominalRestrictedBalance = _this.getNominalRestrictedBalance.bind(_this);
    _this.methods.getNominalLockedBalance = _this.getNominalLockedBalance.bind(_this);
    return _this;
  }
  _inherits(LockupWalletV1, _WalletContract);
  return _createClass(LockupWalletV1, [{
    key: "getName",
    value: function getName() {
      return 'lockup-0.1';
    }

    /**
     * @override
     * @private
     * @param   seqno?   {number}
     * @param   expireAt?: {number}
     * @param   withoutOp? {boolean}
     * @return {Cell}
     */
  }, {
    key: "createSigningMessage",
    value: function createSigningMessage(seqno, expireAt, withoutOp) {
      seqno = seqno || 0;
      expireAt = expireAt || Math.floor(Date.now() / 1e3) + 60;
      var message = new Cell$f();
      message.bits.writeUint(this.options.walletId, 32);
      if (seqno === 0) {
        // message.bits.writeInt(-1, 32);// todo: dont work
        for (var i = 0; i < 32; i++) {
          message.bits.writeBit(1);
        }
      } else {
        message.bits.writeUint(expireAt, 32);
      }
      message.bits.writeUint(seqno, 32);
      return message;
    }

    /**
     * @override
     * @return {Cell} cell contains wallet data
     */
  }, {
    key: "createDataCell",
    value: function createDataCell() {
      // from restricted.fc:
      // .store_int(seqno, 32)
      // .store_int(subwallet_id, 32)
      // .store_uint(public_key, 256)
      // .store_uint(config_public_key, 256)
      // .store_dict(allowed_destinations)
      // .store_grams(total_locked_value)
      // .store_dict(locked)
      // .store_grams(total_restricted_value)
      // .store_dict(restricted).end_cell();

      var cell = new Cell$f();
      cell.bits.writeUint(0, 32); // seqno
      cell.bits.writeUint(this.options.walletId, 32);
      cell.bits.writeBytes(this.options.publicKey);

      // TODO: write config.config_public_key (need to sort out encoding - the params come in base64),
      // TODO: write the dict of allowed destinations (address is a key to an empty value).
      cell.bits.writeBytes(base64ToBytes(this.options.config.config_public_key));
      if (this.options.config.allowed_destinations) {
        cell.bits.writeUint(1, 1);
        cell.refs.push(Cell$f.oneFromBoc(base64ToBytes(this.options.config.allowed_destinations)));
      } else {
        cell.bits.writeUint(0, 1);
      }
      cell.bits.writeGrams(0); // .store_grams(total_locked_value)
      cell.bits.writeUint(0, 1); // empty locked dict
      cell.bits.writeGrams(0); // .store_grams(total_restricted_value)
      cell.bits.writeUint(0, 1); // empty locked dict
      return cell;
    }

    /**
     * @return {Promise<number>}
     */
  }, {
    key: "getWalletId",
    value: (function () {
      var _getWalletId = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var myAddress, id;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context.sent;
              _context.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_subwallet_id');
            case 5:
              id = _context.sent;
              return _context.abrupt("return", id.toNumber());
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getWalletId() {
        return _getWalletId.apply(this, arguments);
      }
      return getWalletId;
    }()
    /**
     * @return {Promise<BN>}
     */
    )
  }, {
    key: "getPublicKey",
    value: (function () {
      var _getPublicKey = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var myAddress;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context2.sent;
              return _context2.abrupt("return", this.provider.call2(myAddress.toString(), 'get_public_key'));
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getPublicKey() {
        return _getPublicKey.apply(this, arguments);
      }
      return getPublicKey;
    }()
    /**
     * @return {Promise<BN>} Amount of nanotoncoins that can be spent immediately.
     */
    )
  }, {
    key: "getLiquidBalance",
    value: (function () {
      var _getLiquidBalance = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var balances;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.getBalances();
            case 2:
              balances = _context3.sent;
              return _context3.abrupt("return", balances[0] - balances[1] - balances[2]);
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getLiquidBalance() {
        return _getLiquidBalance.apply(this, arguments);
      }
      return getLiquidBalance;
    }()
    /**
     * @return {Promise<BN>} Amount of nanotoncoins that can be spent after the timelock OR to the whitelisted addresses.
     */
    )
  }, {
    key: "getNominalRestrictedBalance",
    value: (function () {
      var _getNominalRestrictedBalance = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.getBalances()[1];
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getNominalRestrictedBalance() {
        return _getNominalRestrictedBalance.apply(this, arguments);
      }
      return getNominalRestrictedBalance;
    }()
    /**
     * @return {Promise<BN>} Amount of nanotoncoins that can be spent after the timelock only (whitelisted addresses not used).
     */
    )
  }, {
    key: "getNominalLockedBalance",
    value: (function () {
      var _getNominalLockedBalance = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.getBalances()[2];
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getNominalLockedBalance() {
        return _getNominalLockedBalance.apply(this, arguments);
      }
      return getNominalLockedBalance;
    }()
    /**
     * @return {Promise<[BN,BN,BN]>} Total amount of nanotoncoins on the contract,
     * nominal restricted value
     * nominal locked value
     */
    )
  }, {
    key: "getBalances",
    value: (function () {
      var _getBalances = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        var myAddress;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context6.sent;
              return _context6.abrupt("return", this.provider.call2(myAddress.toString(), 'get_balances'));
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getBalances() {
        return _getBalances.apply(this, arguments);
      }
      return getBalances;
    }())
  }]);
}(WalletContract$1);
LockupWalletV1$1.WALLET_ID_BASE = WALLET_ID_BASE$1;
var LockupWalletV1_1 = {
  LockupWalletV1: LockupWalletV1$1
};

var Address$3 = utils$1.Address;
var Cell$e = boc$1.Cell;
var SNAKE_DATA_PREFIX = 0x00;
var CHUNK_DATA_PREFIX = 0x01;
var ONCHAIN_CONTENT_PREFIX = 0x00;
var OFFCHAIN_CONTENT_PREFIX = 0x01;

/**
 * @param uri   {string}
 * @returns {Uint8Array}
 */
var serializeUri$1 = function serializeUri(uri) {
  return new TextEncoder().encode(encodeURI(uri));
};

/**
 * @param bytes {Uint8Array}
 * @return {string}
 */
var parseUri = function parseUri(bytes) {
  return new TextDecoder().decode(bytes);
};

/**
 * @param uri {string}
 * @return {Cell}
 */
var createOffchainUriCell$2 = function createOffchainUriCell(uri) {
  var cell = new Cell$e();
  cell.bits.writeUint(OFFCHAIN_CONTENT_PREFIX, 8);
  cell.bits.writeBytes(serializeUri$1(uri));
  return cell;
};

/**
 * @param cell {Cell}
 * @returns {string}
 */
var parseOffchainUriCell$4 = function parseOffchainUriCell(cell) {
  if (cell.bits.array[0] !== OFFCHAIN_CONTENT_PREFIX) {
    throw new Error('no OFFCHAIN_CONTENT_PREFIX');
  }
  var length = 0;
  var c = cell;
  while (c) {
    length += c.bits.array.length;
    c = c.refs[0];
  }
  var bytes = new Uint8Array(length);
  length = 0;
  c = cell;
  while (c) {
    bytes.set(c.bits.array, length);
    length += c.bits.array.length;
    c = c.refs[0];
  }
  return parseUri(bytes.slice(1)); // slice OFFCHAIN_CONTENT_PREFIX
};

/**
 * @param bs    {BitString}
 * @param cursor    {number}
 * @param bits  {number}
 * @return {BigInt}
 */
var readIntFromBitString = function readIntFromBitString(bs, cursor, bits) {
  var n = BigInt(0);
  for (var i = 0; i < bits; i++) {
    n *= BigInt(2);
    n += BigInt(bs.get(cursor + i));
  }
  return n;
};

/**
 * @param cell  {Cell}
 * @return {Address|null}
 */
var parseAddress$a = function parseAddress(cell) {
  var n = readIntFromBitString(cell.bits, 3, 8);
  if (n > BigInt(127)) {
    n = n - BigInt(256);
  }
  var hashPart = readIntFromBitString(cell.bits, 3 + 8, 256);
  if (n.toString(10) + ":" + hashPart.toString(16) === '0:0') return null;
  var s = n.toString(10) + ":" + hashPart.toString(16).padStart(64, '0');
  return new Address$3(s);
};

/**
 * @param provider {HttpProvider}
 * @param address {string}
 * @return {Promise<{royalty: number, royaltyFactor: number, royaltyBase: number, royaltyAddress: Address}>}
 */
var getRoyaltyParams = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(provider, address) {
    var result, royaltyFactor, royaltyBase, royalty, royaltyAddress;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return provider.call2(address, 'royalty_params');
        case 2:
          result = _context.sent;
          royaltyFactor = result[0].toNumber();
          royaltyBase = result[1].toNumber();
          royalty = royaltyFactor / royaltyBase;
          royaltyAddress = parseAddress$a(result[2]);
          return _context.abrupt("return", {
            royalty: royalty,
            royaltyBase: royaltyBase,
            royaltyFactor: royaltyFactor,
            royaltyAddress: royaltyAddress
          });
        case 8:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getRoyaltyParams(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var NftUtils = {
  SNAKE_DATA_PREFIX: SNAKE_DATA_PREFIX,
  CHUNK_DATA_PREFIX: CHUNK_DATA_PREFIX,
  ONCHAIN_CONTENT_PREFIX: ONCHAIN_CONTENT_PREFIX,
  OFFCHAIN_CONTENT_PREFIX: OFFCHAIN_CONTENT_PREFIX,
  parseAddress: parseAddress$a,
  serializeUri: serializeUri$1,
  parseUri: parseUri,
  createOffchainUriCell: createOffchainUriCell$2,
  parseOffchainUriCell: parseOffchainUriCell$4,
  getRoyaltyParams: getRoyaltyParams
};

var Cell$d = boc$1.Cell;
var Address$2 = utils$1.Address,
  BN$8 = utils$1.BN,
  bytesToHex$2 = utils$1.bytesToHex;
var WalletContract = WalletContract_1.WalletContract;
var parseAddress$9 = NftUtils.parseAddress;
var Contract$c = contract.Contract;
var WALLET_ID_BASE = 0x10C; // ATTENTION: need to be different with standard wallet id
var CODE_HEX$1 = 'b5ee9c7241021c010003fb000114ff00f4a413f4bcf2c80b01020120030203b8f28308d71820d31fd31fd31f02f823bbf264ed44d0d31fd31fd3ff305abaf2a15033baf2a202f9014033f910f2a3f800db3c20d74ac0018e99ed44ed45ed47915bed67ed65ed648e82db3ced41edf101f2ff9130e2f841a4f861db3c1b1413020148110402012008050201200706020db9846db3cdb3c81b1a0129ba462db3cf845f846f847f848f849f84af84bf84481b0201200e090201620d0a02016a0c0b012fa2c76cf3e9100723281f2fff2743e112040423d029be84c61b000fa25fb513435c2c7e014bad346d9e36fc22470d4080847a4937d29910ce6903e9ff9837812801b7810148987159f318401b02016e100f0019af1df6a26840106b90eb858fc00019adce76a26840206b90eb85ffc003acd06c2220d749c160915be001d0d3030171b0915be0fa4030db3c01d31fd33ff84b5240c705238210a7733acdbab08ea46c12db3c8210f7733acd01708018c8cb055004cf1623fa0213cb6acb1fcb3fc98040fb00e30e1b141201cef84a5240c7050382107258a69bba13b08ed18e2c01fa407fc8ca0002fa4401c8ca07cbffc9d0f8441023810108f441f86420d74ac200209501d430d001deb312e68210f258a69b32708018c8cb055004cf1623fa0213cb6acb1fcb3fc98040fb00db3c925f03e2130066f848f847f846f845c8cb3fcb1fcb1fcb1ff849fa02f84acf16f84bcf16c9f844f843f842f841c8cb1fcb1fcbfff400ccc9ed54025cd307d4d1f823db3c20c2008e9b22c003f2e06421d0d303fa4031fa40f84a5220c705b3925f04e30d9130e201fb001a1503fa21fa4401c8ca07cbffc9d0f844810108f40a6fa1318f5f330172b0c002f2e06501fa003171d721fa0031fa0031d33f31d31f31d30001c000f2e066d3000193d430d0de2171db3c8e2a31d31f302082104e73744bba21821047657424bab121821056744370bab1018210566f7465bab1f2e067e30e70925f03e220c200191716000e9372fb029130e202ea0170db3c8e6d20d749c2008e63d31f21c00022830bbab122811001bab122821047d54391bab1228210595f07bcbab122821069fb306cbab1228210566f7465bab122821056744370bab1f2e06701c00021d749c200b08e15d3073020c06421c077b121c044b101c057b1f2e0689130e29130e2e30d1918001ad31f308210566f7465baf2e067004401fa4401c3ff925b70e001f833206e925b70e0d020d7498307b9925b70e0d70bffba0060f845f846a05210bc923070e0f845f848a05210b99330f849e0f849f849f84513a1f847a904f846f847a9041023a984a1007eed44d0d31f01f861d31f01f862d3ff01f863f40401f864d401d0d33f01f865d31f01f866d31f01f867d31f01f868fa0001f869fa4001f86afa4001f86bd1d10a20c6a7';
var VestingWalletV1$1 = /*#__PURE__*/function (_WalletContract) {
  /**
   * @param provider    {HttpProvider}
   * @param options {{walletId?: number, publicKey?: Uint8Array, vestingStartTime?: number, vestingTotalDuration?:number, unlockPeriod?:number, cliffDuration?: number, vestingTotalAmount?: BN, vestingSenderAddress?: Address, ownerAddress?:Address, address?: Address | string, wc?: number}}
   */
  function VestingWalletV1(provider, options) {
    var _this;
    _classCallCheck(this, VestingWalletV1);
    options.code = Cell$d.oneFromBoc(CODE_HEX$1);
    _this = _callSuper(this, VestingWalletV1, [provider, options]);
    if (!_this.options.walletId) _this.options.walletId = WALLET_ID_BASE + _this.options.wc;
    _this.methods.getPublicKey = _this.getPublicKey.bind(_this);
    _this.methods.getWalletId = _this.getWalletId.bind(_this);
    _this.methods.getLockedAmount = _this.getLockedAmount.bind(_this);
    _this.methods.getVestingData = _this.getVestingData.bind(_this);
    _this.methods.getWhitelist = _this.getWhitelist.bind(_this);
    return _this;
  }
  _inherits(VestingWalletV1, _WalletContract);
  return _createClass(VestingWalletV1, [{
    key: "getName",
    value: function getName() {
      return 'vesting-1';
    }

    /**
     * @override
     * @private
     * @param   seqno?   {number}
     * @param   expireAt? {number}
     * @param   withoutOp? {boolean}
     * @return {Cell}
     */
  }, {
    key: "createSigningMessage",
    value: function createSigningMessage(seqno, expireAt, withoutOp) {
      seqno = seqno || 0;
      expireAt = expireAt || Math.floor(Date.now() / 1e3) + 60;
      var message = new Cell$d();
      message.bits.writeUint(this.options.walletId, 32);
      if (seqno === 0) {
        // message.bits.writeInt(-1, 32);// todo: dont work
        for (var i = 0; i < 32; i++) {
          message.bits.writeBit(1);
        }
      } else {
        message.bits.writeUint(expireAt, 32);
      }
      message.bits.writeUint(seqno, 32);
      return message;
    }

    /**
     * @override
     * @return {Cell} cell contains wallet data
     */
  }, {
    key: "createDataCell",
    value: function createDataCell() {
      if (this.options.walletId !== 0 && !this.options.walletId) throw new Error('no walletId');
      if (!this.options.publicKey) throw new Error('no publicKey');
      if (!(this.options.publicKey instanceof Uint8Array)) throw new Error('publicKey not Uint8Array');
      if (this.options.vestingStartTime !== 0 && !this.options.vestingStartTime) throw new Error('no vestingStartTime');
      if (this.options.vestingTotalDuration <= 0) throw new Error('vestingTotalDuration cant be zero or negative');
      if (!this.options.vestingTotalDuration) throw new Error('no vestingTotalDuration');
      if (this.options.vestingTotalDuration > Math.pow(2, 32) - 1) throw new Error('vestingTotalDuration > 2^32 - 1');
      if (this.options.unlockPeriod <= 0) throw new Error('unlockPeriod cant be zero or negative');
      if (!this.options.unlockPeriod) throw new Error('no unlockPeriod');
      if (this.options.unlockPeriod > this.options.vestingTotalDuration) throw new Error('unlockPeriod > vestingTotalDuration');
      if (this.options.cliffDuration !== 0 && !this.options.cliffDuration) throw new Error('no cliffDuration');
      if (this.options.cliffDuration < 0) throw new Error('cliffDuration cant be negative');
      if (this.options.cliffDuration >= this.options.vestingTotalDuration) throw new Error('cliffDuration >= vestingTotalDuration');
      var durationMod = new BN$8(this.options.vestingTotalDuration).div(new BN$8(this.options.unlockPeriod)).mul(new BN$8(this.options.unlockPeriod));
      if (!durationMod.eq(new BN$8(this.options.vestingTotalDuration))) throw new Error('vestingTotalDuration mod unlockPeriod != 0');
      var cliffMod = new BN$8(this.options.cliffDuration).div(new BN$8(this.options.unlockPeriod)).mul(new BN$8(this.options.unlockPeriod));
      if (!cliffMod.eq(new BN$8(this.options.cliffDuration))) throw new Error('cliffDuration mod unlockPeriod != 0');
      if (!this.options.vestingTotalAmount) throw new Error('no vestingTotalAmount');
      if (!this.options.vestingTotalAmount.gt(new BN$8(0))) throw new Error('vestingTotalAmount cant be zero');
      if (!this.options.vestingSenderAddress) throw new Error('no vestingSenderAddress');
      if (!(this.options.vestingSenderAddress instanceof Address$2)) throw new Error('vestingSenderAddress not Address');
      if (!this.options.ownerAddress) throw new Error('no ownerAddress');
      if (!(this.options.ownerAddress instanceof Address$2)) throw new Error('ownerAddress not Address');
      var cell = new Cell$d();
      cell.bits.writeUint(0, 32); // seqno
      cell.bits.writeUint(this.options.walletId, 32); // subwallet_id
      cell.bits.writeUint(new BN$8(bytesToHex$2(this.options.publicKey), 16), 256); // public_key
      cell.bits.writeBit(false); // empty whitelist

      var vestingCell = new Cell$d();
      vestingCell.bits.writeUint(this.options.vestingStartTime, 64);
      vestingCell.bits.writeUint(this.options.vestingTotalDuration, 32);
      vestingCell.bits.writeUint(this.options.unlockPeriod, 32);
      vestingCell.bits.writeUint(this.options.cliffDuration, 32);
      vestingCell.bits.writeCoins(this.options.vestingTotalAmount);
      vestingCell.bits.writeAddress(new Address$2(this.options.vestingSenderAddress));
      vestingCell.bits.writeAddress(new Address$2(this.options.ownerAddress));
      cell.refs[0] = vestingCell;
      return cell;
    }

    /**
     * @param params {{ addresses: Address[], queryId?: number }}
     * @return {Cell}
     */
  }, {
    key: "createAddWhitelistBody",
    value: function createAddWhitelistBody(params) {
      var addresses = params.addresses,
        queryId = params.queryId;
      var root = new Cell$d();
      root.bits.writeUint(0x7258a69b, 32); // op
      root.bits.writeUint(queryId || 0, 64); // query_id;
      root.bits.writeAddress(addresses[0]);
      var cell = null;
      for (var i = addresses.length - 1; i >= 1; i--) {
        var newCell = new Cell$d();
        newCell.bits.writeAddress(addresses[i]);
        if (cell) {
          newCell.refs[0] = cell;
        }
        cell = newCell;
      }
      if (cell) {
        root.refs[0] = cell;
      }
      return root;
    }

    /**
     * @param params {{address: Address | string, amount: BN, payload: string | Uint8Array | Cell, sendMode?: number, queryId?: number}}
     * @return {Cell}
     */
  }, {
    key: "createInternalTransfer",
    value: function createInternalTransfer(params) {
      var message = new Cell$d();
      message.bits.writeUint(0xa7733acd, 32);
      message.bits.writeUint(params.queryId || 0, 64); // query_id;
      message.bits.writeUint8(params.sendMode || 3); // send_mode
      message.refs.push(Contract$c.createOutMsg(params.address, params.amount, params.payload));
      return message;
    }

    /**
     * @return {Promise<BN>}
     */
  }, {
    key: "getPublicKey",
    value: (function () {
      var _getPublicKey = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var myAddress;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context.sent;
              return _context.abrupt("return", this.provider.call2(myAddress.toString(), 'get_public_key'));
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getPublicKey() {
        return _getPublicKey.apply(this, arguments);
      }
      return getPublicKey;
    }()
    /**
     * @return {Promise<number>}
     */
    )
  }, {
    key: "getWalletId",
    value: (function () {
      var _getWalletId = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var myAddress;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context2.sent;
              return _context2.abrupt("return", this.provider.call2(myAddress.toString(), 'get_subwallet_id'));
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getWalletId() {
        return _getWalletId.apply(this, arguments);
      }
      return getWalletId;
    }()
    /**
     * @param time  {number} unixtime
     * @return {Promise<BN>}
     */
    )
  }, {
    key: "getLockedAmount",
    value: (function () {
      var _getLockedAmount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(time) {
        var myAddress;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context3.sent;
              return _context3.abrupt("return", this.provider.call2(myAddress.toString(), 'get_locked_amount', [['num', time]]));
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getLockedAmount(_x) {
        return _getLockedAmount.apply(this, arguments);
      }
      return getLockedAmount;
    }()
    /**
     * @return {Promise<{vestingStartTime: number, vestingTotalDuration: number, unlockPeriod: number, cliffDuration: number, vestingTotalAmount: BN, vestingSenderAddress: Address, ownerAddress: Address, whitelistCell: Cell}>}
     */
    )
  }, {
    key: "getVestingData",
    value: (function () {
      var _getVestingData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var myAddress, result, vestingStartTime, vestingTotalDuration, unlockPeriod, cliffDuration, vestingTotalAmount, vestingSenderAddress, ownerAddress, whitelistCell;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context4.sent;
              _context4.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_vesting_data');
            case 5:
              result = _context4.sent;
              vestingStartTime = result[0].toNumber();
              vestingTotalDuration = result[1].toNumber();
              unlockPeriod = result[2].toNumber();
              cliffDuration = result[3].toNumber();
              vestingTotalAmount = result[4];
              vestingSenderAddress = parseAddress$9(result[5]);
              ownerAddress = parseAddress$9(result[6]);
              whitelistCell = result[7];
              return _context4.abrupt("return", {
                vestingStartTime: vestingStartTime,
                vestingTotalDuration: vestingTotalDuration,
                unlockPeriod: unlockPeriod,
                cliffDuration: cliffDuration,
                vestingTotalAmount: vestingTotalAmount,
                vestingSenderAddress: vestingSenderAddress,
                ownerAddress: ownerAddress,
                whitelistCell: whitelistCell
              });
            case 15:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getVestingData() {
        return _getVestingData.apply(this, arguments);
      }
      return getVestingData;
    }()
    /**
     * @return {Promise<Address[]>}
     */
    )
  }, {
    key: "getWhitelist",
    value: (function () {
      var _getWhitelist = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        var myAddress, list, addresses, _iterator, _step, tuple, wc, hash, address;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context5.sent;
              _context5.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_whitelist');
            case 5:
              list = _context5.sent;
              addresses = [];
              _iterator = _createForOfIteratorHelper(list);
              _context5.prev = 8;
              _iterator.s();
            case 10:
              if ((_step = _iterator.n()).done) {
                _context5.next = 20;
                break;
              }
              tuple = _step.value;
              if (!(tuple.length !== 2)) {
                _context5.next = 14;
                break;
              }
              throw new Error('invalid whitelist result');
            case 14:
              wc = tuple[0];
              hash = tuple[1];
              address = new Address$2(wc.toString(10) + ':' + hash.toString(16).padStart(64, '0'));
              addresses.push(address);
            case 18:
              _context5.next = 10;
              break;
            case 20:
              _context5.next = 25;
              break;
            case 22:
              _context5.prev = 22;
              _context5.t0 = _context5["catch"](8);
              _iterator.e(_context5.t0);
            case 25:
              _context5.prev = 25;
              _iterator.f();
              return _context5.finish(25);
            case 28:
              return _context5.abrupt("return", addresses);
            case 29:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this, [[8, 22, 25, 28]]);
      }));
      function getWhitelist() {
        return _getWhitelist.apply(this, arguments);
      }
      return getWhitelist;
    }())
  }]);
}(WalletContract);
VestingWalletV1$1.WALLET_ID_BASE = WALLET_ID_BASE;
VestingWalletV1$1.codeHex = CODE_HEX$1;
var VestingWalletV1_1 = {
  VestingWalletV1: VestingWalletV1$1
};

var LockupWalletV1 = LockupWalletV1_1.LockupWalletV1;
var VestingWalletV1 = VestingWalletV1_1.VestingWalletV1;
lockup["default"] = {
  LockupWalletV1: LockupWalletV1,
  VestingWalletV1: VestingWalletV1,
  all: {
    'lockup-0.1': LockupWalletV1,
    'vesting-1': VestingWalletV1
  },
  list: [LockupWalletV1, VestingWalletV1]
};

var highloadWallet = {};

var Cell$c = boc$1.Cell;
var Contract$b = contract.Contract;
utils$1.Address;
  utils$1.BN;
  var nacl$1 = utils$1.nacl;

// https://github.com/ton-blockchain/highload-wallet-contract-v3, tag 'v3.00'
var CODE_HEX = "b5ee9c7241021001000228000114ff00f4a413f4bcf2c80b01020120020d02014803040078d020d74bc00101c060b0915be101d0d3030171b0915be0fa4030f828c705b39130e0d31f018210ae42e5a4ba9d8040d721d74cf82a01ed55fb04e030020120050a02027306070011adce76a2686b85ffc00201200809001aabb6ed44d0810122d721d70b3f0018aa3bed44d08307d721d70b1f0201200b0c001bb9a6eed44d0810162d721d70b15800e5b8bf2eda2edfb21ab09028409b0ed44d0810120d721f404f404d33fd315d1058e1bf82325a15210b99f326df82305aa0015a112b992306dde923033e2923033e25230800df40f6fa19ed021d721d70a00955f037fdb31e09130e259800df40f6fa19cd001d721d70a00937fdb31e0915be270801f6f2d48308d718d121f900ed44d0d3ffd31ff404f404d33fd315d1f82321a15220b98e12336df82324aa00a112b9926d32de58f82301de541675f910f2a106d0d31fd4d307d30cd309d33fd315d15168baf2a2515abaf2a6f8232aa15250bcf2a304f823bbf2a35304800df40f6fa199d024d721d70a00f2649130e20e01fe5309800df40f6fa18e13d05004d718d20001f264c858cf16cf8301cf168e1030c824cf40cf8384095005a1a514cf40e2f800c94039800df41704c8cbff13cb1ff40012f40012cb3f12cb15c9ed54f80f21d0d30001f265d3020171b0925f03e0fa4001d70b01c000f2a5fa4031fa0031f401fa0031fa00318060d721d300010f0020f265d2000193d431d19130e272b1fb00b585bf03";
var HIGHLOAD_WALLET_SUBWALLET_ID = 0x10ad;
var checkTimeout = function checkTimeout(seconds) {
  if (!seconds) throw new Error('invalid timeout');
  if (seconds < 60 * 10) throw new Error('minimum timeout 10 minute');
  if (seconds > 60 * 60 * 24 * 30) throw new Error('maximum timeout 30 days');
};
var HighloadWalletContractV3$1 = /*#__PURE__*/function (_Contract) {
  /**
   * @param provider    {HttpProvider}
   * @param options
   * @param options.[publicKey] {Uint8Array}
   * @param options.[timeout] {number}
   * @param options.[walletId] {number}
   * @param options.[address] {Address | string}
   */
  function HighloadWalletContractV3(provider, options) {
    var _this;
    _classCallCheck(this, HighloadWalletContractV3);
    if (options.wc) throw new Error('only basechain (wc = 0) supported');
    options.wc = 0;
    if (!options.address) {
      if (!options.publicKey) throw new Error('no publicKey');
      if (!(options.publicKey instanceof Uint8Array)) throw new Error('publicKey not Uint8Array');
      checkTimeout(options.timeout);
    }
    options.code = Cell$c.oneFromBoc(CODE_HEX);
    _this = _callSuper(this, HighloadWalletContractV3, [provider, options]);
    if (!_this.options.walletId) _this.options.walletId = HIGHLOAD_WALLET_SUBWALLET_ID;
    _this.methods = {
      /**
       * @param   params {{secretKey: Uint8Array, queryId: HighloadQueryId, createdAt: number, toAddress: Address | string, amount: BN, payload?: string | Uint8Array | Cell, sendMode?: number, needDeploy?: boolean }}
       */
      transfer: function transfer(params) {
        return Contract$b.createMethod(provider, _this.createTransferMessage(params.secretKey, params.toAddress, params.amount, params.queryId, params.payload, params.sendMode, params.createdAt, params.needDeploy));
      }
    };
    _this.methods.getPublicKey = _this.getPublicKey.bind(_this);
    _this.methods.getWalletId = _this.getWalletId.bind(_this);
    _this.methods.getLastCleanTime = _this.getLastCleanTime.bind(_this);
    _this.methods.getTimeout = _this.getTimeout.bind(_this);
    _this.methods.isProcessed = _this.isProcessed.bind(_this);
    return _this;
  }
  _inherits(HighloadWalletContractV3, _Contract);
  return _createClass(HighloadWalletContractV3, [{
    key: "getName",
    value: function getName() {
      return 'highload-3';
    }

    /**
     * @override
     * @return {Cell} cell contains wallet data
     */
  }, {
    key: "createDataCell",
    value: function createDataCell() {
      if (this.options.walletId !== 0 && !this.options.walletId) throw new Error('no walletId');
      if (!this.options.publicKey) throw new Error('no publicKey');
      if (!(this.options.publicKey instanceof Uint8Array)) throw new Error('publicKey not Uint8Array');
      checkTimeout(this.options.timeout);
      var cell = new Cell$c();
      cell.bits.writeBytes(this.options.publicKey);
      cell.bits.writeUint(this.options.walletId, 32);
      cell.bits.writeUint(0, 1); // empty old_queries
      cell.bits.writeUint(0, 1); // empty queries
      cell.bits.writeUint(0, 64); // last_clean_time
      cell.bits.writeUint(this.options.timeout, 22);
      return cell;
    }

    /**
     * @private
     * @param queryId   {HighloadQueryId}
     * @param createdAt {number}
     * @param sendMode  {number}
     * @param messageToSend {Cell}
     * @return {Cell}
     */
  }, {
    key: "createSigningMessage",
    value: function createSigningMessage(queryId, createdAt, sendMode, messageToSend) {
      if (isNaN(sendMode) || sendMode === undefined || sendMode === null) throw new Error('invalid sendMode');
      if (isNaN(createdAt) || createdAt === undefined || createdAt === null) throw new Error('invalid createdAt');
      checkTimeout(this.options.timeout);
      var cell = new Cell$c();
      cell.bits.writeUint(this.options.walletId, 32);
      cell.refs.push(messageToSend);
      cell.bits.writeUint(sendMode, 8);
      cell.bits.writeUint(Number(queryId.getShift()), 13);
      cell.bits.writeUint(Number(queryId.getBitNumber()), 10);
      cell.bits.writeUint(createdAt, 64);
      cell.bits.writeUint(this.options.timeout, 22);
      return cell;
    }

    /**
     * @param secretKey {Uint8Array}  nacl.KeyPair.secretKey
     * @param address   {Address | string}
     * @param amount    {BN | number} in nanotons
     * @param queryId {HighloadQueryId}
     * @param [payload]   {string | Uint8Array | Cell}
     * @param [sendMode]  {number}
     * @param createAt {number}
     * @param [needDeploy] {boolean}
     * @return {Promise<{address: Address, signature: Uint8Array, message: Cell, cell: Cell, body: Cell, signingMessage: Cell}>}
     */
  }, {
    key: "createTransferMessage",
    value: (function () {
      var _createTransferMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(secretKey, address, amount, queryId) {
        var payload,
          sendMode,
          createAt,
          needDeploy,
          messageToSend,
          signingMessage,
          _args = arguments;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              payload = _args.length > 4 && _args[4] !== undefined ? _args[4] : "";
              sendMode = _args.length > 5 && _args[5] !== undefined ? _args[5] : 3;
              createAt = _args.length > 6 ? _args[6] : undefined;
              needDeploy = _args.length > 7 && _args[7] !== undefined ? _args[7] : false;
              if (!(queryId === null || queryId === undefined)) {
                _context.next = 6;
                break;
              }
              throw new Error('queryId must be number >= 0');
            case 6:
              if (!(createAt === null || createAt === undefined || createAt < 0)) {
                _context.next = 8;
                break;
              }
              throw new Error('createAt must be number >= 0');
            case 8:
              if (sendMode === null || sendMode === undefined) {
                sendMode = 3;
              }
              messageToSend = Contract$b.createOutMsg(address, amount, payload);
              signingMessage = this.createSigningMessage(queryId, createAt, sendMode, messageToSend);
              return _context.abrupt("return", this.createExternalMessage(signingMessage, secretKey, needDeploy));
            case 12:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function createTransferMessage(_x, _x2, _x3, _x4) {
        return _createTransferMessage.apply(this, arguments);
      }
      return createTransferMessage;
    }()
    /**
     * @protected
     * @param signingMessage {Cell}
     * @param secretKey {Uint8Array}  nacl.KeyPair.secretKey
     * @param needDeploy {boolean}
     * @return {Promise<{address: Address, signature: Uint8Array, message: Cell, cell: Cell, body: Cell, signingMessage: Cell}>}
     */
    )
  }, {
    key: "createExternalMessage",
    value: (function () {
      var _createExternalMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(signingMessage, secretKey, needDeploy) {
        var signature, body, stateInit, code, data, keyPair, deploy, selfAddress, header, resultMessage;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.t0 = nacl$1.sign;
              _context2.next = 3;
              return signingMessage.hash();
            case 3:
              _context2.t1 = _context2.sent;
              _context2.t2 = secretKey;
              signature = _context2.t0.detached.call(_context2.t0, _context2.t1, _context2.t2);
              body = new Cell$c();
              body.bits.writeBytes(signature);
              body.refs.push(signingMessage);
              stateInit = null, code = null, data = null;
              if (!needDeploy) {
                _context2.next = 18;
                break;
              }
              if (!this.options.publicKey) {
                keyPair = nacl$1.sign.keyPair.fromSecretKey(secretKey);
                this.options.publicKey = keyPair.publicKey;
              }
              _context2.next = 14;
              return this.createStateInit();
            case 14:
              deploy = _context2.sent;
              stateInit = deploy.stateInit;
              code = deploy.code;
              data = deploy.data;
            case 18:
              _context2.next = 20;
              return this.getAddress();
            case 20:
              selfAddress = _context2.sent;
              header = Contract$b.createExternalMessageHeader(selfAddress);
              resultMessage = Contract$b.createCommonMsgInfo(header, stateInit, body);
              return _context2.abrupt("return", {
                address: selfAddress,
                message: resultMessage,
                // old wallet_send_generate_external_message

                body: body,
                signature: signature,
                signingMessage: signingMessage,
                stateInit: stateInit,
                code: code,
                data: data
              });
            case 24:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function createExternalMessage(_x5, _x6, _x7) {
        return _createExternalMessage.apply(this, arguments);
      }
      return createExternalMessage;
    }()
    /**
     * @return {Promise<number>}
     */
    )
  }, {
    key: "getWalletId",
    value: (function () {
      var _getWalletId = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var myAddress, id;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context3.sent;
              _context3.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_subwallet_id');
            case 5:
              id = _context3.sent;
              return _context3.abrupt("return", id.toNumber());
            case 7:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getWalletId() {
        return _getWalletId.apply(this, arguments);
      }
      return getWalletId;
    }()
    /**
     * @return {Promise<BN>}
     */
    )
  }, {
    key: "getPublicKey",
    value: (function () {
      var _getPublicKey = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var myAddress;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context4.sent;
              return _context4.abrupt("return", this.provider.call2(myAddress.toString(), 'get_public_key'));
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getPublicKey() {
        return _getPublicKey.apply(this, arguments);
      }
      return getPublicKey;
    }()
    /**
     * @return {Promise<number>}
     */
    )
  }, {
    key: "getLastCleanTime",
    value: (function () {
      var _getLastCleanTime = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        var myAddress, id;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context5.sent;
              _context5.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_last_clean_time');
            case 5:
              id = _context5.sent;
              return _context5.abrupt("return", id.toNumber());
            case 7:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getLastCleanTime() {
        return _getLastCleanTime.apply(this, arguments);
      }
      return getLastCleanTime;
    }()
    /**
     * @return {Promise<number>}
     */
    )
  }, {
    key: "getTimeout",
    value: (function () {
      var _getTimeout = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        var myAddress, id;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context6.sent;
              _context6.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_timeout');
            case 5:
              id = _context6.sent;
              return _context6.abrupt("return", id.toNumber());
            case 7:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getTimeout() {
        return _getTimeout.apply(this, arguments);
      }
      return getTimeout;
    }()
    /**
     * @param queryId {HighloadQueryId}
     * @param needClean {boolean}
     * @return {Promise<boolean>}
     */
    )
  }, {
    key: "isProcessed",
    value: (function () {
      var _isProcessed = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(queryId, needClean) {
        var myAddress, result;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context7.sent;
              _context7.next = 5;
              return this.provider.call2(myAddress.toString(), 'processed?', [['num', queryId.getQueryId().toString()], ['num', needClean ? '-1' : '0']]);
            case 5:
              result = _context7.sent;
              return _context7.abrupt("return", !result.isZero());
            case 7:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function isProcessed(_x8, _x9) {
        return _isProcessed.apply(this, arguments);
      }
      return isProcessed;
    }())
  }]);
}(Contract$b);
HighloadWalletContractV3$1.WALLET_ID_BASE = HIGHLOAD_WALLET_SUBWALLET_ID;
HighloadWalletContractV3$1.codeHex = CODE_HEX;
var HighloadWalletContractV3_1 = {
  HighloadWalletContractV3: HighloadWalletContractV3$1
};

var BIT_NUMBER_SIZE = 10n; // 10 bit
var MAX_BIT_NUMBER = 1022n;
var MAX_SHIFT = 8191n; // 2^13 = 8192
var HighloadQueryId$1 = /*#__PURE__*/function () {
  function HighloadQueryId() {
    _classCallCheck(this, HighloadQueryId);
    /**
     * @private
     * @type {bigint} [0 .. 8191]
     */
    this.shift = 0n;
    /**
     * @private
     * @type {bigint} [0 .. 1022]
     */
    this.bitnumber = 0n;
  }

  /**
   * @param shift {bigint}
   * @param bitnumber {bigint}
   * @return {HighloadQueryId}
   */
  return _createClass(HighloadQueryId, [{
    key: "getNext",
    value: function getNext() {
      var newBitnumber = this.bitnumber + 1n;
      var newShift = this.shift;
      if (newShift === MAX_SHIFT && newBitnumber > MAX_BIT_NUMBER - 1n) {
        throw new Error('Overload'); // NOTE: we left one queryId for emergency withdraw
      }
      if (newBitnumber > MAX_BIT_NUMBER) {
        newBitnumber = 0n;
        newShift += 1n;
        if (newShift > MAX_SHIFT) {
          throw new Error('Overload');
        }
      }
      return HighloadQueryId.fromShiftAndBitNumber(newShift, newBitnumber);
    }
  }, {
    key: "hasNext",
    value: function hasNext() {
      var isEnd = this.bitnumber >= MAX_BIT_NUMBER - 1n && this.shift === MAX_SHIFT; // NOTE: we left one queryId for emergency withdraw;
      return !isEnd;
    }

    /**
     * @return {bigint}
     */
  }, {
    key: "getShift",
    value: function getShift() {
      return this.shift;
    }

    /**
     * @return {bigint}
     */
  }, {
    key: "getBitNumber",
    value: function getBitNumber() {
      return this.bitnumber;
    }

    /**
     * @return {bigint}
     */
  }, {
    key: "getQueryId",
    value: function getQueryId() {
      return (this.shift << BIT_NUMBER_SIZE) + this.bitnumber;
    }

    /**
     * @param queryId   {bigint}
     * @return {HighloadQueryId}
     */
  }, {
    key: "toSeqno",
    value:
    /**
     * @return {bigint} [0 .. 8380415]
     */
    function toSeqno() {
      return this.bitnumber + this.shift * 1023n;
    }
  }], [{
    key: "fromShiftAndBitNumber",
    value: function fromShiftAndBitNumber(shift, bitnumber) {
      var q = new HighloadQueryId();
      q.shift = shift;
      if (q.shift < 0) throw new Error('invalid shift');
      if (q.shift > MAX_SHIFT) throw new Error('invalid shift');
      q.bitnumber = bitnumber;
      if (q.bitnumber < 0) throw new Error('invalid bitnumber');
      if (q.bitnumber > MAX_BIT_NUMBER) throw new Error('invalid bitnumber');
      return q;
    }
  }, {
    key: "fromQueryId",
    value: function fromQueryId(queryId) {
      var shift = queryId >> BIT_NUMBER_SIZE;
      var bitnumber = queryId & 1023n;
      return this.fromShiftAndBitNumber(shift, bitnumber);
    }

    /**
     * @param i {bigint}
     * @return {HighloadQueryId}
     */
  }, {
    key: "fromSeqno",
    value: function fromSeqno(i) {
      var shift = i / 1023n;
      var bitnumber = i % 1023n;
      return this.fromShiftAndBitNumber(shift, bitnumber);
    }
  }]);
}();
var HighloadQueryId_1 = {
  HighloadQueryId: HighloadQueryId$1
};

var HighloadWalletContractV3 = HighloadWalletContractV3_1.HighloadWalletContractV3;
var HighloadQueryId = HighloadQueryId_1.HighloadQueryId;
highloadWallet["default"] = {
  HighloadQueryId: HighloadQueryId,
  HighloadWalletContractV3: HighloadWalletContractV3,
  all: {
    'highload-3': HighloadWalletContractV3
  },
  list: [HighloadWalletContractV3]
};

var nft = {};

var Contract$a = contract.Contract;
var Cell$b = boc$1.Cell;
utils$1.Address;
  var bytesToBase64$2 = utils$1.bytesToBase64,
  BN$7 = utils$1.BN;
var parseAddress$8 = NftUtils.parseAddress;
var createOffchainUriCell$1 = NftUtils.createOffchainUriCell,
  serializeUri = NftUtils.serializeUri,
  parseOffchainUriCell$3 = NftUtils.parseOffchainUriCell,
  _getRoyaltyParams$1 = NftUtils.getRoyaltyParams;
var NftCollection$1 = /*#__PURE__*/function (_Contract) {
  /**
   * @param provider
   * @param options   {{ownerAddress: Address, collectionContentUri: string, nftItemContentBaseUri: string, nftItemCodeHex: string, royalty: number, royaltyAddress: Address, address?: Address | string, code?: Cell}}
   */
  function NftCollection(provider, options) {
    var _this;
    _classCallCheck(this, NftCollection);
    options.wc = 0;
    // https://github.com/ton-blockchain/token-contract/blob/1ad314a98d20b41241d5329e1786fc894ad811de/nft/nft-collection-editable.fc
    options.code = options.code || Cell$b.oneFromBoc
    if (options.royalty > 1) throw new Error('royalty > 1');
    options.royaltyBase = 1000;
    options.royaltyFactor = Math.floor(options.royalty * options.royaltyBase);
    _this = _callSuper(this, NftCollection, [provider, options]);
    _this.methods.getCollectionData = _this.getCollectionData.bind(_this);
    _this.methods.getNftItemAddressByIndex = _this.getNftItemAddressByIndex.bind(_this);
    _this.methods.getNftItemContent = _this.getNftItemContent.bind(_this);
    _this.methods.getRoyaltyParams = _this.getRoyaltyParams.bind(_this);
    return _this;
  }

  /**
   * @private
   * @param params {{collectionContentUri: string, nftItemContentBaseUri: string}}
   * @return {Cell}
   */
  _inherits(NftCollection, _Contract);
  return _createClass(NftCollection, [{
    key: "createContentCell",
    value: function createContentCell(params) {
      var collectionContentCell = createOffchainUriCell$1(params.collectionContentUri);
      var commonContentCell = new Cell$b();
      commonContentCell.bits.writeBytes(serializeUri(params.nftItemContentBaseUri));
      var contentCell = new Cell$b();
      contentCell.refs[0] = collectionContentCell;
      contentCell.refs[1] = commonContentCell;
      return contentCell;
    }

    /**
     * @private
     * @param params    {{royaltyFactor: number, royaltyBase: number, royaltyAddress: Address}}
     * @return {Cell}
     */
  }, {
    key: "createRoyaltyCell",
    value: function createRoyaltyCell(params) {
      var royaltyCell = new Cell$b();
      royaltyCell.bits.writeUint(params.royaltyFactor, 16);
      royaltyCell.bits.writeUint(params.royaltyBase, 16);
      royaltyCell.bits.writeAddress(params.royaltyAddress);
      return royaltyCell;
    }

    /**
     * @override
     * @private
     * @return {Cell} cell contains nft collection data
     */
  }, {
    key: "createDataCell",
    value: function createDataCell() {
      var cell = new Cell$b();
      cell.bits.writeAddress(this.options.ownerAddress);
      cell.bits.writeUint(0, 64); // next_item_index
      cell.refs[0] = this.createContentCell(this.options);
      cell.refs[1] = Cell$b.oneFromBoc(this.options.nftItemCodeHex);
      cell.refs[2] = this.createRoyaltyCell(this.options);
      return cell;
    }

    /**
     * params   {{itemIndex: BN|number, amount: BN, itemOwnerAddress: Address, itemContentUri: string, queryId?: number}}
     * @return {Cell}
     */
  }, {
    key: "createMintBody",
    value: function createMintBody(params) {
      var body = new Cell$b();
      body.bits.writeUint(1, 32); // OP deploy new nft
      body.bits.writeUint(params.queryId || 0, 64); // query_id
      body.bits.writeUint(params.itemIndex, 64);
      body.bits.writeCoins(params.amount);
      var nftItemContent = new Cell$b();
      nftItemContent.bits.writeAddress(params.itemOwnerAddress);
      var uriContent = new Cell$b();
      uriContent.bits.writeBytes(serializeUri(params.itemContentUri));
      nftItemContent.refs[0] = uriContent;
      body.refs[0] = nftItemContent;
      return body;
    }

    /**
     * params   {{queryId?: number}}
     * @return {Cell}
     */
  }, {
    key: "createGetRoyaltyParamsBody",
    value: function createGetRoyaltyParamsBody(params) {
      var body = new Cell$b();
      body.bits.writeUint(0x693d3950, 32); // OP
      body.bits.writeUint(params.queryId || 0, 64); // query_id
      return body;
    }

    /**
     * params   {{queryId?: number, newOwnerAddress: Address}}
     * @return {Cell}
     */
  }, {
    key: "createChangeOwnerBody",
    value: function createChangeOwnerBody(params) {
      if (params.newOwnerAddress === undefined) throw new Error('Specify newOwnerAddress');
      var body = new Cell$b();
      body.bits.writeUint(3, 32); // OP
      body.bits.writeUint(params.queryId || 0, 64); // query_id
      body.bits.writeAddress(params.newOwnerAddress);
      return body;
    }

    /**
     * @param params    {{collectionContentUri: string, nftItemContentBaseUri: string, royalty: number, royaltyAddress: Address, queryId?: number}}
     * @return {Cell}
     */
  }, {
    key: "createEditContentBody",
    value: function createEditContentBody(params) {
      if (params.royalty > 1) throw new Error('royalty > 1');
      params.royaltyBase = 1000;
      params.royaltyFactor = Math.floor(params.royalty * params.royaltyBase);
      var body = new Cell$b();
      body.bits.writeUint(4, 32); // OP
      body.bits.writeUint(params.queryId || 0, 64); // query_id
      body.refs[0] = this.createContentCell(params);
      body.refs[1] = this.createRoyaltyCell(params);
      return body;
    }

    /**
     * @return {Promise<{nextItemIndex: number, itemsCount: BN, ownerAddress: Address, collectionContentCell: Cell, collectionContentUri: string|null}>}
     */
  }, {
    key: "getCollectionData",
    value: (function () {
      var _getCollectionData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var myAddress, result, itemsCount, nextItemIndex, collectionContentCell, collectionContentUri, ownerAddress;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context.sent;
              _context.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_collection_data');
            case 5:
              result = _context.sent;
              itemsCount = result[0];
              nextItemIndex = NaN;
              try {
                nextItemIndex = itemsCount.toNumber();
              } catch (e) {}
              collectionContentCell = result[1];
              collectionContentUri = null;
              try {
                collectionContentUri = parseOffchainUriCell$3(collectionContentCell);
              } catch (e) {}
              ownerAddress = parseAddress$8(result[2]);
              return _context.abrupt("return", {
                nextItemIndex: nextItemIndex,
                itemsCount: itemsCount,
                ownerAddress: ownerAddress,
                collectionContentCell: collectionContentCell,
                collectionContentUri: collectionContentUri
              });
            case 14:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getCollectionData() {
        return _getCollectionData.apply(this, arguments);
      }
      return getCollectionData;
    }()
    /**
     * @param nftItem   {NftItem}
     * @return {Promise<{isInitialized: boolean, index: number, itemIndex: BN, collectionAddress: Address, ownerAddress: Address|null, contentCell: Cell, contentUri: string|null}>}
     */
    )
  }, {
    key: "getNftItemContent",
    value: (function () {
      var _getNftItemContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(nftItem) {
        var myAddress, nftData, result;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context2.sent;
              _context2.next = 5;
              return nftItem.getData();
            case 5:
              nftData = _context2.sent;
              if (!nftData.isInitialized) {
                _context2.next = 22;
                break;
              }
              _context2.t0 = this.provider;
              _context2.t1 = myAddress.toString();
              _context2.t2 = ['num', nftData.itemIndex.toString(10)];
              _context2.t3 = bytesToBase64$2;
              _context2.next = 13;
              return nftData.contentCell.toBoc(false);
            case 13:
              _context2.t4 = _context2.sent;
              _context2.t5 = (0, _context2.t3)(_context2.t4);
              _context2.t6 = ['tvm.Cell', _context2.t5];
              _context2.t7 = [_context2.t2, _context2.t6];
              _context2.next = 19;
              return _context2.t0.call2.call(_context2.t0, _context2.t1, 'get_nft_content', _context2.t7);
            case 19:
              result = _context2.sent;
              nftData.contentUri = null;
              try {
                nftData.contentUri = parseOffchainUriCell$3(result);
              } catch (e) {}
            case 22:
              return _context2.abrupt("return", nftData);
            case 23:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getNftItemContent(_x) {
        return _getNftItemContent.apply(this, arguments);
      }
      return getNftItemContent;
    }()
    /**
     * @param index {BN|number}
     * @return {Promise<Address>}
     */
    )
  }, {
    key: "getNftItemAddressByIndex",
    value: (function () {
      var _getNftItemAddressByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(index) {
        var myAddress, result;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              index = new BN$7(index);
              _context3.next = 3;
              return this.getAddress();
            case 3:
              myAddress = _context3.sent;
              _context3.next = 6;
              return this.provider.call2(myAddress.toString(), 'get_nft_address_by_index', [['num', index.toString(10)]]);
            case 6:
              result = _context3.sent;
              return _context3.abrupt("return", parseAddress$8(result));
            case 8:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getNftItemAddressByIndex(_x2) {
        return _getNftItemAddressByIndex.apply(this, arguments);
      }
      return getNftItemAddressByIndex;
    }()
    /**
     * @return {Promise<{royalty: number, royaltyFactor: number, royaltyBase: number, royaltyAddress: Address}>}
     */
    )
  }, {
    key: "getRoyaltyParams",
    value: (function () {
      var _getRoyaltyParams2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var myAddress;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context4.sent;
              return _context4.abrupt("return", _getRoyaltyParams$1(this.provider, myAddress.toString()));
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getRoyaltyParams() {
        return _getRoyaltyParams2.apply(this, arguments);
      }
      return getRoyaltyParams;
    }())
  }]);
}(Contract$a);
var NftCollection_1 = {
  NftCollection: NftCollection$1
};

var Contract$9 = contract.Contract;
var Cell$a = boc$1.Cell;
utils$1.Address;
  var BN$6 = utils$1.BN;
var parseAddress$7 = NftUtils.parseAddress,
  _getRoyaltyParams = NftUtils.getRoyaltyParams;
var parseOffchainUriCell$2 = NftUtils.parseOffchainUriCell;

// https://github.com/ton-blockchain/token-contract/blob/1ad314a98d20b41241d5329e1786fc894ad811de/nft/nft-item.fc
var
var NftItem$1 = /*#__PURE__*/function (_Contract) {
  /**
   * @param provider
   * @param options   {{index: number|BN, collectionAddress: Address, address?: Address | string, code?: Cell}}
   */
  function NftItem(provider, options) {
    var _this;
    _classCallCheck(this, NftItem);
    options.wc = 0;
    options.code = options.code || Cell$a.oneFromBoc(NFT_ITEM_CODE_HEX);
    _this = _callSuper(this, NftItem, [provider, options]);
    _this.methods.getData = _this.getData.bind(_this);
    return _this;
  }

  /**
   * @override
   * @private
   * @return {Cell} cell contains nft data
   */
  _inherits(NftItem, _Contract);
  return _createClass(NftItem, [{
    key: "createDataCell",
    value: function createDataCell() {
      var cell = new Cell$a();
      cell.bits.writeUint(this.options.index, 64);
      cell.bits.writeAddress(this.options.collectionAddress);
      return cell;
    }

    /**
     * @return {Promise<{isInitialized: boolean, index: number, itemIndex: BN, collectionAddress: Address|null, ownerAddress: Address|null, contentCell: Cell, contentUri: string|null}>}
     */
  }, {
    key: "getData",
    value: (function () {
      var _getData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var myAddress, result, isInitialized, itemIndex, index, collectionAddress, ownerAddress, contentCell, contentUri;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context.sent;
              _context.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_nft_data');
            case 5:
              result = _context.sent;
              isInitialized = result[0].toNumber() === -1;
              itemIndex = result[1];
              index = NaN;
              try {
                index = itemIndex.toNumber();
              } catch (e) {}
              collectionAddress = parseAddress$7(result[2]);
              ownerAddress = isInitialized ? parseAddress$7(result[3]) : null;
              contentCell = result[4];
              contentUri = null;
              try {
                contentUri = isInitialized && collectionAddress === null ? parseOffchainUriCell$2(contentCell) : null; // single NFT without collection
              } catch (e) {}
              return _context.abrupt("return", {
                isInitialized: isInitialized,
                index: index,
                itemIndex: itemIndex,
                collectionAddress: collectionAddress,
                ownerAddress: ownerAddress,
                contentCell: contentCell,
                contentUri: contentUri
              });
            case 16:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getData() {
        return _getData.apply(this, arguments);
      }
      return getData;
    }()
    /**
     * @param params    {{queryId?: number, newOwnerAddress: Address, forwardAmount?: BN, forwardPayload?: Uint8Array | Cell, responseAddress: Address}}
     */
    )
  }, {
    key: "createTransferBody",
    value: (function () {
      var _createTransferBody = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {
        var cell;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              cell = new Cell$a();
              cell.bits.writeUint(0x5fcc3d14, 32); // transfer op
              cell.bits.writeUint(params.queryId || 0, 64);
              cell.bits.writeAddress(params.newOwnerAddress);
              cell.bits.writeAddress(params.responseAddress);
              cell.bits.writeBit(false); // null custom_payload
              cell.bits.writeCoins(params.forwardAmount || new BN$6(0));
              if (params.forwardPayload) {
                if (params.forwardPayload.refs) {
                  // is Cell
                  cell.bits.writeBit(true); // true Either - write forward_payload in separate cell
                  cell.refs.push(params.forwardPayload);
                } else {
                  // Uint8Array
                  cell.bits.writeBit(false); // false Either - write forward_payload in current slice
                  cell.bits.writeBytes(params.forwardPayload);
                  // todo: support write snake bytes
                }
              } else {
                cell.bits.writeBit(false); // false Either for empty payload
              }
              return _context2.abrupt("return", cell);
            case 9:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function createTransferBody(_x) {
        return _createTransferBody.apply(this, arguments);
      }
      return createTransferBody;
    }()
    /**
     * params   {{queryId?: number}}
     * @return {Cell}
     */
    )
  }, {
    key: "createGetStaticDataBody",
    value: function createGetStaticDataBody(params) {
      var body = new Cell$a();
      body.bits.writeUint(0x2fcb26a2, 32); // OP
      body.bits.writeUint(params.queryId || 0, 64); // query_id
      return body;
    }

    /**
     * for single nft without collection
     * @return {Promise<{royalty: number, royaltyFactor: number, royaltyBase: number, royaltyAddress: Address}>}
     */
  }, {
    key: "getRoyaltyParams",
    value: (function () {
      var _getRoyaltyParams2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var myAddress;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context3.sent;
              return _context3.abrupt("return", _getRoyaltyParams(this.provider, myAddress.toString()));
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getRoyaltyParams() {
        return _getRoyaltyParams2.apply(this, arguments);
      }
      return getRoyaltyParams;
    }())
  }]);
}(Contract$9);
NftItem$1.codeHex = NFT_ITEM_CODE_HEX;
var NftItem_1 = {
  NftItem: NftItem$1
};

var Contract$8 = contract.Contract;
var Cell$9 = boc$1.Cell;
utils$1.Address;
NftUtils.parseAddress;

/**
 * Not release - will change
 */
var NftMarketplace$1 = /*#__PURE__*/function (_Contract) {
  /**
   * @param provider
   * @param options   {{ownerAddress: Address, address?: Address | string, cell?: Cell}}
   */
  function NftMarketplace(provider, options) {
    _classCallCheck(this, NftMarketplace);
    options.wc = 0;
    options.code = options.code || Cell$9.oneFromBoc('B5EE9C7241010401006D000114FF00F4A413F4BCF2C80B01020120020300AAD23221C700915BE0D0D3030171B0915BE0FA40ED44D0FA403012C705F2E19101D31F01C0018E2BFA003001D4D43021F90070C8CA07CBFFC9D077748018C8CB05CB0258CF165004FA0213CB6BCCCCC971FB00915BE20004F2308EF7CCE7');
    return _callSuper(this, NftMarketplace, [provider, options]);
  }

  /**
   * @override
   * @private
   * @return {Cell} cell contains nft marketplace data
   */
  _inherits(NftMarketplace, _Contract);
  return _createClass(NftMarketplace, [{
    key: "createDataCell",
    value: function createDataCell() {
      var cell = new Cell$9();
      cell.bits.writeAddress(this.options.ownerAddress);
      return cell;
    }
  }]);
}(Contract$8);
var NftMarketplace_1 = {
  NftMarketplace: NftMarketplace$1
};

var Contract$7 = contract.Contract;
var Cell$8 = boc$1.Cell;
var parseAddress$6 = NftUtils.parseAddress;
utils$1.BN;
var

/**
 * Not release - will change
 */
var NftSale$1 = /*#__PURE__*/function (_Contract) {
  /**
   * @param provider
   * @param options   {{marketplaceAddress: Address, nftAddress: Address, fullPrice: BN, marketplaceFee: BN, royaltyAddress: Address, royaltyAmount: BN, address?: Address | string, code?: Cell}}
   */
  function NftSale(provider, options) {
    var _this;
    _classCallCheck(this, NftSale);
    options.wc = 0;
    options.code = options.code || Cell$8.oneFromBoc(NFT_SALE_HEX_CODE);
    _this = _callSuper(this, NftSale, [provider, options]);
    _this.methods.getData = _this.getData.bind(_this);
    return _this;
  }

  /**
   * @override
   * @private
   * @return {Cell} cell contains nft sale data
   */
  _inherits(NftSale, _Contract);
  return _createClass(NftSale, [{
    key: "createDataCell",
    value: function createDataCell() {
      var cell = new Cell$8();
      cell.bits.writeAddress(this.options.marketplaceAddress);
      cell.bits.writeAddress(this.options.nftAddress);
      cell.bits.writeAddress(null); // nft_owner_address
      cell.bits.writeCoins(this.options.fullPrice);
      var feesCell = new Cell$8();
      feesCell.bits.writeCoins(this.options.marketplaceFee);
      feesCell.bits.writeAddress(this.options.royaltyAddress);
      feesCell.bits.writeCoins(this.options.royaltyAmount);
      cell.refs[0] = feesCell;
      return cell;
    }
  }, {
    key: "getData",
    value: function () {
      var _getData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var myAddress, result, marketplaceAddress, nftAddress, nftOwnerAddress, fullPrice, marketplaceFee, royaltyAddress, royaltyAmount;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context.sent;
              _context.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_sale_data');
            case 5:
              result = _context.sent;
              marketplaceAddress = parseAddress$6(result[0]);
              nftAddress = parseAddress$6(result[1]);
              nftOwnerAddress = parseAddress$6(result[2]);
              fullPrice = result[3];
              marketplaceFee = result[4];
              royaltyAddress = parseAddress$6(result[5]);
              royaltyAmount = result[6];
              return _context.abrupt("return", {
                marketplaceAddress: marketplaceAddress,
                nftAddress: nftAddress,
                nftOwnerAddress: nftOwnerAddress,
                fullPrice: fullPrice,
                marketplaceFee: marketplaceFee,
                royaltyAddress: royaltyAddress,
                royaltyAmount: royaltyAmount
              });
            case 14:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getData() {
        return _getData.apply(this, arguments);
      }
      return getData;
    }()
    /**
     * @param params    {{queryId?: number}}
     */
  }, {
    key: "createCancelBody",
    value: (function () {
      var _createCancelBody = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {
        var cell;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              cell = new Cell$8();
              cell.bits.writeUint(3, 32); // cancel op
              cell.bits.writeUint(params.queryId || 0, 64);
              return _context2.abrupt("return", cell);
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function createCancelBody(_x) {
        return _createCancelBody.apply(this, arguments);
      }
      return createCancelBody;
    }())
  }]);
}(Contract$7);
NftSale$1.codeHex = NFT_SALE_HEX_CODE;
var NftSale_1 = {
  NftSale: NftSale$1
};

var NftCollection = NftCollection_1.NftCollection;
var NftItem = NftItem_1.NftItem;
var NftMarketplace = NftMarketplace_1.NftMarketplace;
var NftSale = NftSale_1.NftSale;
nft["default"] = {
  NftCollection: NftCollection,
  NftItem: NftItem,
  NftMarketplace: NftMarketplace,
  NftSale: NftSale
};

var ft = {};

var Contract$6 = contract.Contract;
var Cell$7 = boc$1.Cell;
var createOffchainUriCell = NftUtils.createOffchainUriCell,
  parseOffchainUriCell$1 = NftUtils.parseOffchainUriCell,
  parseAddress$5 = NftUtils.parseAddress;
utils$1.Address;
  var BN$5 = utils$1.BN,
  bytesToBase64$1 = utils$1.bytesToBase64;
var JettonMinter$1 = /*#__PURE__*/function (_Contract) {
  /**
   * @param provider
   * @param options   {{adminAddress: Address, jettonContentUri: string, jettonWalletCodeHex: string, address?: Address | string, code?: Cell}}
   */
  function JettonMinter(provider, options) {
    _classCallCheck(this, JettonMinter);
    options.wc = 0;
    options.code = options.code || Cell$7.oneFromBoc('B5EE9C7241020B010001ED000114FF00F4A413F4BCF2C80B0102016202030202CC040502037A60090A03EFD9910E38048ADF068698180B8D848ADF07D201800E98FE99FF6A2687D007D206A6A18400AA9385D47181A9AA8AAE382F9702480FD207D006A18106840306B90FD001812881A28217804502A906428027D012C678B666664F6AA7041083DEECBEF29385D71811A92E001F1811802600271812F82C207F97840607080093DFC142201B82A1009AA0A01E428027D012C678B00E78B666491646580897A007A00658064907C80383A6465816503E5FFE4E83BC00C646582AC678B28027D0109E5B589666664B8FD80400FE3603FA00FA40F82854120870542013541403C85004FA0258CF1601CF16CCC922C8CB0112F400F400CB00C9F9007074C8CB02CA07CBFFC9D05008C705F2E04A12A1035024C85004FA0258CF16CCCCC9ED5401FA403020D70B01C3008E1F8210D53276DB708010C8CB055003CF1622FA0212CB6ACB1FCB3FC98042FB00915BE200303515C705F2E049FA403059C85004FA0258CF16CCCCC9ED54002E5143C705F2E049D43001C85004FA0258CF16CCCCC9ED54007DADBCF6A2687D007D206A6A183618FC1400B82A1009AA0A01E428027D012C678B00E78B666491646580897A007A00658064FC80383A6465816503E5FFE4E840001FAF16F6A2687D007D206A6A183FAA904051007F09');
    return _callSuper(this, JettonMinter, [provider, options]);
  }

  /**
   * @override
   * @private
   * @return {Cell} cell contains jetton minter data
   */
  _inherits(JettonMinter, _Contract);
  return _createClass(JettonMinter, [{
    key: "createDataCell",
    value: function createDataCell() {
      var cell = new Cell$7();
      cell.bits.writeCoins(0); // total supply
      cell.bits.writeAddress(this.options.adminAddress);
      cell.refs[0] = createOffchainUriCell(this.options.jettonContentUri);
      cell.refs[1] = Cell$7.oneFromBoc(this.options.jettonWalletCodeHex);
      return cell;
    }

    /**
     * params   {{jettonAmount: BN, destination: Address, amount: BN, queryId?: number}}
     * @return {Cell}
     */
  }, {
    key: "createMintBody",
    value: function createMintBody(params) {
      var body = new Cell$7();
      body.bits.writeUint(21, 32); // OP mint
      body.bits.writeUint(params.queryId || 0, 64); // query_id
      body.bits.writeAddress(params.destination);
      body.bits.writeCoins(params.amount); // in Toncoins

      var transferBody = new Cell$7(); // internal transfer
      transferBody.bits.writeUint(0x178d4519, 32); // internal_transfer op
      transferBody.bits.writeUint(params.queryId || 0, 64);
      transferBody.bits.writeCoins(params.jettonAmount);
      transferBody.bits.writeAddress(null); // from_address
      transferBody.bits.writeAddress(null); // response_address
      transferBody.bits.writeCoins(new BN$5(0)); // forward_amount
      transferBody.bits.writeBit(false); // forward_payload in this slice, not separate cell

      body.refs[0] = transferBody;
      return body;
    }

    /**
     * params   {{queryId?: number, newAdminAddress: Address}}
     * @return {Cell}
     */
  }, {
    key: "createChangeAdminBody",
    value: function createChangeAdminBody(params) {
      if (params.newAdminAddress === undefined) throw new Error('Specify newAdminAddress');
      var body = new Cell$7();
      body.bits.writeUint(3, 32); // OP
      body.bits.writeUint(params.queryId || 0, 64); // query_id
      body.bits.writeAddress(params.newAdminAddress);
      return body;
    }

    /**
     * params   {{jettonContentUri: string, queryId?: number}}
     * @return {Cell}
     */
  }, {
    key: "createEditContentBody",
    value: function createEditContentBody(params) {
      var body = new Cell$7();
      body.bits.writeUint(4, 32); // OP
      body.bits.writeUint(params.queryId || 0, 64); // query_id
      body.refs[0] = createOffchainUriCell(params.jettonContentUri);
      return body;
    }

    /**
     * @return {Promise<{ totalSupply: BN, isMutable: boolean, adminAddress: Address|null, jettonContentCell: Cell, jettonContentUri: string|null, jettonWalletCode: Cell }>}
     */
  }, {
    key: "getJettonData",
    value: (function () {
      var _getJettonData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var myAddress, result, totalSupply, isMutable, adminAddress, jettonContentCell, jettonContentUri, jettonWalletCode;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context.sent;
              _context.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_jetton_data');
            case 5:
              result = _context.sent;
              totalSupply = result[0];
              isMutable = result[1].toNumber() === -1;
              adminAddress = parseAddress$5(result[2]);
              jettonContentCell = result[3];
              jettonContentUri = null;
              try {
                jettonContentUri = parseOffchainUriCell$1(jettonContentCell);
              } catch (e) {}
              jettonWalletCode = result[4];
              return _context.abrupt("return", {
                totalSupply: totalSupply,
                isMutable: isMutable,
                adminAddress: adminAddress,
                jettonContentCell: jettonContentCell,
                jettonContentUri: jettonContentUri,
                jettonWalletCode: jettonWalletCode
              });
            case 14:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getJettonData() {
        return _getJettonData.apply(this, arguments);
      }
      return getJettonData;
    }()
    /**
     * params   {{ownerAddress: Address}}
     * @return {Promise<Address>}
     */
    )
  }, {
    key: "getJettonWalletAddress",
    value: (function () {
      var _getJettonWalletAddress = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(ownerAddress) {
        var myAddress, cell, result;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context2.sent;
              cell = new Cell$7();
              cell.bits.writeAddress(ownerAddress);
              _context2.t0 = this.provider;
              _context2.t1 = myAddress.toString();
              _context2.t2 = bytesToBase64$1;
              _context2.next = 10;
              return cell.toBoc(false);
            case 10:
              _context2.t3 = _context2.sent;
              _context2.t4 = (0, _context2.t2)(_context2.t3);
              _context2.t5 = ['tvm.Slice', _context2.t4];
              _context2.t6 = [_context2.t5];
              _context2.next = 16;
              return _context2.t0.call2.call(_context2.t0, _context2.t1, 'get_wallet_address', _context2.t6);
            case 16:
              result = _context2.sent;
              return _context2.abrupt("return", parseAddress$5(result));
            case 18:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getJettonWalletAddress(_x) {
        return _getJettonWalletAddress.apply(this, arguments);
      }
      return getJettonWalletAddress;
    }())
  }]);
}(Contract$6);
var JettonMinter_1 = {
  JettonMinter: JettonMinter$1
};

var Contract$5 = contract.Contract;
var Cell$6 = boc$1.Cell;
var parseAddress$4 = NftUtils.parseAddress;
var BN$4 = utils$1.BN;
var
var JettonWallet$1 = /*#__PURE__*/function (_Contract) {
  /**
   * @param provider
   * @param options   {{address?: Address | string, code?: Cell}}
   */
  function JettonWallet(provider, options) {
    _classCallCheck(this, JettonWallet);
    options.wc = 0;
    options.code = options.code || Cell$6.oneFromBoc(JETTON_WALLET_CODE_HEX);
    return _callSuper(this, JettonWallet, [provider, options]);
  }

  /**
   * @param params    {{queryId?: number, jettonAmount: BN, toAddress: Address, responseAddress: Address, forwardAmount?: BN, forwardPayload?: Uint8Array | Cell}}
   */
  _inherits(JettonWallet, _Contract);
  return _createClass(JettonWallet, [{
    key: "createTransferBody",
    value: (function () {
      var _createTransferBody = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {
        var cell;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              cell = new Cell$6();
              cell.bits.writeUint(0xf8a7ea5, 32); // request_transfer op
              cell.bits.writeUint(params.queryId || 0, 64);
              cell.bits.writeCoins(params.jettonAmount);
              cell.bits.writeAddress(params.toAddress);
              cell.bits.writeAddress(params.responseAddress);
              cell.bits.writeBit(false); // null custom_payload
              cell.bits.writeCoins(params.forwardAmount || new BN$4(0));
              if (params.forwardPayload) {
                if (params.forwardPayload.refs) {
                  // is Cell
                  cell.bits.writeBit(true); // true Either - write forward_payload in separate cell
                  cell.refs.push(params.forwardPayload);
                } else {
                  // Uint8Array
                  cell.bits.writeBit(false); // false Either - write forward_payload in current slice
                  cell.bits.writeBytes(params.forwardPayload);
                  // todo: support write snake bytes
                }
              } else {
                cell.bits.writeBit(false); // false Either for empty payload
              }
              return _context.abrupt("return", cell);
            case 10:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function createTransferBody(_x) {
        return _createTransferBody.apply(this, arguments);
      }
      return createTransferBody;
    }()
    /**
     * @param params    {{queryId?: number, jettonAmount: BN, responseAddress: Address}}
     */
    )
  }, {
    key: "createBurnBody",
    value: (function () {
      var _createBurnBody = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {
        var cell;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              cell = new Cell$6();
              cell.bits.writeUint(0x595f07bc, 32); // burn op
              cell.bits.writeUint(params.queryId || 0, 64);
              cell.bits.writeCoins(params.jettonAmount);
              cell.bits.writeAddress(params.responseAddress);
              return _context2.abrupt("return", cell);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function createBurnBody(_x2) {
        return _createBurnBody.apply(this, arguments);
      }
      return createBurnBody;
    }())
  }, {
    key: "getData",
    value: function () {
      var _getData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var myAddress, result, balance, ownerAddress, jettonMinterAddress, jettonWalletCode;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context3.sent;
              _context3.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_wallet_data');
            case 5:
              result = _context3.sent;
              balance = result[0];
              ownerAddress = parseAddress$4(result[1]);
              jettonMinterAddress = parseAddress$4(result[2]);
              jettonWalletCode = result[3];
              return _context3.abrupt("return", {
                balance: balance,
                ownerAddress: ownerAddress,
                jettonMinterAddress: jettonMinterAddress,
                jettonWalletCode: jettonWalletCode
              });
            case 11:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getData() {
        return _getData.apply(this, arguments);
      }
      return getData;
    }()
  }]);
}(Contract$5);
JettonWallet$1.codeHex = JETTON_WALLET_CODE_HEX;
var JettonWallet_1 = {
  JettonWallet: JettonWallet$1
};

var JettonMinter = JettonMinter_1.JettonMinter;
var JettonWallet = JettonWallet_1.JettonWallet;
ft["default"] = {
  JettonMinter: JettonMinter,
  JettonWallet: JettonWallet
};

// NOTE: "mc" means masterchain, "shards" means shardchains

var MC_INTERVAL = 10 * 1000;
var SHARDS_INTERVAL = 1 * 1000;
var parseShardBlockNumber = function parseShardBlockNumber(x) {
  return {
    workchain: x.workchain,
    shardId: x.shard,
    shardBlockNumber: x.seqno
  };
};
var BlockSubscription$2 = /*#__PURE__*/function () {
  /**
   * @param provider  {TonWeb.HttpProvider}
   * @param storage   persistent storage for storing block numbers that we have already processed.
   * @param onBlock {(blockHeader: BlockHeader) => Promise<void>} callback which is called for of each block.
   *                                                       callback may throw an error, in this case the block processing will be interrupted and block will not be saved in the storage as processed.
   *                                                       shardchain blocks are processed OUT of chronological order.
   *                                                       masterchain blocks are processed in chronological order.
   *                                                       for masterchain workchain === -1 and shardId === '-9223372036854775808'
   * @param options? {startMcBlockNumber:? number, mcInterval?: number, shardsInterval?: number} start masterchain block number from which we start to process blocks.
   *                                     if not specified, the subscription starts from the last block of the network at the time of launch.
   */
  function BlockSubscription(provider, storage, onBlock, options) {
    _classCallCheck(this, BlockSubscription);
    this.provider = provider;
    this.storage = storage;
    this.onBlock = onBlock;
    this.startMcBlockNumber = options ? options.startMcBlockNumber : undefined;
    this.mcInterval = (options ? options.mcInterval : undefined) || MC_INTERVAL;
    this.shardsInterval = (options ? options.shardsInterval : undefined) || SHARDS_INTERVAL;
  }
  return _createClass(BlockSubscription, [{
    key: "start",
    value: function () {
      var _start = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var _this = this;
        var startMcBlockHeader, isMcProcessing, mcTick, isShardsProcessing, shardsTick;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              this.stop();
              if (this.startMcBlockNumber) {
                _context3.next = 7;
                break;
              }
              _context3.next = 4;
              return this.provider.getMasterchainInfo();
            case 4:
              this.startMcBlockNumber = _context3.sent.last.seqno;
              if (this.startMcBlockNumber) {
                _context3.next = 7;
                break;
              }
              throw new Error('Cannot get start mc block number from provider');
            case 7:
              _context3.next = 9;
              return this.provider.getMasterchainBlockHeader(this.startMcBlockNumber);
            case 9:
              startMcBlockHeader = _context3.sent;
              this.startLT = startMcBlockHeader.end_lt;
              if (this.startLT) {
                _context3.next = 13;
                break;
              }
              throw new Error('Cannot get startLT from provider');
            case 13:
              // MASTERCHAIN
              isMcProcessing = false;
              mcTick = /*#__PURE__*/function () {
                var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                  var lastSavedMcBlock, lastMcBlock, i, blockShards, blockHeader;
                  return _regeneratorRuntime().wrap(function _callee$(_context) {
                    while (1) switch (_context.prev = _context.next) {
                      case 0:
                        if (!isMcProcessing) {
                          _context.next = 2;
                          break;
                        }
                        return _context.abrupt("return");
                      case 2:
                        isMcProcessing = true;
                        _context.prev = 3;
                        _context.next = 6;
                        return _this.storage.getLastMasterchainBlockNumber();
                      case 6:
                        _context.t0 = _context.sent;
                        if (_context.t0) {
                          _context.next = 9;
                          break;
                        }
                        _context.t0 = _this.startMcBlockNumber;
                      case 9:
                        lastSavedMcBlock = _context.t0;
                        if (lastSavedMcBlock) {
                          _context.next = 12;
                          break;
                        }
                        throw new Error('no init masterchain block in storage');
                      case 12:
                        _context.next = 14;
                        return _this.provider.getMasterchainInfo();
                      case 14:
                        lastMcBlock = _context.sent.last.seqno;
                        if (lastMcBlock) {
                          _context.next = 17;
                          break;
                        }
                        throw new Error('invalid last masterchain block from provider');
                      case 17:
                        i = lastSavedMcBlock + 1;
                      case 18:
                        if (!(i < lastMcBlock)) {
                          _context.next = 32;
                          break;
                        }
                        _context.next = 21;
                        return _this.provider.getBlockShards(i);
                      case 21:
                        blockShards = _context.sent;
                        _context.next = 24;
                        return _this.provider.getMasterchainBlockHeader(i);
                      case 24:
                        blockHeader = _context.sent;
                        _context.next = 27;
                        return _this.onBlock(blockHeader, blockShards);
                      case 27:
                        _context.next = 29;
                        return _this.storage.insertBlocks(i, blockShards.shards.map(parseShardBlockNumber));
                      case 29:
                        i++;
                        _context.next = 18;
                        break;
                      case 32:
                        _context.next = 37;
                        break;
                      case 34:
                        _context.prev = 34;
                        _context.t1 = _context["catch"](3);
                        console.error(_context.t1);
                      case 37:
                        isMcProcessing = false;
                      case 38:
                      case "end":
                        return _context.stop();
                    }
                  }, _callee, null, [[3, 34]]);
                }));
                return function mcTick() {
                  return _ref.apply(this, arguments);
                };
              }();
              this.mcIntervalId = setInterval(function () {
                return mcTick();
              }, this.mcInterval);
              mcTick();

              // SHARDCHAINS
              isShardsProcessing = false;
              shardsTick = /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                  var shardBlock, workchain, shardId, shardBlockNumber, blockHeader, prevBlocks;
                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                    while (1) switch (_context2.prev = _context2.next) {
                      case 0:
                        if (!isShardsProcessing) {
                          _context2.next = 2;
                          break;
                        }
                        return _context2.abrupt("return");
                      case 2:
                        isShardsProcessing = true;
                        _context2.prev = 3;
                        _context2.next = 6;
                        return _this.storage.getUnprocessedShardBlock();
                      case 6:
                        shardBlock = _context2.sent;
                        if (!shardBlock) {
                          _context2.next = 22;
                          break;
                        }
                        workchain = shardBlock.workchain, shardId = shardBlock.shardId, shardBlockNumber = shardBlock.shardBlockNumber;
                        _context2.next = 11;
                        return _this.provider.getBlockHeader(workchain, shardId, shardBlockNumber);
                      case 11:
                        blockHeader = _context2.sent;
                        if (!(blockHeader.end_lt < _this.startLT)) {
                          _context2.next = 17;
                          break;
                        }
                        _context2.next = 15;
                        return _this.storage.setBlockProcessed(workchain, shardId, shardBlockNumber, []);
                      case 15:
                        _context2.next = 22;
                        break;
                      case 17:
                        _context2.next = 19;
                        return _this.onBlock(blockHeader);
                      case 19:
                        prevBlocks = blockHeader.prev_blocks.map(parseShardBlockNumber);
                        _context2.next = 22;
                        return _this.storage.setBlockProcessed(workchain, shardId, shardBlockNumber, prevBlocks);
                      case 22:
                        _context2.next = 27;
                        break;
                      case 24:
                        _context2.prev = 24;
                        _context2.t0 = _context2["catch"](3);
                        console.log(_context2.t0);
                      case 27:
                        isShardsProcessing = false;
                      case 28:
                      case "end":
                        return _context2.stop();
                    }
                  }, _callee2, null, [[3, 24]]);
                }));
                return function shardsTick() {
                  return _ref2.apply(this, arguments);
                };
              }();
              this.shardsIntervalId = setInterval(function () {
                return shardsTick();
              }, this.shardsInterval);
            case 20:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function start() {
        return _start.apply(this, arguments);
      }
      return start;
    }()
  }, {
    key: "stop",
    value: function stop() {
      clearInterval(this.mcIntervalId);
      clearInterval(this.shardsIntervalId);
    }
  }]);
}();
var BlockSubscription_1 = {
  BlockSubscription: BlockSubscription$2
};

var InMemoryBlockStorage$2 = /*#__PURE__*/function () {
  /**
   * @param logFunction?   {(text: string) => void}
   */
  function InMemoryBlockStorage(logFunction) {
    _classCallCheck(this, InMemoryBlockStorage);
    this.masterchainBlocks = {}; // mcBlockNumber {number} -> isProcessed {boolean}
    this.shardchainBlocks = {}; // workchain {number} + shardId {string} + shardBlockNumber {number} -> isProcessed {boolean}
    this.logFunction = logFunction;
  }

  /**
   * @private
   * Insert new UNprocessed shardchain block numbers
   * Block number (workchain + shardId + shardBlockNumber) should be IGNORED if it is already in the storage
   * @param   shardBlockNumbers {[{workchain: number, shardId: string, shardBlockNumber: number}]}
   */
  return _createClass(InMemoryBlockStorage, [{
    key: "insertShardBlocks",
    value: (function () {
      var _insertShardBlocks = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(shardBlockNumbers) {
        var _iterator, _step, _step$value, workchain, shardId, shardBlockNumber;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _iterator = _createForOfIteratorHelper(shardBlockNumbers);
              _context.prev = 1;
              _iterator.s();
            case 3:
              if ((_step = _iterator.n()).done) {
                _context.next = 11;
                break;
              }
              _step$value = _step.value, workchain = _step$value.workchain, shardId = _step$value.shardId, shardBlockNumber = _step$value.shardBlockNumber;
              if (!(this.shardchainBlocks[workchain + '_' + shardId + '_' + shardBlockNumber] !== undefined)) {
                _context.next = 7;
                break;
              }
              return _context.abrupt("continue", 9);
            case 7:
              if (this.logFunction) {
                this.logFunction('insert shard ' + workchain + ' ' + shardId + ' ' + shardBlockNumber);
              }
              // INSERT INTO shardchainBlocks VALUES (workchain, shardId, shardBlockNumber, FALSE);
              this.shardchainBlocks[workchain + '_' + shardId + '_' + shardBlockNumber] = false;
            case 9:
              _context.next = 3;
              break;
            case 11:
              _context.next = 16;
              break;
            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](1);
              _iterator.e(_context.t0);
            case 16:
              _context.prev = 16;
              _iterator.f();
              return _context.finish(16);
            case 19:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[1, 13, 16, 19]]);
      }));
      function insertShardBlocks(_x) {
        return _insertShardBlocks.apply(this, arguments);
      }
      return insertShardBlocks;
    }()
    /**
     * Insert new processed masterchain block number & new UNprocessed shardchains blocks numbers
     * Must be in single DB transaction
     * @param   mcBlockNumber {number}
     * @param   shardBlockNumbers {[{workchain: number, shardId: string, shardBlockNumber: number}]}
     */
    )
  }, {
    key: "insertBlocks",
    value: (function () {
      var _insertBlocks = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(mcBlockNumber, shardBlockNumbers) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (this.logFunction) {
                this.logFunction('mc processed ' + mcBlockNumber);
              }
              // INSERT INTO masterchainBlocks VALUES (blockNumber, TRUE);
              if (!(this.masterchainBlocks[mcBlockNumber] !== undefined)) {
                _context2.next = 3;
                break;
              }
              throw new Error('mc already exists ' + mcBlockNumber);
            case 3:
              this.masterchainBlocks[mcBlockNumber] = true;
              _context2.next = 6;
              return this.insertShardBlocks(shardBlockNumbers);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function insertBlocks(_x2, _x3) {
        return _insertBlocks.apply(this, arguments);
      }
      return insertBlocks;
    }()
    /**
     * Get last processed masterchain block number
     * @return {Promise<number | undefined>}
     */
    )
  }, {
    key: "getLastMasterchainBlockNumber",
    value: (function () {
      var _getLastMasterchainBlockNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var blockNumbers;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              // SELECT MAX(blockNumber) FROM masterchainBlocks
              blockNumbers = Object.keys(this.masterchainBlocks).map(function (x) {
                return Number(x);
              }).sort(function (a, b) {
                return b - a;
              });
              return _context3.abrupt("return", blockNumbers[0]);
            case 2:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getLastMasterchainBlockNumber() {
        return _getLastMasterchainBlockNumber.apply(this, arguments);
      }
      return getLastMasterchainBlockNumber;
    }()
    /**
     * Set that this shardchain block number processed & insert new UNprocessed shardchains blocks numbers
     * Must be in single DB transaction
     * @param   workchain {number}
     * @param   shardId {string}
     * @param   shardBlockNumber    {number}
     * @param   prevShardBlocks    {[{workchain: number, shardId: string, shardBlockNumber: number}]}
     */
    )
  }, {
    key: "setBlockProcessed",
    value: (function () {
      var _setBlockProcessed = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(workchain, shardId, shardBlockNumber, prevShardBlocks) {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (this.logFunction) {
                this.logFunction('shard processed ' + workchain + ' ' + shardId + ' ' + shardBlockNumber);
              }
              // UPDATE shardchainBlocks SET processed = TRUE WHERE workchain = ? AND shardId = ? AND shardBlockNumber = ?
              if (!(this.shardchainBlocks[workchain + '_' + shardId + '_' + shardBlockNumber] === undefined)) {
                _context4.next = 3;
                break;
              }
              throw new Error('shard not exists ' + workchain + '_' + shardId + '_' + shardBlockNumber);
            case 3:
              this.shardchainBlocks[workchain + '_' + shardId + '_' + shardBlockNumber] = true;
              _context4.next = 6;
              return this.insertShardBlocks(prevShardBlocks);
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function setBlockProcessed(_x4, _x5, _x6, _x7) {
        return _setBlockProcessed.apply(this, arguments);
      }
      return setBlockProcessed;
    }()
    /**
     * Get any unprocesed shard block number (order is not important)
     * @return {Promise<{workchain: number, shardId: string, shardBlockNumber: number}>}
     */
    )
  }, {
    key: "getUnprocessedShardBlock",
    value: (function () {
      var _getUnprocessedShardBlock = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        var key, arr;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.t0 = _regeneratorRuntime().keys(this.shardchainBlocks);
            case 1:
              if ((_context5.t1 = _context5.t0()).done) {
                _context5.next = 8;
                break;
              }
              key = _context5.t1.value;
              if (!(this.shardchainBlocks[key] === false)) {
                _context5.next = 6;
                break;
              }
              arr = key.split('_');
              return _context5.abrupt("return", {
                workchain: Number(arr[0]),
                shardId: arr[1],
                shardBlockNumber: Number(arr[2])
              });
            case 6:
              _context5.next = 1;
              break;
            case 8:
              return _context5.abrupt("return", undefined);
            case 9:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getUnprocessedShardBlock() {
        return _getUnprocessedShardBlock.apply(this, arguments);
      }
      return getUnprocessedShardBlock;
    }())
  }]);
}();
var InMemoryBlockStorage_1 = {
  InMemoryBlockStorage: InMemoryBlockStorage$2
};

var BlockSubscription$1 = BlockSubscription_1.BlockSubscription;
var InMemoryBlockStorage$1 = InMemoryBlockStorage_1.InMemoryBlockStorage;
var blockSubscription = {
  BlockSubscription: BlockSubscription$1,
  InMemoryBlockStorage: InMemoryBlockStorage$1
};

var Contract$4 = contract.Contract;
var Cell$5 = boc$1.Cell;
utils$1.hexToBytes;
  var BN$3 = utils$1.BN;
  utils$1.nacl;
  utils$1.bytesToBase64;
var SubscriptionContract$1 = /*#__PURE__*/function (_Contract) {
  /**
   * @param provider
   * @param options   {{wc: number, wallet: Address, beneficiary: Address, amount: BN, period: number, timeout: number, startAt: number, subscriptionId: number, address?: Address | string}}
   */
  function SubscriptionContract(provider, options) {
    var _this;
    _classCallCheck(this, SubscriptionContract);
    options.code = Cell$5.oneFromBoc
    _this = _callSuper(this, SubscriptionContract, [provider, options]);
    _this.methods.pay = function () {
      return Contract$4.createMethod(provider, _this.createPayExternalMessage());
    };
    _this.methods.getSubscriptionData = _this.getSubscriptionData.bind(_this);
    return _this;
  }

  /**
   * @override
   * @private
   * @return {Cell} cell contains wallet data
   */
  _inherits(SubscriptionContract, _Contract);
  return _createClass(SubscriptionContract, [{
    key: "createDataCell",
    value: function createDataCell() {
      var cell = new Cell$5();
      cell.bits.writeAddress(this.options.wallet);
      cell.bits.writeAddress(this.options.beneficiary);
      cell.bits.writeGrams(this.options.amount);
      cell.bits.writeUint(this.options.period, 32);
      cell.bits.writeUint(this.options.startAt, 32); // start_time
      cell.bits.writeUint(this.options.timeout, 32);
      cell.bits.writeUint(0, 32); // last_payment_time
      cell.bits.writeUint(0, 32); // last_request_time
      cell.bits.writeUint(0, 8); // failed_attempts
      cell.bits.writeUint(this.options.subscriptionId, 32); // subscription_id
      return cell;
    }

    /**
     * Payment body (from wallet to subscription)
     * @return {Cell}
     */
  }, {
    key: "createBody",
    value: function createBody() {
      var body = new Cell$5();
      body.bits.writeUint(new BN$3(0x706c7567).add(new BN$3(0x80000000)), 32); // op
      return body;
    }

    /**
     * Destroy plugin body (from wallet to subscription OR from beneficiary to subscription)
     * @return {Cell}
     */
  }, {
    key: "createSelfDestructBody",
    value: function createSelfDestructBody() {
      var body = new Cell$5();
      body.bits.writeUint(0x64737472, 32); // op
      return body;
    }
  }, {
    key: "getSubscriptionData",
    value: function () {
      var _getSubscriptionData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var parseAddress, myAddress, result, wallet, beneficiary, amount, period, startAt, timeout, lastPayment, lastRequest, failedAttempts, subscriptionId;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              parseAddress = function parseAddress(tuple) {
                return tuple[0].toNumber() + ':' + tuple[1].toString(16);
              };
              _context.next = 3;
              return this.getAddress();
            case 3:
              myAddress = _context.sent;
              _context.next = 6;
              return this.provider.call2(myAddress.toString(), 'get_subscription_data');
            case 6:
              result = _context.sent;
              wallet = parseAddress(result[0]);
              beneficiary = parseAddress(result[1]);
              amount = result[2];
              period = result[3].toNumber();
              startAt = result[4].toNumber(); // start_time
              timeout = result[5].toNumber();
              lastPayment = result[6].toNumber(); // last_payment_time
              lastRequest = result[7].toNumber(); // last_request_time
              failedAttempts = result[8].toNumber();
              subscriptionId = result[9].toNumber();
              return _context.abrupt("return", {
                wallet: wallet,
                beneficiary: beneficiary,
                amount: amount,
                period: period,
                startAt: startAt,
                timeout: timeout,
                lastPayment: lastPayment,
                lastRequest: lastRequest,
                failedAttempts: failedAttempts,
                subscriptionId: subscriptionId
              });
            case 18:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getSubscriptionData() {
        return _getSubscriptionData.apply(this, arguments);
      }
      return getSubscriptionData;
    }()
    /**
     * @protected
     * @return {Promise<{address: Address, signature: Uint8Array, message: Cell, cell: Cell, body: Cell, resultMessage: Cell}>}
     */
  }, {
    key: "createPayExternalMessage",
    value: (function () {
      var _createPayExternalMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var selfAddress, header, resultMessage, body;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.getAddress();
            case 2:
              selfAddress = _context2.sent;
              header = Contract$4.createExternalMessageHeader(selfAddress);
              resultMessage = Contract$4.createCommonMsgInfo(header, null, null);
              body = new Cell$5();
              body.bits.writeUint(Math.floor(Date.now() / 1000), 64); // this is not required by the contract; just to make it easier to distinguish messages
              return _context2.abrupt("return", {
                address: selfAddress,
                message: resultMessage,
                body: body
              });
            case 8:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function createPayExternalMessage() {
        return _createPayExternalMessage.apply(this, arguments);
      }
      return createPayExternalMessage;
    }())
  }]);
}(Contract$4);
var subscription = {
  SubscriptionContract: SubscriptionContract$1
};

var Cell$4 = boc$1.Cell;

/**
 * @param cell  {Cell}
 * @param publicKey {Uint8Array}
 */
var writePublicKey$1 = function writePublicKey(cell, publicKey) {
  if (publicKey.length !== 256 / 8) {
    throw new Error('invalid publicKey length');
  }
  cell.bits.writeBytes(publicKey);
};

/**
 * @param cell  {Cell}
 * @param signature {Uint8Array}
 */
var writeSignature = function writeSignature(cell, signature) {
  if (signature.length !== 512 / 8) {
    throw new Error('invalid signature length');
  }
  cell.bits.writeBytes(signature);
};

/**
 * @param signature {Uint8Array}
 * @returns {Cell}
 */
var createSignatureCell = function createSignatureCell(signature) {
  var cell = new Cell$4();
  writeSignature(cell, signature);
  return cell;
};

/**
 * @param cell  {Cell}
 * @param ref   {Cell}
 */
var writeMayBe = function writeMayBe(cell, ref) {
  if (ref) {
    cell.bits.writeBit(1);
    if (cell.refs.length >= 4) {
      throw new Error('refs overflow');
    }
    cell.refs.push(ref);
  } else {
    cell.bits.writeBit(0);
  }
};

/**
 * @param cell  {Cell}
 * @param ref   {Cell}
 */
var writeDict = writeMayBe;
var tag_init = 0x696e6974;
var tag_cooperative_close = 0x436c6f73;
var tag_cooperative_commit = 0x43436d74;
var tag_start_uncooperative_close = 0x556e436c;
var tag_challenge_state = 0x43686751;
var tag_settle_conditionals = 0x436c436e;
var tag_state = 0x43685374;
var op_top_up_balance = 1741148801; // crc32("top_up_balance add_A:Coins add_B:Coins = InternalMsgBody");
var op_init_channel$1 = 235282626; // crc32("init_channel is_A:Bool signature:bits512 tag:# = tag 1768843636 channel_id:uint128 balance_A:Coins balance_B:Coins = InternalMsgBody");
var op_cooperative_close$1 = 1433884798; // crc32("cooperative_close sig_A:^bits512 sig_B:^bits512 tag:# = tag 1131179891 channel_id:uint128 balance_A:Coins balance_B:Coins seqno_A:uint64 seqno_B:uint64 = InternalMsgBody");
var op_cooperative_commit$1 = 2040604399; // crc32("cooperative_commit sig_A:^bits512 sig_B:^bits512 tag:# = tag 1128492404 channel_id:uint128 seqno_A:uint64 seqno_B:uint64 = InternalMsgBody");
var op_start_uncooperative_close$1 = 521476815; // crc32("start_uncooperative_close signed_by_A:Bool signature:bits512 tag:# = tag 1433289580 channel_id:uint128 sch_A:^SignedSemiChannel sch_B:^SignedSemiChannel = InternalMsgBody");
var op_challenge_quarantined_state$1 = 143567410; // crc32("challenge_quarantined_state challenged_by_A:Bool signature:bits512 tag:# = tag 1130915665 channel_id:uint128 sch_A:^SignedSemiChannel sch_B:^SignedSemiChannel = InternalMsgBody");
var op_settle_conditionals$1 = 1727459433; // crc32("settle_conditionals from_A:Bool signature:bits512 tag:# = tag 1131168622 channel_id:uint128 conditionals_to_settle:HashmapE 32 Cell = InternalMsgBody");
var op_finish_uncooperative_close = 625158801; // crc32("finish_uncooperative_close = InternalMsgBody");
var op_channel_closed = -572749638; // crc32("channel_closed channel_id:uint128 = InternalMsgBody");

/**
 * @param params    {{coinsA: BN, coinsB: BN}}
 * @returns {Cell}
 */
var createTopUpBalance = function createTopUpBalance(params) {
  var cell = new Cell$4();
  cell.bits.writeUint(op_top_up_balance, 32); // OP
  cell.bits.writeCoins(params.coinsA);
  cell.bits.writeCoins(params.coinsB);
  return cell;
};

/**
 * @param params    {{channelId: BN, balanceA: BN, balanceB: BN}}
 * @returns {Cell}
 */
var createInitChannelBody$1 = function createInitChannelBody(params) {
  var cell = new Cell$4();
  cell.bits.writeUint(tag_init, 32);
  cell.bits.writeUint(params.channelId, 128);
  cell.bits.writeCoins(params.balanceA);
  cell.bits.writeCoins(params.balanceB);
  return cell;
};

/**
 * @param params    {{channelId: BN, balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}
 * @returns {Cell}
 */
var createCooperativeCloseChannelBody$1 = function createCooperativeCloseChannelBody(params) {
  var cell = new Cell$4();
  cell.bits.writeUint(tag_cooperative_close, 32);
  cell.bits.writeUint(params.channelId, 128);
  cell.bits.writeCoins(params.balanceA);
  cell.bits.writeCoins(params.balanceB);
  cell.bits.writeUint(params.seqnoA, 64);
  cell.bits.writeUint(params.seqnoB, 64);
  return cell;
};

/**
 * @param params    {{channelId: BN, seqnoA: BN, seqnoB: BN}}
 * @returns {Cell}
 */
var createCooperativeCommitBody$1 = function createCooperativeCommitBody(params) {
  var cell = new Cell$4();
  cell.bits.writeUint(tag_cooperative_commit, 32);
  cell.bits.writeUint(params.channelId, 128);
  cell.bits.writeUint(params.seqnoA, 64);
  cell.bits.writeUint(params.seqnoB, 64);
  return cell;
};

/**
 * @param params    {{amount: BN, condition: Cell}} condition is code
 * @returns {Cell}
 */
var createConditionalPayment = function createConditionalPayment(params) {
  var cell = new Cell$4();
  cell.bits.writeCoins(params.amount);
  cell.writeCell(params.condition);
  return cell;
};

/**
 * @param params    {{seqno: BN, sentCoins: BN, conditionals: Cell | null}} conditionals - dictionary with uint32 keys and values created by `createConditionalPayment`
 * @returns {Cell}
 */
var createSemiChannelBody$1 = function createSemiChannelBody(params) {
  var cell = new Cell$4();
  cell.bits.writeUint(params.seqno, 64); // body start
  cell.bits.writeCoins(params.sentCoins);
  writeDict(cell, params.conditionals); // HashmapE 32 ConditionalPayment
  return cell;
};

/**
 * @param params    {{channelId: BN, semiChannelBody: Cell, counterpartySemiChannelBody?: Cell}} created by `createSemiChannelBody`
 * @returns {Cell}
 */
var createSemiChannelState$1 = function createSemiChannelState(params) {
  var cell = new Cell$4();
  cell.bits.writeUint(tag_state, 32);
  cell.bits.writeUint(params.channelId, 128);
  cell.writeCell(params.semiChannelBody);
  writeMayBe(cell, params.counterpartySemiChannelBody);
  return cell;
};

/**
 * @param params    {{signature: Uint8Array, state: Cell}}  `state` created by `createSemiChannelState`
 */
var createSignedSemiChannelState = function createSignedSemiChannelState(params) {
  var cell = new Cell$4();
  writeSignature(cell, params.signature);
  cell.writeCell(params.state);
  return cell;
};

/**
 * @param params    {{channelId: BN, signedSemiChannelStateA: Cell, signedSemiChannelStateB: Cell}} `signedSemiChannelState` created by `createSignedSemiChannelState`
 * @returns {Cell}
 */
var createStartUncooperativeCloseBody$1 = function createStartUncooperativeCloseBody(params) {
  var cell = new Cell$4();
  cell.bits.writeUint(tag_start_uncooperative_close, 32);
  cell.bits.writeUint(params.channelId, 128);
  cell.refs[0] = params.signedSemiChannelStateA;
  cell.refs[1] = params.signedSemiChannelStateB;
  return cell;
};

/**
 * @param params    {{channelId: BN, signedSemiChannelStateA: Cell, signedSemiChannelStateB: Cell}} `signedSemiChannelState` created by `createSignedSemiChannelState`
 * @returns {Cell}
 */
var createChallengeQuarantinedStateBody$1 = function createChallengeQuarantinedStateBody(params) {
  var cell = new Cell$4();
  cell.bits.writeUint(tag_challenge_state, 32);
  cell.bits.writeUint(params.channelId, 128);
  cell.refs[0] = params.signedSemiChannelStateA;
  cell.refs[1] = params.signedSemiChannelStateB;
  return cell;
};

/**
 * @param params    {{channelId: BN, conditionalsToSettle: Cell | null}} conditionalsToSettle - dictionary with uint32 keys and values created by `createConditionalPayment`
 * @returns {Cell}
 */
var createSettleConditionalsBody$1 = function createSettleConditionalsBody(params) {
  var cell = new Cell$4();
  cell.bits.writeUint(tag_settle_conditionals, 32);
  cell.bits.writeUint(params.channelId, 128);
  writeDict(cell, params.conditionalsToSettle); // HashmapE 32 Cell
  return cell;
};

/**
 * @returns {Cell}
 */
var createFinishUncooperativeClose = function createFinishUncooperativeClose() {
  var cell = new Cell$4();
  cell.bits.writeUint(op_finish_uncooperative_close, 32); // OP
  return cell;
};

/**
 * @param params    {{op: number, isA: boolean, signature: Uint8Array, cell: Cell}}
 * @return {Cell}
 */
var createOneSignature = function createOneSignature(params) {
  var cell = new Cell$4();
  cell.bits.writeUint(params.op, 32); // OP
  cell.bits.writeBit(params.isA);
  writeSignature(cell, params.signature);
  cell.writeCell(params.cell);
  return cell;
};

/**
 * @param params    {{op: number, signatureA: Uint8Array, signatureB: Uint8Array, cell: Cell}}
 * @return {Cell}
 */
var createTwoSignature = function createTwoSignature(params) {
  var cell = new Cell$4();
  cell.bits.writeUint(params.op, 32); // OP
  cell.refs[0] = createSignatureCell(params.signatureA);
  cell.refs[1] = createSignatureCell(params.signatureB);
  cell.writeCell(params.cell);
  return cell;
};
var PaymentUtils = {
  writePublicKey: writePublicKey$1,
  writeSignature: writeSignature,
  createSignatureCell: createSignatureCell,
  tag_init: tag_init,
  tag_cooperative_close: tag_cooperative_close,
  tag_cooperative_commit: tag_cooperative_commit,
  tag_start_uncooperative_close: tag_start_uncooperative_close,
  tag_challenge_state: tag_challenge_state,
  tag_settle_conditionals: tag_settle_conditionals,
  tag_state: tag_state,
  op_top_up_balance: op_top_up_balance,
  op_init_channel: op_init_channel$1,
  op_cooperative_close: op_cooperative_close$1,
  op_cooperative_commit: op_cooperative_commit$1,
  op_start_uncooperative_close: op_start_uncooperative_close$1,
  op_challenge_quarantined_state: op_challenge_quarantined_state$1,
  op_settle_conditionals: op_settle_conditionals$1,
  op_finish_uncooperative_close: op_finish_uncooperative_close,
  op_channel_closed: op_channel_closed,
  createTopUpBalance: createTopUpBalance,
  createInitChannelBody: createInitChannelBody$1,
  createCooperativeCloseChannelBody: createCooperativeCloseChannelBody$1,
  createCooperativeCommitBody: createCooperativeCommitBody$1,
  createConditionalPayment: createConditionalPayment,
  createSemiChannelBody: createSemiChannelBody$1,
  createSemiChannelState: createSemiChannelState$1,
  createSignedSemiChannelState: createSignedSemiChannelState,
  createStartUncooperativeCloseBody: createStartUncooperativeCloseBody$1,
  createChallengeQuarantinedStateBody: createChallengeQuarantinedStateBody$1,
  createSettleConditionalsBody: createSettleConditionalsBody$1,
  createFinishUncooperativeClose: createFinishUncooperativeClose,
  createOneSignature: createOneSignature,
  createTwoSignature: createTwoSignature
};

var Contract$3 = contract.Contract;
var Cell$3 = boc$1.Cell;
var nacl = utils$1.nacl,
  hexToBytes = utils$1.hexToBytes,
  BN$2 = utils$1.BN;
var parseAddress$3 = NftUtils.parseAddress;
var writePublicKey = PaymentUtils.writePublicKey;
  PaymentUtils.writeSignature;
  PaymentUtils.createSignatureCell;
  PaymentUtils.tag_init;
  PaymentUtils.tag_cooperative_close;
  PaymentUtils.tag_cooperative_commit;
  PaymentUtils.tag_start_uncooperative_close;
  PaymentUtils.tag_challenge_state;
  PaymentUtils.tag_settle_conditionals;
  PaymentUtils.tag_state;
  PaymentUtils.op_top_up_balance;
  var op_init_channel = PaymentUtils.op_init_channel,
  op_cooperative_close = PaymentUtils.op_cooperative_close,
  op_cooperative_commit = PaymentUtils.op_cooperative_commit,
  op_start_uncooperative_close = PaymentUtils.op_start_uncooperative_close,
  op_challenge_quarantined_state = PaymentUtils.op_challenge_quarantined_state,
  op_settle_conditionals = PaymentUtils.op_settle_conditionals;
  PaymentUtils.op_finish_uncooperative_close;
  PaymentUtils.op_channel_closed;
  var _createTopUpBalance = PaymentUtils.createTopUpBalance,
  createInitChannelBody = PaymentUtils.createInitChannelBody,
  createCooperativeCloseChannelBody = PaymentUtils.createCooperativeCloseChannelBody,
  createCooperativeCommitBody = PaymentUtils.createCooperativeCommitBody;
  PaymentUtils.createConditionalPayment;
  var createSemiChannelBody = PaymentUtils.createSemiChannelBody,
  createSemiChannelState = PaymentUtils.createSemiChannelState,
  _createSignedSemiChannelState = PaymentUtils.createSignedSemiChannelState,
  createStartUncooperativeCloseBody = PaymentUtils.createStartUncooperativeCloseBody,
  createChallengeQuarantinedStateBody = PaymentUtils.createChallengeQuarantinedStateBody,
  createSettleConditionalsBody = PaymentUtils.createSettleConditionalsBody,
  _createFinishUncooperativeClose = PaymentUtils.createFinishUncooperativeClose,
  _createOneSignature = PaymentUtils.createOneSignature,
  _createTwoSignature = PaymentUtils.createTwoSignature;
var PAYMENT_CHANNEL_CODE_HEX = 'B5EE9C72410230010007FB000114FF00F4A413F4BCF2C80B0102012002030201480405000AF26C21F0190202CB06070201202E2F020120080902012016170201200A0B0201200C0D0009D3610F80CC001D6B5007434C7FE8034C7CC1BC0FE19E0201580E0F0201201011002D3E11DBC4BE11DBC43232C7FE11DBC47E80B2C7F2407320008B083E1B7B51343480007E187E80007E18BE80007E18F4FFC07E1934FFC07E1974DFC07E19BC01887080A7F4C7C07E1A34C7C07E1A7D01007E1AB7807080E535007E1AF7BE1B2002012012130201201415008D3E13723E11BE117E113E10540132803E10BE80BE10FE8084F2FFC4B2FFF2DFFC02887080A7FE12BE127E121400F2C7C4B2C7FD0037807080E53E12C073253E1333C5B8B27B5520004D1C3C02FE106CFCB8193E803E800C3E1096283E18BE10C0683E18FE10BE10E8006EFCB819BC032000CF1D3C02FE106CFCB819348020C235C6083E4040E4BE1124BE117890CC3E443CB81974C7C060841A5B9A5D2EBCB81A3E118074DFD66EBCB81CBE803E800C3E1094882FBE10D4882FAC3CB819807E18BE18FE12F43E800C3E10BE10E80068006E7CB8199FFE187C0320004120843777222E9C20043232C15401B3C594013E808532DA84B2C7F2DFF2407EC02002012018190201D42B2C0201201A1B0201201E1F0201201C1D00E5473F00BD401D001D401D021F90102D31F01821043436D74BAF2E068F84601D37F59BAF2E072F844544355F910F8454330F910B0F2E065D33FD33F30F84822B9F84922B9B0F2E06C21F86820F869F84A6E915B8E19F84AD0D33FFA003171D721D33F305033BC02BCB1936DF86ADEE2F800F00C8006F3E12F43E800C7E903E900C3E09DBC41CBE10D62F24CC20C1B7BE10FE11963C03FE10BE11A04020BC03DC3E185C3E189C3E18DB7E1ABC032000B51D3C02F5007400750074087E4040B4C7C0608410DB1BDCEEBCB81A3E118074DFD66EBCB81CBE111510D57E443E1150CC3E442C3CB8197E80007E18BE80007E18F4CFF4CFCC3E1208AE7E1248AE6C3CB81B007E1A3E1A7E003C042001C1573F00BF84A6EF2E06AD2008308D71820F9012392F84492F845E24130F910F2E065D31F018210556E436CBAF2E068F84601D37F59BAF2E072D401D08308D71820F901F8444130F910F2E06501D430D08308D71820F901F8454130F910F2E06501820020120222301FED31F01821043685374BAF2E068F84601D37F59BAF2E072D33FFA00F404552003D200019AD401D0D33FFA00F40430937F206DE2303205D31F01821043685374BAF2E068F84601D37F59BAF2E072D33FFA00F404552003D200019AD401D0D33FFA00F40430937F206DE23032F8485280BEF8495250BEB0524BBE1AB0527ABE19210064B05215BE14B05248BE17B0F2E06970F82305C8CB3F5004FA0215F40015CB3F5004FA0212F400CB1F12CA00CA00C9F86AF00C01C31CFC02FE129BACFCB81AF48020C235C6083E4048E4BE1124BE1178904C3E443CB81974C7C0608410DA19D46EBCB81A3E118074DFD66EBCB81CB5007420C235C6083E407E11104C3E443CB81940750C3420C235C6083E407E11504C3E443CB81940602403F71CFC02FE129BACFCB81AF48020C235C6083E4048E4BE1124BE1178904C3E443CB81974C7C0608410DB10DBAEBCB81A3E118074DFD66EBCB81CBD010C3E12B434CFFE803D0134CFFE803D0134C7FE11DBC4148828083E08EE7CB81BBE11DBC4A83E08EF3CB81C34800C151D5A64D6D4C8F7A2B98E82A49B08B8C3816028292A01FCD31F01821043685374BAF2E068F84601D37F59BAF2E072D33FFA00F404552003D200019AD401D0D33FFA00F40430937F206DE2303205D31F01821043685374BAF2E068F84601D37F59BAF2E072D33FFA00F404552003D200019AD401D0D33FFA00F40430937F206DE230325339BE5381BEB0F8495250BEB0F8485290BEB02502FE5237BE16B05262BEB0F2E06927C20097F84918BEF2E0699137E222C20097F84813BEF2E0699132E2F84AD0D33FFA00F404D33FFA00F404D31FF8476F105220A0F823BCF2E06FD200D20030B3F2E073209C3537373A5274BC5263BC12B18E11323939395250BC5299BC18B14650134440E25319BAB3F2E06D9130E30D7F05C82627002496F8476F1114A098F8476F1117A00603E203003ECB3F5004FA0215F40012CB3F5004FA0213F400CB1F12CA00CA00C9F86AF00C00620A8020F4966FA5208E213050038020F4666FA1208E1001FA00ED1E15DA119450C3A00B9133E2923430E202926C21E2B31B000C3535075063140038C8CB3F5004FA0212F400CB3F5003FA0213F400CB1FCA00C9F86AF00C00D51D3C02FE129BACFCB81AFE12B434CFFE803D010C74CFFE803D010C74C7CC3E11DBC4283E11DBC4A83E08EE7CB81C7E003E10886808E87E18BE10D400E816287E18FE10F04026BE10BE10E83E189C3E18F7BE10B04026BE10FE10A83E18DC3E18F780693E1A293E1A7C042001F53B7EF4C7C8608419F1F4A06EA4CC7C037808608403818830AEA54C7C03B6CC780C882084155DD61FAEA54C3C0476CC780820841E6849BBEEA54C3C04B6CC7808208407C546B3EEA54C3C0576CC780820840223AA8CAEA54C3C05B6CC7808208419BDBC1A6EA54C3C05F6CC780C60840950CAA46EA53C0636CC78202D0008840FF2F00075BC7FE3A7805FC25E87D007D207D20184100D0CAF6A1EC7C217C21B7817C227C22B7817C237C23FC247C24B7817C2524C3B7818823881B22A021984008DBD0CABA7805FC20C8B870FC253748B8F07C256840206B90FD0018C020EB90FD0018B8EB90E98F987C23B7882908507C11DE491839707C23B788507C23B789507C11DE48B9F03A4331C4966';
var PaymentChannel$2 = /*#__PURE__*/function (_Contract) {
  /**
   * @param provider  {HttpProvider}
   * @param options   {{isA: boolean, channelId: BN, myKeyPair: nacl.SignKeyPair, hisPublicKey: Uint8Array, initBalanceA: BN, initBalanceB: BN, addressA: Address, addressB: Address, closingConfig?: {quarantineDuration: number, misbehaviorFine: BN, conditionalCloseDuration: number}, excessFee?: BN}}
   */
  function PaymentChannel(provider, options) {
    _classCallCheck(this, PaymentChannel);
    options.publicKeyA = options.isA ? options.myKeyPair.publicKey : options.hisPublicKey;
    options.publicKeyB = !options.isA ? options.myKeyPair.publicKey : options.hisPublicKey;
    options.wc = options.wc || 0;
    options.code = options.code || Cell$3.oneFromBoc(PAYMENT_CHANNEL_CODE_HEX);
    return _callSuper(this, PaymentChannel, [provider, options]);
  }

  /**
   * @override
   * @private
   * @return {Cell} cell contains payment channel data
   */
  _inherits(PaymentChannel, _Contract);
  return _createClass(PaymentChannel, [{
    key: "createDataCell",
    value: function createDataCell() {
      var _this$options$closing, _this$options$closing2, _this$options$closing3;
      var cell = new Cell$3();
      cell.bits.writeBit(0); // inited
      cell.bits.writeCoins(0); // balance_A
      cell.bits.writeCoins(0); // balance_B
      writePublicKey(cell, this.options.publicKeyA); // key_A
      writePublicKey(cell, this.options.publicKeyB); // key_B
      cell.bits.writeUint(this.options.channelId, 128); // channel_id

      var closingConfig = new Cell$3();
      closingConfig.bits.writeUint(((_this$options$closing = this.options.closingConfig) === null || _this$options$closing === void 0 ? void 0 : _this$options$closing.quarantineDuration) || 0, 32); // quarantin_duration
      closingConfig.bits.writeCoins(((_this$options$closing2 = this.options.closingConfig) === null || _this$options$closing2 === void 0 ? void 0 : _this$options$closing2.misbehaviorFine) || new BN$2(0)); // misbehavior_fine
      closingConfig.bits.writeUint(((_this$options$closing3 = this.options.closingConfig) === null || _this$options$closing3 === void 0 ? void 0 : _this$options$closing3.conditionalCloseDuration) || 0, 32); // conditional_close_duration
      cell.refs[0] = closingConfig;
      cell.bits.writeUint(0, 32); // commited_seqno_A
      cell.bits.writeUint(0, 32); // commited_seqno_B
      cell.bits.writeBit(false); // quarantin ref

      var paymentConfig = new Cell$3();
      paymentConfig.bits.writeCoins(this.options.excessFee || new BN$2(0)); // excess_fee
      paymentConfig.bits.writeAddress(this.options.addressA); // addr_A
      paymentConfig.bits.writeAddress(this.options.addressB); // addr_B
      cell.refs[1] = paymentConfig;
      return cell;
    }

    /**
     * @private
     * @param op    {number}
     * @param cellForSigning    {Cell}
     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}
     */
  }, {
    key: "createOneSignature",
    value: (function () {
      var _createOneSignature2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(op, cellForSigning) {
        var signature, cell;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.t0 = nacl.sign;
              _context.next = 3;
              return cellForSigning.hash();
            case 3:
              _context.t1 = _context.sent;
              _context.t2 = this.options.myKeyPair.secretKey;
              signature = _context.t0.detached.call(_context.t0, _context.t1, _context.t2);
              cell = _createOneSignature({
                op: op,
                isA: this.options.isA,
                signature: signature,
                cell: cellForSigning
              });
              return _context.abrupt("return", {
                cell: cell,
                signature: signature
              });
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function createOneSignature(_x, _x2) {
        return _createOneSignature2.apply(this, arguments);
      }
      return createOneSignature;
    }()
    /**
     * @private
     * @param op    {number}
     * @param hisSignature {Uint8Array}
     * @param cellForSigning    {Cell}
     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}
     */
    )
  }, {
    key: "createTwoSignature",
    value: (function () {
      var _createTwoSignature2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(op, hisSignature, cellForSigning) {
        var signature, signatureA, signatureB, cell;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.t0 = nacl.sign;
              _context2.next = 3;
              return cellForSigning.hash();
            case 3:
              _context2.t1 = _context2.sent;
              _context2.t2 = this.options.myKeyPair.secretKey;
              signature = _context2.t0.detached.call(_context2.t0, _context2.t1, _context2.t2);
              signatureA = this.options.isA ? signature : hisSignature;
              signatureB = !this.options.isA ? signature : hisSignature;
              cell = _createTwoSignature({
                op: op,
                signatureA: signatureA,
                signatureB: signatureB,
                cell: cellForSigning
              });
              return _context2.abrupt("return", {
                cell: cell,
                signature: signature
              });
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function createTwoSignature(_x3, _x4, _x5) {
        return _createTwoSignature2.apply(this, arguments);
      }
      return createTwoSignature;
    }()
    /**
     * @param params    {{coinsA: BN, coinsB: BN}}
     * @returns {Promise<Cell>}
     */
    )
  }, {
    key: "createTopUpBalance",
    value: (function () {
      var _createTopUpBalance2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(params) {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", _createTopUpBalance(params));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function createTopUpBalance(_x6) {
        return _createTopUpBalance2.apply(this, arguments);
      }
      return createTopUpBalance;
    }()
    /**
     * @param params    {{balanceA: BN, balanceB: BN}}
     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}
     */
    )
  }, {
    key: "createInitChannel",
    value: (function () {
      var _createInitChannel = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(params) {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", this.createOneSignature(op_init_channel, createInitChannelBody(_objectSpread2(_objectSpread2({}, params), {}, {
                channelId: this.options.channelId
              }))));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function createInitChannel(_x7) {
        return _createInitChannel.apply(this, arguments);
      }
      return createInitChannel;
    }()
    /**
     * @param params    {{hisSignature?: Uint8Array, balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}
     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}
     */
    )
  }, {
    key: "createCooperativeCloseChannel",
    value: (function () {
      var _createCooperativeCloseChannel = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(params) {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!params.hisSignature) {
                params.hisSignature = new Uint8Array(512 / 8);
              }
              return _context5.abrupt("return", this.createTwoSignature(op_cooperative_close, params.hisSignature, createCooperativeCloseChannelBody(_objectSpread2(_objectSpread2({}, params), {}, {
                channelId: this.options.channelId
              }))));
            case 2:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function createCooperativeCloseChannel(_x8) {
        return _createCooperativeCloseChannel.apply(this, arguments);
      }
      return createCooperativeCloseChannel;
    }()
    /**
     * @param params    {{hisSignature?: Uint8Array, seqnoA: BN, seqnoB: BN}}
     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}
     */
    )
  }, {
    key: "createCooperativeCommit",
    value: (function () {
      var _createCooperativeCommit = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(params) {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!params.hisSignature) {
                params.hisSignature = new Uint8Array(512 / 8);
              }
              return _context6.abrupt("return", this.createTwoSignature(op_cooperative_commit, params.hisSignature, createCooperativeCommitBody(_objectSpread2(_objectSpread2({}, params), {}, {
                channelId: this.options.channelId
              }))));
            case 2:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function createCooperativeCommit(_x9) {
        return _createCooperativeCommit.apply(this, arguments);
      }
      return createCooperativeCommit;
    }()
    /**
     * @private
     * @param params    {{mySeqno: BN, mySentCoins: BN, hisSeqno?: BN, hisSentCoins?: BN}}
     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}
     */
    )
  }, {
    key: "createSignedSemiChannelState",
    value: (function () {
      var _createSignedSemiChannelState2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(params) {
        var state, signature, cell;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              state = createSemiChannelState({
                channelId: this.options.channelId,
                semiChannelBody: createSemiChannelBody({
                  seqno: params.mySeqno,
                  sentCoins: params.mySentCoins,
                  conditionals: null
                }),
                counterpartySemiChannelBody: params.hisSeqno === undefined ? null : createSemiChannelBody({
                  seqno: params.hisSeqno,
                  sentCoins: params.hisSentCoins,
                  conditionals: null
                })
              });
              _context7.t0 = nacl.sign;
              _context7.next = 4;
              return state.hash();
            case 4:
              _context7.t1 = _context7.sent;
              _context7.t2 = this.options.myKeyPair.secretKey;
              signature = _context7.t0.detached.call(_context7.t0, _context7.t1, _context7.t2);
              cell = _createSignedSemiChannelState({
                signature: signature,
                state: state
              });
              return _context7.abrupt("return", {
                cell: cell,
                signature: signature
              });
            case 9:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function createSignedSemiChannelState(_x10) {
        return _createSignedSemiChannelState2.apply(this, arguments);
      }
      return createSignedSemiChannelState;
    }()
    /**
     * @param params    {{balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}
     * @returns {Promise<Uint8Array>} signature
     */
    )
  }, {
    key: "signState",
    value: (function () {
      var _signState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(params) {
        var mySeqno, hisSeqno, sentCoinsA, sentCoinsB, mySentCoins, hisSentCoins, _yield$this$createSig, signature;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              mySeqno = this.options.isA ? params.seqnoA : params.seqnoB;
              hisSeqno = !this.options.isA ? params.seqnoA : params.seqnoB;
              sentCoinsA = this.options.initBalanceA.gt(params.balanceA) ? this.options.initBalanceA.sub(params.balanceA) : new BN$2(0);
              sentCoinsB = this.options.initBalanceB.gt(params.balanceB) ? this.options.initBalanceB.sub(params.balanceB) : new BN$2(0);
              mySentCoins = this.options.isA ? sentCoinsA : sentCoinsB;
              hisSentCoins = !this.options.isA ? sentCoinsA : sentCoinsB;
              _context8.next = 8;
              return this.createSignedSemiChannelState({
                mySeqno: mySeqno,
                mySentCoins: mySentCoins,
                hisSeqno: hisSeqno,
                hisSentCoins: hisSentCoins
              });
            case 8:
              _yield$this$createSig = _context8.sent;
              _yield$this$createSig.cell;
              signature = _yield$this$createSig.signature;
              return _context8.abrupt("return", signature);
            case 12:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function signState(_x11) {
        return _signState.apply(this, arguments);
      }
      return signState;
    }()
    /**
     * @param params    {{balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}
     * @param hisSignature  {Uint8Array}
     * @returns {Promise<boolean>}
     */
    )
  }, {
    key: "verifyState",
    value: (function () {
      var _verifyState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(params, hisSignature) {
        var mySeqno, hisSeqno, sentCoinsA, sentCoinsB, mySentCoins, hisSentCoins, state, hash;
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              mySeqno = !this.options.isA ? params.seqnoA : params.seqnoB;
              hisSeqno = this.options.isA ? params.seqnoA : params.seqnoB;
              sentCoinsA = this.options.initBalanceA.gt(params.balanceA) ? this.options.initBalanceA.sub(params.balanceA) : new BN$2(0);
              sentCoinsB = this.options.initBalanceB.gt(params.balanceB) ? this.options.initBalanceB.sub(params.balanceB) : new BN$2(0);
              mySentCoins = !this.options.isA ? sentCoinsA : sentCoinsB;
              hisSentCoins = this.options.isA ? sentCoinsA : sentCoinsB;
              state = createSemiChannelState({
                channelId: this.options.channelId,
                semiChannelBody: createSemiChannelBody({
                  seqno: mySeqno,
                  sentCoins: mySentCoins,
                  conditionals: null
                }),
                counterpartySemiChannelBody: hisSeqno === undefined ? null : createSemiChannelBody({
                  seqno: hisSeqno,
                  sentCoins: hisSentCoins,
                  conditionals: null
                })
              });
              _context9.next = 9;
              return state.hash();
            case 9:
              hash = _context9.sent;
              return _context9.abrupt("return", nacl.sign.detached.verify(hash, hisSignature, this.options.isA ? this.options.publicKeyB : this.options.publicKeyA));
            case 11:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function verifyState(_x12, _x13) {
        return _verifyState.apply(this, arguments);
      }
      return verifyState;
    }()
    /**
     * @param params    {{balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}
     * @return {Uint8Array} signature
     */
    )
  }, {
    key: "signClose",
    value: (function () {
      var _signClose = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(params) {
        var _yield$this$createCoo, signature;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.createCooperativeCloseChannel(params);
            case 2:
              _yield$this$createCoo = _context10.sent;
              _yield$this$createCoo.cell;
              signature = _yield$this$createCoo.signature;
              return _context10.abrupt("return", signature);
            case 6:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function signClose(_x14) {
        return _signClose.apply(this, arguments);
      }
      return signClose;
    }()
    /**
     * @param params    {{balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}
     * @param hisSignature {Uint8Array}
     * @return {boolean}
     */
    )
  }, {
    key: "verifyClose",
    value: (function () {
      var _verifyClose = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11(params, hisSignature) {
        var cell, hash;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return createCooperativeCloseChannelBody(_objectSpread2(_objectSpread2({}, params), {}, {
                channelId: this.options.channelId
              }));
            case 2:
              cell = _context11.sent;
              _context11.next = 5;
              return cell.hash();
            case 5:
              hash = _context11.sent;
              return _context11.abrupt("return", nacl.sign.detached.verify(hash, hisSignature, this.options.isA ? this.options.publicKeyB : this.options.publicKeyA));
            case 7:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function verifyClose(_x15, _x16) {
        return _verifyClose.apply(this, arguments);
      }
      return verifyClose;
    }()
    /**
     * @param params    {{signedSemiChannelStateA: Cell, signedSemiChannelStateB: Cell}} `signedSemiChannelState` created by `createSignedSemiChannelState`
     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}
     */
    )
  }, {
    key: "createStartUncooperativeClose",
    value: (function () {
      var _createStartUncooperativeClose = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12(params) {
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", this.createOneSignature(op_start_uncooperative_close, createStartUncooperativeCloseBody(_objectSpread2(_objectSpread2({}, params), {}, {
                channelId: this.options.channelId
              }))));
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function createStartUncooperativeClose(_x17) {
        return _createStartUncooperativeClose.apply(this, arguments);
      }
      return createStartUncooperativeClose;
    }()
    /**
     * @param params   {{signedSemiChannelStateA: Cell, signedSemiChannelStateB: Cell}} `signedSemiChannelState` created by `createSignedSemiChannelState`
     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}
     */
    )
  }, {
    key: "createChallengeQuarantinedState",
    value: (function () {
      var _createChallengeQuarantinedState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13(params) {
        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", this.createOneSignature(op_challenge_quarantined_state, createChallengeQuarantinedStateBody(_objectSpread2(_objectSpread2({}, params), {}, {
                channelId: this.options.channelId
              }))));
            case 1:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function createChallengeQuarantinedState(_x18) {
        return _createChallengeQuarantinedState.apply(this, arguments);
      }
      return createChallengeQuarantinedState;
    }()
    /**
     * @param params    {{conditionalsToSettle: Cell | null}} dictionary with uint32 keys and values created by `createConditionalPayment`
     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}
     */
    )
  }, {
    key: "createSettleConditionals",
    value: (function () {
      var _createSettleConditionals = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee14(params) {
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", this.createOneSignature(op_settle_conditionals, createSettleConditionalsBody(_objectSpread2(_objectSpread2({}, params), {}, {
                channelId: this.options.channelId
              }))));
            case 1:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function createSettleConditionals(_x19) {
        return _createSettleConditionals.apply(this, arguments);
      }
      return createSettleConditionals;
    }()
    /**
     * @returns {Promise<Cell>}
     */
    )
  }, {
    key: "createFinishUncooperativeClose",
    value: (function () {
      var _createFinishUncooperativeClose2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
        return _regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", _createFinishUncooperativeClose());
            case 1:
            case "end":
              return _context15.stop();
          }
        }, _callee15);
      }));
      function createFinishUncooperativeClose() {
        return _createFinishUncooperativeClose2.apply(this, arguments);
      }
      return createFinishUncooperativeClose;
    }())
  }, {
    key: "getChannelState",
    value: (
    /**
     * @returns {Promise<number>}
     */
    function () {
      var _getChannelState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
        var myAddress, result;
        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context16.sent;
              _context16.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_channel_state', []);
            case 5:
              result = _context16.sent;
              return _context16.abrupt("return", result.toNumber());
            case 7:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function getChannelState() {
        return _getChannelState.apply(this, arguments);
      }
      return getChannelState;
    }()
    /**
     * @returns {Promise<{state: number, balanceA: BN, balanceB: BN, publicKeyA: Uint8Array, publicKeyB: Uint8Array, channelId: BN, quarantineDuration: number, misbehaviorFine: BN, conditionalCloseDuration: number, seqnoA: BN, seqnoB: BN, quarantine: Cell, excessFee: BN, addressA: Address, addressB: Address}>}
     */
    )
  }, {
    key: "getData",
    value: (function () {
      var _getData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
        var bnToBytes, myAddress, result, state, balanceA, balanceB, publicKeyA, publicKeyB, channelId, quarantineDuration, misbehaviorFine, conditionalCloseDuration, seqnoA, seqnoB, quarantine, excessFee, addressA, addressB;
        return _regeneratorRuntime().wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              /**
               * @param bn    {BN}
               * @return  {Uint8Array}
               */
              bnToBytes = function bnToBytes(bn) {
                var hex = bn.toString(16);
                if (hex.length % 2 !== 0) hex = '0' + hex;
                return hexToBytes(hex);
              };
              _context17.next = 3;
              return this.getAddress();
            case 3:
              myAddress = _context17.sent;
              _context17.next = 6;
              return this.provider.call2(myAddress.toString(), 'get_channel_data', []);
            case 6:
              result = _context17.sent;
              state = result[0].toNumber();
              balanceA = result[1][0];
              balanceB = result[1][1];
              publicKeyA = bnToBytes(result[2][0]);
              publicKeyB = bnToBytes(result[2][1]);
              channelId = result[3];
              quarantineDuration = result[4][0].toNumber();
              misbehaviorFine = result[4][1];
              conditionalCloseDuration = result[4][2].toNumber();
              seqnoA = result[5][0];
              seqnoB = result[5][1];
              quarantine = result[6]; // Cell
              excessFee = result[7][0];
              addressA = parseAddress$3(result[7][1]);
              addressB = parseAddress$3(result[7][2]);
              return _context17.abrupt("return", {
                state: state,
                balanceA: balanceA,
                balanceB: balanceB,
                publicKeyA: publicKeyA,
                publicKeyB: publicKeyB,
                channelId: channelId,
                quarantineDuration: quarantineDuration,
                misbehaviorFine: misbehaviorFine,
                conditionalCloseDuration: conditionalCloseDuration,
                seqnoA: seqnoA,
                seqnoB: seqnoB,
                quarantine: quarantine,
                excessFee: excessFee,
                addressA: addressA,
                addressB: addressB
              });
            case 23:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function getData() {
        return _getData.apply(this, arguments);
      }
      return getData;
    }()
    /**
     * @param params {{wallet: WalletContract, secretKey: Uint8Array}}
     * @return {{deploy: Function, init: Function, topUp: Function, close: Function, commit: Function, startUncooperativeClose: Function, challengeQuarantinedState: Function, settleConditionals: Function, finishUncooperativeClose: Function}}
     */
    )
  }, {
    key: "fromWallet",
    value: function fromWallet(params) {
      var _this = this;
      var wallet = params.wallet,
        secretKey = params.secretKey;
      var transfer = function transfer(payloadPromise, needStateInit) {
        var createPromise = /*#__PURE__*/function () {
          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee18(amount) {
            var stateInit, myAddress, seqno, payload;
            return _regeneratorRuntime().wrap(function _callee18$(_context18) {
              while (1) switch (_context18.prev = _context18.next) {
                case 0:
                  if (!needStateInit) {
                    _context18.next = 6;
                    break;
                  }
                  _context18.next = 3;
                  return _this.createStateInit();
                case 3:
                  _context18.t0 = _context18.sent.stateInit;
                  _context18.next = 7;
                  break;
                case 6:
                  _context18.t0 = null;
                case 7:
                  stateInit = _context18.t0;
                  _context18.next = 10;
                  return _this.getAddress();
                case 10:
                  myAddress = _context18.sent;
                  _context18.next = 13;
                  return wallet.methods.seqno().call();
                case 13:
                  _context18.t1 = _context18.sent;
                  if (_context18.t1) {
                    _context18.next = 16;
                    break;
                  }
                  _context18.t1 = 0;
                case 16:
                  seqno = _context18.t1;
                  _context18.next = 19;
                  return payloadPromise;
                case 19:
                  payload = _context18.sent;
                  return _context18.abrupt("return", wallet.methods.transfer({
                    secretKey: secretKey,
                    toAddress: myAddress.toString(true, true, true),
                    amount: amount,
                    seqno: seqno,
                    payload: payload,
                    // body
                    stateInit: stateInit,
                    sendMode: 3
                  }));
                case 21:
                case "end":
                  return _context18.stop();
              }
            }, _callee18);
          }));
          return function createPromise(_x20) {
            return _ref.apply(this, arguments);
          };
        }();
        return {
          /**
           * @param amount    {BN}    in Toncoins
           */
          send: function send(amount) {
            return createPromise(amount).then(function (x) {
              return x.send();
            });
          },
          /**
           * @param amount    {BN}    in Toncoins
           */
          estimateFee: function estimateFee(amount) {
            return createPromise(amount).then(function (x) {
              return x.estimateFee();
            });
          }
        };
      };
      return {
        deploy: function deploy() {
          return transfer(null, true);
        },
        /**
         * @param params    {{balanceA: BN, balanceB: BN}}
         */
        init: function init(params) {
          return transfer(_this.createInitChannel(params).then(function (x) {
            return x.cell;
          }));
        },
        /**
         * @param params    {{coinsA: BN, coinsB: BN}}
         */
        topUp: function topUp(params) {
          return transfer(_this.createTopUpBalance(params));
        },
        /**
         * @param params    {{hisSignature: Uint8Array, balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}
         */
        close: function close(params) {
          return transfer(_this.createCooperativeCloseChannel(params).then(function (x) {
            return x.cell;
          }));
        },
        /**
         * @param params    {{hisSignature: Uint8Array, seqnoA: BN, seqnoB: BN}}
         */
        commit: function commit(params) {
          return transfer(_this.createCooperativeCommit(params).then(function (x) {
            return x.cell;
          }));
        },
        /**
         * @param params    {{signedSemiChannelStateA: Cell, signedSemiChannelStateB: Cell}}
         */
        startUncooperativeClose: function startUncooperativeClose(params) {
          return transfer(_this.createStartUncooperativeClose(params).then(function (x) {
            return x.cell;
          }));
        },
        /**
         * @param params    {{signedSemiChannelStateA: Cell, signedSemiChannelStateB: Cell}}
         */
        challengeQuarantinedState: function challengeQuarantinedState(params) {
          return transfer(_this.createChallengeQuarantinedState(params).then(function (x) {
            return x.cell;
          }));
        },
        /**
         * @param params    {{conditionalsToSettle: Cell | null}}
         */
        settleConditionals: function settleConditionals(params) {
          return transfer(_this.createSettleConditionals(params).then(function (x) {
            return x.cell;
          }));
        },
        /**
         */
        finishUncooperativeClose: function finishUncooperativeClose() {
          return transfer(_this.createFinishUncooperativeClose());
        }
      };
    }
  }]);
}(Contract$3);
_defineProperty$1(PaymentChannel$2, "STATE_UNINITED", 0);
_defineProperty$1(PaymentChannel$2, "STATE_OPEN", 1);
_defineProperty$1(PaymentChannel$2, "STATE_CLOSURE_STARTED", 2);
_defineProperty$1(PaymentChannel$2, "STATE_SETTLING_CONDITIONALS", 3);
_defineProperty$1(PaymentChannel$2, "STATE_AWAITING_FINALIZATION", 4);
PaymentChannel$2.codeHex = PAYMENT_CHANNEL_CODE_HEX;
var PaymentChannel_1 = {
  PaymentChannel: PaymentChannel$2
};

var PaymentChannel$1 = PaymentChannel_1.PaymentChannel;
var Payments$1 = /*#__PURE__*/function () {
  /**
   * @param provider    {HttpProvider}
   */
  function Payments(provider) {
    _classCallCheck(this, Payments);
    this.provider = provider;
  }
  return _createClass(Payments, [{
    key: "createChannel",
    value: function createChannel(options) {
      return new PaymentChannel$1(this.provider, options);
    }
  }]);
}();
var payments = {
  Payments: Payments$1,
  PaymentChannel: PaymentChannel$1
};

var TransportWebUSB$2 = {};

var Transport = {};

var domain;

// This constructor is used to store event handlers. Instantiating this is
// faster than explicitly calling `Object.create(null)` to get a "clean" empty
// object (tested with v8 v4.9).
function EventHandlers() {}
EventHandlers.prototype = Object.create(null);
function EventEmitter() {
  EventEmitter.init.call(this);
}

// nodejs oddity
// require('events') === require('events').EventEmitter
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.usingDomains = false;
EventEmitter.prototype.domain = undefined;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;
EventEmitter.init = function () {
  this.domain = null;
  if (EventEmitter.usingDomains) {
    // if there is an active domain, then attach to it.
    if (domain.active) ;
  }
  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
    this._events = new EventHandlers();
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};
function $getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn) handler.call(self);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn) handler.call(self, arg1);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn) handler.call(self, arg1, arg2);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn) handler.call(self, arg1, arg2, arg3);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2, arg3);
  }
}
function emitMany(handler, isFn, self, args) {
  if (isFn) handler.apply(self, args);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) listeners[i].apply(self, args);
  }
}
EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events, domain;
  var doError = type === 'error';
  events = this._events;
  if (events) doError = doError && events.error == null;else if (!doError) return false;
  domain = this.domain;

  // If there is no 'error' event listener then throw.
  if (doError) {
    er = arguments[1];
    if (domain) {
      if (!er) er = new Error('Uncaught, unspecified "error" event');
      er.domainEmitter = this;
      er.domain = domain;
      er.domainThrown = false;
      domain.emit('error', er);
    } else if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }
  handler = events[type];
  if (!handler) return false;
  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
    // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
    // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++) args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  events = target._events;
  if (!events) {
    events = target._events = new EventHandlers();
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }
  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + type + ' listeners added. ' + 'Use emitter.setMaxListeners() to increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        emitWarning(w);
      }
    }
  }
  return target;
}
function emitWarning(e) {
  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};
function _onceWrap(target, type, listener) {
  var fired = false;
  function g() {
    target.removeListener(type, g);
    if (!fired) {
      fired = true;
      listener.apply(target, arguments);
    }
  }
  g.listener = listener;
  return g;
}
EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  events = this._events;
  if (!events) return this;
  list = events[type];
  if (!list) return this;
  if (list === listener || list.listener && list.listener === listener) {
    if (--this._eventsCount === 0) this._events = new EventHandlers();else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;
    for (i = list.length; i-- > 0;) {
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }
    if (position < 0) return this;
    if (list.length === 1) {
      list[0] = undefined;
      if (--this._eventsCount === 0) {
        this._events = new EventHandlers();
        return this;
      } else {
        delete events[type];
      }
    } else {
      spliceOne(list, position);
    }
    if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
  }
  return this;
};
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events;
  events = this._events;
  if (!events) return this;

  // not listening for removeListener, no need to emit
  if (!events.removeListener) {
    if (arguments.length === 0) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    } else if (events[type]) {
      if (--this._eventsCount === 0) this._events = new EventHandlers();else delete events[type];
    }
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    var keys = Object.keys(events);
    for (var i = 0, key; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = new EventHandlers();
    this._eventsCount = 0;
    return this;
  }
  listeners = events[type];
  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    do {
      this.removeListener(type, listeners[listeners.length - 1]);
    } while (listeners[0]);
  }
  return this;
};
EventEmitter.prototype.listeners = function listeners(type) {
  var evlistener;
  var ret;
  var events = this._events;
  if (!events) ret = [];else {
    evlistener = events[type];
    if (!evlistener) ret = [];else if (typeof evlistener === 'function') ret = [evlistener.listener || evlistener];else ret = unwrapListeners(evlistener);
  }
  return ret;
};
EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;
  if (events) {
    var evlistener = events[type];
    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) list[i] = list[k];
  list.pop();
}
function arrayClone(arr, i) {
  var copy = new Array(i);
  while (i--) copy[i] = arr[i];
  return copy;
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

var events = /*#__PURE__*/Object.freeze({
    __proto__: null,
    EventEmitter: EventEmitter,
    default: EventEmitter
});

var require$$0 = /*@__PURE__*/getAugmentedNamespace(events);

var index_cjs = {};

Object.defineProperty(index_cjs, '__esModule', {
  value: true
});

/* eslint-disable no-continue */
/* eslint-disable no-unused-vars */
/* eslint-disable no-param-reassign */
/* eslint-disable no-prototype-builtins */
var errorClasses = {};
var deserializers = {};
var addCustomErrorDeserializer = function addCustomErrorDeserializer(name, deserializer) {
  deserializers[name] = deserializer;
};
var createCustomErrorClass = function createCustomErrorClass(name) {
  var C = function CustomError(message, fields) {
    Object.assign(this, fields);
    this.name = name;
    this.message = message || name;
    this.stack = new Error().stack;
  };
  C.prototype = new Error();
  errorClasses[name] = C;
  return C;
};
// inspired from https://github.com/programble/errio/blob/master/index.js
var _deserializeError = function deserializeError(object) {
  if (_typeof(object) === "object" && object) {
    try {
      // $FlowFixMe FIXME HACK
      var msg = JSON.parse(object.message);
      if (msg.message && msg.name) {
        object = msg;
      }
    } catch (e) {
      // nothing
    }
    var error = void 0;
    if (typeof object.name === "string") {
      var name_1 = object.name;
      var des = deserializers[name_1];
      if (des) {
        error = des(object);
      } else {
        var constructor = name_1 === "Error" ? Error : errorClasses[name_1];
        if (!constructor) {
          console.warn("deserializing an unknown class '" + name_1 + "'");
          constructor = createCustomErrorClass(name_1);
        }
        error = Object.create(constructor.prototype);
        try {
          for (var prop in object) {
            if (object.hasOwnProperty(prop)) {
              error[prop] = object[prop];
            }
          }
        } catch (e) {
          // sometimes setting a property can fail (e.g. .name)
        }
      }
    } else {
      error = new Error(object.message);
    }
    if (!error.stack && Error.captureStackTrace) {
      Error.captureStackTrace(error, _deserializeError);
    }
    return error;
  }
  return new Error(String(object));
};
// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js
var serializeError = function serializeError(value) {
  if (!value) return value;
  if (_typeof(value) === "object") {
    return destroyCircular(value, []);
  }
  if (typeof value === "function") {
    return "[Function: " + (value.name || "anonymous") + "]";
  }
  return value;
};
// https://www.npmjs.com/package/destroy-circular
function destroyCircular(from, seen) {
  var to = {};
  seen.push(from);
  for (var _i = 0, _a = Object.keys(from); _i < _a.length; _i++) {
    var key = _a[_i];
    var value = from[key];
    if (typeof value === "function") {
      continue;
    }
    if (!value || _typeof(value) !== "object") {
      to[key] = value;
      continue;
    }
    if (seen.indexOf(from[key]) === -1) {
      to[key] = destroyCircular(from[key], seen.slice(0));
      continue;
    }
    to[key] = "[Circular]";
  }
  if (typeof from.name === "string") {
    to.name = from.name;
  }
  if (typeof from.message === "string") {
    to.message = from.message;
  }
  if (typeof from.stack === "string") {
    to.stack = from.stack;
  }
  return to;
}
var AccountNameRequiredError = createCustomErrorClass("AccountNameRequired");
var AccountNotSupported = createCustomErrorClass("AccountNotSupported");
var AmountRequired = createCustomErrorClass("AmountRequired");
var BluetoothRequired = createCustomErrorClass("BluetoothRequired");
var BtcUnmatchedApp = createCustomErrorClass("BtcUnmatchedApp");
var CantOpenDevice = createCustomErrorClass("CantOpenDevice");
var CashAddrNotSupported = createCustomErrorClass("CashAddrNotSupported");
var CurrencyNotSupported = createCustomErrorClass("CurrencyNotSupported");
var DeviceAppVerifyNotSupported = createCustomErrorClass("DeviceAppVerifyNotSupported");
var DeviceGenuineSocketEarlyClose = createCustomErrorClass("DeviceGenuineSocketEarlyClose");
var DeviceNotGenuineError = createCustomErrorClass("DeviceNotGenuine");
var DeviceOnDashboardExpected = createCustomErrorClass("DeviceOnDashboardExpected");
var DeviceOnDashboardUnexpected = createCustomErrorClass("DeviceOnDashboardUnexpected");
var DeviceInOSUExpected = createCustomErrorClass("DeviceInOSUExpected");
var DeviceHalted = createCustomErrorClass("DeviceHalted");
var DeviceNameInvalid = createCustomErrorClass("DeviceNameInvalid");
var DeviceSocketFail = createCustomErrorClass("DeviceSocketFail");
var DeviceSocketNoBulkStatus = createCustomErrorClass("DeviceSocketNoBulkStatus");
var DisconnectedDevice = createCustomErrorClass("DisconnectedDevice");
var DisconnectedDeviceDuringOperation = createCustomErrorClass("DisconnectedDeviceDuringOperation");
var EnpointConfigError = createCustomErrorClass("EnpointConfig");
var EthAppPleaseEnableContractData = createCustomErrorClass("EthAppPleaseEnableContractData");
var FeeEstimationFailed = createCustomErrorClass("FeeEstimationFailed");
var FirmwareNotRecognized = createCustomErrorClass("FirmwareNotRecognized");
var HardResetFail = createCustomErrorClass("HardResetFail");
var InvalidXRPTag = createCustomErrorClass("InvalidXRPTag");
var InvalidAddress = createCustomErrorClass("InvalidAddress");
var InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass("InvalidAddressBecauseDestinationIsAlsoSource");
var LatestMCUInstalledError = createCustomErrorClass("LatestMCUInstalledError");
var UnknownMCU = createCustomErrorClass("UnknownMCU");
var LedgerAPIError = createCustomErrorClass("LedgerAPIError");
var LedgerAPIErrorWithMessage = createCustomErrorClass("LedgerAPIErrorWithMessage");
var LedgerAPINotAvailable = createCustomErrorClass("LedgerAPINotAvailable");
var ManagerAppAlreadyInstalledError = createCustomErrorClass("ManagerAppAlreadyInstalled");
var ManagerAppRelyOnBTCError = createCustomErrorClass("ManagerAppRelyOnBTC");
var ManagerAppDepInstallRequired = createCustomErrorClass("ManagerAppDepInstallRequired");
var ManagerAppDepUninstallRequired = createCustomErrorClass("ManagerAppDepUninstallRequired");
var ManagerDeviceLockedError = createCustomErrorClass("ManagerDeviceLocked");
var ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass("ManagerFirmwareNotEnoughSpace");
var ManagerNotEnoughSpaceError = createCustomErrorClass("ManagerNotEnoughSpace");
var ManagerUninstallBTCDep = createCustomErrorClass("ManagerUninstallBTCDep");
var NetworkDown = createCustomErrorClass("NetworkDown");
var NoAddressesFound = createCustomErrorClass("NoAddressesFound");
var NotEnoughBalance = createCustomErrorClass("NotEnoughBalance");
var NotEnoughBalanceToDelegate = createCustomErrorClass("NotEnoughBalanceToDelegate");
var NotEnoughBalanceInParentAccount = createCustomErrorClass("NotEnoughBalanceInParentAccount");
var NotEnoughSpendableBalance = createCustomErrorClass("NotEnoughSpendableBalance");
var NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass("NotEnoughBalanceBecauseDestinationNotCreated");
var NoAccessToCamera = createCustomErrorClass("NoAccessToCamera");
var NotEnoughGas = createCustomErrorClass("NotEnoughGas");
var NotSupportedLegacyAddress = createCustomErrorClass("NotSupportedLegacyAddress");
var GasLessThanEstimate = createCustomErrorClass("GasLessThanEstimate");
var PasswordsDontMatchError = createCustomErrorClass("PasswordsDontMatch");
var PasswordIncorrectError = createCustomErrorClass("PasswordIncorrect");
var RecommendSubAccountsToEmpty = createCustomErrorClass("RecommendSubAccountsToEmpty");
var RecommendUndelegation = createCustomErrorClass("RecommendUndelegation");
var TimeoutTagged = createCustomErrorClass("TimeoutTagged");
var UnexpectedBootloader = createCustomErrorClass("UnexpectedBootloader");
var MCUNotGenuineToDashboard = createCustomErrorClass("MCUNotGenuineToDashboard");
var RecipientRequired = createCustomErrorClass("RecipientRequired");
var UnavailableTezosOriginatedAccountReceive = createCustomErrorClass("UnavailableTezosOriginatedAccountReceive");
var UnavailableTezosOriginatedAccountSend = createCustomErrorClass("UnavailableTezosOriginatedAccountSend");
var UpdateFetchFileFail = createCustomErrorClass("UpdateFetchFileFail");
var UpdateIncorrectHash = createCustomErrorClass("UpdateIncorrectHash");
var UpdateIncorrectSig = createCustomErrorClass("UpdateIncorrectSig");
var UpdateYourApp = createCustomErrorClass("UpdateYourApp");
var UserRefusedDeviceNameChange = createCustomErrorClass("UserRefusedDeviceNameChange");
var UserRefusedAddress = createCustomErrorClass("UserRefusedAddress");
var UserRefusedFirmwareUpdate = createCustomErrorClass("UserRefusedFirmwareUpdate");
var UserRefusedAllowManager = createCustomErrorClass("UserRefusedAllowManager");
var UserRefusedOnDevice = createCustomErrorClass("UserRefusedOnDevice"); // TODO rename because it's just for transaction refusal
var TransportOpenUserCancelled = createCustomErrorClass("TransportOpenUserCancelled");
var TransportInterfaceNotAvailable = createCustomErrorClass("TransportInterfaceNotAvailable");
var TransportRaceCondition = createCustomErrorClass("TransportRaceCondition");
var TransportWebUSBGestureRequired = createCustomErrorClass("TransportWebUSBGestureRequired");
var DeviceShouldStayInApp = createCustomErrorClass("DeviceShouldStayInApp");
var WebsocketConnectionError = createCustomErrorClass("WebsocketConnectionError");
var WebsocketConnectionFailed = createCustomErrorClass("WebsocketConnectionFailed");
var WrongDeviceForAccount = createCustomErrorClass("WrongDeviceForAccount");
var WrongAppForCurrency = createCustomErrorClass("WrongAppForCurrency");
var ETHAddressNonEIP = createCustomErrorClass("ETHAddressNonEIP");
var CantScanQRCode = createCustomErrorClass("CantScanQRCode");
var FeeNotLoaded = createCustomErrorClass("FeeNotLoaded");
var FeeRequired = createCustomErrorClass("FeeRequired");
var FeeTooHigh = createCustomErrorClass("FeeTooHigh");
var SyncError = createCustomErrorClass("SyncError");
var PairingFailed = createCustomErrorClass("PairingFailed");
var GenuineCheckFailed = createCustomErrorClass("GenuineCheckFailed");
var LedgerAPI4xx = createCustomErrorClass("LedgerAPI4xx");
var LedgerAPI5xx = createCustomErrorClass("LedgerAPI5xx");
var FirmwareOrAppUpdateRequired = createCustomErrorClass("FirmwareOrAppUpdateRequired");
// db stuff, no need to translate
var NoDBPathGiven = createCustomErrorClass("NoDBPathGiven");
var DBWrongPassword = createCustomErrorClass("DBWrongPassword");
var DBNotReset = createCustomErrorClass("DBNotReset");
/**
 * TransportError is used for any generic transport errors.
 * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.
 */
function TransportError(message, id) {
  this.name = "TransportError";
  this.message = message;
  this.stack = new Error().stack;
  this.id = id;
}
TransportError.prototype = new Error();
addCustomErrorDeserializer("TransportError", function (e) {
  return new TransportError(e.message, e.id);
});
var StatusCodes = {
  PIN_REMAINING_ATTEMPTS: 0x63c0,
  INCORRECT_LENGTH: 0x6700,
  MISSING_CRITICAL_PARAMETER: 0x6800,
  COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,
  SECURITY_STATUS_NOT_SATISFIED: 0x6982,
  CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,
  INCORRECT_DATA: 0x6a80,
  NOT_ENOUGH_MEMORY_SPACE: 0x6a84,
  REFERENCED_DATA_NOT_FOUND: 0x6a88,
  FILE_ALREADY_EXISTS: 0x6a89,
  INCORRECT_P1_P2: 0x6b00,
  INS_NOT_SUPPORTED: 0x6d00,
  CLA_NOT_SUPPORTED: 0x6e00,
  TECHNICAL_PROBLEM: 0x6f00,
  OK: 0x9000,
  MEMORY_PROBLEM: 0x9240,
  NO_EF_SELECTED: 0x9400,
  INVALID_OFFSET: 0x9402,
  FILE_NOT_FOUND: 0x9404,
  INCONSISTENT_FILE: 0x9408,
  ALGORITHM_NOT_SUPPORTED: 0x9484,
  INVALID_KCV: 0x9485,
  CODE_NOT_INITIALIZED: 0x9802,
  ACCESS_CONDITION_NOT_FULFILLED: 0x9804,
  CONTRADICTION_SECRET_CODE_STATUS: 0x9808,
  CONTRADICTION_INVALIDATION: 0x9810,
  CODE_BLOCKED: 0x9840,
  MAX_VALUE_REACHED: 0x9850,
  GP_AUTH_FAILED: 0x6300,
  LICENSING: 0x6f42,
  HALTED: 0x6faa
};
function getAltStatusMessage(code) {
  switch (code) {
    // improve text of most common errors
    case 0x6700:
      return "Incorrect length";
    case 0x6800:
      return "Missing critical parameter";
    case 0x6982:
      return "Security not satisfied (dongle locked or have invalid access rights)";
    case 0x6985:
      return "Condition of use not satisfied (denied by the user?)";
    case 0x6a80:
      return "Invalid data received";
    case 0x6b00:
      return "Invalid parameter received";
  }
  if (0x6f00 <= code && code <= 0x6fff) {
    return "Internal error, please report";
  }
}
/**
 * Error thrown when a device returned a non success status.
 * the error.statusCode is one of the `StatusCodes` exported by this library.
 */
function TransportStatusError(statusCode) {
  this.name = "TransportStatusError";
  var statusText = Object.keys(StatusCodes).find(function (k) {
    return StatusCodes[k] === statusCode;
  }) || "UNKNOWN_ERROR";
  var smsg = getAltStatusMessage(statusCode) || statusText;
  var statusCodeStr = statusCode.toString(16);
  this.message = "Ledger device: " + smsg + " (0x" + statusCodeStr + ")";
  this.stack = new Error().stack;
  this.statusCode = statusCode;
  this.statusText = statusText;
}
TransportStatusError.prototype = new Error();
addCustomErrorDeserializer("TransportStatusError", function (e) {
  return new TransportStatusError(e.statusCode);
});
index_cjs.AccountNameRequiredError = AccountNameRequiredError;
index_cjs.AccountNotSupported = AccountNotSupported;
index_cjs.AmountRequired = AmountRequired;
index_cjs.BluetoothRequired = BluetoothRequired;
index_cjs.BtcUnmatchedApp = BtcUnmatchedApp;
index_cjs.CantOpenDevice = CantOpenDevice;
index_cjs.CantScanQRCode = CantScanQRCode;
index_cjs.CashAddrNotSupported = CashAddrNotSupported;
index_cjs.CurrencyNotSupported = CurrencyNotSupported;
index_cjs.DBNotReset = DBNotReset;
index_cjs.DBWrongPassword = DBWrongPassword;
index_cjs.DeviceAppVerifyNotSupported = DeviceAppVerifyNotSupported;
index_cjs.DeviceGenuineSocketEarlyClose = DeviceGenuineSocketEarlyClose;
index_cjs.DeviceHalted = DeviceHalted;
index_cjs.DeviceInOSUExpected = DeviceInOSUExpected;
index_cjs.DeviceNameInvalid = DeviceNameInvalid;
index_cjs.DeviceNotGenuineError = DeviceNotGenuineError;
index_cjs.DeviceOnDashboardExpected = DeviceOnDashboardExpected;
index_cjs.DeviceOnDashboardUnexpected = DeviceOnDashboardUnexpected;
index_cjs.DeviceShouldStayInApp = DeviceShouldStayInApp;
index_cjs.DeviceSocketFail = DeviceSocketFail;
index_cjs.DeviceSocketNoBulkStatus = DeviceSocketNoBulkStatus;
index_cjs.DisconnectedDevice = DisconnectedDevice;
index_cjs.DisconnectedDeviceDuringOperation = DisconnectedDeviceDuringOperation;
index_cjs.ETHAddressNonEIP = ETHAddressNonEIP;
index_cjs.EnpointConfigError = EnpointConfigError;
index_cjs.EthAppPleaseEnableContractData = EthAppPleaseEnableContractData;
index_cjs.FeeEstimationFailed = FeeEstimationFailed;
index_cjs.FeeNotLoaded = FeeNotLoaded;
index_cjs.FeeRequired = FeeRequired;
index_cjs.FeeTooHigh = FeeTooHigh;
index_cjs.FirmwareNotRecognized = FirmwareNotRecognized;
index_cjs.FirmwareOrAppUpdateRequired = FirmwareOrAppUpdateRequired;
index_cjs.GasLessThanEstimate = GasLessThanEstimate;
index_cjs.GenuineCheckFailed = GenuineCheckFailed;
index_cjs.HardResetFail = HardResetFail;
index_cjs.InvalidAddress = InvalidAddress;
index_cjs.InvalidAddressBecauseDestinationIsAlsoSource = InvalidAddressBecauseDestinationIsAlsoSource;
index_cjs.InvalidXRPTag = InvalidXRPTag;
index_cjs.LatestMCUInstalledError = LatestMCUInstalledError;
index_cjs.LedgerAPI4xx = LedgerAPI4xx;
index_cjs.LedgerAPI5xx = LedgerAPI5xx;
index_cjs.LedgerAPIError = LedgerAPIError;
index_cjs.LedgerAPIErrorWithMessage = LedgerAPIErrorWithMessage;
index_cjs.LedgerAPINotAvailable = LedgerAPINotAvailable;
index_cjs.MCUNotGenuineToDashboard = MCUNotGenuineToDashboard;
index_cjs.ManagerAppAlreadyInstalledError = ManagerAppAlreadyInstalledError;
index_cjs.ManagerAppDepInstallRequired = ManagerAppDepInstallRequired;
index_cjs.ManagerAppDepUninstallRequired = ManagerAppDepUninstallRequired;
index_cjs.ManagerAppRelyOnBTCError = ManagerAppRelyOnBTCError;
index_cjs.ManagerDeviceLockedError = ManagerDeviceLockedError;
index_cjs.ManagerFirmwareNotEnoughSpaceError = ManagerFirmwareNotEnoughSpaceError;
index_cjs.ManagerNotEnoughSpaceError = ManagerNotEnoughSpaceError;
index_cjs.ManagerUninstallBTCDep = ManagerUninstallBTCDep;
index_cjs.NetworkDown = NetworkDown;
index_cjs.NoAccessToCamera = NoAccessToCamera;
index_cjs.NoAddressesFound = NoAddressesFound;
index_cjs.NoDBPathGiven = NoDBPathGiven;
index_cjs.NotEnoughBalance = NotEnoughBalance;
index_cjs.NotEnoughBalanceBecauseDestinationNotCreated = NotEnoughBalanceBecauseDestinationNotCreated;
index_cjs.NotEnoughBalanceInParentAccount = NotEnoughBalanceInParentAccount;
index_cjs.NotEnoughBalanceToDelegate = NotEnoughBalanceToDelegate;
index_cjs.NotEnoughGas = NotEnoughGas;
index_cjs.NotEnoughSpendableBalance = NotEnoughSpendableBalance;
index_cjs.NotSupportedLegacyAddress = NotSupportedLegacyAddress;
index_cjs.PairingFailed = PairingFailed;
index_cjs.PasswordIncorrectError = PasswordIncorrectError;
index_cjs.PasswordsDontMatchError = PasswordsDontMatchError;
index_cjs.RecipientRequired = RecipientRequired;
index_cjs.RecommendSubAccountsToEmpty = RecommendSubAccountsToEmpty;
index_cjs.RecommendUndelegation = RecommendUndelegation;
index_cjs.StatusCodes = StatusCodes;
index_cjs.SyncError = SyncError;
index_cjs.TimeoutTagged = TimeoutTagged;
index_cjs.TransportError = TransportError;
index_cjs.TransportInterfaceNotAvailable = TransportInterfaceNotAvailable;
index_cjs.TransportOpenUserCancelled = TransportOpenUserCancelled;
index_cjs.TransportRaceCondition = TransportRaceCondition;
index_cjs.TransportStatusError = TransportStatusError;
index_cjs.TransportWebUSBGestureRequired = TransportWebUSBGestureRequired;
index_cjs.UnavailableTezosOriginatedAccountReceive = UnavailableTezosOriginatedAccountReceive;
index_cjs.UnavailableTezosOriginatedAccountSend = UnavailableTezosOriginatedAccountSend;
index_cjs.UnexpectedBootloader = UnexpectedBootloader;
index_cjs.UnknownMCU = UnknownMCU;
index_cjs.UpdateFetchFileFail = UpdateFetchFileFail;
index_cjs.UpdateIncorrectHash = UpdateIncorrectHash;
index_cjs.UpdateIncorrectSig = UpdateIncorrectSig;
index_cjs.UpdateYourApp = UpdateYourApp;
index_cjs.UserRefusedAddress = UserRefusedAddress;
index_cjs.UserRefusedAllowManager = UserRefusedAllowManager;
index_cjs.UserRefusedDeviceNameChange = UserRefusedDeviceNameChange;
index_cjs.UserRefusedFirmwareUpdate = UserRefusedFirmwareUpdate;
index_cjs.UserRefusedOnDevice = UserRefusedOnDevice;
index_cjs.WebsocketConnectionError = WebsocketConnectionError;
index_cjs.WebsocketConnectionFailed = WebsocketConnectionFailed;
index_cjs.WrongAppForCurrency = WrongAppForCurrency;
index_cjs.WrongDeviceForAccount = WrongDeviceForAccount;
index_cjs.addCustomErrorDeserializer = addCustomErrorDeserializer;
index_cjs.createCustomErrorClass = createCustomErrorClass;
index_cjs.deserializeError = _deserializeError;
index_cjs.getAltStatusMessage = getAltStatusMessage;
index_cjs.serializeError = serializeError;

(function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "TransportError", {
    enumerable: true,
    get: function get() {
      return _errors.TransportError;
    }
  });
  Object.defineProperty(exports, "StatusCodes", {
    enumerable: true,
    get: function get() {
      return _errors.StatusCodes;
    }
  });
  Object.defineProperty(exports, "getAltStatusMessage", {
    enumerable: true,
    get: function get() {
      return _errors.getAltStatusMessage;
    }
  });
  Object.defineProperty(exports, "TransportStatusError", {
    enumerable: true,
    get: function get() {
      return _errors.TransportStatusError;
    }
  });
  exports["default"] = void 0;
  var _events = _interopRequireDefault(require$$0);
  var _errors = index_cjs;
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }

  /**
   * Transport defines the generic interface to share between node/u2f impl
   * A **Descriptor** is a parametric type that is up to be determined for the implementation.
   * it can be for instance an ID, an file path, a URL,...
   */
  var Transport = /*#__PURE__*/function () {
    function Transport() {
      var _this = this;
      _classCallCheck(this, Transport);
      this.exchangeTimeout = 30000;
      this.unresponsiveTimeout = 15000;
      this.deviceModel = null;
      this._events = new _events["default"]();
      this.send = /*#__PURE__*/function () {
        var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(cla, ins, p1, p2) {
          var data,
            statusList,
            response,
            sw,
            _args = arguments;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                data = _args.length > 4 && _args[4] !== undefined ? _args[4] : Buffer.alloc(0);
                statusList = _args.length > 5 && _args[5] !== undefined ? _args[5] : [_errors.StatusCodes.OK];
                if (!(data.length >= 256)) {
                  _context.next = 4;
                  break;
                }
                throw new _errors.TransportError("data.length exceed 256 bytes limit. Got: " + data.length, "DataLengthTooBig");
              case 4:
                _context.next = 6;
                return _this.exchange(Buffer.concat([Buffer.from([cla, ins, p1, p2]), Buffer.from([data.length]), data]));
              case 6:
                response = _context.sent;
                sw = response.readUInt16BE(response.length - 2);
                if (statusList.some(function (s) {
                  return s === sw;
                })) {
                  _context.next = 10;
                  break;
                }
                throw new _errors.TransportStatusError(sw);
              case 10:
                return _context.abrupt("return", response);
              case 11:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function (_x, _x2, _x3, _x4) {
          return _ref.apply(this, arguments);
        };
      }();
      this.exchangeBusyPromise = void 0;
      this.exchangeAtomicImpl = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(f) {
          var resolveBusy, busyPromise, unresponsiveReached, timeout, res;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                if (!_this.exchangeBusyPromise) {
                  _context2.next = 2;
                  break;
                }
                throw new _errors.TransportRaceCondition("An action was already pending on the Ledger device. Please deny or reconnect.");
              case 2:
                busyPromise = new Promise(function (r) {
                  resolveBusy = r;
                });
                _this.exchangeBusyPromise = busyPromise;
                unresponsiveReached = false;
                timeout = setTimeout(function () {
                  unresponsiveReached = true;
                  _this.emit("unresponsive");
                }, _this.unresponsiveTimeout);
                _context2.prev = 6;
                _context2.next = 9;
                return f();
              case 9:
                res = _context2.sent;
                if (unresponsiveReached) {
                  _this.emit("responsive");
                }
                return _context2.abrupt("return", res);
              case 12:
                _context2.prev = 12;
                clearTimeout(timeout);
                if (resolveBusy) resolveBusy();
                _this.exchangeBusyPromise = null;
                return _context2.finish(12);
              case 17:
              case "end":
                return _context2.stop();
            }
          }, _callee2, null, [[6,, 12, 17]]);
        }));
        return function (_x5) {
          return _ref2.apply(this, arguments);
        };
      }();
      this._appAPIlock = null;
    }

    /**
     * low level api to communicate with the device
     * This method is for implementations to implement but should not be directly called.
     * Instead, the recommanded way is to use send() method
     * @param apdu the data to send
     * @return a Promise of response data
     */
    return _createClass(Transport, [{
      key: "exchange",
      value: function exchange(_apdu) {
        throw new Error("exchange not implemented");
      }
      /**
       * set the "scramble key" for the next exchanges with the device.
       * Each App can have a different scramble key and they internally will set it at instanciation.
       * @param key the scramble key
       */
    }, {
      key: "setScrambleKey",
      value: function setScrambleKey(_key) {}
      /**
       * close the exchange with the device.
       * @return a Promise that ends when the transport is closed.
       */
    }, {
      key: "close",
      value: function close() {
        return Promise.resolve();
      }

      /**
       * Listen to an event on an instance of transport.
       * Transport implementation can have specific events. Here is the common events:
       * * `"disconnect"` : triggered if Transport is disconnected
       */
    }, {
      key: "on",
      value: function on(eventName, cb) {
        this._events.on(eventName, cb);
      }
      /**
       * Stop listening to an event on an instance of transport.
       */
    }, {
      key: "off",
      value: function off(eventName, cb) {
        this._events.removeListener(eventName, cb);
      }
    }, {
      key: "emit",
      value: function emit(event) {
        var _this$_events;
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        (_this$_events = this._events).emit.apply(_this$_events, [event].concat(args));
      }
      /**
       * Enable or not logs of the binary exchange
       */
    }, {
      key: "setDebugMode",
      value: function setDebugMode() {
        console.warn("setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.");
      }
      /**
       * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)
       */
    }, {
      key: "setExchangeTimeout",
      value: function setExchangeTimeout(exchangeTimeout) {
        this.exchangeTimeout = exchangeTimeout;
      }
      /**
       * Define the delay before emitting "unresponsive" on an exchange that does not respond
       */
    }, {
      key: "setExchangeUnresponsiveTimeout",
      value: function setExchangeUnresponsiveTimeout(unresponsiveTimeout) {
        this.unresponsiveTimeout = unresponsiveTimeout;
      }
      /**
       * wrapper on top of exchange to simplify work of the implementation.
       * @param cla
       * @param ins
       * @param p1
       * @param p2
       * @param data
       * @param statusList is a list of accepted status code (shorts). [0x9000] by default
       * @return a Promise of response buffer
       */

      /**
       * create() allows to open the first descriptor available or
       * throw if there is none or if timeout is reached.
       * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)
       * @example
      TransportFoo.create().then(transport => ...)
       */
    }, {
      key: "decorateAppAPIMethods",
      value: function decorateAppAPIMethods(self, methods, scrambleKey) {
        var _iterator = _createForOfIteratorHelper(methods),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var methodName = _step.value;
            self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "decorateAppAPIMethod",
      value: function decorateAppAPIMethod(methodName, f, ctx, scrambleKey) {
        var _this2 = this;
        return /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
          var _appAPIlock,
            _len2,
            args,
            _key3,
            _args3 = arguments;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                _appAPIlock = _this2._appAPIlock;
                if (!_appAPIlock) {
                  _context3.next = 3;
                  break;
                }
                return _context3.abrupt("return", Promise.reject(new _errors.TransportError("Ledger Device is busy (lock " + _appAPIlock + ")", "TransportLocked")));
              case 3:
                _context3.prev = 3;
                _this2._appAPIlock = methodName;
                _this2.setScrambleKey(scrambleKey);
                for (_len2 = _args3.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
                  args[_key3] = _args3[_key3];
                }
                _context3.next = 9;
                return f.apply(ctx, args);
              case 9:
                return _context3.abrupt("return", _context3.sent);
              case 10:
                _context3.prev = 10;
                _this2._appAPIlock = null;
                return _context3.finish(10);
              case 13:
              case "end":
                return _context3.stop();
            }
          }, _callee3, null, [[3,, 10, 13]]);
        }));
      }
    }], [{
      key: "create",
      value: function create() {
        var _this3 = this;
        var openTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;
        var listenTimeout = arguments.length > 1 ? arguments[1] : undefined;
        return new Promise(function (resolve, reject) {
          var found = false;
          var sub = _this3.listen({
            next: function next(e) {
              found = true;
              if (sub) sub.unsubscribe();
              if (listenTimeoutId) clearTimeout(listenTimeoutId);
              _this3.open(e.descriptor, openTimeout).then(resolve, reject);
            },
            error: function error(e) {
              if (listenTimeoutId) clearTimeout(listenTimeoutId);
              reject(e);
            },
            complete: function complete() {
              if (listenTimeoutId) clearTimeout(listenTimeoutId);
              if (!found) {
                reject(new _errors.TransportError(_this3.ErrorMessage_NoDeviceFound, "NoDeviceFound"));
              }
            }
          });
          var listenTimeoutId = listenTimeout ? setTimeout(function () {
            sub.unsubscribe();
            reject(new _errors.TransportError(_this3.ErrorMessage_ListenTimeout, "ListenTimeout"));
          }, listenTimeout) : null;
        });
      }
    }]);
  }();
  exports["default"] = Transport;
  Transport.isSupported = void 0;
  Transport.list = void 0;
  Transport.listen = void 0;
  Transport.open = void 0;
  Transport.ErrorMessage_ListenTimeout = "No Ledger device found (timeout)";
  Transport.ErrorMessage_NoDeviceFound = "No Ledger device found";
})(Transport);

var hidFraming = {};

Object.defineProperty(hidFraming, "__esModule", {
  value: true
});
hidFraming["default"] = void 0;
var _errors$4 = index_cjs;
var Tag = 0x05;
function asUInt16BE(value) {
  var b = Buffer.alloc(2);
  b.writeUInt16BE(value, 0);
  return b;
}
var initialAcc = {
  data: Buffer.alloc(0),
  dataLength: 0,
  sequence: 0
};
/**
 *
 */

var createHIDframing = function createHIDframing(channel, packetSize) {
  return {
    makeBlocks: function makeBlocks(apdu) {
      var data = Buffer.concat([asUInt16BE(apdu.length), apdu]);
      var blockSize = packetSize - 5;
      var nbBlocks = Math.ceil(data.length / blockSize);
      data = Buffer.concat([data,
      // fill data with padding
      Buffer.alloc(nbBlocks * blockSize - data.length + 1).fill(0)]);
      var blocks = [];
      for (var i = 0; i < nbBlocks; i++) {
        var head = Buffer.alloc(5);
        head.writeUInt16BE(channel, 0);
        head.writeUInt8(Tag, 2);
        head.writeUInt16BE(i, 3);
        var chunk = data.slice(i * blockSize, (i + 1) * blockSize);
        blocks.push(Buffer.concat([head, chunk]));
      }
      return blocks;
    },
    reduceResponse: function reduceResponse(acc, chunk) {
      var _ref = acc || initialAcc,
        data = _ref.data,
        dataLength = _ref.dataLength,
        sequence = _ref.sequence;
      if (chunk.readUInt16BE(0) !== channel) {
        throw new _errors$4.TransportError("Invalid channel", "InvalidChannel");
      }
      if (chunk.readUInt8(2) !== Tag) {
        throw new _errors$4.TransportError("Invalid tag", "InvalidTag");
      }
      if (chunk.readUInt16BE(3) !== sequence) {
        throw new _errors$4.TransportError("Invalid sequence", "InvalidSequence");
      }
      if (!acc) {
        dataLength = chunk.readUInt16BE(5);
      }
      sequence++;
      var chunkData = chunk.slice(acc ? 5 : 7);
      data = Buffer.concat([data, chunkData]);
      if (data.length > dataLength) {
        data = data.slice(0, dataLength);
      }
      return {
        data: data,
        dataLength: dataLength,
        sequence: sequence
      };
    },
    getReducedResult: function getReducedResult(acc) {
      if (acc && acc.dataLength === acc.data.length) {
        return acc.data;
      }
    }
  };
};
var _default = createHIDframing;
hidFraming["default"] = _default;

var lib$1 = {};

var re$2 = {exports: {}};

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
var SEMVER_SPEC_VERSION = '2.0.0';
var MAX_LENGTH$1 = 256;
var MAX_SAFE_INTEGER$1 = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */9007199254740991;

// Max safe segment length for coercion.
var MAX_SAFE_COMPONENT_LENGTH = 16;

// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH$1 - 6;
var RELEASE_TYPES = ['major', 'premajor', 'minor', 'preminor', 'patch', 'prepatch', 'prerelease'];
var constants$1 = {
  MAX_LENGTH: MAX_LENGTH$1,
  MAX_SAFE_COMPONENT_LENGTH: MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH: MAX_SAFE_BUILD_LENGTH,
  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$1,
  RELEASE_TYPES: RELEASE_TYPES,
  SEMVER_SPEC_VERSION: SEMVER_SPEC_VERSION,
  FLAG_INCLUDE_PRERELEASE: 1,
  FLAG_LOOSE: 2
};

// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
if (typeof global$1.setTimeout === 'function') {
  cachedSetTimeout = setTimeout;
}
if (typeof global$1.clearTimeout === 'function') {
  cachedClearTimeout = clearTimeout;
}
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  }
  // if setTimeout wasn't available but was latter defined
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  }
  // if clearTimeout wasn't available but was latter defined
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue$1 = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue$1 = currentQueue.concat(queue$1);
  } else {
    queueIndex = -1;
  }
  if (queue$1.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue$1.length;
  while (len) {
    currentQueue = queue$1;
    queue$1 = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue$1.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
function nextTick(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue$1.push(new Item(fun, args));
  if (queue$1.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}
// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};
var title = 'browser';
var platform = 'browser';
var browser = true;
var env = {};
var argv = [];
var version$1 = ''; // empty string to avoid regexp issues
var versions = {};
var release = {};
var config$1 = {};
function noop$2() {}
var on = noop$2;
var addListener = noop$2;
var once = noop$2;
var off = noop$2;
var removeListener = noop$2;
var removeAllListeners = noop$2;
var emit = noop$2;
function binding(name) {
  throw new Error('process.binding is not supported');
}
function cwd() {
  return '/';
}
function chdir(dir) {
  throw new Error('process.chdir is not supported');
}
function umask() {
  return 0;
}

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance = global$1.performance || {};
var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {
  return new Date().getTime();
};

// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime(previousTimestamp) {
  var clocktime = performanceNow.call(performance) * 1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds, nanoseconds];
}
var startTime = new Date();
function uptime() {
  var currentTime = new Date();
  var dif = currentTime - startTime;
  return dif / 1000;
}
var process$1 = {
  nextTick: nextTick,
  title: title,
  browser: browser,
  env: env,
  argv: argv,
  version: version$1,
  versions: versions,
  on: on,
  addListener: addListener,
  once: once,
  off: off,
  removeListener: removeListener,
  removeAllListeners: removeAllListeners,
  emit: emit,
  binding: binding,
  cwd: cwd,
  chdir: chdir,
  umask: umask,
  hrtime: hrtime,
  platform: platform,
  release: release,
  config: config$1,
  uptime: uptime
};

var debug$1 = (typeof process$1 === "undefined" ? "undefined" : _typeof(process$1)) === 'object' && process$1.env && process$1.env.NODE_DEBUG && /\bsemver\b/i.test(process$1.env.NODE_DEBUG) ? function () {
  var _console;
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return (_console = console).error.apply(_console, ['SEMVER'].concat(args));
} : function () {};
var debug_1 = debug$1;

(function (module, exports) {
  var MAX_SAFE_COMPONENT_LENGTH = constants$1.MAX_SAFE_COMPONENT_LENGTH,
    MAX_SAFE_BUILD_LENGTH = constants$1.MAX_SAFE_BUILD_LENGTH,
    MAX_LENGTH = constants$1.MAX_LENGTH;
  var debug = debug_1;
  exports = module.exports = {};

  // The actual regexps go on exports.re
  var re = exports.re = [];
  var safeRe = exports.safeRe = [];
  var src = exports.src = [];
  var t = exports.t = {};
  var R = 0;
  var LETTERDASHNUMBER = '[a-zA-Z0-9-]';

  // Replace some greedy regex tokens to prevent regex dos issues. These regex are
  // used internally via the safeRe object since all inputs in this library get
  // normalized first to trim and collapse all extra whitespace. The original
  // regexes are exported for userland consumption and lower level usage. A
  // future breaking change could export the safer regex only with a note that
  // all input should have extra whitespace removed.
  var safeRegexReplacements = [['\\s', 1], ['\\d', MAX_LENGTH], [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]];
  var makeSafeRegex = function makeSafeRegex(value) {
    for (var _i = 0, _safeRegexReplacement = safeRegexReplacements; _i < _safeRegexReplacement.length; _i++) {
      var _safeRegexReplacement2 = _slicedToArray(_safeRegexReplacement[_i], 2),
        token = _safeRegexReplacement2[0],
        max = _safeRegexReplacement2[1];
      value = value.split("".concat(token, "*")).join("".concat(token, "{0,").concat(max, "}")).split("".concat(token, "+")).join("".concat(token, "{1,").concat(max, "}"));
    }
    return value;
  };
  var createToken = function createToken(name, value, isGlobal) {
    var safe = makeSafeRegex(value);
    var index = R++;
    debug(name, index, value);
    t[name] = index;
    src[index] = value;
    re[index] = new RegExp(value, isGlobal ? 'g' : undefined);
    safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined);
  };

  // The following Regular Expressions can be used for tokenizing,
  // validating, and parsing SemVer version strings.

  // ## Numeric Identifier
  // A single `0`, or a non-zero digit followed by zero or more digits.

  createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*');
  createToken('NUMERICIDENTIFIERLOOSE', '\\d+');

  // ## Non-numeric Identifier
  // Zero or more digits, followed by a letter or hyphen, and then zero or
  // more letters, digits, or hyphens.

  createToken('NONNUMERICIDENTIFIER', "\\d*[a-zA-Z-]".concat(LETTERDASHNUMBER, "*"));

  // ## Main Version
  // Three dot-separated numeric identifiers.

  createToken('MAINVERSION', "(".concat(src[t.NUMERICIDENTIFIER], ")\\.") + "(".concat(src[t.NUMERICIDENTIFIER], ")\\.") + "(".concat(src[t.NUMERICIDENTIFIER], ")"));
  createToken('MAINVERSIONLOOSE', "(".concat(src[t.NUMERICIDENTIFIERLOOSE], ")\\.") + "(".concat(src[t.NUMERICIDENTIFIERLOOSE], ")\\.") + "(".concat(src[t.NUMERICIDENTIFIERLOOSE], ")"));

  // ## Pre-release Version Identifier
  // A numeric identifier, or a non-numeric identifier.

  createToken('PRERELEASEIDENTIFIER', "(?:".concat(src[t.NUMERICIDENTIFIER], "|").concat(src[t.NONNUMERICIDENTIFIER], ")"));
  createToken('PRERELEASEIDENTIFIERLOOSE', "(?:".concat(src[t.NUMERICIDENTIFIERLOOSE], "|").concat(src[t.NONNUMERICIDENTIFIER], ")"));

  // ## Pre-release Version
  // Hyphen, followed by one or more dot-separated pre-release version
  // identifiers.

  createToken('PRERELEASE', "(?:-(".concat(src[t.PRERELEASEIDENTIFIER], "(?:\\.").concat(src[t.PRERELEASEIDENTIFIER], ")*))"));
  createToken('PRERELEASELOOSE', "(?:-?(".concat(src[t.PRERELEASEIDENTIFIERLOOSE], "(?:\\.").concat(src[t.PRERELEASEIDENTIFIERLOOSE], ")*))"));

  // ## Build Metadata Identifier
  // Any combination of digits, letters, or hyphens.

  createToken('BUILDIDENTIFIER', "".concat(LETTERDASHNUMBER, "+"));

  // ## Build Metadata
  // Plus sign, followed by one or more period-separated build metadata
  // identifiers.

  createToken('BUILD', "(?:\\+(".concat(src[t.BUILDIDENTIFIER], "(?:\\.").concat(src[t.BUILDIDENTIFIER], ")*))"));

  // ## Full Version String
  // A main version, followed optionally by a pre-release version and
  // build metadata.

  // Note that the only major, minor, patch, and pre-release sections of
  // the version string are capturing groups.  The build metadata is not a
  // capturing group, because it should not ever be used in version
  // comparison.

  createToken('FULLPLAIN', "v?".concat(src[t.MAINVERSION]).concat(src[t.PRERELEASE], "?").concat(src[t.BUILD], "?"));
  createToken('FULL', "^".concat(src[t.FULLPLAIN], "$"));

  // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
  // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
  // common in the npm registry.
  createToken('LOOSEPLAIN', "[v=\\s]*".concat(src[t.MAINVERSIONLOOSE]).concat(src[t.PRERELEASELOOSE], "?").concat(src[t.BUILD], "?"));
  createToken('LOOSE', "^".concat(src[t.LOOSEPLAIN], "$"));
  createToken('GTLT', '((?:<|>)?=?)');

  // Something like "2.*" or "1.2.x".
  // Note that "x.x" is a valid xRange identifer, meaning "any version"
  // Only the first item is strictly required.
  createToken('XRANGEIDENTIFIERLOOSE', "".concat(src[t.NUMERICIDENTIFIERLOOSE], "|x|X|\\*"));
  createToken('XRANGEIDENTIFIER', "".concat(src[t.NUMERICIDENTIFIER], "|x|X|\\*"));
  createToken('XRANGEPLAIN', "[v=\\s]*(".concat(src[t.XRANGEIDENTIFIER], ")") + "(?:\\.(".concat(src[t.XRANGEIDENTIFIER], ")") + "(?:\\.(".concat(src[t.XRANGEIDENTIFIER], ")") + "(?:".concat(src[t.PRERELEASE], ")?").concat(src[t.BUILD], "?") + ")?)?");
  createToken('XRANGEPLAINLOOSE', "[v=\\s]*(".concat(src[t.XRANGEIDENTIFIERLOOSE], ")") + "(?:\\.(".concat(src[t.XRANGEIDENTIFIERLOOSE], ")") + "(?:\\.(".concat(src[t.XRANGEIDENTIFIERLOOSE], ")") + "(?:".concat(src[t.PRERELEASELOOSE], ")?").concat(src[t.BUILD], "?") + ")?)?");
  createToken('XRANGE', "^".concat(src[t.GTLT], "\\s*").concat(src[t.XRANGEPLAIN], "$"));
  createToken('XRANGELOOSE', "^".concat(src[t.GTLT], "\\s*").concat(src[t.XRANGEPLAINLOOSE], "$"));

  // Coercion.
  // Extract anything that could conceivably be a part of a valid semver
  createToken('COERCEPLAIN', "".concat('(^|[^\\d])' + '(\\d{1,').concat(MAX_SAFE_COMPONENT_LENGTH, "})") + "(?:\\.(\\d{1,".concat(MAX_SAFE_COMPONENT_LENGTH, "}))?") + "(?:\\.(\\d{1,".concat(MAX_SAFE_COMPONENT_LENGTH, "}))?"));
  createToken('COERCE', "".concat(src[t.COERCEPLAIN], "(?:$|[^\\d])"));
  createToken('COERCEFULL', src[t.COERCEPLAIN] + "(?:".concat(src[t.PRERELEASE], ")?") + "(?:".concat(src[t.BUILD], ")?") + "(?:$|[^\\d])");
  createToken('COERCERTL', src[t.COERCE], true);
  createToken('COERCERTLFULL', src[t.COERCEFULL], true);

  // Tilde ranges.
  // Meaning is "reasonably at or greater than"
  createToken('LONETILDE', '(?:~>?)');
  createToken('TILDETRIM', "(\\s*)".concat(src[t.LONETILDE], "\\s+"), true);
  exports.tildeTrimReplace = '$1~';
  createToken('TILDE', "^".concat(src[t.LONETILDE]).concat(src[t.XRANGEPLAIN], "$"));
  createToken('TILDELOOSE', "^".concat(src[t.LONETILDE]).concat(src[t.XRANGEPLAINLOOSE], "$"));

  // Caret ranges.
  // Meaning is "at least and backwards compatible with"
  createToken('LONECARET', '(?:\\^)');
  createToken('CARETTRIM', "(\\s*)".concat(src[t.LONECARET], "\\s+"), true);
  exports.caretTrimReplace = '$1^';
  createToken('CARET', "^".concat(src[t.LONECARET]).concat(src[t.XRANGEPLAIN], "$"));
  createToken('CARETLOOSE', "^".concat(src[t.LONECARET]).concat(src[t.XRANGEPLAINLOOSE], "$"));

  // A simple gt/lt/eq thing, or just "" to indicate "any version"
  createToken('COMPARATORLOOSE', "^".concat(src[t.GTLT], "\\s*(").concat(src[t.LOOSEPLAIN], ")$|^$"));
  createToken('COMPARATOR', "^".concat(src[t.GTLT], "\\s*(").concat(src[t.FULLPLAIN], ")$|^$"));

  // An expression to strip any whitespace between the gtlt and the thing
  // it modifies, so that `> 1.2.3` ==> `>1.2.3`
  createToken('COMPARATORTRIM', "(\\s*)".concat(src[t.GTLT], "\\s*(").concat(src[t.LOOSEPLAIN], "|").concat(src[t.XRANGEPLAIN], ")"), true);
  exports.comparatorTrimReplace = '$1$2$3';

  // Something like `1.2.3 - 1.2.4`
  // Note that these all use the loose form, because they'll be
  // checked against either the strict or loose comparator form
  // later.
  createToken('HYPHENRANGE', "^\\s*(".concat(src[t.XRANGEPLAIN], ")") + "\\s+-\\s+" + "(".concat(src[t.XRANGEPLAIN], ")") + "\\s*$");
  createToken('HYPHENRANGELOOSE', "^\\s*(".concat(src[t.XRANGEPLAINLOOSE], ")") + "\\s+-\\s+" + "(".concat(src[t.XRANGEPLAINLOOSE], ")") + "\\s*$");

  // Star ranges basically just allow anything at all.
  createToken('STAR', '(<|>)?=?\\s*\\*');
  // >=0.0.0 is like a star
  createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$');
  createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$');
})(re$2, re$2.exports);
var reExports = re$2.exports;

// parse out just the options we care about
var looseOption = Object.freeze({
  loose: true
});
var emptyOpts = Object.freeze({});
var parseOptions$1 = function parseOptions(options) {
  if (!options) {
    return emptyOpts;
  }
  if (_typeof(options) !== 'object') {
    return looseOption;
  }
  return options;
};
var parseOptions_1 = parseOptions$1;

var numeric = /^[0-9]+$/;
var compareIdentifiers$1 = function compareIdentifiers(a, b) {
  var anum = numeric.test(a);
  var bnum = numeric.test(b);
  if (anum && bnum) {
    a = +a;
    b = +b;
  }
  return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
};
var rcompareIdentifiers = function rcompareIdentifiers(a, b) {
  return compareIdentifiers$1(b, a);
};
var identifiers$1 = {
  compareIdentifiers: compareIdentifiers$1,
  rcompareIdentifiers: rcompareIdentifiers
};

var debug = debug_1;
var MAX_LENGTH = constants$1.MAX_LENGTH,
  MAX_SAFE_INTEGER = constants$1.MAX_SAFE_INTEGER;
var re$1 = reExports.safeRe,
  t$1 = reExports.t;
var parseOptions = parseOptions_1;
var compareIdentifiers = identifiers$1.compareIdentifiers;
var SemVer$d = /*#__PURE__*/function () {
  function SemVer(version, options) {
    _classCallCheck(this, SemVer);
    options = parseOptions(options);
    if (version instanceof SemVer) {
      if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {
        return version;
      } else {
        version = version.version;
      }
    } else if (typeof version !== 'string') {
      throw new TypeError("Invalid version. Must be a string. Got type \"".concat(_typeof(version), "\"."));
    }
    if (version.length > MAX_LENGTH) {
      throw new TypeError("version is longer than ".concat(MAX_LENGTH, " characters"));
    }
    debug('SemVer', version, options);
    this.options = options;
    this.loose = !!options.loose;
    // this isn't actually relevant for versions, but keep it so that we
    // don't run into trouble passing this.options around.
    this.includePrerelease = !!options.includePrerelease;
    var m = version.trim().match(options.loose ? re$1[t$1.LOOSE] : re$1[t$1.FULL]);
    if (!m) {
      throw new TypeError("Invalid Version: ".concat(version));
    }
    this.raw = version;

    // these are actually numbers
    this.major = +m[1];
    this.minor = +m[2];
    this.patch = +m[3];
    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError('Invalid major version');
    }
    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError('Invalid minor version');
    }
    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError('Invalid patch version');
    }

    // numberify any prerelease numeric ids
    if (!m[4]) {
      this.prerelease = [];
    } else {
      this.prerelease = m[4].split('.').map(function (id) {
        if (/^[0-9]+$/.test(id)) {
          var num = +id;
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num;
          }
        }
        return id;
      });
    }
    this.build = m[5] ? m[5].split('.') : [];
    this.format();
  }
  return _createClass(SemVer, [{
    key: "format",
    value: function format() {
      this.version = "".concat(this.major, ".").concat(this.minor, ".").concat(this.patch);
      if (this.prerelease.length) {
        this.version += "-".concat(this.prerelease.join('.'));
      }
      return this.version;
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.version;
    }
  }, {
    key: "compare",
    value: function compare(other) {
      debug('SemVer.compare', this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        if (typeof other === 'string' && other === this.version) {
          return 0;
        }
        other = new SemVer(other, this.options);
      }
      if (other.version === this.version) {
        return 0;
      }
      return this.compareMain(other) || this.comparePre(other);
    }
  }, {
    key: "compareMain",
    value: function compareMain(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    }
  }, {
    key: "comparePre",
    value: function comparePre(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }

      // NOT having a prerelease is > having one
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      var i = 0;
      do {
        var a = this.prerelease[i];
        var b = other.prerelease[i];
        debug('prerelease compare', i, a, b);
        if (a === undefined && b === undefined) {
          return 0;
        } else if (b === undefined) {
          return 1;
        } else if (a === undefined) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i);
    }
  }, {
    key: "compareBuild",
    value: function compareBuild(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      var i = 0;
      do {
        var a = this.build[i];
        var b = other.build[i];
        debug('build compare', i, a, b);
        if (a === undefined && b === undefined) {
          return 0;
        } else if (b === undefined) {
          return 1;
        } else if (a === undefined) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i);
    }

    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
  }, {
    key: "inc",
    value: function inc(release, identifier, identifierBase) {
      switch (release) {
        case 'premajor':
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc('pre', identifier, identifierBase);
          break;
        case 'preminor':
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc('pre', identifier, identifierBase);
          break;
        case 'prepatch':
          // If this is already a prerelease, it will bump to the next version
          // drop any prereleases that might already exist, since they are not
          // relevant at this point.
          this.prerelease.length = 0;
          this.inc('patch', identifier, identifierBase);
          this.inc('pre', identifier, identifierBase);
          break;
        // If the input is a non-prerelease version, this acts the same as
        // prepatch.
        case 'prerelease':
          if (this.prerelease.length === 0) {
            this.inc('patch', identifier, identifierBase);
          }
          this.inc('pre', identifier, identifierBase);
          break;
        case 'major':
          // If this is a pre-major version, bump up to the same major version.
          // Otherwise increment major.
          // 1.0.0-5 bumps to 1.0.0
          // 1.1.0 bumps to 2.0.0
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case 'minor':
          // If this is a pre-minor version, bump up to the same minor version.
          // Otherwise increment minor.
          // 1.2.0-5 bumps to 1.2.0
          // 1.2.1 bumps to 1.3.0
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case 'patch':
          // If this is not a pre-release version, it will increment the patch.
          // If it is a pre-release it will bump up to the same patch version.
          // 1.2.0-5 patches to 1.2.0
          // 1.2.0 patches to 1.2.1
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        // This probably shouldn't be used publicly.
        // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
        case 'pre':
          {
            var base = Number(identifierBase) ? 1 : 0;
            if (!identifier && identifierBase === false) {
              throw new Error('invalid increment argument: identifier is empty');
            }
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              var i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === 'number') {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                // didn't increment anything
                if (identifier === this.prerelease.join('.') && identifierBase === false) {
                  throw new Error('invalid increment argument: identifier already exists');
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
              // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
              var prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
        default:
          throw new Error("invalid increment argument: ".concat(release));
      }
      this.raw = this.format();
      if (this.build.length) {
        this.raw += "+".concat(this.build.join('.'));
      }
      return this;
    }
  }]);
}();
var semver$1 = SemVer$d;

var SemVer$c = semver$1;
var parse$6 = function parse(version, options) {
  var throwErrors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (version instanceof SemVer$c) {
    return version;
  }
  try {
    return new SemVer$c(version, options);
  } catch (er) {
    if (!throwErrors) {
      return null;
    }
    throw er;
  }
};
var parse_1 = parse$6;

var parse$5 = parse_1;
var valid$2 = function valid(version, options) {
  var v = parse$5(version, options);
  return v ? v.version : null;
};
var valid_1 = valid$2;

var parse$4 = parse_1;
var clean$1 = function clean(version, options) {
  var s = parse$4(version.trim().replace(/^[=v]+/, ''), options);
  return s ? s.version : null;
};
var clean_1 = clean$1;

var SemVer$b = semver$1;
var inc$1 = function inc(version, release, options, identifier, identifierBase) {
  if (typeof options === 'string') {
    identifierBase = identifier;
    identifier = options;
    options = undefined;
  }
  try {
    return new SemVer$b(version instanceof SemVer$b ? version.version : version, options).inc(release, identifier, identifierBase).version;
  } catch (er) {
    return null;
  }
};
var inc_1 = inc$1;

var parse$3 = parse_1;
var diff$1 = function diff(version1, version2) {
  var v1 = parse$3(version1, null, true);
  var v2 = parse$3(version2, null, true);
  var comparison = v1.compare(v2);
  if (comparison === 0) {
    return null;
  }
  var v1Higher = comparison > 0;
  var highVersion = v1Higher ? v1 : v2;
  var lowVersion = v1Higher ? v2 : v1;
  var highHasPre = !!highVersion.prerelease.length;
  var lowHasPre = !!lowVersion.prerelease.length;
  if (lowHasPre && !highHasPre) {
    // Going from prerelease -> no prerelease requires some special casing

    // If the low version has only a major, then it will always be a major
    // Some examples:
    // 1.0.0-1 -> 1.0.0
    // 1.0.0-1 -> 1.1.1
    // 1.0.0-1 -> 2.0.0
    if (!lowVersion.patch && !lowVersion.minor) {
      return 'major';
    }

    // Otherwise it can be determined by checking the high version

    if (highVersion.patch) {
      // anything higher than a patch bump would result in the wrong version
      return 'patch';
    }
    if (highVersion.minor) {
      // anything higher than a minor bump would result in the wrong version
      return 'minor';
    }

    // bumping major/minor/patch all have same result
    return 'major';
  }

  // add the `pre` prefix if we are going to a prerelease version
  var prefix = highHasPre ? 'pre' : '';
  if (v1.major !== v2.major) {
    return prefix + 'major';
  }
  if (v1.minor !== v2.minor) {
    return prefix + 'minor';
  }
  if (v1.patch !== v2.patch) {
    return prefix + 'patch';
  }

  // high and low are preleases
  return 'prerelease';
};
var diff_1 = diff$1;

var SemVer$a = semver$1;
var major$1 = function major(a, loose) {
  return new SemVer$a(a, loose).major;
};
var major_1 = major$1;

var SemVer$9 = semver$1;
var minor$1 = function minor(a, loose) {
  return new SemVer$9(a, loose).minor;
};
var minor_1 = minor$1;

var SemVer$8 = semver$1;
var patch$1 = function patch(a, loose) {
  return new SemVer$8(a, loose).patch;
};
var patch_1 = patch$1;

var parse$2 = parse_1;
var prerelease$1 = function prerelease(version, options) {
  var parsed = parse$2(version, options);
  return parsed && parsed.prerelease.length ? parsed.prerelease : null;
};
var prerelease_1 = prerelease$1;

var SemVer$7 = semver$1;
var compare$b = function compare(a, b, loose) {
  return new SemVer$7(a, loose).compare(new SemVer$7(b, loose));
};
var compare_1 = compare$b;

var compare$a = compare_1;
var rcompare$1 = function rcompare(a, b, loose) {
  return compare$a(b, a, loose);
};
var rcompare_1 = rcompare$1;

var compare$9 = compare_1;
var compareLoose$1 = function compareLoose(a, b) {
  return compare$9(a, b, true);
};
var compareLoose_1 = compareLoose$1;

var SemVer$6 = semver$1;
var compareBuild$3 = function compareBuild(a, b, loose) {
  var versionA = new SemVer$6(a, loose);
  var versionB = new SemVer$6(b, loose);
  return versionA.compare(versionB) || versionA.compareBuild(versionB);
};
var compareBuild_1 = compareBuild$3;

var compareBuild$2 = compareBuild_1;
var sort$1 = function sort(list, loose) {
  return list.sort(function (a, b) {
    return compareBuild$2(a, b, loose);
  });
};
var sort_1 = sort$1;

var compareBuild$1 = compareBuild_1;
var rsort$1 = function rsort(list, loose) {
  return list.sort(function (a, b) {
    return compareBuild$1(b, a, loose);
  });
};
var rsort_1 = rsort$1;

var compare$8 = compare_1;
var gt$4 = function gt(a, b, loose) {
  return compare$8(a, b, loose) > 0;
};
var gt_1 = gt$4;

var compare$7 = compare_1;
var lt$3 = function lt(a, b, loose) {
  return compare$7(a, b, loose) < 0;
};
var lt_1 = lt$3;

var compare$6 = compare_1;
var eq$2 = function eq(a, b, loose) {
  return compare$6(a, b, loose) === 0;
};
var eq_1 = eq$2;

var compare$5 = compare_1;
var neq$2 = function neq(a, b, loose) {
  return compare$5(a, b, loose) !== 0;
};
var neq_1 = neq$2;

var compare$4 = compare_1;
var gte$3 = function gte(a, b, loose) {
  return compare$4(a, b, loose) >= 0;
};
var gte_1 = gte$3;

var compare$3 = compare_1;
var lte$3 = function lte(a, b, loose) {
  return compare$3(a, b, loose) <= 0;
};
var lte_1 = lte$3;

var eq$1 = eq_1;
var neq$1 = neq_1;
var gt$3 = gt_1;
var gte$2 = gte_1;
var lt$2 = lt_1;
var lte$2 = lte_1;
var cmp$1 = function cmp(a, op, b, loose) {
  switch (op) {
    case '===':
      if (_typeof(a) === 'object') {
        a = a.version;
      }
      if (_typeof(b) === 'object') {
        b = b.version;
      }
      return a === b;
    case '!==':
      if (_typeof(a) === 'object') {
        a = a.version;
      }
      if (_typeof(b) === 'object') {
        b = b.version;
      }
      return a !== b;
    case '':
    case '=':
    case '==':
      return eq$1(a, b, loose);
    case '!=':
      return neq$1(a, b, loose);
    case '>':
      return gt$3(a, b, loose);
    case '>=':
      return gte$2(a, b, loose);
    case '<':
      return lt$2(a, b, loose);
    case '<=':
      return lte$2(a, b, loose);
    default:
      throw new TypeError("Invalid operator: ".concat(op));
  }
};
var cmp_1 = cmp$1;

var SemVer$5 = semver$1;
var parse$1 = parse_1;
var re = reExports.safeRe,
  t = reExports.t;
var coerce$1 = function coerce(version, options) {
  if (version instanceof SemVer$5) {
    return version;
  }
  if (typeof version === 'number') {
    version = String(version);
  }
  if (typeof version !== 'string') {
    return null;
  }
  options = options || {};
  var match = null;
  if (!options.rtl) {
    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
  } else {
    // Find the right-most coercible string that does not share
    // a terminus with a more left-ward coercible string.
    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'
    //
    // Walk through the string checking with a /g regexp
    // Manually set the index so as to pick up overlapping matches.
    // Stop when we get a match that ends at the string end, since no
    // coercible string can be more right-ward without the same terminus.
    var coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
    var next;
    while ((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)) {
      if (!match || next.index + next[0].length !== match.index + match[0].length) {
        match = next;
      }
      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
    }
    // leave it in a clean state
    coerceRtlRegex.lastIndex = -1;
  }
  if (match === null) {
    return null;
  }
  var major = match[2];
  var minor = match[3] || '0';
  var patch = match[4] || '0';
  var prerelease = options.includePrerelease && match[5] ? "-".concat(match[5]) : '';
  var build = options.includePrerelease && match[6] ? "+".concat(match[6]) : '';
  return parse$1("".concat(major, ".").concat(minor, ".").concat(patch).concat(prerelease).concat(build), options);
};
var coerce_1 = coerce$1;

var LRUCache = /*#__PURE__*/function () {
  function LRUCache() {
    _classCallCheck(this, LRUCache);
    this.max = 1000;
    this.map = new Map();
  }
  return _createClass(LRUCache, [{
    key: "get",
    value: function get(key) {
      var value = this.map.get(key);
      if (value === undefined) {
        return undefined;
      } else {
        // Remove the key from the map and add it to the end
        this.map["delete"](key);
        this.map.set(key, value);
        return value;
      }
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      return this.map["delete"](key);
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var deleted = this["delete"](key);
      if (!deleted && value !== undefined) {
        // If cache is full, delete the least recently used item
        if (this.map.size >= this.max) {
          var firstKey = this.map.keys().next().value;
          this["delete"](firstKey);
        }
        this.map.set(key, value);
      }
      return this;
    }
  }]);
}();
var lrucache = LRUCache;

var range$2;
var hasRequiredRange;
function requireRange() {
  if (hasRequiredRange) return range$2;
  hasRequiredRange = 1;
  var SPACE_CHARACTERS = /\s+/g;

  // hoisted class for cyclic dependency
  var Range = /*#__PURE__*/function () {
    function Range(range, options) {
      var _this = this;
      _classCallCheck(this, Range);
      options = parseOptions(options);
      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }
      if (range instanceof Comparator) {
        // just put it in the set and return
        this.raw = range.value;
        this.set = [[range]];
        this.formatted = undefined;
        return this;
      }
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;

      // First reduce all whitespace as much as possible so we do not have to rely
      // on potentially slow regexes like \s*. This is then stored and used for
      // future error messages as well.
      this.raw = range.trim().replace(SPACE_CHARACTERS, ' ');

      // First, split on ||
      this.set = this.raw.split('||')
      // map the range to a 2d array of comparators
      .map(function (r) {
        return _this.parseRange(r.trim());
      })
      // throw out any comparator lists that are empty
      // this generally means that it was not a valid range, which is allowed
      // in loose mode, but will still throw if the WHOLE range is invalid.
      .filter(function (c) {
        return c.length;
      });
      if (!this.set.length) {
        throw new TypeError("Invalid SemVer Range: ".concat(this.raw));
      }

      // if we have any that are not the null set, throw out null sets.
      if (this.set.length > 1) {
        // keep the first one, in case they're all null sets
        var first = this.set[0];
        this.set = this.set.filter(function (c) {
          return !isNullSet(c[0]);
        });
        if (this.set.length === 0) {
          this.set = [first];
        } else if (this.set.length > 1) {
          // if we have any that are *, then the range is just *
          var _iterator = _createForOfIteratorHelper(this.set),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var c = _step.value;
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
      this.formatted = undefined;
    }
    return _createClass(Range, [{
      key: "range",
      get: function get() {
        if (this.formatted === undefined) {
          this.formatted = '';
          for (var i = 0; i < this.set.length; i++) {
            if (i > 0) {
              this.formatted += '||';
            }
            var comps = this.set[i];
            for (var k = 0; k < comps.length; k++) {
              if (k > 0) {
                this.formatted += ' ';
              }
              this.formatted += comps[k].toString().trim();
            }
          }
        }
        return this.formatted;
      }
    }, {
      key: "format",
      value: function format() {
        return this.range;
      }
    }, {
      key: "toString",
      value: function toString() {
        return this.range;
      }
    }, {
      key: "parseRange",
      value: function parseRange(range) {
        var _this2 = this;
        // memoize range parsing for performance.
        // this is a very hot path, and fully deterministic.
        var memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        var memoKey = memoOpts + ':' + range;
        var cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        var loose = this.options.loose;
        // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
        var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug('hyphen replace', range);

        // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug('comparator trim', range);

        // `~ 1.2.3` => `~1.2.3`
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        debug('tilde trim', range);

        // `^ 1.2.3` => `^1.2.3`
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        debug('caret trim', range);

        // At this point, the range is completely trimmed and
        // ready to be split into comparators.

        var rangeList = range.split(' ').map(function (comp) {
          return parseComparator(comp, _this2.options);
        }).join(' ').split(/\s+/)
        // >=0.0.0 is equivalent to *
        .map(function (comp) {
          return replaceGTE0(comp, _this2.options);
        });
        if (loose) {
          // in loose mode, throw out any that are not valid comparators
          rangeList = rangeList.filter(function (comp) {
            debug('loose invalid filter', comp, _this2.options);
            return !!comp.match(re[t.COMPARATORLOOSE]);
          });
        }
        debug('range list', rangeList);

        // if any comparators are the null set, then replace with JUST null set
        // if more than one comparator, remove any * comparators
        // also, don't include the same comparator more than once
        var rangeMap = new Map();
        var comparators = rangeList.map(function (comp) {
          return new Comparator(comp, _this2.options);
        });
        var _iterator2 = _createForOfIteratorHelper(comparators),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var comp = _step2.value;
            if (isNullSet(comp)) {
              return [comp];
            }
            rangeMap.set(comp.value, comp);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        if (rangeMap.size > 1 && rangeMap.has('')) {
          rangeMap["delete"]('');
        }
        var result = _toConsumableArray(rangeMap.values());
        cache.set(memoKey, result);
        return result;
      }
    }, {
      key: "intersects",
      value: function intersects(range, options) {
        if (!(range instanceof Range)) {
          throw new TypeError('a Range is required');
        }
        return this.set.some(function (thisComparators) {
          return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {
            return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {
              return rangeComparators.every(function (rangeComparator) {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }

      // if ANY of the sets match ALL of its comparators, then pass
    }, {
      key: "test",
      value: function test(version) {
        if (!version) {
          return false;
        }
        if (typeof version === 'string') {
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        }
        for (var i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version, this.options)) {
            return true;
          }
        }
        return false;
      }
    }]);
  }();
  range$2 = Range;
  var LRU = lrucache;
  var cache = new LRU();
  var parseOptions = parseOptions_1;
  var Comparator = requireComparator();
  var debug = debug_1;
  var SemVer = semver$1;
  var re = reExports.safeRe,
    t = reExports.t,
    comparatorTrimReplace = reExports.comparatorTrimReplace,
    tildeTrimReplace = reExports.tildeTrimReplace,
    caretTrimReplace = reExports.caretTrimReplace;
  var FLAG_INCLUDE_PRERELEASE = constants$1.FLAG_INCLUDE_PRERELEASE,
    FLAG_LOOSE = constants$1.FLAG_LOOSE;
  var isNullSet = function isNullSet(c) {
    return c.value === '<0.0.0-0';
  };
  var isAny = function isAny(c) {
    return c.value === '';
  };

  // take a set of comparators and determine whether there
  // exists a version which can satisfy it
  var isSatisfiable = function isSatisfiable(comparators, options) {
    var result = true;
    var remainingComparators = comparators.slice();
    var testComparator = remainingComparators.pop();
    while (result && remainingComparators.length) {
      result = remainingComparators.every(function (otherComparator) {
        return testComparator.intersects(otherComparator, options);
      });
      testComparator = remainingComparators.pop();
    }
    return result;
  };

  // comprised of xranges, tildes, stars, and gtlt's at this point.
  // already replaced the hyphen ranges
  // turn into a set of JUST comparators.
  var parseComparator = function parseComparator(comp, options) {
    debug('comp', comp, options);
    comp = replaceCarets(comp, options);
    debug('caret', comp);
    comp = replaceTildes(comp, options);
    debug('tildes', comp);
    comp = replaceXRanges(comp, options);
    debug('xrange', comp);
    comp = replaceStars(comp, options);
    debug('stars', comp);
    return comp;
  };
  var isX = function isX(id) {
    return !id || id.toLowerCase() === 'x' || id === '*';
  };

  // ~, ~> --> * (any, kinda silly)
  // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
  // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
  // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
  // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
  // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
  // ~0.0.1 --> >=0.0.1 <0.1.0-0
  var replaceTildes = function replaceTildes(comp, options) {
    return comp.trim().split(/\s+/).map(function (c) {
      return replaceTilde(c, options);
    }).join(' ');
  };
  var replaceTilde = function replaceTilde(comp, options) {
    var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
    return comp.replace(r, function (_, M, m, p, pr) {
      debug('tilde', comp, _, M, m, p, pr);
      var ret;
      if (isX(M)) {
        ret = '';
      } else if (isX(m)) {
        ret = ">=".concat(M, ".0.0 <").concat(+M + 1, ".0.0-0");
      } else if (isX(p)) {
        // ~1.2 == >=1.2.0 <1.3.0-0
        ret = ">=".concat(M, ".").concat(m, ".0 <").concat(M, ".").concat(+m + 1, ".0-0");
      } else if (pr) {
        debug('replaceTilde pr', pr);
        ret = ">=".concat(M, ".").concat(m, ".").concat(p, "-").concat(pr, " <").concat(M, ".").concat(+m + 1, ".0-0");
      } else {
        // ~1.2.3 == >=1.2.3 <1.3.0-0
        ret = ">=".concat(M, ".").concat(m, ".").concat(p, " <").concat(M, ".").concat(+m + 1, ".0-0");
      }
      debug('tilde return', ret);
      return ret;
    });
  };

  // ^ --> * (any, kinda silly)
  // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
  // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
  // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
  // ^1.2.3 --> >=1.2.3 <2.0.0-0
  // ^1.2.0 --> >=1.2.0 <2.0.0-0
  // ^0.0.1 --> >=0.0.1 <0.0.2-0
  // ^0.1.0 --> >=0.1.0 <0.2.0-0
  var replaceCarets = function replaceCarets(comp, options) {
    return comp.trim().split(/\s+/).map(function (c) {
      return replaceCaret(c, options);
    }).join(' ');
  };
  var replaceCaret = function replaceCaret(comp, options) {
    debug('caret', comp, options);
    var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
    var z = options.includePrerelease ? '-0' : '';
    return comp.replace(r, function (_, M, m, p, pr) {
      debug('caret', comp, _, M, m, p, pr);
      var ret;
      if (isX(M)) {
        ret = '';
      } else if (isX(m)) {
        ret = ">=".concat(M, ".0.0").concat(z, " <").concat(+M + 1, ".0.0-0");
      } else if (isX(p)) {
        if (M === '0') {
          ret = ">=".concat(M, ".").concat(m, ".0").concat(z, " <").concat(M, ".").concat(+m + 1, ".0-0");
        } else {
          ret = ">=".concat(M, ".").concat(m, ".0").concat(z, " <").concat(+M + 1, ".0.0-0");
        }
      } else if (pr) {
        debug('replaceCaret pr', pr);
        if (M === '0') {
          if (m === '0') {
            ret = ">=".concat(M, ".").concat(m, ".").concat(p, "-").concat(pr, " <").concat(M, ".").concat(m, ".").concat(+p + 1, "-0");
          } else {
            ret = ">=".concat(M, ".").concat(m, ".").concat(p, "-").concat(pr, " <").concat(M, ".").concat(+m + 1, ".0-0");
          }
        } else {
          ret = ">=".concat(M, ".").concat(m, ".").concat(p, "-").concat(pr, " <").concat(+M + 1, ".0.0-0");
        }
      } else {
        debug('no pr');
        if (M === '0') {
          if (m === '0') {
            ret = ">=".concat(M, ".").concat(m, ".").concat(p).concat(z, " <").concat(M, ".").concat(m, ".").concat(+p + 1, "-0");
          } else {
            ret = ">=".concat(M, ".").concat(m, ".").concat(p).concat(z, " <").concat(M, ".").concat(+m + 1, ".0-0");
          }
        } else {
          ret = ">=".concat(M, ".").concat(m, ".").concat(p, " <").concat(+M + 1, ".0.0-0");
        }
      }
      debug('caret return', ret);
      return ret;
    });
  };
  var replaceXRanges = function replaceXRanges(comp, options) {
    debug('replaceXRanges', comp, options);
    return comp.split(/\s+/).map(function (c) {
      return replaceXRange(c, options);
    }).join(' ');
  };
  var replaceXRange = function replaceXRange(comp, options) {
    comp = comp.trim();
    var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
    return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
      debug('xRange', comp, ret, gtlt, M, m, p, pr);
      var xM = isX(M);
      var xm = xM || isX(m);
      var xp = xm || isX(p);
      var anyX = xp;
      if (gtlt === '=' && anyX) {
        gtlt = '';
      }

      // if we're including prereleases in the match, then we need
      // to fix this to -0, the lowest possible prerelease value
      pr = options.includePrerelease ? '-0' : '';
      if (xM) {
        if (gtlt === '>' || gtlt === '<') {
          // nothing is allowed
          ret = '<0.0.0-0';
        } else {
          // nothing is forbidden
          ret = '*';
        }
      } else if (gtlt && anyX) {
        // we know patch is an x, because we have any x at all.
        // replace X with 0
        if (xm) {
          m = 0;
        }
        p = 0;
        if (gtlt === '>') {
          // >1 => >=2.0.0
          // >1.2 => >=1.3.0
          gtlt = '>=';
          if (xm) {
            M = +M + 1;
            m = 0;
            p = 0;
          } else {
            m = +m + 1;
            p = 0;
          }
        } else if (gtlt === '<=') {
          // <=0.7.x is actually <0.8.0, since any 0.7.x should
          // pass.  Similarly, <=7.x is actually <8.0.0, etc.
          gtlt = '<';
          if (xm) {
            M = +M + 1;
          } else {
            m = +m + 1;
          }
        }
        if (gtlt === '<') {
          pr = '-0';
        }
        ret = "".concat(gtlt + M, ".").concat(m, ".").concat(p).concat(pr);
      } else if (xm) {
        ret = ">=".concat(M, ".0.0").concat(pr, " <").concat(+M + 1, ".0.0-0");
      } else if (xp) {
        ret = ">=".concat(M, ".").concat(m, ".0").concat(pr, " <").concat(M, ".").concat(+m + 1, ".0-0");
      }
      debug('xRange return', ret);
      return ret;
    });
  };

  // Because * is AND-ed with everything else in the comparator,
  // and '' means "any version", just remove the *s entirely.
  var replaceStars = function replaceStars(comp, options) {
    debug('replaceStars', comp, options);
    // Looseness is ignored here.  star is always as loose as it gets!
    return comp.trim().replace(re[t.STAR], '');
  };
  var replaceGTE0 = function replaceGTE0(comp, options) {
    debug('replaceGTE0', comp, options);
    return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '');
  };

  // This function is passed to string.replace(re[t.HYPHENRANGE])
  // M, m, patch, prerelease, build
  // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
  // 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
  // 1.2 - 3.4 => >=1.2.0 <3.5.0-0
  // TODO build?
  var hyphenReplace = function hyphenReplace(incPr) {
    return function ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) {
      if (isX(fM)) {
        from = '';
      } else if (isX(fm)) {
        from = ">=".concat(fM, ".0.0").concat(incPr ? '-0' : '');
      } else if (isX(fp)) {
        from = ">=".concat(fM, ".").concat(fm, ".0").concat(incPr ? '-0' : '');
      } else if (fpr) {
        from = ">=".concat(from);
      } else {
        from = ">=".concat(from).concat(incPr ? '-0' : '');
      }
      if (isX(tM)) {
        to = '';
      } else if (isX(tm)) {
        to = "<".concat(+tM + 1, ".0.0-0");
      } else if (isX(tp)) {
        to = "<".concat(tM, ".").concat(+tm + 1, ".0-0");
      } else if (tpr) {
        to = "<=".concat(tM, ".").concat(tm, ".").concat(tp, "-").concat(tpr);
      } else if (incPr) {
        to = "<".concat(tM, ".").concat(tm, ".").concat(+tp + 1, "-0");
      } else {
        to = "<=".concat(to);
      }
      return "".concat(from, " ").concat(to).trim();
    };
  };
  var testSet = function testSet(set, version, options) {
    for (var i = 0; i < set.length; i++) {
      if (!set[i].test(version)) {
        return false;
      }
    }
    if (version.prerelease.length && !options.includePrerelease) {
      // Find the set of versions that are allowed to have prereleases
      // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
      // That should allow `1.2.3-pr.2` to pass.
      // However, `1.2.4-alpha.notready` should NOT be allowed,
      // even though it's within the range set by the comparators.
      for (var _i = 0; _i < set.length; _i++) {
        debug(set[_i].semver);
        if (set[_i].semver === Comparator.ANY) {
          continue;
        }
        if (set[_i].semver.prerelease.length > 0) {
          var allowed = set[_i].semver;
          if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
            return true;
          }
        }
      }

      // Version has a -pre, but it's not one of the ones we like.
      return false;
    }
    return true;
  };
  return range$2;
}

var comparator;
var hasRequiredComparator;
function requireComparator() {
  if (hasRequiredComparator) return comparator;
  hasRequiredComparator = 1;
  var ANY = Symbol('SemVer ANY');
  // hoisted class for cyclic dependency
  var Comparator = /*#__PURE__*/function () {
    function Comparator(comp, options) {
      _classCallCheck(this, Comparator);
      options = parseOptions(options);
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      comp = comp.trim().split(/\s+/).join(' ');
      debug('comparator', comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = '';
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug('comp', this);
    }
    return _createClass(Comparator, [{
      key: "parse",
      value: function parse(comp) {
        var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        var m = comp.match(r);
        if (!m) {
          throw new TypeError("Invalid comparator: ".concat(comp));
        }
        this.operator = m[1] !== undefined ? m[1] : '';
        if (this.operator === '=') {
          this.operator = '';
        }

        // if it literally is just '>' or '' then allow anything.
        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m[2], this.options.loose);
        }
      }
    }, {
      key: "toString",
      value: function toString() {
        return this.value;
      }
    }, {
      key: "test",
      value: function test(version) {
        debug('Comparator.test', version, this.options.loose);
        if (this.semver === ANY || version === ANY) {
          return true;
        }
        if (typeof version === 'string') {
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version, this.operator, this.semver, this.options);
      }
    }, {
      key: "intersects",
      value: function intersects(comp, options) {
        if (!(comp instanceof Comparator)) {
          throw new TypeError('a Comparator is required');
        }
        if (this.operator === '') {
          if (this.value === '') {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === '') {
          if (comp.value === '') {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);

        // Special cases where nothing can possibly be lower
        if (options.includePrerelease && (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {
          return false;
        }

        // Same direction increasing (> or >=)
        if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {
          return true;
        }
        // Same direction decreasing (< or <=)
        if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {
          return true;
        }
        // same SemVer and both sides are inclusive (<= or >=)
        if (this.semver.version === comp.semver.version && this.operator.includes('=') && comp.operator.includes('=')) {
          return true;
        }
        // opposite directions less than
        if (cmp(this.semver, '<', comp.semver, options) && this.operator.startsWith('>') && comp.operator.startsWith('<')) {
          return true;
        }
        // opposite directions greater than
        if (cmp(this.semver, '>', comp.semver, options) && this.operator.startsWith('<') && comp.operator.startsWith('>')) {
          return true;
        }
        return false;
      }
    }], [{
      key: "ANY",
      get: function get() {
        return ANY;
      }
    }]);
  }();
  comparator = Comparator;
  var parseOptions = parseOptions_1;
  var re = reExports.safeRe,
    t = reExports.t;
  var cmp = cmp_1;
  var debug = debug_1;
  var SemVer = semver$1;
  var Range = requireRange();
  return comparator;
}

var Range$9 = requireRange();
var satisfies$4 = function satisfies(version, range, options) {
  try {
    range = new Range$9(range, options);
  } catch (er) {
    return false;
  }
  return range.test(version);
};
var satisfies_1 = satisfies$4;

var Range$8 = requireRange();

// Mostly just for testing and legacy API reasons
var toComparators$1 = function toComparators(range, options) {
  return new Range$8(range, options).set.map(function (comp) {
    return comp.map(function (c) {
      return c.value;
    }).join(' ').trim().split(' ');
  });
};
var toComparators_1 = toComparators$1;

var SemVer$4 = semver$1;
var Range$7 = requireRange();
var maxSatisfying$1 = function maxSatisfying(versions, range, options) {
  var max = null;
  var maxSV = null;
  var rangeObj = null;
  try {
    rangeObj = new Range$7(range, options);
  } catch (er) {
    return null;
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v;
        maxSV = new SemVer$4(max, options);
      }
    }
  });
  return max;
};
var maxSatisfying_1 = maxSatisfying$1;

var SemVer$3 = semver$1;
var Range$6 = requireRange();
var minSatisfying$1 = function minSatisfying(versions, range, options) {
  var min = null;
  var minSV = null;
  var rangeObj = null;
  try {
    rangeObj = new Range$6(range, options);
  } catch (er) {
    return null;
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v;
        minSV = new SemVer$3(min, options);
      }
    }
  });
  return min;
};
var minSatisfying_1 = minSatisfying$1;

var SemVer$2 = semver$1;
var Range$5 = requireRange();
var gt$2 = gt_1;
var minVersion$1 = function minVersion(range, loose) {
  range = new Range$5(range, loose);
  var minver = new SemVer$2('0.0.0');
  if (range.test(minver)) {
    return minver;
  }
  minver = new SemVer$2('0.0.0-0');
  if (range.test(minver)) {
    return minver;
  }
  minver = null;
  var _loop = function _loop() {
    var comparators = range.set[i];
    var setMin = null;
    comparators.forEach(function (comparator) {
      // Clone to avoid manipulating the comparator's semver object.
      var compver = new SemVer$2(comparator.semver.version);
      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++;
          } else {
            compver.prerelease.push(0);
          }
          compver.raw = compver.format();
        /* fallthrough */
        case '':
        case '>=':
          if (!setMin || gt$2(compver, setMin)) {
            setMin = compver;
          }
          break;
        case '<':
        case '<=':
          /* Ignore maximum versions */
          break;
        /* istanbul ignore next */
        default:
          throw new Error("Unexpected operation: ".concat(comparator.operator));
      }
    });
    if (setMin && (!minver || gt$2(minver, setMin))) {
      minver = setMin;
    }
  };
  for (var i = 0; i < range.set.length; ++i) {
    _loop();
  }
  if (minver && range.test(minver)) {
    return minver;
  }
  return null;
};
var minVersion_1 = minVersion$1;

var Range$4 = requireRange();
var validRange$1 = function validRange(range, options) {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range$4(range, options).range || '*';
  } catch (er) {
    return null;
  }
};
var valid$1 = validRange$1;

var SemVer$1 = semver$1;
var Comparator$2 = requireComparator();
var ANY$1 = Comparator$2.ANY;
var Range$3 = requireRange();
var satisfies$3 = satisfies_1;
var gt$1 = gt_1;
var lt$1 = lt_1;
var lte$1 = lte_1;
var gte$1 = gte_1;
var outside$3 = function outside(version, range, hilo, options) {
  version = new SemVer$1(version, options);
  range = new Range$3(range, options);
  var gtfn, ltefn, ltfn, comp, ecomp;
  switch (hilo) {
    case '>':
      gtfn = gt$1;
      ltefn = lte$1;
      ltfn = lt$1;
      comp = '>';
      ecomp = '>=';
      break;
    case '<':
      gtfn = lt$1;
      ltefn = gte$1;
      ltfn = gt$1;
      comp = '<';
      ecomp = '<=';
      break;
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"');
  }

  // If it satisfies the range it is not outside
  if (satisfies$3(version, range, options)) {
    return false;
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.
  var _loop = function _loop() {
      var comparators = range.set[i];
      var high = null;
      var low = null;
      comparators.forEach(function (comparator) {
        if (comparator.semver === ANY$1) {
          comparator = new Comparator$2('>=0.0.0');
        }
        high = high || comparator;
        low = low || comparator;
        if (gtfn(comparator.semver, high.semver, options)) {
          high = comparator;
        } else if (ltfn(comparator.semver, low.semver, options)) {
          low = comparator;
        }
      });

      // If the edge version comparator has a operator then our version
      // isn't outside it
      if (high.operator === comp || high.operator === ecomp) {
        return {
          v: false
        };
      }

      // If the lowest version comparator has an operator and our version
      // is less than it then it isn't higher than the range
      if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
        return {
          v: false
        };
      } else if (low.operator === ecomp && ltfn(version, low.semver)) {
        return {
          v: false
        };
      }
    },
    _ret;
  for (var i = 0; i < range.set.length; ++i) {
    _ret = _loop();
    if (_ret) return _ret.v;
  }
  return true;
};
var outside_1 = outside$3;

// Determine if version is greater than all the versions possible in the range.
var outside$2 = outside_1;
var gtr$1 = function gtr(version, range, options) {
  return outside$2(version, range, '>', options);
};
var gtr_1 = gtr$1;

var outside$1 = outside_1;
// Determine if version is less than all the versions possible in the range
var ltr$1 = function ltr(version, range, options) {
  return outside$1(version, range, '<', options);
};
var ltr_1 = ltr$1;

var Range$2 = requireRange();
var intersects$1 = function intersects(r1, r2, options) {
  r1 = new Range$2(r1, options);
  r2 = new Range$2(r2, options);
  return r1.intersects(r2, options);
};
var intersects_1 = intersects$1;

// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.
var satisfies$2 = satisfies_1;
var compare$2 = compare_1;
var simplify = function simplify(versions, range, options) {
  var set = [];
  var first = null;
  var prev = null;
  var v = versions.sort(function (a, b) {
    return compare$2(a, b, options);
  });
  var _iterator = _createForOfIteratorHelper(v),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var version = _step.value;
      var included = satisfies$2(version, range, options);
      if (included) {
        prev = version;
        if (!first) {
          first = version;
        }
      } else {
        if (prev) {
          set.push([first, prev]);
        }
        prev = null;
        first = null;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (first) {
    set.push([first, null]);
  }
  var ranges = [];
  for (var _i = 0, _set = set; _i < _set.length; _i++) {
    var _set$_i = _slicedToArray(_set[_i], 2),
      min = _set$_i[0],
      max = _set$_i[1];
    if (min === max) {
      ranges.push(min);
    } else if (!max && min === v[0]) {
      ranges.push('*');
    } else if (!max) {
      ranges.push(">=".concat(min));
    } else if (min === v[0]) {
      ranges.push("<=".concat(max));
    } else {
      ranges.push("".concat(min, " - ").concat(max));
    }
  }
  var simplified = ranges.join(' || ');
  var original = typeof range.raw === 'string' ? range.raw : String(range);
  return simplified.length < original.length ? simplified : range;
};

var Range$1 = requireRange();
var Comparator$1 = requireComparator();
var ANY = Comparator$1.ANY;
var satisfies$1 = satisfies_1;
var compare$1 = compare_1;

// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true

var subset$1 = function subset(sub, dom) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (sub === dom) {
    return true;
  }
  sub = new Range$1(sub, options);
  dom = new Range$1(dom, options);
  var sawNonNull = false;
  var _iterator = _createForOfIteratorHelper(sub.set),
    _step;
  try {
    OUTER: for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var simpleSub = _step.value;
      var _iterator2 = _createForOfIteratorHelper(dom.set),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var simpleDom = _step2.value;
          var isSub = simpleSubset(simpleSub, simpleDom, options);
          sawNonNull = sawNonNull || isSub !== null;
          if (isSub) {
            continue OUTER;
          }
        }
        // the null set is a subset of everything, but null simple ranges in
        // a complex range should be ignored.  so if we saw a non-null range,
        // then we know this isn't a subset, but if EVERY simple range was null,
        // then it is a subset.
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      if (sawNonNull) {
        return false;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return true;
};
var minimumVersionWithPreRelease = [new Comparator$1('>=0.0.0-0')];
var minimumVersion = [new Comparator$1('>=0.0.0')];
var simpleSubset = function simpleSubset(sub, dom, options) {
  if (sub === dom) {
    return true;
  }
  if (sub.length === 1 && sub[0].semver === ANY) {
    if (dom.length === 1 && dom[0].semver === ANY) {
      return true;
    } else if (options.includePrerelease) {
      sub = minimumVersionWithPreRelease;
    } else {
      sub = minimumVersion;
    }
  }
  if (dom.length === 1 && dom[0].semver === ANY) {
    if (options.includePrerelease) {
      return true;
    } else {
      dom = minimumVersion;
    }
  }
  var eqSet = new Set();
  var gt, lt;
  var _iterator3 = _createForOfIteratorHelper(sub),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var c = _step3.value;
      if (c.operator === '>' || c.operator === '>=') {
        gt = higherGT(gt, c, options);
      } else if (c.operator === '<' || c.operator === '<=') {
        lt = lowerLT(lt, c, options);
      } else {
        eqSet.add(c.semver);
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  if (eqSet.size > 1) {
    return null;
  }
  var gtltComp;
  if (gt && lt) {
    gtltComp = compare$1(gt.semver, lt.semver, options);
    if (gtltComp > 0) {
      return null;
    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {
      return null;
    }
  }

  // will iterate one or zero times
  var _iterator4 = _createForOfIteratorHelper(eqSet),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var eq = _step4.value;
      if (gt && !satisfies$1(eq, String(gt), options)) {
        return null;
      }
      if (lt && !satisfies$1(eq, String(lt), options)) {
        return null;
      }
      var _iterator6 = _createForOfIteratorHelper(dom),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _c = _step6.value;
          if (!satisfies$1(eq, String(_c), options)) {
            return false;
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      return true;
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  var higher, lower;
  var hasDomLT, hasDomGT;
  // if the subset has a prerelease, we need a comparator in the superset
  // with the same tuple and a prerelease, or it's not a subset
  var needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
  var needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
  // exception: <1.2.3-0 is the same as <1.2.3
  if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {
    needDomLTPre = false;
  }
  var _iterator5 = _createForOfIteratorHelper(dom),
    _step5;
  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var _c2 = _step5.value;
      hasDomGT = hasDomGT || _c2.operator === '>' || _c2.operator === '>=';
      hasDomLT = hasDomLT || _c2.operator === '<' || _c2.operator === '<=';
      if (gt) {
        if (needDomGTPre) {
          if (_c2.semver.prerelease && _c2.semver.prerelease.length && _c2.semver.major === needDomGTPre.major && _c2.semver.minor === needDomGTPre.minor && _c2.semver.patch === needDomGTPre.patch) {
            needDomGTPre = false;
          }
        }
        if (_c2.operator === '>' || _c2.operator === '>=') {
          higher = higherGT(gt, _c2, options);
          if (higher === _c2 && higher !== gt) {
            return false;
          }
        } else if (gt.operator === '>=' && !satisfies$1(gt.semver, String(_c2), options)) {
          return false;
        }
      }
      if (lt) {
        if (needDomLTPre) {
          if (_c2.semver.prerelease && _c2.semver.prerelease.length && _c2.semver.major === needDomLTPre.major && _c2.semver.minor === needDomLTPre.minor && _c2.semver.patch === needDomLTPre.patch) {
            needDomLTPre = false;
          }
        }
        if (_c2.operator === '<' || _c2.operator === '<=') {
          lower = lowerLT(lt, _c2, options);
          if (lower === _c2 && lower !== lt) {
            return false;
          }
        } else if (lt.operator === '<=' && !satisfies$1(lt.semver, String(_c2), options)) {
          return false;
        }
      }
      if (!_c2.operator && (lt || gt) && gtltComp !== 0) {
        return false;
      }
    }

    // if there was a < or >, and nothing in the dom, then must be false
    // UNLESS it was limited by another range in the other direction.
    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }
  if (gt && hasDomLT && !lt && gtltComp !== 0) {
    return false;
  }
  if (lt && hasDomGT && !gt && gtltComp !== 0) {
    return false;
  }

  // we needed a prerelease range in a specific tuple, but didn't get one
  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
  // because it includes prereleases in the 1.2.3 tuple
  if (needDomGTPre || needDomLTPre) {
    return false;
  }
  return true;
};

// >=1.2.3 is lower than >1.2.3
var higherGT = function higherGT(a, b, options) {
  if (!a) {
    return b;
  }
  var comp = compare$1(a.semver, b.semver, options);
  return comp > 0 ? a : comp < 0 ? b : b.operator === '>' && a.operator === '>=' ? b : a;
};

// <=1.2.3 is higher than <1.2.3
var lowerLT = function lowerLT(a, b, options) {
  if (!a) {
    return b;
  }
  var comp = compare$1(a.semver, b.semver, options);
  return comp < 0 ? a : comp > 0 ? b : b.operator === '<' && a.operator === '<=' ? b : a;
};
var subset_1 = subset$1;

// just pre-load all the stuff that index.js lazily exports
var internalRe = reExports;
var constants = constants$1;
var SemVer = semver$1;
var identifiers = identifiers$1;
var parse = parse_1;
var valid = valid_1;
var clean = clean_1;
var inc = inc_1;
var diff = diff_1;
var major = major_1;
var minor = minor_1;
var patch = patch_1;
var prerelease = prerelease_1;
var compare = compare_1;
var rcompare = rcompare_1;
var compareLoose = compareLoose_1;
var compareBuild = compareBuild_1;
var sort = sort_1;
var rsort = rsort_1;
var gt = gt_1;
var lt = lt_1;
var eq = eq_1;
var neq = neq_1;
var gte = gte_1;
var lte = lte_1;
var cmp = cmp_1;
var coerce = coerce_1;
var Comparator = requireComparator();
var Range = requireRange();
var satisfies = satisfies_1;
var toComparators = toComparators_1;
var maxSatisfying = maxSatisfying_1;
var minSatisfying = minSatisfying_1;
var minVersion = minVersion_1;
var validRange = valid$1;
var outside = outside_1;
var gtr = gtr_1;
var ltr = ltr_1;
var intersects = intersects_1;
var simplifyRange = simplify;
var subset = subset_1;
var semver = {
  parse: parse,
  valid: valid,
  clean: clean,
  inc: inc,
  diff: diff,
  major: major,
  minor: minor,
  patch: patch,
  prerelease: prerelease,
  compare: compare,
  rcompare: rcompare,
  compareLoose: compareLoose,
  compareBuild: compareBuild,
  sort: sort,
  rsort: rsort,
  gt: gt,
  lt: lt,
  eq: eq,
  neq: neq,
  gte: gte,
  lte: lte,
  cmp: cmp,
  coerce: coerce,
  Comparator: Comparator,
  Range: Range,
  satisfies: satisfies,
  toComparators: toComparators,
  maxSatisfying: maxSatisfying,
  minSatisfying: minSatisfying,
  minVersion: minVersion,
  validRange: validRange,
  outside: outside,
  gtr: gtr,
  ltr: ltr,
  intersects: intersects,
  simplifyRange: simplifyRange,
  subset: subset,
  SemVer: SemVer,
  re: internalRe.re,
  src: internalRe.src,
  tokens: internalRe.t,
  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
  RELEASE_TYPES: constants.RELEASE_TYPES,
  compareIdentifiers: identifiers.compareIdentifiers,
  rcompareIdentifiers: identifiers.rcompareIdentifiers
};

Object.defineProperty(lib$1, "__esModule", {
  value: true
});
lib$1.getInfosForServiceUuid = lib$1.getBluetoothServiceUuids = lib$1.identifyProductName = lib$1.identifyUSBProductId = lib$1.getDeviceModel = lib$1.ledgerUSBVendorId = lib$1.IIWebUSB = lib$1.IICCID = lib$1.IIU2F = lib$1.IIKeyboardHID = lib$1.IIGenericHID = void 0;
var _semver = _interopRequireDefault$3(semver);
function _interopRequireDefault$3(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

/**
 * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)
 *
 ** Model
 * Ledger Nano S : 0x10
 * Ledger Blue : 0x00
 * Ledger Nano X : 0x40
 *
 ** Interface support bitfield
 * Generic HID : 0x01
 * Keyboard HID : 0x02
 * U2F : 0x04
 * CCID : 0x08
 * WebUSB : 0x10
 */
var IIGenericHID = 0x01;
lib$1.IIGenericHID = IIGenericHID;
var IIKeyboardHID = 0x02;
lib$1.IIKeyboardHID = IIKeyboardHID;
var IIU2F = 0x04;
lib$1.IIU2F = IIU2F;
var IICCID = 0x08;
lib$1.IICCID = IICCID;
var IIWebUSB = 0x10;
lib$1.IIWebUSB = IIWebUSB;
var devices = {
  blue: {
    id: "blue",
    productName: "Ledger Blue",
    productIdMM: 0x00,
    legacyUsbProductId: 0x0000,
    usbOnly: true,
    memorySize: 480 * 1024,
    blockSize: 4 * 1024,
    getBlockSize: function getBlockSize(_firwareVersion) {
      return 4 * 1024;
    }
  },
  nanoS: {
    id: "nanoS",
    productName: "Ledger Nano S",
    productIdMM: 0x10,
    legacyUsbProductId: 0x0001,
    usbOnly: true,
    memorySize: 320 * 1024,
    blockSize: 4 * 1024,
    getBlockSize: function getBlockSize(firmwareVersion) {
      return _semver["default"].lt(_semver["default"].coerce(firmwareVersion), "2.0.0") ? 4 * 1024 : 2 * 1024;
    }
  },
  nanoX: {
    id: "nanoX",
    productName: "Ledger Nano X",
    productIdMM: 0x40,
    legacyUsbProductId: 0x0004,
    usbOnly: false,
    memorySize: 2 * 1024 * 1024,
    blockSize: 4 * 1024,
    getBlockSize: function getBlockSize(_firwareVersion) {
      return 4 * 1024;
    },
    bluetoothSpec: [{
      // this is the legacy one (prototype version). we will eventually drop it.
      serviceUuid: "d973f2e0-b19e-11e2-9e96-0800200c9a66",
      notifyUuid: "d973f2e1-b19e-11e2-9e96-0800200c9a66",
      writeUuid: "d973f2e2-b19e-11e2-9e96-0800200c9a66"
    }, {
      serviceUuid: "13d63400-2c97-0004-0000-4c6564676572",
      notifyUuid: "13d63400-2c97-0004-0001-4c6564676572",
      writeUuid: "13d63400-2c97-0004-0002-4c6564676572"
    }]
  }
};
var productMap = {
  Blue: "blue",
  "Nano S": "nanoS",
  "Nano X": "nanoX"
}; // $FlowFixMe

var devicesList = Object.values(devices);
/**
 *
 */

var ledgerUSBVendorId = 0x2c97;
/**
 *
 */

lib$1.ledgerUSBVendorId = ledgerUSBVendorId;
var getDeviceModel = function getDeviceModel(id) {
  var info = devices[id];
  if (!info) throw new Error("device '" + id + "' does not exist");
  return info;
};
/**
 *
 */

lib$1.getDeviceModel = getDeviceModel;
var identifyUSBProductId = function identifyUSBProductId(usbProductId) {
  var legacy = devicesList.find(function (d) {
    return d.legacyUsbProductId === usbProductId;
  });
  if (legacy) return legacy;
  var mm = usbProductId >> 8;
  var deviceModel = devicesList.find(function (d) {
    return d.productIdMM === mm;
  });
  return deviceModel;
};
lib$1.identifyUSBProductId = identifyUSBProductId;
var identifyProductName = function identifyProductName(productName) {
  var productId = productMap[productName];
  var deviceModel = devicesList.find(function (d) {
    return d.id === productId;
  });
  return deviceModel;
};
lib$1.identifyProductName = identifyProductName;
var bluetoothServices = [];
var serviceUuidToInfos = {};
for (var id$1 in devices) {
  var deviceModel = devices[id$1];
  var bluetoothSpec = deviceModel.bluetoothSpec;
  if (bluetoothSpec) {
    for (var i = 0; i < bluetoothSpec.length; i++) {
      var spec = bluetoothSpec[i];
      bluetoothServices.push(spec.serviceUuid);
      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, "")] = _objectSpread({
        deviceModel: deviceModel
      }, spec);
    }
  }
}
/**
 *
 */

var getBluetoothServiceUuids = function getBluetoothServiceUuids() {
  return bluetoothServices;
};
/**
 *
 */

lib$1.getBluetoothServiceUuids = getBluetoothServiceUuids;
var getInfosForServiceUuid = function getInfosForServiceUuid(uuid) {
  return serviceUuidToInfos[uuid.toLowerCase()];
};
/**
 *
 */

lib$1.getInfosForServiceUuid = getInfosForServiceUuid;

var lib = {};

Object.defineProperty(lib, "__esModule", {
  value: true
});
lib.listen = lib.log = void 0;

/**
 * A Log object
 */
var id = 0;
var subscribers = [];
/**
 * log something
 * @param type a namespaced identifier of the log (it is not a level like "debug", "error" but more like "apdu-in", "apdu-out", etc...)
 * @param message a clear message of the log associated to the type
 */

var log = function log(type, message, data) {
  var obj = {
    type: type,
    id: String(++id),
    date: new Date()
  };
  if (message) obj.message = message;
  if (data) obj.data = data;
  dispatch$8(obj);
};
/**
 * listen to logs.
 * @param cb that is called for each future log() with the Log object
 * @return a function that can be called to unsubscribe the listener
 */

lib.log = log;
var listen = function listen(cb) {
  subscribers.push(cb);
  return function () {
    var i = subscribers.indexOf(cb);
    if (i !== -1) {
      // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952
      subscribers[i] = subscribers[subscribers.length - 1];
      subscribers.pop();
    }
  };
};
lib.listen = listen;
function dispatch$8(log) {
  for (var i = 0; i < subscribers.length; i++) {
    try {
      subscribers[i](log);
    } catch (e) {
      console.error(e);
    }
  }
} // for debug purpose

if (typeof window !== "undefined") {
  window.__ledgerLogsListen = listen;
}

var webusb = {};

Object.defineProperty(webusb, "__esModule", {
  value: true
});
webusb.requestLedgerDevice = requestLedgerDevice;
webusb.getLedgerDevices = getLedgerDevices$1;
webusb.getFirstLedgerDevice = getFirstLedgerDevice$1;
webusb.isSupported = void 0;
var _devices$3 = lib$1;
var ledgerDevices$1 = [{
  vendorId: _devices$3.ledgerUSBVendorId
}];
function requestLedgerDevice() {
  return _requestLedgerDevice.apply(this, arguments);
}
function _requestLedgerDevice() {
  _requestLedgerDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var device;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return navigator.usb.requestDevice({
            filters: ledgerDevices$1
          });
        case 2:
          device = _context.sent;
          return _context.abrupt("return", device);
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _requestLedgerDevice.apply(this, arguments);
}
function getLedgerDevices$1() {
  return _getLedgerDevices$1.apply(this, arguments);
}
function _getLedgerDevices$1() {
  _getLedgerDevices$1 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var devices;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return navigator.usb.getDevices();
        case 2:
          devices = _context2.sent;
          return _context2.abrupt("return", devices.filter(function (d) {
            return d.vendorId === _devices$3.ledgerUSBVendorId;
          }));
        case 4:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _getLedgerDevices$1.apply(this, arguments);
}
function getFirstLedgerDevice$1() {
  return _getFirstLedgerDevice$1.apply(this, arguments);
}
function _getFirstLedgerDevice$1() {
  _getFirstLedgerDevice$1 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var existingDevices;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return getLedgerDevices$1();
        case 2:
          existingDevices = _context3.sent;
          if (!(existingDevices.length > 0)) {
            _context3.next = 5;
            break;
          }
          return _context3.abrupt("return", existingDevices[0]);
        case 5:
          return _context3.abrupt("return", requestLedgerDevice());
        case 6:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _getFirstLedgerDevice$1.apply(this, arguments);
}
var isSupported$1 = function isSupported() {
  return Promise.resolve(!!navigator &&
  // $FlowFixMe
  !!navigator.usb && typeof navigator.usb.getDevices === "function");
};
webusb.isSupported = isSupported$1;

Object.defineProperty(TransportWebUSB$2, "__esModule", {
  value: true
});
TransportWebUSB$2["default"] = void 0;
var _hwTransport$2 = _interopRequireDefault$2(Transport);
var _hidFraming$1 = _interopRequireDefault$2(hidFraming);
var _devices$2 = lib$1;
var _logs$5 = lib;
var _errors$3 = index_cjs;
var _webusb = webusb;
function _interopRequireDefault$2(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
var configurationValue = 1;
var endpointNumber = 3;
/**
 * WebUSB Transport implementation
 * @example
 * import TransportWebUSB from "@ledgerhq/hw-transport-webusb";
 * ...
 * TransportWebUSB.create().then(transport => ...)
 */
var TransportWebUSB$1 = /*#__PURE__*/function (_hwTransport$default) {
  function TransportWebUSB(device, interfaceNumber) {
    var _this;
    _classCallCheck(this, TransportWebUSB);
    _this = _callSuper(this, TransportWebUSB);
    _this.device = void 0;
    _this.deviceModel = void 0;
    _this.channel = Math.floor(Math.random() * 0xffff);
    _this.packetSize = 64;
    _this.interfaceNumber = void 0;
    _this._disconnectEmitted = false;
    _this._emitDisconnect = function (e) {
      if (_this._disconnectEmitted) return;
      _this._disconnectEmitted = true;
      _this.emit("disconnect", e);
    };
    _this.exchange = function (apdu) {
      return _this.exchangeAtomicImpl(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _this2, channel, packetSize, framing, blocks, i, result, acc, r, buffer;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _this2 = _this, channel = _this2.channel, packetSize = _this2.packetSize;
              (0, _logs$5.log)("apdu", "=> " + apdu.toString("hex"));
              framing = (0, _hidFraming$1["default"])(channel, packetSize); // Write...
              blocks = framing.makeBlocks(apdu);
              i = 0;
            case 5:
              if (!(i < blocks.length)) {
                _context.next = 11;
                break;
              }
              _context.next = 8;
              return _this.device.transferOut(endpointNumber, blocks[i]);
            case 8:
              i++;
              _context.next = 5;
              break;
            case 11:
              if (result = framing.getReducedResult(acc)) {
                _context.next = 19;
                break;
              }
              _context.next = 14;
              return _this.device.transferIn(endpointNumber, packetSize);
            case 14:
              r = _context.sent;
              buffer = Buffer.from(r.data.buffer);
              acc = framing.reduceResponse(acc, buffer);
              _context.next = 11;
              break;
            case 19:
              (0, _logs$5.log)("apdu", "<= " + result.toString("hex"));
              return _context.abrupt("return", result);
            case 21:
            case "end":
              return _context.stop();
          }
        }, _callee);
      })))["catch"](function (e) {
        if (e && e.message && e.message.includes("disconnected")) {
          _this._emitDisconnect(e);
          throw new _errors$3.DisconnectedDeviceDuringOperation(e.message);
        }
        throw e;
      });
    };
    _this.device = device;
    _this.interfaceNumber = interfaceNumber;
    _this.deviceModel = (0, _devices$2.identifyUSBProductId)(device.productId);
    return _this;
  }
  /**
   * Check if WebUSB transport is supported.
   */

  /**
   * Similar to create() except it will always display the device permission (even if some devices are already accepted).
   */
  _inherits(TransportWebUSB, _hwTransport$default);
  return _createClass(TransportWebUSB, [{
    key: "close",
    value: (
    /**
     * Release the transport device
     */
    function () {
      var _close = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.exchangeBusyPromise;
            case 2:
              _context2.next = 4;
              return this.device.releaseInterface(this.interfaceNumber);
            case 4:
              _context2.next = 6;
              return gracefullyResetDevice(this.device);
            case 6:
              _context2.next = 8;
              return this.device.close();
            case 8:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function close() {
        return _close.apply(this, arguments);
      }
      return close;
    }()
    /**
     * Exchange with the device using APDU protocol.
     * @param apdu
     * @returns a promise of apdu response
     */
    )
  }, {
    key: "setScrambleKey",
    value: function setScrambleKey() {}
  }], [{
    key: "request",
    value: (function () {
      var _request = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var device;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return (0, _webusb.requestLedgerDevice)();
            case 2:
              device = _context3.sent;
              return _context3.abrupt("return", TransportWebUSB.open(device));
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function request() {
        return _request.apply(this, arguments);
      }
      return request;
    }()
    /**
     * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).
     */
    )
  }, {
    key: "openConnected",
    value: (function () {
      var _openConnected = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var devices;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return (0, _webusb.getLedgerDevices)();
            case 2:
              devices = _context4.sent;
              if (!(devices.length === 0)) {
                _context4.next = 5;
                break;
              }
              return _context4.abrupt("return", null);
            case 5:
              return _context4.abrupt("return", TransportWebUSB.open(devices[0]));
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function openConnected() {
        return _openConnected.apply(this, arguments);
      }
      return openConnected;
    }()
    /**
     * Create a Ledger transport with a USBDevice
     */
    )
  }, {
    key: "open",
    value: (function () {
      var _open = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(device) {
        var iface, interfaceNumber, transport, _onDisconnect;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return device.open();
            case 2:
              if (!(device.configuration === null)) {
                _context5.next = 5;
                break;
              }
              _context5.next = 5;
              return device.selectConfiguration(configurationValue);
            case 5:
              _context5.next = 7;
              return gracefullyResetDevice(device);
            case 7:
              iface = device.configurations[0].interfaces.find(function (_ref2) {
                var alternates = _ref2.alternates;
                return alternates.some(function (a) {
                  return a.interfaceClass === 255;
                });
              });
              if (iface) {
                _context5.next = 10;
                break;
              }
              throw new _errors$3.TransportInterfaceNotAvailable("No WebUSB interface found for your Ledger device. Please upgrade firmware or contact techsupport.");
            case 10:
              interfaceNumber = iface.interfaceNumber;
              _context5.prev = 11;
              _context5.next = 14;
              return device.claimInterface(interfaceNumber);
            case 14:
              _context5.next = 21;
              break;
            case 16:
              _context5.prev = 16;
              _context5.t0 = _context5["catch"](11);
              _context5.next = 20;
              return device.close();
            case 20:
              throw new _errors$3.TransportInterfaceNotAvailable(_context5.t0.message);
            case 21:
              transport = new TransportWebUSB(device, interfaceNumber);
              _onDisconnect = function onDisconnect(e) {
                if (device === e.device) {
                  // $FlowFixMe
                  navigator.usb.removeEventListener("disconnect", _onDisconnect);
                  transport._emitDisconnect(new _errors$3.DisconnectedDevice());
                }
              }; // $FlowFixMe
              navigator.usb.addEventListener("disconnect", _onDisconnect);
              return _context5.abrupt("return", transport);
            case 25:
            case "end":
              return _context5.stop();
          }
        }, _callee5, null, [[11, 16]]);
      }));
      function open(_x) {
        return _open.apply(this, arguments);
      }
      return open;
    }())
  }]);
}(_hwTransport$2["default"]);
TransportWebUSB$2["default"] = TransportWebUSB$1;
TransportWebUSB$1.isSupported = _webusb.isSupported;
TransportWebUSB$1.list = _webusb.getLedgerDevices;
TransportWebUSB$1.listen = function (observer) {
  var unsubscribed = false;
  (0, _webusb.getFirstLedgerDevice)().then(function (device) {
    if (!unsubscribed) {
      var deviceModel = (0, _devices$2.identifyUSBProductId)(device.productId);
      observer.next({
        type: "add",
        descriptor: device,
        deviceModel: deviceModel
      });
      observer.complete();
    }
  }, function (error) {
    if (window.DOMException && error instanceof window.DOMException && error.code === 18) {
      observer.error(new _errors$3.TransportWebUSBGestureRequired(error.message));
    } else {
      observer.error(new _errors$3.TransportOpenUserCancelled(error.message));
    }
  });
  function unsubscribe() {
    unsubscribed = true;
  }
  return {
    unsubscribe: unsubscribe
  };
};
function gracefullyResetDevice(_x2) {
  return _gracefullyResetDevice.apply(this, arguments);
}
function _gracefullyResetDevice() {
  _gracefullyResetDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(device) {
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          _context6.prev = 0;
          _context6.next = 3;
          return device.reset();
        case 3:
          _context6.next = 8;
          break;
        case 5:
          _context6.prev = 5;
          _context6.t0 = _context6["catch"](0);
          console.warn(_context6.t0);
        case 8:
        case "end":
          return _context6.stop();
      }
    }, _callee6, null, [[0, 5]]);
  }));
  return _gracefullyResetDevice.apply(this, arguments);
}

var TransportWebHID$2 = {};

Object.defineProperty(TransportWebHID$2, "__esModule", {
  value: true
});
TransportWebHID$2["default"] = void 0;
var _hwTransport$1 = _interopRequireDefault$1(Transport);
var _hidFraming = _interopRequireDefault$1(hidFraming);
var _devices$1 = lib$1;
var _logs$4 = lib;
var _errors$2 = index_cjs;
function _interopRequireDefault$1(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
var ledgerDevices = [{
  vendorId: _devices$1.ledgerUSBVendorId
}];
var isSupported = function isSupported() {
  return Promise.resolve(!!(commonjsGlobal.navigator && commonjsGlobal.navigator.hid));
};
var getHID = function getHID() {
  // $FlowFixMe
  var _navigator = navigator,
    hid = _navigator.hid;
  if (!hid) throw new _errors$2.TransportError("navigator.hid is not supported", "HIDNotSupported");
  return hid;
};
function requestLedgerDevices() {
  return _requestLedgerDevices.apply(this, arguments);
}
function _requestLedgerDevices() {
  _requestLedgerDevices = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
    var device;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          _context6.next = 2;
          return getHID().requestDevice({
            filters: ledgerDevices
          });
        case 2:
          device = _context6.sent;
          if (!Array.isArray(device)) {
            _context6.next = 5;
            break;
          }
          return _context6.abrupt("return", device);
        case 5:
          return _context6.abrupt("return", [device]);
        case 6:
        case "end":
          return _context6.stop();
      }
    }, _callee6);
  }));
  return _requestLedgerDevices.apply(this, arguments);
}
function getLedgerDevices() {
  return _getLedgerDevices.apply(this, arguments);
}
function _getLedgerDevices() {
  _getLedgerDevices = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
    var devices;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          _context7.next = 2;
          return getHID().getDevices();
        case 2:
          devices = _context7.sent;
          return _context7.abrupt("return", devices.filter(function (d) {
            return d.vendorId === _devices$1.ledgerUSBVendorId;
          }));
        case 4:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  }));
  return _getLedgerDevices.apply(this, arguments);
}
function getFirstLedgerDevice() {
  return _getFirstLedgerDevice.apply(this, arguments);
}
/**
 * WebHID Transport implementation
 * @example
 * import TransportWebHID from "@ledgerhq/hw-transport-webhid";
 * ...
 * TransportWebHID.create().then(transport => ...)
 */
function _getFirstLedgerDevice() {
  _getFirstLedgerDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
    var existingDevices, devices;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          _context8.next = 2;
          return getLedgerDevices();
        case 2:
          existingDevices = _context8.sent;
          if (!(existingDevices.length > 0)) {
            _context8.next = 5;
            break;
          }
          return _context8.abrupt("return", existingDevices[0]);
        case 5:
          _context8.next = 7;
          return requestLedgerDevices();
        case 7:
          devices = _context8.sent;
          return _context8.abrupt("return", devices[0]);
        case 9:
        case "end":
          return _context8.stop();
      }
    }, _callee8);
  }));
  return _getFirstLedgerDevice.apply(this, arguments);
}
var TransportWebHID$1 = /*#__PURE__*/function (_hwTransport$default) {
  function TransportWebHID(device) {
    var _this;
    _classCallCheck(this, TransportWebHID);
    _this = _callSuper(this, TransportWebHID);
    _this.device = void 0;
    _this.deviceModel = void 0;
    _this.channel = Math.floor(Math.random() * 0xffff);
    _this.packetSize = 64;
    _this.inputs = [];
    _this.inputCallback = void 0;
    _this.read = function () {
      if (_this.inputs.length) {
        return Promise.resolve(_this.inputs.shift());
      }
      return new Promise(function (success) {
        _this.inputCallback = success;
      });
    };
    _this.onInputReport = function (e) {
      var buffer = Buffer.from(e.data.buffer);
      if (_this.inputCallback) {
        _this.inputCallback(buffer);
        _this.inputCallback = null;
      } else {
        _this.inputs.push(buffer);
      }
    };
    _this._disconnectEmitted = false;
    _this._emitDisconnect = function (e) {
      if (_this._disconnectEmitted) return;
      _this._disconnectEmitted = true;
      _this.emit("disconnect", e);
    };
    _this.exchange = function (apdu) {
      return _this.exchangeAtomicImpl(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _this2, channel, packetSize, framing, blocks, i, result, acc, buffer;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _this2 = _this, channel = _this2.channel, packetSize = _this2.packetSize;
              (0, _logs$4.log)("apdu", "=> " + apdu.toString("hex"));
              framing = (0, _hidFraming["default"])(channel, packetSize); // Write...
              blocks = framing.makeBlocks(apdu);
              i = 0;
            case 5:
              if (!(i < blocks.length)) {
                _context.next = 11;
                break;
              }
              _context.next = 8;
              return _this.device.sendReport(0, blocks[i]);
            case 8:
              i++;
              _context.next = 5;
              break;
            case 11:
              if (result = framing.getReducedResult(acc)) {
                _context.next = 18;
                break;
              }
              _context.next = 14;
              return _this.read();
            case 14:
              buffer = _context.sent;
              acc = framing.reduceResponse(acc, buffer);
              _context.next = 11;
              break;
            case 18:
              (0, _logs$4.log)("apdu", "<= " + result.toString("hex"));
              return _context.abrupt("return", result);
            case 20:
            case "end":
              return _context.stop();
          }
        }, _callee);
      })))["catch"](function (e) {
        if (e && e.message && e.message.includes("write")) {
          _this._emitDisconnect(e);
          throw new _errors$2.DisconnectedDeviceDuringOperation(e.message);
        }
        throw e;
      });
    };
    _this.device = device;
    _this.deviceModel = (0, _devices$1.identifyUSBProductId)(device.productId);
    device.addEventListener("inputreport", _this.onInputReport);
    return _this;
  }

  /**
   * Similar to create() except it will always display the device permission (even if some devices are already accepted).
   */
  _inherits(TransportWebHID, _hwTransport$default);
  return _createClass(TransportWebHID, [{
    key: "close",
    value: (
    /**
     * Release the transport device
     */
    function () {
      var _close = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.exchangeBusyPromise;
            case 2:
              this.device.removeEventListener("inputreport", this.onInputReport);
              _context2.next = 5;
              return this.device.close();
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function close() {
        return _close.apply(this, arguments);
      }
      return close;
    }()
    /**
     * Exchange with the device using APDU protocol.
     * @param apdu
     * @returns a promise of apdu response
     */
    )
  }, {
    key: "setScrambleKey",
    value: function setScrambleKey() {}
  }], [{
    key: "request",
    value: (function () {
      var _request = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var _yield$requestLedgerD, _yield$requestLedgerD2, device;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return requestLedgerDevices();
            case 2:
              _yield$requestLedgerD = _context3.sent;
              _yield$requestLedgerD2 = _slicedToArray(_yield$requestLedgerD, 1);
              device = _yield$requestLedgerD2[0];
              return _context3.abrupt("return", TransportWebHID.open(device));
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function request() {
        return _request.apply(this, arguments);
      }
      return request;
    }()
    /**
     * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).
     */
    )
  }, {
    key: "openConnected",
    value: (function () {
      var _openConnected = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var devices;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return getLedgerDevices();
            case 2:
              devices = _context4.sent;
              if (!(devices.length === 0)) {
                _context4.next = 5;
                break;
              }
              return _context4.abrupt("return", null);
            case 5:
              return _context4.abrupt("return", TransportWebHID.open(devices[0]));
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function openConnected() {
        return _openConnected.apply(this, arguments);
      }
      return openConnected;
    }()
    /**
     * Create a Ledger transport with a HIDDevice
     */
    )
  }, {
    key: "open",
    value: (function () {
      var _open = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(device) {
        var transport, _onDisconnect;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return device.open();
            case 2:
              transport = new TransportWebHID(device);
              _onDisconnect = function onDisconnect(e) {
                if (device === e.device) {
                  getHID().removeEventListener("disconnect", _onDisconnect);
                  transport._emitDisconnect(new _errors$2.DisconnectedDevice());
                }
              };
              getHID().addEventListener("disconnect", _onDisconnect);
              return _context5.abrupt("return", transport);
            case 6:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function open(_x) {
        return _open.apply(this, arguments);
      }
      return open;
    }())
  }]);
}(_hwTransport$1["default"]);
TransportWebHID$2["default"] = TransportWebHID$1;
TransportWebHID$1.isSupported = isSupported;
TransportWebHID$1.list = getLedgerDevices;
TransportWebHID$1.listen = function (observer) {
  var unsubscribed = false;
  getFirstLedgerDevice().then(function (device) {
    if (!device) {
      observer.error(new _errors$2.TransportOpenUserCancelled("Access denied to use Ledger device"));
    } else if (!unsubscribed) {
      var deviceModel = (0, _devices$1.identifyUSBProductId)(device.productId);
      observer.next({
        type: "add",
        descriptor: device,
        deviceModel: deviceModel
      });
      observer.complete();
    }
  }, function (error) {
    observer.error(new _errors$2.TransportOpenUserCancelled(error.message));
  });
  function unsubscribe() {
    unsubscribed = true;
  }
  return {
    unsubscribe: unsubscribe
  };
};

var TransportWebBLE = {};

var sendAPDU$1 = {};

var rxjs = {};

var Observable$1 = {};

var canReportError$1 = {};

var Subscriber$1 = {};

var isFunction$1 = {};

Object.defineProperty(isFunction$1, "__esModule", {
  value: true
});
function isFunction(x) {
  return typeof x === 'function';
}
isFunction$1.isFunction = isFunction;

var Observer = {};

var config = {};

Object.defineProperty(config, "__esModule", {
  value: true
});
var _enable_super_gross_mode_that_will_cause_bad_things = false;
config.config = {
  Promise: undefined,
  set useDeprecatedSynchronousErrorHandling(value) {
    if (value) {
      var error = new Error();
      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {
      console.log('RxJS: Back to a better error behavior. Thank you. <3');
    }
    _enable_super_gross_mode_that_will_cause_bad_things = value;
  },
  get useDeprecatedSynchronousErrorHandling() {
    return _enable_super_gross_mode_that_will_cause_bad_things;
  }
};

var hostReportError$1 = {};

Object.defineProperty(hostReportError$1, "__esModule", {
  value: true
});
function hostReportError(err) {
  setTimeout(function () {
    throw err;
  }, 0);
}
hostReportError$1.hostReportError = hostReportError;

Object.defineProperty(Observer, "__esModule", {
  value: true
});
var config_1$3 = config;
var hostReportError_1$2 = hostReportError$1;
Observer.empty = {
  closed: true,
  next: function next(value) {},
  error: function error(err) {
    if (config_1$3.config.useDeprecatedSynchronousErrorHandling) {
      throw err;
    } else {
      hostReportError_1$2.hostReportError(err);
    }
  },
  complete: function complete() {}
};

var Subscription$1 = {};

var isArray = {};

Object.defineProperty(isArray, "__esModule", {
  value: true
});
isArray.isArray = function () {
  return Array.isArray || function (x) {
    return x && typeof x.length === 'number';
  };
}();

var isObject$1 = {};

Object.defineProperty(isObject$1, "__esModule", {
  value: true
});
function isObject(x) {
  return x !== null && _typeof(x) === 'object';
}
isObject$1.isObject = isObject;

var UnsubscriptionError = {};

Object.defineProperty(UnsubscriptionError, "__esModule", {
  value: true
});
var UnsubscriptionErrorImpl = function () {
  function UnsubscriptionErrorImpl(errors) {
    Error.call(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) {
      return i + 1 + ") " + err.toString();
    }).join('\n  ') : '';
    this.name = 'UnsubscriptionError';
    this.errors = errors;
    return this;
  }
  UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);
  return UnsubscriptionErrorImpl;
}();
UnsubscriptionError.UnsubscriptionError = UnsubscriptionErrorImpl;

Object.defineProperty(Subscription$1, "__esModule", {
  value: true
});
var isArray_1$d = isArray;
var isObject_1$2 = isObject$1;
var isFunction_1$4 = isFunction$1;
var UnsubscriptionError_1$1 = UnsubscriptionError;
var Subscription = function () {
  function Subscription(unsubscribe) {
    this.closed = false;
    this._parentOrParents = null;
    this._subscriptions = null;
    if (unsubscribe) {
      this._ctorUnsubscribe = true;
      this._unsubscribe = unsubscribe;
    }
  }
  Subscription.prototype.unsubscribe = function () {
    var errors;
    if (this.closed) {
      return;
    }
    var _a = this,
      _parentOrParents = _a._parentOrParents,
      _ctorUnsubscribe = _a._ctorUnsubscribe,
      _unsubscribe = _a._unsubscribe,
      _subscriptions = _a._subscriptions;
    this.closed = true;
    this._parentOrParents = null;
    this._subscriptions = null;
    if (_parentOrParents instanceof Subscription) {
      _parentOrParents.remove(this);
    } else if (_parentOrParents !== null) {
      for (var index = 0; index < _parentOrParents.length; ++index) {
        var parent_1 = _parentOrParents[index];
        parent_1.remove(this);
      }
    }
    if (isFunction_1$4.isFunction(_unsubscribe)) {
      if (_ctorUnsubscribe) {
        this._unsubscribe = undefined;
      }
      try {
        _unsubscribe.call(this);
      } catch (e) {
        errors = e instanceof UnsubscriptionError_1$1.UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
      }
    }
    if (isArray_1$d.isArray(_subscriptions)) {
      var index = -1;
      var len = _subscriptions.length;
      while (++index < len) {
        var sub = _subscriptions[index];
        if (isObject_1$2.isObject(sub)) {
          try {
            sub.unsubscribe();
          } catch (e) {
            errors = errors || [];
            if (e instanceof UnsubscriptionError_1$1.UnsubscriptionError) {
              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
            } else {
              errors.push(e);
            }
          }
        }
      }
    }
    if (errors) {
      throw new UnsubscriptionError_1$1.UnsubscriptionError(errors);
    }
  };
  Subscription.prototype.add = function (teardown) {
    var subscription = teardown;
    if (!teardown) {
      return Subscription.EMPTY;
    }
    switch (_typeof(teardown)) {
      case 'function':
        subscription = new Subscription(teardown);
      case 'object':
        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
          return subscription;
        } else if (this.closed) {
          subscription.unsubscribe();
          return subscription;
        } else if (!(subscription instanceof Subscription)) {
          var tmp = subscription;
          subscription = new Subscription();
          subscription._subscriptions = [tmp];
        }
        break;
      default:
        {
          throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
    }
    var _parentOrParents = subscription._parentOrParents;
    if (_parentOrParents === null) {
      subscription._parentOrParents = this;
    } else if (_parentOrParents instanceof Subscription) {
      if (_parentOrParents === this) {
        return subscription;
      }
      subscription._parentOrParents = [_parentOrParents, this];
    } else if (_parentOrParents.indexOf(this) === -1) {
      _parentOrParents.push(this);
    } else {
      return subscription;
    }
    var subscriptions = this._subscriptions;
    if (subscriptions === null) {
      this._subscriptions = [subscription];
    } else {
      subscriptions.push(subscription);
    }
    return subscription;
  };
  Subscription.prototype.remove = function (subscription) {
    var subscriptions = this._subscriptions;
    if (subscriptions) {
      var subscriptionIndex = subscriptions.indexOf(subscription);
      if (subscriptionIndex !== -1) {
        subscriptions.splice(subscriptionIndex, 1);
      }
    }
  };
  Subscription.EMPTY = function (empty) {
    empty.closed = true;
    return empty;
  }(new Subscription());
  return Subscription;
}();
Subscription$1.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) {
  return errors.reduce(function (errs, err) {
    return errs.concat(err instanceof UnsubscriptionError_1$1.UnsubscriptionError ? err.errors : err);
  }, []);
}

var rxSubscriber = {};

(function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.rxSubscriber = function () {
    return typeof Symbol === 'function' ? Symbol('rxSubscriber') : '@@rxSubscriber_' + Math.random();
  }();
  exports.$$rxSubscriber = exports.rxSubscriber;
})(rxSubscriber);

var __extends$1m = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(Subscriber$1, "__esModule", {
  value: true
});
var isFunction_1$3 = isFunction$1;
var Observer_1$1 = Observer;
var Subscription_1$h = Subscription$1;
var rxSubscriber_1$2 = rxSubscriber;
var config_1$2 = config;
var hostReportError_1$1 = hostReportError$1;
var Subscriber = function (_super) {
  __extends$1m(Subscriber, _super);
  function Subscriber(destinationOrNext, error, complete) {
    var _this = _super.call(this) || this;
    _this.syncErrorValue = null;
    _this.syncErrorThrown = false;
    _this.syncErrorThrowable = false;
    _this.isStopped = false;
    switch (arguments.length) {
      case 0:
        _this.destination = Observer_1$1.empty;
        break;
      case 1:
        if (!destinationOrNext) {
          _this.destination = Observer_1$1.empty;
          break;
        }
        if (_typeof(destinationOrNext) === 'object') {
          if (destinationOrNext instanceof Subscriber) {
            _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
            _this.destination = destinationOrNext;
            destinationOrNext.add(_this);
          } else {
            _this.syncErrorThrowable = true;
            _this.destination = new SafeSubscriber(_this, destinationOrNext);
          }
          break;
        }
      default:
        _this.syncErrorThrowable = true;
        _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
        break;
    }
    return _this;
  }
  Subscriber.prototype[rxSubscriber_1$2.rxSubscriber] = function () {
    return this;
  };
  Subscriber.create = function (next, error, complete) {
    var subscriber = new Subscriber(next, error, complete);
    subscriber.syncErrorThrowable = false;
    return subscriber;
  };
  Subscriber.prototype.next = function (value) {
    if (!this.isStopped) {
      this._next(value);
    }
  };
  Subscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      this.isStopped = true;
      this._error(err);
    }
  };
  Subscriber.prototype.complete = function () {
    if (!this.isStopped) {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber.prototype.unsubscribe = function () {
    if (this.closed) {
      return;
    }
    this.isStopped = true;
    _super.prototype.unsubscribe.call(this);
  };
  Subscriber.prototype._next = function (value) {
    this.destination.next(value);
  };
  Subscriber.prototype._error = function (err) {
    this.destination.error(err);
    this.unsubscribe();
  };
  Subscriber.prototype._complete = function () {
    this.destination.complete();
    this.unsubscribe();
  };
  Subscriber.prototype._unsubscribeAndRecycle = function () {
    var _parentOrParents = this._parentOrParents;
    this._parentOrParents = null;
    this.unsubscribe();
    this.closed = false;
    this.isStopped = false;
    this._parentOrParents = _parentOrParents;
    return this;
  };
  return Subscriber;
}(Subscription_1$h.Subscription);
Subscriber$1.Subscriber = Subscriber;
var SafeSubscriber = function (_super) {
  __extends$1m(SafeSubscriber, _super);
  function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
    var _this = _super.call(this) || this;
    _this._parentSubscriber = _parentSubscriber;
    var next;
    var context = _this;
    if (isFunction_1$3.isFunction(observerOrNext)) {
      next = observerOrNext;
    } else if (observerOrNext) {
      next = observerOrNext.next;
      error = observerOrNext.error;
      complete = observerOrNext.complete;
      if (observerOrNext !== Observer_1$1.empty) {
        context = Object.create(observerOrNext);
        if (isFunction_1$3.isFunction(context.unsubscribe)) {
          _this.add(context.unsubscribe.bind(context));
        }
        context.unsubscribe = _this.unsubscribe.bind(_this);
      }
    }
    _this._context = context;
    _this._next = next;
    _this._error = error;
    _this._complete = complete;
    return _this;
  }
  SafeSubscriber.prototype.next = function (value) {
    if (!this.isStopped && this._next) {
      var _parentSubscriber = this._parentSubscriber;
      if (!config_1$2.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
        this.__tryOrUnsub(this._next, value);
      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
        this.unsubscribe();
      }
    }
  };
  SafeSubscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      var _parentSubscriber = this._parentSubscriber;
      var useDeprecatedSynchronousErrorHandling = config_1$2.config.useDeprecatedSynchronousErrorHandling;
      if (this._error) {
        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
          this.__tryOrUnsub(this._error, err);
          this.unsubscribe();
        } else {
          this.__tryOrSetError(_parentSubscriber, this._error, err);
          this.unsubscribe();
        }
      } else if (!_parentSubscriber.syncErrorThrowable) {
        this.unsubscribe();
        if (useDeprecatedSynchronousErrorHandling) {
          throw err;
        }
        hostReportError_1$1.hostReportError(err);
      } else {
        if (useDeprecatedSynchronousErrorHandling) {
          _parentSubscriber.syncErrorValue = err;
          _parentSubscriber.syncErrorThrown = true;
        } else {
          hostReportError_1$1.hostReportError(err);
        }
        this.unsubscribe();
      }
    }
  };
  SafeSubscriber.prototype.complete = function () {
    var _this = this;
    if (!this.isStopped) {
      var _parentSubscriber = this._parentSubscriber;
      if (this._complete) {
        var wrappedComplete = function wrappedComplete() {
          return _this._complete.call(_this._context);
        };
        if (!config_1$2.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
          this.__tryOrUnsub(wrappedComplete);
          this.unsubscribe();
        } else {
          this.__tryOrSetError(_parentSubscriber, wrappedComplete);
          this.unsubscribe();
        }
      } else {
        this.unsubscribe();
      }
    }
  };
  SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
    try {
      fn.call(this._context, value);
    } catch (err) {
      this.unsubscribe();
      if (config_1$2.config.useDeprecatedSynchronousErrorHandling) {
        throw err;
      } else {
        hostReportError_1$1.hostReportError(err);
      }
    }
  };
  SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
    if (!config_1$2.config.useDeprecatedSynchronousErrorHandling) {
      throw new Error('bad call');
    }
    try {
      fn.call(this._context, value);
    } catch (err) {
      if (config_1$2.config.useDeprecatedSynchronousErrorHandling) {
        parent.syncErrorValue = err;
        parent.syncErrorThrown = true;
        return true;
      } else {
        hostReportError_1$1.hostReportError(err);
        return true;
      }
    }
    return false;
  };
  SafeSubscriber.prototype._unsubscribe = function () {
    var _parentSubscriber = this._parentSubscriber;
    this._context = null;
    this._parentSubscriber = null;
    _parentSubscriber.unsubscribe();
  };
  return SafeSubscriber;
}(Subscriber);
Subscriber$1.SafeSubscriber = SafeSubscriber;

Object.defineProperty(canReportError$1, "__esModule", {
  value: true
});
var Subscriber_1$L = Subscriber$1;
function canReportError(observer) {
  while (observer) {
    var _a = observer,
      closed_1 = _a.closed,
      destination = _a.destination,
      isStopped = _a.isStopped;
    if (closed_1 || isStopped) {
      return false;
    } else if (destination && destination instanceof Subscriber_1$L.Subscriber) {
      observer = destination;
    } else {
      observer = null;
    }
  }
  return true;
}
canReportError$1.canReportError = canReportError;

var toSubscriber$1 = {};

Object.defineProperty(toSubscriber$1, "__esModule", {
  value: true
});
var Subscriber_1$K = Subscriber$1;
var rxSubscriber_1$1 = rxSubscriber;
var Observer_1 = Observer;
function toSubscriber(nextOrObserver, error, complete) {
  if (nextOrObserver) {
    if (nextOrObserver instanceof Subscriber_1$K.Subscriber) {
      return nextOrObserver;
    }
    if (nextOrObserver[rxSubscriber_1$1.rxSubscriber]) {
      return nextOrObserver[rxSubscriber_1$1.rxSubscriber]();
    }
  }
  if (!nextOrObserver && !error && !complete) {
    return new Subscriber_1$K.Subscriber(Observer_1.empty);
  }
  return new Subscriber_1$K.Subscriber(nextOrObserver, error, complete);
}
toSubscriber$1.toSubscriber = toSubscriber;

var observable = {};

Object.defineProperty(observable, "__esModule", {
  value: true
});
observable.observable = function () {
  return typeof Symbol === 'function' && Symbol.observable || '@@observable';
}();

var pipe$1 = {};

var identity$1 = {};

Object.defineProperty(identity$1, "__esModule", {
  value: true
});
function identity(x) {
  return x;
}
identity$1.identity = identity;

Object.defineProperty(pipe$1, "__esModule", {
  value: true
});
var identity_1$6 = identity$1;
function pipe() {
  var fns = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    fns[_i] = arguments[_i];
  }
  return pipeFromArray(fns);
}
pipe$1.pipe = pipe;
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity_1$6.identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function (prev, fn) {
      return fn(prev);
    }, input);
  };
}
pipe$1.pipeFromArray = pipeFromArray;

Object.defineProperty(Observable$1, "__esModule", {
  value: true
});
var canReportError_1$2 = canReportError$1;
var toSubscriber_1 = toSubscriber$1;
var observable_1$5 = observable;
var pipe_1$2 = pipe$1;
var config_1$1 = config;
var Observable = function () {
  function Observable(subscribe) {
    this._isScalar = false;
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  Observable.prototype.lift = function (operator) {
    var observable = new Observable();
    observable.source = this;
    observable.operator = operator;
    return observable;
  };
  Observable.prototype.subscribe = function (observerOrNext, error, complete) {
    var operator = this.operator;
    var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
    if (operator) {
      sink.add(operator.call(sink, this.source));
    } else {
      sink.add(this.source || config_1$1.config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
    }
    if (config_1$1.config.useDeprecatedSynchronousErrorHandling) {
      if (sink.syncErrorThrowable) {
        sink.syncErrorThrowable = false;
        if (sink.syncErrorThrown) {
          throw sink.syncErrorValue;
        }
      }
    }
    return sink;
  };
  Observable.prototype._trySubscribe = function (sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      if (config_1$1.config.useDeprecatedSynchronousErrorHandling) {
        sink.syncErrorThrown = true;
        sink.syncErrorValue = err;
      }
      if (canReportError_1$2.canReportError(sink)) {
        sink.error(err);
      } else {
        console.warn(err);
      }
    }
  };
  Observable.prototype.forEach = function (next, promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function (resolve, reject) {
      var subscription;
      subscription = _this.subscribe(function (value) {
        try {
          next(value);
        } catch (err) {
          reject(err);
          if (subscription) {
            subscription.unsubscribe();
          }
        }
      }, reject, resolve);
    });
  };
  Observable.prototype._subscribe = function (subscriber) {
    var source = this.source;
    return source && source.subscribe(subscriber);
  };
  Observable.prototype[observable_1$5.observable] = function () {
    return this;
  };
  Observable.prototype.pipe = function () {
    var operations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      operations[_i] = arguments[_i];
    }
    if (operations.length === 0) {
      return this;
    }
    return pipe_1$2.pipeFromArray(operations)(this);
  };
  Observable.prototype.toPromise = function (promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function (resolve, reject) {
      var value;
      _this.subscribe(function (x) {
        return value = x;
      }, function (err) {
        return reject(err);
      }, function () {
        return resolve(value);
      });
    });
  };
  Observable.create = function (subscribe) {
    return new Observable(subscribe);
  };
  return Observable;
}();
Observable$1.Observable = Observable;
function getPromiseCtor(promiseCtor) {
  if (!promiseCtor) {
    promiseCtor = config_1$1.config.Promise || Promise;
  }
  if (!promiseCtor) {
    throw new Error('no Promise impl found');
  }
  return promiseCtor;
}

var ConnectableObservable$1 = {};

var Subject$1 = {};

var ObjectUnsubscribedError = {};

Object.defineProperty(ObjectUnsubscribedError, "__esModule", {
  value: true
});
var ObjectUnsubscribedErrorImpl = function () {
  function ObjectUnsubscribedErrorImpl() {
    Error.call(this);
    this.message = 'object unsubscribed';
    this.name = 'ObjectUnsubscribedError';
    return this;
  }
  ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);
  return ObjectUnsubscribedErrorImpl;
}();
ObjectUnsubscribedError.ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;

var SubjectSubscription$1 = {};

var __extends$1l = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(SubjectSubscription$1, "__esModule", {
  value: true
});
var Subscription_1$g = Subscription$1;
var SubjectSubscription = function (_super) {
  __extends$1l(SubjectSubscription, _super);
  function SubjectSubscription(subject, subscriber) {
    var _this = _super.call(this) || this;
    _this.subject = subject;
    _this.subscriber = subscriber;
    _this.closed = false;
    return _this;
  }
  SubjectSubscription.prototype.unsubscribe = function () {
    if (this.closed) {
      return;
    }
    this.closed = true;
    var subject = this.subject;
    var observers = subject.observers;
    this.subject = null;
    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
      return;
    }
    var subscriberIndex = observers.indexOf(this.subscriber);
    if (subscriberIndex !== -1) {
      observers.splice(subscriberIndex, 1);
    }
  };
  return SubjectSubscription;
}(Subscription_1$g.Subscription);
SubjectSubscription$1.SubjectSubscription = SubjectSubscription;

var __extends$1k = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(Subject$1, "__esModule", {
  value: true
});
var Observable_1$u = Observable$1;
var Subscriber_1$J = Subscriber$1;
var Subscription_1$f = Subscription$1;
var ObjectUnsubscribedError_1$3 = ObjectUnsubscribedError;
var SubjectSubscription_1$1 = SubjectSubscription$1;
var rxSubscriber_1 = rxSubscriber;
var SubjectSubscriber = function (_super) {
  __extends$1k(SubjectSubscriber, _super);
  function SubjectSubscriber(destination) {
    var _this = _super.call(this, destination) || this;
    _this.destination = destination;
    return _this;
  }
  return SubjectSubscriber;
}(Subscriber_1$J.Subscriber);
Subject$1.SubjectSubscriber = SubjectSubscriber;
var Subject = function (_super) {
  __extends$1k(Subject, _super);
  function Subject() {
    var _this = _super.call(this) || this;
    _this.observers = [];
    _this.closed = false;
    _this.isStopped = false;
    _this.hasError = false;
    _this.thrownError = null;
    return _this;
  }
  Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {
    return new SubjectSubscriber(this);
  };
  Subject.prototype.lift = function (operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };
  Subject.prototype.next = function (value) {
    if (this.closed) {
      throw new ObjectUnsubscribedError_1$3.ObjectUnsubscribedError();
    }
    if (!this.isStopped) {
      var observers = this.observers;
      var len = observers.length;
      var copy = observers.slice();
      for (var i = 0; i < len; i++) {
        copy[i].next(value);
      }
    }
  };
  Subject.prototype.error = function (err) {
    if (this.closed) {
      throw new ObjectUnsubscribedError_1$3.ObjectUnsubscribedError();
    }
    this.hasError = true;
    this.thrownError = err;
    this.isStopped = true;
    var observers = this.observers;
    var len = observers.length;
    var copy = observers.slice();
    for (var i = 0; i < len; i++) {
      copy[i].error(err);
    }
    this.observers.length = 0;
  };
  Subject.prototype.complete = function () {
    if (this.closed) {
      throw new ObjectUnsubscribedError_1$3.ObjectUnsubscribedError();
    }
    this.isStopped = true;
    var observers = this.observers;
    var len = observers.length;
    var copy = observers.slice();
    for (var i = 0; i < len; i++) {
      copy[i].complete();
    }
    this.observers.length = 0;
  };
  Subject.prototype.unsubscribe = function () {
    this.isStopped = true;
    this.closed = true;
    this.observers = null;
  };
  Subject.prototype._trySubscribe = function (subscriber) {
    if (this.closed) {
      throw new ObjectUnsubscribedError_1$3.ObjectUnsubscribedError();
    } else {
      return _super.prototype._trySubscribe.call(this, subscriber);
    }
  };
  Subject.prototype._subscribe = function (subscriber) {
    if (this.closed) {
      throw new ObjectUnsubscribedError_1$3.ObjectUnsubscribedError();
    } else if (this.hasError) {
      subscriber.error(this.thrownError);
      return Subscription_1$f.Subscription.EMPTY;
    } else if (this.isStopped) {
      subscriber.complete();
      return Subscription_1$f.Subscription.EMPTY;
    } else {
      this.observers.push(subscriber);
      return new SubjectSubscription_1$1.SubjectSubscription(this, subscriber);
    }
  };
  Subject.prototype.asObservable = function () {
    var observable = new Observable_1$u.Observable();
    observable.source = this;
    return observable;
  };
  Subject.create = function (destination, source) {
    return new AnonymousSubject(destination, source);
  };
  return Subject;
}(Observable_1$u.Observable);
Subject$1.Subject = Subject;
var AnonymousSubject = function (_super) {
  __extends$1k(AnonymousSubject, _super);
  function AnonymousSubject(destination, source) {
    var _this = _super.call(this) || this;
    _this.destination = destination;
    _this.source = source;
    return _this;
  }
  AnonymousSubject.prototype.next = function (value) {
    var destination = this.destination;
    if (destination && destination.next) {
      destination.next(value);
    }
  };
  AnonymousSubject.prototype.error = function (err) {
    var destination = this.destination;
    if (destination && destination.error) {
      this.destination.error(err);
    }
  };
  AnonymousSubject.prototype.complete = function () {
    var destination = this.destination;
    if (destination && destination.complete) {
      this.destination.complete();
    }
  };
  AnonymousSubject.prototype._subscribe = function (subscriber) {
    var source = this.source;
    if (source) {
      return this.source.subscribe(subscriber);
    } else {
      return Subscription_1$f.Subscription.EMPTY;
    }
  };
  return AnonymousSubject;
}(Subject);
Subject$1.AnonymousSubject = AnonymousSubject;

var refCount$1 = {};

var __extends$1j = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(refCount$1, "__esModule", {
  value: true
});
var Subscriber_1$I = Subscriber$1;
function refCount() {
  return function refCountOperatorFunction(source) {
    return source.lift(new RefCountOperator(source));
  };
}
refCount$1.refCount = refCount;
var RefCountOperator = function () {
  function RefCountOperator(connectable) {
    this.connectable = connectable;
  }
  RefCountOperator.prototype.call = function (subscriber, source) {
    var connectable = this.connectable;
    connectable._refCount++;
    var refCounter = new RefCountSubscriber(subscriber, connectable);
    var subscription = source.subscribe(refCounter);
    if (!refCounter.closed) {
      refCounter.connection = connectable.connect();
    }
    return subscription;
  };
  return RefCountOperator;
}();
var RefCountSubscriber = function (_super) {
  __extends$1j(RefCountSubscriber, _super);
  function RefCountSubscriber(destination, connectable) {
    var _this = _super.call(this, destination) || this;
    _this.connectable = connectable;
    return _this;
  }
  RefCountSubscriber.prototype._unsubscribe = function () {
    var connectable = this.connectable;
    if (!connectable) {
      this.connection = null;
      return;
    }
    this.connectable = null;
    var refCount = connectable._refCount;
    if (refCount <= 0) {
      this.connection = null;
      return;
    }
    connectable._refCount = refCount - 1;
    if (refCount > 1) {
      this.connection = null;
      return;
    }
    var connection = this.connection;
    var sharedConnection = connectable._connection;
    this.connection = null;
    if (sharedConnection && (!connection || sharedConnection === connection)) {
      sharedConnection.unsubscribe();
    }
  };
  return RefCountSubscriber;
}(Subscriber_1$I.Subscriber);

var __extends$1i = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(ConnectableObservable$1, "__esModule", {
  value: true
});
var Subject_1$e = Subject$1;
var Observable_1$t = Observable$1;
var Subscriber_1$H = Subscriber$1;
var Subscription_1$e = Subscription$1;
var refCount_1$2 = refCount$1;
var ConnectableObservable = function (_super) {
  __extends$1i(ConnectableObservable, _super);
  function ConnectableObservable(source, subjectFactory) {
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.subjectFactory = subjectFactory;
    _this._refCount = 0;
    _this._isComplete = false;
    return _this;
  }
  ConnectableObservable.prototype._subscribe = function (subscriber) {
    return this.getSubject().subscribe(subscriber);
  };
  ConnectableObservable.prototype.getSubject = function () {
    var subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  };
  ConnectableObservable.prototype.connect = function () {
    var connection = this._connection;
    if (!connection) {
      this._isComplete = false;
      connection = this._connection = new Subscription_1$e.Subscription();
      connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));
      if (connection.closed) {
        this._connection = null;
        connection = Subscription_1$e.Subscription.EMPTY;
      }
    }
    return connection;
  };
  ConnectableObservable.prototype.refCount = function () {
    return refCount_1$2.refCount()(this);
  };
  return ConnectableObservable;
}(Observable_1$t.Observable);
ConnectableObservable$1.ConnectableObservable = ConnectableObservable;
ConnectableObservable$1.connectableObservableDescriptor = function () {
  var connectableProto = ConnectableObservable.prototype;
  return {
    operator: {
      value: null
    },
    _refCount: {
      value: 0,
      writable: true
    },
    _subject: {
      value: null,
      writable: true
    },
    _connection: {
      value: null,
      writable: true
    },
    _subscribe: {
      value: connectableProto._subscribe
    },
    _isComplete: {
      value: connectableProto._isComplete,
      writable: true
    },
    getSubject: {
      value: connectableProto.getSubject
    },
    connect: {
      value: connectableProto.connect
    },
    refCount: {
      value: connectableProto.refCount
    }
  };
}();
var ConnectableSubscriber = function (_super) {
  __extends$1i(ConnectableSubscriber, _super);
  function ConnectableSubscriber(destination, connectable) {
    var _this = _super.call(this, destination) || this;
    _this.connectable = connectable;
    return _this;
  }
  ConnectableSubscriber.prototype._error = function (err) {
    this._unsubscribe();
    _super.prototype._error.call(this, err);
  };
  ConnectableSubscriber.prototype._complete = function () {
    this.connectable._isComplete = true;
    this._unsubscribe();
    _super.prototype._complete.call(this);
  };
  ConnectableSubscriber.prototype._unsubscribe = function () {
    var connectable = this.connectable;
    if (connectable) {
      this.connectable = null;
      var connection = connectable._connection;
      connectable._refCount = 0;
      connectable._subject = null;
      connectable._connection = null;
      if (connection) {
        connection.unsubscribe();
      }
    }
  };
  return ConnectableSubscriber;
}(Subject_1$e.SubjectSubscriber);
(function (_super) {
  __extends$1i(RefCountSubscriber, _super);
  function RefCountSubscriber(destination, connectable) {
    var _this = _super.call(this, destination) || this;
    _this.connectable = connectable;
    return _this;
  }
  RefCountSubscriber.prototype._unsubscribe = function () {
    var connectable = this.connectable;
    if (!connectable) {
      this.connection = null;
      return;
    }
    this.connectable = null;
    var refCount = connectable._refCount;
    if (refCount <= 0) {
      this.connection = null;
      return;
    }
    connectable._refCount = refCount - 1;
    if (refCount > 1) {
      this.connection = null;
      return;
    }
    var connection = this.connection;
    var sharedConnection = connectable._connection;
    this.connection = null;
    if (sharedConnection && (!connection || sharedConnection === connection)) {
      sharedConnection.unsubscribe();
    }
  };
  return RefCountSubscriber;
})(Subscriber_1$H.Subscriber);

var groupBy$1 = {};

var __extends$1h = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(groupBy$1, "__esModule", {
  value: true
});
var Subscriber_1$G = Subscriber$1;
var Subscription_1$d = Subscription$1;
var Observable_1$s = Observable$1;
var Subject_1$d = Subject$1;
function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
  return function (source) {
    return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
  };
}
groupBy$1.groupBy = groupBy;
var GroupByOperator = function () {
  function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
    this.keySelector = keySelector;
    this.elementSelector = elementSelector;
    this.durationSelector = durationSelector;
    this.subjectSelector = subjectSelector;
  }
  GroupByOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
  };
  return GroupByOperator;
}();
var GroupBySubscriber = function (_super) {
  __extends$1h(GroupBySubscriber, _super);
  function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
    var _this = _super.call(this, destination) || this;
    _this.keySelector = keySelector;
    _this.elementSelector = elementSelector;
    _this.durationSelector = durationSelector;
    _this.subjectSelector = subjectSelector;
    _this.groups = null;
    _this.attemptedToUnsubscribe = false;
    _this.count = 0;
    return _this;
  }
  GroupBySubscriber.prototype._next = function (value) {
    var key;
    try {
      key = this.keySelector(value);
    } catch (err) {
      this.error(err);
      return;
    }
    this._group(value, key);
  };
  GroupBySubscriber.prototype._group = function (value, key) {
    var groups = this.groups;
    if (!groups) {
      groups = this.groups = new Map();
    }
    var group = groups.get(key);
    var element;
    if (this.elementSelector) {
      try {
        element = this.elementSelector(value);
      } catch (err) {
        this.error(err);
      }
    } else {
      element = value;
    }
    if (!group) {
      group = this.subjectSelector ? this.subjectSelector() : new Subject_1$d.Subject();
      groups.set(key, group);
      var groupedObservable = new GroupedObservable(key, group, this);
      this.destination.next(groupedObservable);
      if (this.durationSelector) {
        var duration = void 0;
        try {
          duration = this.durationSelector(new GroupedObservable(key, group));
        } catch (err) {
          this.error(err);
          return;
        }
        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
      }
    }
    if (!group.closed) {
      group.next(element);
    }
  };
  GroupBySubscriber.prototype._error = function (err) {
    var groups = this.groups;
    if (groups) {
      groups.forEach(function (group, key) {
        group.error(err);
      });
      groups.clear();
    }
    this.destination.error(err);
  };
  GroupBySubscriber.prototype._complete = function () {
    var groups = this.groups;
    if (groups) {
      groups.forEach(function (group, key) {
        group.complete();
      });
      groups.clear();
    }
    this.destination.complete();
  };
  GroupBySubscriber.prototype.removeGroup = function (key) {
    this.groups["delete"](key);
  };
  GroupBySubscriber.prototype.unsubscribe = function () {
    if (!this.closed) {
      this.attemptedToUnsubscribe = true;
      if (this.count === 0) {
        _super.prototype.unsubscribe.call(this);
      }
    }
  };
  return GroupBySubscriber;
}(Subscriber_1$G.Subscriber);
var GroupDurationSubscriber = function (_super) {
  __extends$1h(GroupDurationSubscriber, _super);
  function GroupDurationSubscriber(key, group, parent) {
    var _this = _super.call(this, group) || this;
    _this.key = key;
    _this.group = group;
    _this.parent = parent;
    return _this;
  }
  GroupDurationSubscriber.prototype._next = function (value) {
    this.complete();
  };
  GroupDurationSubscriber.prototype._unsubscribe = function () {
    var _a = this,
      parent = _a.parent,
      key = _a.key;
    this.key = this.parent = null;
    if (parent) {
      parent.removeGroup(key);
    }
  };
  return GroupDurationSubscriber;
}(Subscriber_1$G.Subscriber);
var GroupedObservable = function (_super) {
  __extends$1h(GroupedObservable, _super);
  function GroupedObservable(key, groupSubject, refCountSubscription) {
    var _this = _super.call(this) || this;
    _this.key = key;
    _this.groupSubject = groupSubject;
    _this.refCountSubscription = refCountSubscription;
    return _this;
  }
  GroupedObservable.prototype._subscribe = function (subscriber) {
    var subscription = new Subscription_1$d.Subscription();
    var _a = this,
      refCountSubscription = _a.refCountSubscription,
      groupSubject = _a.groupSubject;
    if (refCountSubscription && !refCountSubscription.closed) {
      subscription.add(new InnerRefCountSubscription(refCountSubscription));
    }
    subscription.add(groupSubject.subscribe(subscriber));
    return subscription;
  };
  return GroupedObservable;
}(Observable_1$s.Observable);
groupBy$1.GroupedObservable = GroupedObservable;
var InnerRefCountSubscription = function (_super) {
  __extends$1h(InnerRefCountSubscription, _super);
  function InnerRefCountSubscription(parent) {
    var _this = _super.call(this) || this;
    _this.parent = parent;
    parent.count++;
    return _this;
  }
  InnerRefCountSubscription.prototype.unsubscribe = function () {
    var parent = this.parent;
    if (!parent.closed && !this.closed) {
      _super.prototype.unsubscribe.call(this);
      parent.count -= 1;
      if (parent.count === 0 && parent.attemptedToUnsubscribe) {
        parent.unsubscribe();
      }
    }
  };
  return InnerRefCountSubscription;
}(Subscription_1$d.Subscription);

var BehaviorSubject$1 = {};

var __extends$1g = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(BehaviorSubject$1, "__esModule", {
  value: true
});
var Subject_1$c = Subject$1;
var ObjectUnsubscribedError_1$2 = ObjectUnsubscribedError;
var BehaviorSubject = function (_super) {
  __extends$1g(BehaviorSubject, _super);
  function BehaviorSubject(_value) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    return _this;
  }
  Object.defineProperty(BehaviorSubject.prototype, "value", {
    get: function get() {
      return this.getValue();
    },
    enumerable: true,
    configurable: true
  });
  BehaviorSubject.prototype._subscribe = function (subscriber) {
    var subscription = _super.prototype._subscribe.call(this, subscriber);
    if (subscription && !subscription.closed) {
      subscriber.next(this._value);
    }
    return subscription;
  };
  BehaviorSubject.prototype.getValue = function () {
    if (this.hasError) {
      throw this.thrownError;
    } else if (this.closed) {
      throw new ObjectUnsubscribedError_1$2.ObjectUnsubscribedError();
    } else {
      return this._value;
    }
  };
  BehaviorSubject.prototype.next = function (value) {
    _super.prototype.next.call(this, this._value = value);
  };
  return BehaviorSubject;
}(Subject_1$c.Subject);
BehaviorSubject$1.BehaviorSubject = BehaviorSubject;

var ReplaySubject$1 = {};

var queue = {};

var QueueAction$1 = {};

var AsyncAction$1 = {};

var Action$1 = {};

var __extends$1f = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(Action$1, "__esModule", {
  value: true
});
var Subscription_1$c = Subscription$1;
var Action = function (_super) {
  __extends$1f(Action, _super);
  function Action(scheduler, work) {
    return _super.call(this) || this;
  }
  Action.prototype.schedule = function (state, delay) {
    return this;
  };
  return Action;
}(Subscription_1$c.Subscription);
Action$1.Action = Action;

var __extends$1e = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(AsyncAction$1, "__esModule", {
  value: true
});
var Action_1 = Action$1;
var AsyncAction = function (_super) {
  __extends$1e(AsyncAction, _super);
  function AsyncAction(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.pending = false;
    return _this;
  }
  AsyncAction.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (this.closed) {
      return this;
    }
    this.state = state;
    var id = this.id;
    var scheduler = this.scheduler;
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay);
    }
    this.pending = true;
    this.delay = delay;
    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
    return this;
  };
  AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return setInterval(scheduler.flush.bind(scheduler, this), delay);
  };
  AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && this.delay === delay && this.pending === false) {
      return id;
    }
    clearInterval(id);
    return undefined;
  };
  AsyncAction.prototype.execute = function (state, delay) {
    if (this.closed) {
      return new Error('executing a cancelled action');
    }
    this.pending = false;
    var error = this._execute(state, delay);
    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  };
  AsyncAction.prototype._execute = function (state, delay) {
    var errored = false;
    var errorValue = undefined;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = !!e && e || new Error(e);
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  };
  AsyncAction.prototype._unsubscribe = function () {
    var id = this.id;
    var scheduler = this.scheduler;
    var actions = scheduler.actions;
    var index = actions.indexOf(this);
    this.work = null;
    this.state = null;
    this.pending = false;
    this.scheduler = null;
    if (index !== -1) {
      actions.splice(index, 1);
    }
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, null);
    }
    this.delay = null;
  };
  return AsyncAction;
}(Action_1.Action);
AsyncAction$1.AsyncAction = AsyncAction;

var __extends$1d = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(QueueAction$1, "__esModule", {
  value: true
});
var AsyncAction_1$3 = AsyncAction$1;
var QueueAction = function (_super) {
  __extends$1d(QueueAction, _super);
  function QueueAction(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  QueueAction.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay > 0) {
      return _super.prototype.schedule.call(this, state, delay);
    }
    this.delay = delay;
    this.state = state;
    this.scheduler.flush(this);
    return this;
  };
  QueueAction.prototype.execute = function (state, delay) {
    return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);
  };
  QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
    }
    return scheduler.flush(this);
  };
  return QueueAction;
}(AsyncAction_1$3.AsyncAction);
QueueAction$1.QueueAction = QueueAction;

var QueueScheduler$1 = {};

var AsyncScheduler$1 = {};

var Scheduler$1 = {};

Object.defineProperty(Scheduler$1, "__esModule", {
  value: true
});
var Scheduler = function () {
  function Scheduler(SchedulerAction, now) {
    if (now === void 0) {
      now = Scheduler.now;
    }
    this.SchedulerAction = SchedulerAction;
    this.now = now;
  }
  Scheduler.prototype.schedule = function (work, delay, state) {
    if (delay === void 0) {
      delay = 0;
    }
    return new this.SchedulerAction(this, work).schedule(state, delay);
  };
  Scheduler.now = function () {
    return Date.now();
  };
  return Scheduler;
}();
Scheduler$1.Scheduler = Scheduler;

var __extends$1c = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(AsyncScheduler$1, "__esModule", {
  value: true
});
var Scheduler_1$1 = Scheduler$1;
var AsyncScheduler = function (_super) {
  __extends$1c(AsyncScheduler, _super);
  function AsyncScheduler(SchedulerAction, now) {
    if (now === void 0) {
      now = Scheduler_1$1.Scheduler.now;
    }
    var _this = _super.call(this, SchedulerAction, function () {
      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
        return AsyncScheduler.delegate.now();
      } else {
        return now();
      }
    }) || this;
    _this.actions = [];
    _this.active = false;
    _this.scheduled = undefined;
    return _this;
  }
  AsyncScheduler.prototype.schedule = function (work, delay, state) {
    if (delay === void 0) {
      delay = 0;
    }
    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
      return AsyncScheduler.delegate.schedule(work, delay, state);
    } else {
      return _super.prototype.schedule.call(this, work, delay, state);
    }
  };
  AsyncScheduler.prototype.flush = function (action) {
    var actions = this.actions;
    if (this.active) {
      actions.push(action);
      return;
    }
    var error;
    this.active = true;
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this.active = false;
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsyncScheduler;
}(Scheduler_1$1.Scheduler);
AsyncScheduler$1.AsyncScheduler = AsyncScheduler;

var __extends$1b = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(QueueScheduler$1, "__esModule", {
  value: true
});
var AsyncScheduler_1$3 = AsyncScheduler$1;
var QueueScheduler = function (_super) {
  __extends$1b(QueueScheduler, _super);
  function QueueScheduler() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return QueueScheduler;
}(AsyncScheduler_1$3.AsyncScheduler);
QueueScheduler$1.QueueScheduler = QueueScheduler;

(function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var QueueAction_1 = QueueAction$1;
  var QueueScheduler_1 = QueueScheduler$1;
  exports.queueScheduler = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
  exports.queue = exports.queueScheduler;
})(queue);

var observeOn$1 = {};

var Notification = {};

var empty = {};

(function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var Observable_1 = Observable$1;
  exports.EMPTY = new Observable_1.Observable(function (subscriber) {
    return subscriber.complete();
  });
  function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : exports.EMPTY;
  }
  exports.empty = empty;
  function emptyScheduled(scheduler) {
    return new Observable_1.Observable(function (subscriber) {
      return scheduler.schedule(function () {
        return subscriber.complete();
      });
    });
  }
})(empty);

var of$1 = {};

var isScheduler$1 = {};

Object.defineProperty(isScheduler$1, "__esModule", {
  value: true
});
function isScheduler(value) {
  return value && typeof value.schedule === 'function';
}
isScheduler$1.isScheduler = isScheduler;

var fromArray$1 = {};

var subscribeToArray = {};

Object.defineProperty(subscribeToArray, "__esModule", {
  value: true
});
subscribeToArray.subscribeToArray = function (array) {
  return function (subscriber) {
    for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  };
};

var scheduleArray$1 = {};

Object.defineProperty(scheduleArray$1, "__esModule", {
  value: true
});
var Observable_1$r = Observable$1;
var Subscription_1$b = Subscription$1;
function scheduleArray(input, scheduler) {
  return new Observable_1$r.Observable(function (subscriber) {
    var sub = new Subscription_1$b.Subscription();
    var i = 0;
    sub.add(scheduler.schedule(function () {
      if (i === input.length) {
        subscriber.complete();
        return;
      }
      subscriber.next(input[i++]);
      if (!subscriber.closed) {
        sub.add(this.schedule());
      }
    }));
    return sub;
  });
}
scheduleArray$1.scheduleArray = scheduleArray;

Object.defineProperty(fromArray$1, "__esModule", {
  value: true
});
var Observable_1$q = Observable$1;
var subscribeToArray_1$1 = subscribeToArray;
var scheduleArray_1$2 = scheduleArray$1;
function fromArray(input, scheduler) {
  if (!scheduler) {
    return new Observable_1$q.Observable(subscribeToArray_1$1.subscribeToArray(input));
  } else {
    return scheduleArray_1$2.scheduleArray(input, scheduler);
  }
}
fromArray$1.fromArray = fromArray;

Object.defineProperty(of$1, "__esModule", {
  value: true
});
var isScheduler_1$9 = isScheduler$1;
var fromArray_1$4 = fromArray$1;
var scheduleArray_1$1 = scheduleArray$1;
function of() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = args[args.length - 1];
  if (isScheduler_1$9.isScheduler(scheduler)) {
    args.pop();
    return scheduleArray_1$1.scheduleArray(args, scheduler);
  } else {
    return fromArray_1$4.fromArray(args);
  }
}
of$1.of = of;

var throwError$1 = {};

Object.defineProperty(throwError$1, "__esModule", {
  value: true
});
var Observable_1$p = Observable$1;
function throwError(error, scheduler) {
  if (!scheduler) {
    return new Observable_1$p.Observable(function (subscriber) {
      return subscriber.error(error);
    });
  } else {
    return new Observable_1$p.Observable(function (subscriber) {
      return scheduler.schedule(dispatch$7, 0, {
        error: error,
        subscriber: subscriber
      });
    });
  }
}
throwError$1.throwError = throwError;
function dispatch$7(_a) {
  var error = _a.error,
    subscriber = _a.subscriber;
  subscriber.error(error);
}

(function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var empty_1 = empty;
  var of_1 = of$1;
  var throwError_1 = throwError$1;
  (function (NotificationKind) {
    NotificationKind["NEXT"] = "N";
    NotificationKind["ERROR"] = "E";
    NotificationKind["COMPLETE"] = "C";
  })(exports.NotificationKind || (exports.NotificationKind = {}));
  var Notification = function () {
    function Notification(kind, value, error) {
      this.kind = kind;
      this.value = value;
      this.error = error;
      this.hasValue = kind === 'N';
    }
    Notification.prototype.observe = function (observer) {
      switch (this.kind) {
        case 'N':
          return observer.next && observer.next(this.value);
        case 'E':
          return observer.error && observer.error(this.error);
        case 'C':
          return observer.complete && observer.complete();
      }
    };
    Notification.prototype["do"] = function (next, error, complete) {
      var kind = this.kind;
      switch (kind) {
        case 'N':
          return next && next(this.value);
        case 'E':
          return error && error(this.error);
        case 'C':
          return complete && complete();
      }
    };
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
      if (nextOrObserver && typeof nextOrObserver.next === 'function') {
        return this.observe(nextOrObserver);
      } else {
        return this["do"](nextOrObserver, error, complete);
      }
    };
    Notification.prototype.toObservable = function () {
      var kind = this.kind;
      switch (kind) {
        case 'N':
          return of_1.of(this.value);
        case 'E':
          return throwError_1.throwError(this.error);
        case 'C':
          return empty_1.empty();
      }
      throw new Error('unexpected notification kind value');
    };
    Notification.createNext = function (value) {
      if (typeof value !== 'undefined') {
        return new Notification('N', value);
      }
      return Notification.undefinedValueNotification;
    };
    Notification.createError = function (err) {
      return new Notification('E', undefined, err);
    };
    Notification.createComplete = function () {
      return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
  }();
  exports.Notification = Notification;
})(Notification);

var __extends$1a = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(observeOn$1, "__esModule", {
  value: true
});
var Subscriber_1$F = Subscriber$1;
var Notification_1$3 = Notification;
function observeOn(scheduler, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return function observeOnOperatorFunction(source) {
    return source.lift(new ObserveOnOperator(scheduler, delay));
  };
}
observeOn$1.observeOn = observeOn;
var ObserveOnOperator = function () {
  function ObserveOnOperator(scheduler, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    this.scheduler = scheduler;
    this.delay = delay;
  }
  ObserveOnOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
  };
  return ObserveOnOperator;
}();
observeOn$1.ObserveOnOperator = ObserveOnOperator;
var ObserveOnSubscriber = function (_super) {
  __extends$1a(ObserveOnSubscriber, _super);
  function ObserveOnSubscriber(destination, scheduler, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    var _this = _super.call(this, destination) || this;
    _this.scheduler = scheduler;
    _this.delay = delay;
    return _this;
  }
  ObserveOnSubscriber.dispatch = function (arg) {
    var notification = arg.notification,
      destination = arg.destination;
    notification.observe(destination);
    this.unsubscribe();
  };
  ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
    var destination = this.destination;
    destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
  };
  ObserveOnSubscriber.prototype._next = function (value) {
    this.scheduleMessage(Notification_1$3.Notification.createNext(value));
  };
  ObserveOnSubscriber.prototype._error = function (err) {
    this.scheduleMessage(Notification_1$3.Notification.createError(err));
    this.unsubscribe();
  };
  ObserveOnSubscriber.prototype._complete = function () {
    this.scheduleMessage(Notification_1$3.Notification.createComplete());
    this.unsubscribe();
  };
  return ObserveOnSubscriber;
}(Subscriber_1$F.Subscriber);
observeOn$1.ObserveOnSubscriber = ObserveOnSubscriber;
var ObserveOnMessage = function () {
  function ObserveOnMessage(notification, destination) {
    this.notification = notification;
    this.destination = destination;
  }
  return ObserveOnMessage;
}();
observeOn$1.ObserveOnMessage = ObserveOnMessage;

var __extends$19 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(ReplaySubject$1, "__esModule", {
  value: true
});
var Subject_1$b = Subject$1;
var queue_1$1 = queue;
var Subscription_1$a = Subscription$1;
var observeOn_1$1 = observeOn$1;
var ObjectUnsubscribedError_1$1 = ObjectUnsubscribedError;
var SubjectSubscription_1 = SubjectSubscription$1;
var ReplaySubject = function (_super) {
  __extends$19(ReplaySubject, _super);
  function ReplaySubject(bufferSize, windowTime, scheduler) {
    if (bufferSize === void 0) {
      bufferSize = Number.POSITIVE_INFINITY;
    }
    if (windowTime === void 0) {
      windowTime = Number.POSITIVE_INFINITY;
    }
    var _this = _super.call(this) || this;
    _this.scheduler = scheduler;
    _this._events = [];
    _this._infiniteTimeWindow = false;
    _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
    _this._windowTime = windowTime < 1 ? 1 : windowTime;
    if (windowTime === Number.POSITIVE_INFINITY) {
      _this._infiniteTimeWindow = true;
      _this.next = _this.nextInfiniteTimeWindow;
    } else {
      _this.next = _this.nextTimeWindow;
    }
    return _this;
  }
  ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
    if (!this.isStopped) {
      var _events = this._events;
      _events.push(value);
      if (_events.length > this._bufferSize) {
        _events.shift();
      }
    }
    _super.prototype.next.call(this, value);
  };
  ReplaySubject.prototype.nextTimeWindow = function (value) {
    if (!this.isStopped) {
      this._events.push(new ReplayEvent(this._getNow(), value));
      this._trimBufferThenGetEvents();
    }
    _super.prototype.next.call(this, value);
  };
  ReplaySubject.prototype._subscribe = function (subscriber) {
    var _infiniteTimeWindow = this._infiniteTimeWindow;
    var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
    var scheduler = this.scheduler;
    var len = _events.length;
    var subscription;
    if (this.closed) {
      throw new ObjectUnsubscribedError_1$1.ObjectUnsubscribedError();
    } else if (this.isStopped || this.hasError) {
      subscription = Subscription_1$a.Subscription.EMPTY;
    } else {
      this.observers.push(subscriber);
      subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
    }
    if (scheduler) {
      subscriber.add(subscriber = new observeOn_1$1.ObserveOnSubscriber(subscriber, scheduler));
    }
    if (_infiniteTimeWindow) {
      for (var i = 0; i < len && !subscriber.closed; i++) {
        subscriber.next(_events[i]);
      }
    } else {
      for (var i = 0; i < len && !subscriber.closed; i++) {
        subscriber.next(_events[i].value);
      }
    }
    if (this.hasError) {
      subscriber.error(this.thrownError);
    } else if (this.isStopped) {
      subscriber.complete();
    }
    return subscription;
  };
  ReplaySubject.prototype._getNow = function () {
    return (this.scheduler || queue_1$1.queue).now();
  };
  ReplaySubject.prototype._trimBufferThenGetEvents = function () {
    var now = this._getNow();
    var _bufferSize = this._bufferSize;
    var _windowTime = this._windowTime;
    var _events = this._events;
    var eventsCount = _events.length;
    var spliceCount = 0;
    while (spliceCount < eventsCount) {
      if (now - _events[spliceCount].time < _windowTime) {
        break;
      }
      spliceCount++;
    }
    if (eventsCount > _bufferSize) {
      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
    }
    if (spliceCount > 0) {
      _events.splice(0, spliceCount);
    }
    return _events;
  };
  return ReplaySubject;
}(Subject_1$b.Subject);
ReplaySubject$1.ReplaySubject = ReplaySubject;
var ReplayEvent = function () {
  function ReplayEvent(time, value) {
    this.time = time;
    this.value = value;
  }
  return ReplayEvent;
}();

var AsyncSubject$1 = {};

var __extends$18 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(AsyncSubject$1, "__esModule", {
  value: true
});
var Subject_1$a = Subject$1;
var Subscription_1$9 = Subscription$1;
var AsyncSubject = function (_super) {
  __extends$18(AsyncSubject, _super);
  function AsyncSubject() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.value = null;
    _this.hasNext = false;
    _this.hasCompleted = false;
    return _this;
  }
  AsyncSubject.prototype._subscribe = function (subscriber) {
    if (this.hasError) {
      subscriber.error(this.thrownError);
      return Subscription_1$9.Subscription.EMPTY;
    } else if (this.hasCompleted && this.hasNext) {
      subscriber.next(this.value);
      subscriber.complete();
      return Subscription_1$9.Subscription.EMPTY;
    }
    return _super.prototype._subscribe.call(this, subscriber);
  };
  AsyncSubject.prototype.next = function (value) {
    if (!this.hasCompleted) {
      this.value = value;
      this.hasNext = true;
    }
  };
  AsyncSubject.prototype.error = function (error) {
    if (!this.hasCompleted) {
      _super.prototype.error.call(this, error);
    }
  };
  AsyncSubject.prototype.complete = function () {
    this.hasCompleted = true;
    if (this.hasNext) {
      _super.prototype.next.call(this, this.value);
    }
    _super.prototype.complete.call(this);
  };
  return AsyncSubject;
}(Subject_1$a.Subject);
AsyncSubject$1.AsyncSubject = AsyncSubject;

var asap = {};

var AsapAction$1 = {};

var Immediate = {};

Object.defineProperty(Immediate, "__esModule", {
  value: true
});
var nextHandle = 1;
var RESOLVED = function () {
  return Promise.resolve();
}();
var activeHandles = {};
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
Immediate.Immediate = {
  setImmediate: function setImmediate(cb) {
    var handle = nextHandle++;
    activeHandles[handle] = true;
    RESOLVED.then(function () {
      return findAndClearHandle(handle) && cb();
    });
    return handle;
  },
  clearImmediate: function clearImmediate(handle) {
    findAndClearHandle(handle);
  }
};
Immediate.TestTools = {
  pending: function pending() {
    return Object.keys(activeHandles).length;
  }
};

var __extends$17 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(AsapAction$1, "__esModule", {
  value: true
});
var Immediate_1 = Immediate;
var AsyncAction_1$2 = AsyncAction$1;
var AsapAction = function (_super) {
  __extends$17(AsapAction, _super);
  function AsapAction(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
    }
    scheduler.actions.push(this);
    return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
  };
  AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
    }
    if (scheduler.actions.length === 0) {
      Immediate_1.Immediate.clearImmediate(id);
      scheduler.scheduled = undefined;
    }
    return undefined;
  };
  return AsapAction;
}(AsyncAction_1$2.AsyncAction);
AsapAction$1.AsapAction = AsapAction;

var AsapScheduler$1 = {};

var __extends$16 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(AsapScheduler$1, "__esModule", {
  value: true
});
var AsyncScheduler_1$2 = AsyncScheduler$1;
var AsapScheduler = function (_super) {
  __extends$16(AsapScheduler, _super);
  function AsapScheduler() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AsapScheduler.prototype.flush = function (action) {
    this.active = true;
    this.scheduled = undefined;
    var actions = this.actions;
    var error;
    var index = -1;
    var count = actions.length;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (++index < count && (action = actions.shift()));
    this.active = false;
    if (error) {
      while (++index < count && (action = actions.shift())) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsapScheduler;
}(AsyncScheduler_1$2.AsyncScheduler);
AsapScheduler$1.AsapScheduler = AsapScheduler;

(function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var AsapAction_1 = AsapAction$1;
  var AsapScheduler_1 = AsapScheduler$1;
  exports.asapScheduler = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);
  exports.asap = exports.asapScheduler;
})(asap);

var async = {};

(function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var AsyncAction_1 = AsyncAction$1;
  var AsyncScheduler_1 = AsyncScheduler$1;
  exports.asyncScheduler = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
  exports.async = exports.asyncScheduler;
})(async);

var animationFrame = {};

var AnimationFrameAction$1 = {};

var __extends$15 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(AnimationFrameAction$1, "__esModule", {
  value: true
});
var AsyncAction_1$1 = AsyncAction$1;
var AnimationFrameAction = function (_super) {
  __extends$15(AnimationFrameAction, _super);
  function AnimationFrameAction(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
    }
    scheduler.actions.push(this);
    return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () {
      return scheduler.flush(null);
    }));
  };
  AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
    }
    if (scheduler.actions.length === 0) {
      cancelAnimationFrame(id);
      scheduler.scheduled = undefined;
    }
    return undefined;
  };
  return AnimationFrameAction;
}(AsyncAction_1$1.AsyncAction);
AnimationFrameAction$1.AnimationFrameAction = AnimationFrameAction;

var AnimationFrameScheduler$1 = {};

var __extends$14 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(AnimationFrameScheduler$1, "__esModule", {
  value: true
});
var AsyncScheduler_1$1 = AsyncScheduler$1;
var AnimationFrameScheduler = function (_super) {
  __extends$14(AnimationFrameScheduler, _super);
  function AnimationFrameScheduler() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AnimationFrameScheduler.prototype.flush = function (action) {
    this.active = true;
    this.scheduled = undefined;
    var actions = this.actions;
    var error;
    var index = -1;
    var count = actions.length;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (++index < count && (action = actions.shift()));
    this.active = false;
    if (error) {
      while (++index < count && (action = actions.shift())) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AnimationFrameScheduler;
}(AsyncScheduler_1$1.AsyncScheduler);
AnimationFrameScheduler$1.AnimationFrameScheduler = AnimationFrameScheduler;

(function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var AnimationFrameAction_1 = AnimationFrameAction$1;
  var AnimationFrameScheduler_1 = AnimationFrameScheduler$1;
  exports.animationFrameScheduler = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);
  exports.animationFrame = exports.animationFrameScheduler;
})(animationFrame);

var VirtualTimeScheduler$1 = {};

var __extends$13 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(VirtualTimeScheduler$1, "__esModule", {
  value: true
});
var AsyncAction_1 = AsyncAction$1;
var AsyncScheduler_1 = AsyncScheduler$1;
var VirtualTimeScheduler = function (_super) {
  __extends$13(VirtualTimeScheduler, _super);
  function VirtualTimeScheduler(SchedulerAction, maxFrames) {
    if (SchedulerAction === void 0) {
      SchedulerAction = VirtualAction;
    }
    if (maxFrames === void 0) {
      maxFrames = Number.POSITIVE_INFINITY;
    }
    var _this = _super.call(this, SchedulerAction, function () {
      return _this.frame;
    }) || this;
    _this.maxFrames = maxFrames;
    _this.frame = 0;
    _this.index = -1;
    return _this;
  }
  VirtualTimeScheduler.prototype.flush = function () {
    var _a = this,
      actions = _a.actions,
      maxFrames = _a.maxFrames;
    var error, action;
    while ((action = actions[0]) && action.delay <= maxFrames) {
      actions.shift();
      this.frame = action.delay;
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    }
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  VirtualTimeScheduler.frameTimeFactor = 10;
  return VirtualTimeScheduler;
}(AsyncScheduler_1.AsyncScheduler);
VirtualTimeScheduler$1.VirtualTimeScheduler = VirtualTimeScheduler;
var VirtualAction = function (_super) {
  __extends$13(VirtualAction, _super);
  function VirtualAction(scheduler, work, index) {
    if (index === void 0) {
      index = scheduler.index += 1;
    }
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.index = index;
    _this.active = true;
    _this.index = scheduler.index = index;
    return _this;
  }
  VirtualAction.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (!this.id) {
      return _super.prototype.schedule.call(this, state, delay);
    }
    this.active = false;
    var action = new VirtualAction(this.scheduler, this.work);
    this.add(action);
    return action.schedule(state, delay);
  };
  VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    this.delay = scheduler.frame + delay;
    var actions = scheduler.actions;
    actions.push(this);
    actions.sort(VirtualAction.sortActions);
    return true;
  };
  VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    return undefined;
  };
  VirtualAction.prototype._execute = function (state, delay) {
    if (this.active === true) {
      return _super.prototype._execute.call(this, state, delay);
    }
  };
  VirtualAction.sortActions = function (a, b) {
    if (a.delay === b.delay) {
      if (a.index === b.index) {
        return 0;
      } else if (a.index > b.index) {
        return 1;
      } else {
        return -1;
      }
    } else if (a.delay > b.delay) {
      return 1;
    } else {
      return -1;
    }
  };
  return VirtualAction;
}(AsyncAction_1.AsyncAction);
VirtualTimeScheduler$1.VirtualAction = VirtualAction;

var noop$1 = {};

Object.defineProperty(noop$1, "__esModule", {
  value: true
});
function noop() {}
noop$1.noop = noop;

var isObservable$1 = {};

Object.defineProperty(isObservable$1, "__esModule", {
  value: true
});
var Observable_1$o = Observable$1;
function isObservable(obj) {
  return !!obj && (obj instanceof Observable_1$o.Observable || typeof obj.lift === 'function' && typeof obj.subscribe === 'function');
}
isObservable$1.isObservable = isObservable;

var ArgumentOutOfRangeError = {};

Object.defineProperty(ArgumentOutOfRangeError, "__esModule", {
  value: true
});
var ArgumentOutOfRangeErrorImpl = function () {
  function ArgumentOutOfRangeErrorImpl() {
    Error.call(this);
    this.message = 'argument out of range';
    this.name = 'ArgumentOutOfRangeError';
    return this;
  }
  ArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);
  return ArgumentOutOfRangeErrorImpl;
}();
ArgumentOutOfRangeError.ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;

var EmptyError = {};

Object.defineProperty(EmptyError, "__esModule", {
  value: true
});
var EmptyErrorImpl = function () {
  function EmptyErrorImpl() {
    Error.call(this);
    this.message = 'no elements in sequence';
    this.name = 'EmptyError';
    return this;
  }
  EmptyErrorImpl.prototype = Object.create(Error.prototype);
  return EmptyErrorImpl;
}();
EmptyError.EmptyError = EmptyErrorImpl;

var TimeoutError = {};

Object.defineProperty(TimeoutError, "__esModule", {
  value: true
});
var TimeoutErrorImpl = function () {
  function TimeoutErrorImpl() {
    Error.call(this);
    this.message = 'Timeout has occurred';
    this.name = 'TimeoutError';
    return this;
  }
  TimeoutErrorImpl.prototype = Object.create(Error.prototype);
  return TimeoutErrorImpl;
}();
TimeoutError.TimeoutError = TimeoutErrorImpl;

var bindCallback$1 = {};

var map$1 = {};

var __extends$12 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(map$1, "__esModule", {
  value: true
});
var Subscriber_1$E = Subscriber$1;
function map(project, thisArg) {
  return function mapOperation(source) {
    if (typeof project !== 'function') {
      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
    }
    return source.lift(new MapOperator(project, thisArg));
  };
}
map$1.map = map;
var MapOperator = function () {
  function MapOperator(project, thisArg) {
    this.project = project;
    this.thisArg = thisArg;
  }
  MapOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
  };
  return MapOperator;
}();
map$1.MapOperator = MapOperator;
var MapSubscriber = function (_super) {
  __extends$12(MapSubscriber, _super);
  function MapSubscriber(destination, project, thisArg) {
    var _this = _super.call(this, destination) || this;
    _this.project = project;
    _this.count = 0;
    _this.thisArg = thisArg || _this;
    return _this;
  }
  MapSubscriber.prototype._next = function (value) {
    var result;
    try {
      result = this.project.call(this.thisArg, value, this.count++);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(result);
  };
  return MapSubscriber;
}(Subscriber_1$E.Subscriber);

Object.defineProperty(bindCallback$1, "__esModule", {
  value: true
});
var Observable_1$n = Observable$1;
var AsyncSubject_1$3 = AsyncSubject$1;
var map_1$b = map$1;
var canReportError_1$1 = canReportError$1;
var isArray_1$c = isArray;
var isScheduler_1$8 = isScheduler$1;
function bindCallback(callbackFunc, resultSelector, scheduler) {
  if (resultSelector) {
    if (isScheduler_1$8.isScheduler(resultSelector)) {
      scheduler = resultSelector;
    } else {
      return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map_1$b.map(function (args) {
          return isArray_1$c.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args);
        }));
      };
    }
  }
  return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var context = this;
    var subject;
    var params = {
      context: context,
      subject: subject,
      callbackFunc: callbackFunc,
      scheduler: scheduler
    };
    return new Observable_1$n.Observable(function (subscriber) {
      if (!scheduler) {
        if (!subject) {
          subject = new AsyncSubject_1$3.AsyncSubject();
          var handler = function handler() {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              innerArgs[_i] = arguments[_i];
            }
            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
            subject.complete();
          };
          try {
            callbackFunc.apply(context, args.concat([handler]));
          } catch (err) {
            if (canReportError_1$1.canReportError(subject)) {
              subject.error(err);
            } else {
              console.warn(err);
            }
          }
        }
        return subject.subscribe(subscriber);
      } else {
        var state = {
          args: args,
          subscriber: subscriber,
          params: params
        };
        return scheduler.schedule(dispatch$6, 0, state);
      }
    });
  };
}
bindCallback$1.bindCallback = bindCallback;
function dispatch$6(state) {
  var _this = this;
  var args = state.args,
    subscriber = state.subscriber,
    params = state.params;
  var callbackFunc = params.callbackFunc,
    context = params.context,
    scheduler = params.scheduler;
  var subject = params.subject;
  if (!subject) {
    subject = params.subject = new AsyncSubject_1$3.AsyncSubject();
    var handler = function handler() {
      var innerArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        innerArgs[_i] = arguments[_i];
      }
      var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
      _this.add(scheduler.schedule(dispatchNext$3, 0, {
        value: value,
        subject: subject
      }));
    };
    try {
      callbackFunc.apply(context, args.concat([handler]));
    } catch (err) {
      subject.error(err);
    }
  }
  this.add(subject.subscribe(subscriber));
}
function dispatchNext$3(state) {
  var value = state.value,
    subject = state.subject;
  subject.next(value);
  subject.complete();
}

var bindNodeCallback$1 = {};

Object.defineProperty(bindNodeCallback$1, "__esModule", {
  value: true
});
var Observable_1$m = Observable$1;
var AsyncSubject_1$2 = AsyncSubject$1;
var map_1$a = map$1;
var canReportError_1 = canReportError$1;
var isScheduler_1$7 = isScheduler$1;
var isArray_1$b = isArray;
function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
  if (resultSelector) {
    if (isScheduler_1$7.isScheduler(resultSelector)) {
      scheduler = resultSelector;
    } else {
      return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map_1$a.map(function (args) {
          return isArray_1$b.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args);
        }));
      };
    }
  }
  return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var params = {
      subject: undefined,
      args: args,
      callbackFunc: callbackFunc,
      scheduler: scheduler,
      context: this
    };
    return new Observable_1$m.Observable(function (subscriber) {
      var context = params.context;
      var subject = params.subject;
      if (!scheduler) {
        if (!subject) {
          subject = params.subject = new AsyncSubject_1$2.AsyncSubject();
          var handler = function handler() {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              innerArgs[_i] = arguments[_i];
            }
            var err = innerArgs.shift();
            if (err) {
              subject.error(err);
              return;
            }
            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
            subject.complete();
          };
          try {
            callbackFunc.apply(context, args.concat([handler]));
          } catch (err) {
            if (canReportError_1.canReportError(subject)) {
              subject.error(err);
            } else {
              console.warn(err);
            }
          }
        }
        return subject.subscribe(subscriber);
      } else {
        return scheduler.schedule(dispatch$5, 0, {
          params: params,
          subscriber: subscriber,
          context: context
        });
      }
    });
  };
}
bindNodeCallback$1.bindNodeCallback = bindNodeCallback;
function dispatch$5(state) {
  var _this = this;
  var params = state.params,
    subscriber = state.subscriber,
    context = state.context;
  var callbackFunc = params.callbackFunc,
    args = params.args,
    scheduler = params.scheduler;
  var subject = params.subject;
  if (!subject) {
    subject = params.subject = new AsyncSubject_1$2.AsyncSubject();
    var handler = function handler() {
      var innerArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        innerArgs[_i] = arguments[_i];
      }
      var err = innerArgs.shift();
      if (err) {
        _this.add(scheduler.schedule(dispatchError, 0, {
          err: err,
          subject: subject
        }));
      } else {
        var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
        _this.add(scheduler.schedule(dispatchNext$2, 0, {
          value: value,
          subject: subject
        }));
      }
    };
    try {
      callbackFunc.apply(context, args.concat([handler]));
    } catch (err) {
      this.add(scheduler.schedule(dispatchError, 0, {
        err: err,
        subject: subject
      }));
    }
  }
  this.add(subject.subscribe(subscriber));
}
function dispatchNext$2(arg) {
  var value = arg.value,
    subject = arg.subject;
  subject.next(value);
  subject.complete();
}
function dispatchError(arg) {
  var err = arg.err,
    subject = arg.subject;
  subject.error(err);
}

var combineLatest$3 = {};

var OuterSubscriber$1 = {};

var __extends$11 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(OuterSubscriber$1, "__esModule", {
  value: true
});
var Subscriber_1$D = Subscriber$1;
var OuterSubscriber = function (_super) {
  __extends$11(OuterSubscriber, _super);
  function OuterSubscriber() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.destination.next(innerValue);
  };
  OuterSubscriber.prototype.notifyError = function (error, innerSub) {
    this.destination.error(error);
  };
  OuterSubscriber.prototype.notifyComplete = function (innerSub) {
    this.destination.complete();
  };
  return OuterSubscriber;
}(Subscriber_1$D.Subscriber);
OuterSubscriber$1.OuterSubscriber = OuterSubscriber;

var subscribeToResult$1 = {};

var InnerSubscriber$1 = {};

var __extends$10 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(InnerSubscriber$1, "__esModule", {
  value: true
});
var Subscriber_1$C = Subscriber$1;
var InnerSubscriber = function (_super) {
  __extends$10(InnerSubscriber, _super);
  function InnerSubscriber(parent, outerValue, outerIndex) {
    var _this = _super.call(this) || this;
    _this.parent = parent;
    _this.outerValue = outerValue;
    _this.outerIndex = outerIndex;
    _this.index = 0;
    return _this;
  }
  InnerSubscriber.prototype._next = function (value) {
    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
  };
  InnerSubscriber.prototype._error = function (error) {
    this.parent.notifyError(error, this);
    this.unsubscribe();
  };
  InnerSubscriber.prototype._complete = function () {
    this.parent.notifyComplete(this);
    this.unsubscribe();
  };
  return InnerSubscriber;
}(Subscriber_1$C.Subscriber);
InnerSubscriber$1.InnerSubscriber = InnerSubscriber;

var subscribeTo = {};

var subscribeToPromise = {};

Object.defineProperty(subscribeToPromise, "__esModule", {
  value: true
});
var hostReportError_1 = hostReportError$1;
subscribeToPromise.subscribeToPromise = function (promise) {
  return function (subscriber) {
    promise.then(function (value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function (err) {
      return subscriber.error(err);
    }).then(null, hostReportError_1.hostReportError);
    return subscriber;
  };
};

var subscribeToIterable = {};

var iterator = {};

(function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
      return '@@iterator';
    }
    return Symbol.iterator;
  }
  exports.getSymbolIterator = getSymbolIterator;
  exports.iterator = getSymbolIterator();
  exports.$$iterator = exports.iterator;
})(iterator);

Object.defineProperty(subscribeToIterable, "__esModule", {
  value: true
});
var iterator_1$4 = iterator;
subscribeToIterable.subscribeToIterable = function (iterable) {
  return function (subscriber) {
    var iterator = iterable[iterator_1$4.iterator]();
    do {
      var item = void 0;
      try {
        item = iterator.next();
      } catch (err) {
        subscriber.error(err);
        return subscriber;
      }
      if (item.done) {
        subscriber.complete();
        break;
      }
      subscriber.next(item.value);
      if (subscriber.closed) {
        break;
      }
    } while (true);
    if (typeof iterator["return"] === 'function') {
      subscriber.add(function () {
        if (iterator["return"]) {
          iterator["return"]();
        }
      });
    }
    return subscriber;
  };
};

var subscribeToObservable = {};

Object.defineProperty(subscribeToObservable, "__esModule", {
  value: true
});
var observable_1$4 = observable;
subscribeToObservable.subscribeToObservable = function (obj) {
  return function (subscriber) {
    var obs = obj[observable_1$4.observable]();
    if (typeof obs.subscribe !== 'function') {
      throw new TypeError('Provided object does not correctly implement Symbol.observable');
    } else {
      return obs.subscribe(subscriber);
    }
  };
};

var isArrayLike = {};

Object.defineProperty(isArrayLike, "__esModule", {
  value: true
});
isArrayLike.isArrayLike = function (x) {
  return x && typeof x.length === 'number' && typeof x !== 'function';
};

var isPromise$1 = {};

Object.defineProperty(isPromise$1, "__esModule", {
  value: true
});
function isPromise(value) {
  return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
isPromise$1.isPromise = isPromise;

Object.defineProperty(subscribeTo, "__esModule", {
  value: true
});
var subscribeToArray_1 = subscribeToArray;
var subscribeToPromise_1 = subscribeToPromise;
var subscribeToIterable_1 = subscribeToIterable;
var subscribeToObservable_1 = subscribeToObservable;
var isArrayLike_1$1 = isArrayLike;
var isPromise_1$1 = isPromise$1;
var isObject_1$1 = isObject$1;
var iterator_1$3 = iterator;
var observable_1$3 = observable;
subscribeTo.subscribeTo = function (result) {
  if (!!result && typeof result[observable_1$3.observable] === 'function') {
    return subscribeToObservable_1.subscribeToObservable(result);
  } else if (isArrayLike_1$1.isArrayLike(result)) {
    return subscribeToArray_1.subscribeToArray(result);
  } else if (isPromise_1$1.isPromise(result)) {
    return subscribeToPromise_1.subscribeToPromise(result);
  } else if (!!result && typeof result[iterator_1$3.iterator] === 'function') {
    return subscribeToIterable_1.subscribeToIterable(result);
  } else {
    var value = isObject_1$1.isObject(result) ? 'an invalid object' : "'" + result + "'";
    var msg = "You provided " + value + " where a stream was expected." + ' You can provide an Observable, Promise, Array, or Iterable.';
    throw new TypeError(msg);
  }
};

Object.defineProperty(subscribeToResult$1, "__esModule", {
  value: true
});
var InnerSubscriber_1 = InnerSubscriber$1;
var subscribeTo_1$3 = subscribeTo;
var Observable_1$l = Observable$1;
function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, innerSubscriber) {
  if (innerSubscriber === void 0) {
    innerSubscriber = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
  }
  if (innerSubscriber.closed) {
    return undefined;
  }
  if (result instanceof Observable_1$l.Observable) {
    return result.subscribe(innerSubscriber);
  }
  return subscribeTo_1$3.subscribeTo(result)(innerSubscriber);
}
subscribeToResult$1.subscribeToResult = subscribeToResult;

var __extends$$ = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(combineLatest$3, "__esModule", {
  value: true
});
var isScheduler_1$6 = isScheduler$1;
var isArray_1$a = isArray;
var OuterSubscriber_1$6 = OuterSubscriber$1;
var subscribeToResult_1$6 = subscribeToResult$1;
var fromArray_1$3 = fromArray$1;
var NONE = {};
function combineLatest$2() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  var resultSelector = undefined;
  var scheduler = undefined;
  if (isScheduler_1$6.isScheduler(observables[observables.length - 1])) {
    scheduler = observables.pop();
  }
  if (typeof observables[observables.length - 1] === 'function') {
    resultSelector = observables.pop();
  }
  if (observables.length === 1 && isArray_1$a.isArray(observables[0])) {
    observables = observables[0];
  }
  return fromArray_1$3.fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
}
combineLatest$3.combineLatest = combineLatest$2;
var CombineLatestOperator = function () {
  function CombineLatestOperator(resultSelector) {
    this.resultSelector = resultSelector;
  }
  CombineLatestOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
  };
  return CombineLatestOperator;
}();
combineLatest$3.CombineLatestOperator = CombineLatestOperator;
var CombineLatestSubscriber = function (_super) {
  __extends$$(CombineLatestSubscriber, _super);
  function CombineLatestSubscriber(destination, resultSelector) {
    var _this = _super.call(this, destination) || this;
    _this.resultSelector = resultSelector;
    _this.active = 0;
    _this.values = [];
    _this.observables = [];
    return _this;
  }
  CombineLatestSubscriber.prototype._next = function (observable) {
    this.values.push(NONE);
    this.observables.push(observable);
  };
  CombineLatestSubscriber.prototype._complete = function () {
    var observables = this.observables;
    var len = observables.length;
    if (len === 0) {
      this.destination.complete();
    } else {
      this.active = len;
      this.toRespond = len;
      for (var i = 0; i < len; i++) {
        var observable = observables[i];
        this.add(subscribeToResult_1$6.subscribeToResult(this, observable, undefined, i));
      }
    }
  };
  CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
    if ((this.active -= 1) === 0) {
      this.destination.complete();
    }
  };
  CombineLatestSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
    var values = this.values;
    var oldVal = values[outerIndex];
    var toRespond = !this.toRespond ? 0 : oldVal === NONE ? --this.toRespond : this.toRespond;
    values[outerIndex] = innerValue;
    if (toRespond === 0) {
      if (this.resultSelector) {
        this._tryResultSelector(values);
      } else {
        this.destination.next(values.slice());
      }
    }
  };
  CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
    var result;
    try {
      result = this.resultSelector.apply(this, values);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(result);
  };
  return CombineLatestSubscriber;
}(OuterSubscriber_1$6.OuterSubscriber);
combineLatest$3.CombineLatestSubscriber = CombineLatestSubscriber;

var concat$3 = {};

var concatAll$1 = {};

var mergeAll$1 = {};

var mergeMap$1 = {};

var from$1 = {};

var scheduled$1 = {};

var scheduleObservable$1 = {};

Object.defineProperty(scheduleObservable$1, "__esModule", {
  value: true
});
var Observable_1$k = Observable$1;
var Subscription_1$8 = Subscription$1;
var observable_1$2 = observable;
function scheduleObservable(input, scheduler) {
  return new Observable_1$k.Observable(function (subscriber) {
    var sub = new Subscription_1$8.Subscription();
    sub.add(scheduler.schedule(function () {
      var observable = input[observable_1$2.observable]();
      sub.add(observable.subscribe({
        next: function next(value) {
          sub.add(scheduler.schedule(function () {
            return subscriber.next(value);
          }));
        },
        error: function error(err) {
          sub.add(scheduler.schedule(function () {
            return subscriber.error(err);
          }));
        },
        complete: function complete() {
          sub.add(scheduler.schedule(function () {
            return subscriber.complete();
          }));
        }
      }));
    }));
    return sub;
  });
}
scheduleObservable$1.scheduleObservable = scheduleObservable;

var schedulePromise$1 = {};

Object.defineProperty(schedulePromise$1, "__esModule", {
  value: true
});
var Observable_1$j = Observable$1;
var Subscription_1$7 = Subscription$1;
function schedulePromise(input, scheduler) {
  return new Observable_1$j.Observable(function (subscriber) {
    var sub = new Subscription_1$7.Subscription();
    sub.add(scheduler.schedule(function () {
      return input.then(function (value) {
        sub.add(scheduler.schedule(function () {
          subscriber.next(value);
          sub.add(scheduler.schedule(function () {
            return subscriber.complete();
          }));
        }));
      }, function (err) {
        sub.add(scheduler.schedule(function () {
          return subscriber.error(err);
        }));
      });
    }));
    return sub;
  });
}
schedulePromise$1.schedulePromise = schedulePromise;

var scheduleIterable$1 = {};

Object.defineProperty(scheduleIterable$1, "__esModule", {
  value: true
});
var Observable_1$i = Observable$1;
var Subscription_1$6 = Subscription$1;
var iterator_1$2 = iterator;
function scheduleIterable(input, scheduler) {
  if (!input) {
    throw new Error('Iterable cannot be null');
  }
  return new Observable_1$i.Observable(function (subscriber) {
    var sub = new Subscription_1$6.Subscription();
    var iterator;
    sub.add(function () {
      if (iterator && typeof iterator["return"] === 'function') {
        iterator["return"]();
      }
    });
    sub.add(scheduler.schedule(function () {
      iterator = input[iterator_1$2.iterator]();
      sub.add(scheduler.schedule(function () {
        if (subscriber.closed) {
          return;
        }
        var value;
        var done;
        try {
          var result = iterator.next();
          value = result.value;
          done = result.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
          this.schedule();
        }
      }));
    }));
    return sub;
  });
}
scheduleIterable$1.scheduleIterable = scheduleIterable;

var isInteropObservable$1 = {};

Object.defineProperty(isInteropObservable$1, "__esModule", {
  value: true
});
var observable_1$1 = observable;
function isInteropObservable(input) {
  return input && typeof input[observable_1$1.observable] === 'function';
}
isInteropObservable$1.isInteropObservable = isInteropObservable;

var isIterable$1 = {};

Object.defineProperty(isIterable$1, "__esModule", {
  value: true
});
var iterator_1$1 = iterator;
function isIterable(input) {
  return input && typeof input[iterator_1$1.iterator] === 'function';
}
isIterable$1.isIterable = isIterable;

Object.defineProperty(scheduled$1, "__esModule", {
  value: true
});
var scheduleObservable_1 = scheduleObservable$1;
var schedulePromise_1 = schedulePromise$1;
var scheduleArray_1 = scheduleArray$1;
var scheduleIterable_1 = scheduleIterable$1;
var isInteropObservable_1 = isInteropObservable$1;
var isPromise_1 = isPromise$1;
var isArrayLike_1 = isArrayLike;
var isIterable_1 = isIterable$1;
function scheduled(input, scheduler) {
  if (input != null) {
    if (isInteropObservable_1.isInteropObservable(input)) {
      return scheduleObservable_1.scheduleObservable(input, scheduler);
    } else if (isPromise_1.isPromise(input)) {
      return schedulePromise_1.schedulePromise(input, scheduler);
    } else if (isArrayLike_1.isArrayLike(input)) {
      return scheduleArray_1.scheduleArray(input, scheduler);
    } else if (isIterable_1.isIterable(input) || typeof input === 'string') {
      return scheduleIterable_1.scheduleIterable(input, scheduler);
    }
  }
  throw new TypeError((input !== null && _typeof(input) || input) + ' is not observable');
}
scheduled$1.scheduled = scheduled;

Object.defineProperty(from$1, "__esModule", {
  value: true
});
var Observable_1$h = Observable$1;
var subscribeTo_1$2 = subscribeTo;
var scheduled_1$1 = scheduled$1;
function from(input, scheduler) {
  if (!scheduler) {
    if (input instanceof Observable_1$h.Observable) {
      return input;
    }
    return new Observable_1$h.Observable(subscribeTo_1$2.subscribeTo(input));
  } else {
    return scheduled_1$1.scheduled(input, scheduler);
  }
}
from$1.from = from;

var innerSubscribe$1 = {};

var __extends$_ = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(innerSubscribe$1, "__esModule", {
  value: true
});
var Subscriber_1$B = Subscriber$1;
var Observable_1$g = Observable$1;
var subscribeTo_1$1 = subscribeTo;
var SimpleInnerSubscriber = function (_super) {
  __extends$_(SimpleInnerSubscriber, _super);
  function SimpleInnerSubscriber(parent) {
    var _this = _super.call(this) || this;
    _this.parent = parent;
    return _this;
  }
  SimpleInnerSubscriber.prototype._next = function (value) {
    this.parent.notifyNext(value);
  };
  SimpleInnerSubscriber.prototype._error = function (error) {
    this.parent.notifyError(error);
    this.unsubscribe();
  };
  SimpleInnerSubscriber.prototype._complete = function () {
    this.parent.notifyComplete();
    this.unsubscribe();
  };
  return SimpleInnerSubscriber;
}(Subscriber_1$B.Subscriber);
innerSubscribe$1.SimpleInnerSubscriber = SimpleInnerSubscriber;
var ComplexInnerSubscriber = function (_super) {
  __extends$_(ComplexInnerSubscriber, _super);
  function ComplexInnerSubscriber(parent, outerValue, outerIndex) {
    var _this = _super.call(this) || this;
    _this.parent = parent;
    _this.outerValue = outerValue;
    _this.outerIndex = outerIndex;
    return _this;
  }
  ComplexInnerSubscriber.prototype._next = function (value) {
    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);
  };
  ComplexInnerSubscriber.prototype._error = function (error) {
    this.parent.notifyError(error);
    this.unsubscribe();
  };
  ComplexInnerSubscriber.prototype._complete = function () {
    this.parent.notifyComplete(this);
    this.unsubscribe();
  };
  return ComplexInnerSubscriber;
}(Subscriber_1$B.Subscriber);
innerSubscribe$1.ComplexInnerSubscriber = ComplexInnerSubscriber;
var SimpleOuterSubscriber = function (_super) {
  __extends$_(SimpleOuterSubscriber, _super);
  function SimpleOuterSubscriber() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SimpleOuterSubscriber.prototype.notifyNext = function (innerValue) {
    this.destination.next(innerValue);
  };
  SimpleOuterSubscriber.prototype.notifyError = function (err) {
    this.destination.error(err);
  };
  SimpleOuterSubscriber.prototype.notifyComplete = function () {
    this.destination.complete();
  };
  return SimpleOuterSubscriber;
}(Subscriber_1$B.Subscriber);
innerSubscribe$1.SimpleOuterSubscriber = SimpleOuterSubscriber;
var ComplexOuterSubscriber = function (_super) {
  __extends$_(ComplexOuterSubscriber, _super);
  function ComplexOuterSubscriber() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ComplexOuterSubscriber.prototype.notifyNext = function (_outerValue, innerValue, _outerIndex, _innerSub) {
    this.destination.next(innerValue);
  };
  ComplexOuterSubscriber.prototype.notifyError = function (error) {
    this.destination.error(error);
  };
  ComplexOuterSubscriber.prototype.notifyComplete = function (_innerSub) {
    this.destination.complete();
  };
  return ComplexOuterSubscriber;
}(Subscriber_1$B.Subscriber);
innerSubscribe$1.ComplexOuterSubscriber = ComplexOuterSubscriber;
function innerSubscribe(result, innerSubscriber) {
  if (innerSubscriber.closed) {
    return undefined;
  }
  if (result instanceof Observable_1$g.Observable) {
    return result.subscribe(innerSubscriber);
  }
  var subscription;
  try {
    subscription = subscribeTo_1$1.subscribeTo(result)(innerSubscriber);
  } catch (error) {
    innerSubscriber.error(error);
  }
  return subscription;
}
innerSubscribe$1.innerSubscribe = innerSubscribe;

var __extends$Z = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(mergeMap$1, "__esModule", {
  value: true
});
var map_1$9 = map$1;
var from_1$9 = from$1;
var innerSubscribe_1$k = innerSubscribe$1;
function mergeMap(project, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  if (typeof resultSelector === 'function') {
    return function (source) {
      return source.pipe(mergeMap(function (a, i) {
        return from_1$9.from(project(a, i)).pipe(map_1$9.map(function (b, ii) {
          return resultSelector(a, b, i, ii);
        }));
      }, concurrent));
    };
  } else if (typeof resultSelector === 'number') {
    concurrent = resultSelector;
  }
  return function (source) {
    return source.lift(new MergeMapOperator(project, concurrent));
  };
}
mergeMap$1.mergeMap = mergeMap;
var MergeMapOperator = function () {
  function MergeMapOperator(project, concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }
    this.project = project;
    this.concurrent = concurrent;
  }
  MergeMapOperator.prototype.call = function (observer, source) {
    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
  };
  return MergeMapOperator;
}();
mergeMap$1.MergeMapOperator = MergeMapOperator;
var MergeMapSubscriber = function (_super) {
  __extends$Z(MergeMapSubscriber, _super);
  function MergeMapSubscriber(destination, project, concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }
    var _this = _super.call(this, destination) || this;
    _this.project = project;
    _this.concurrent = concurrent;
    _this.hasCompleted = false;
    _this.buffer = [];
    _this.active = 0;
    _this.index = 0;
    return _this;
  }
  MergeMapSubscriber.prototype._next = function (value) {
    if (this.active < this.concurrent) {
      this._tryNext(value);
    } else {
      this.buffer.push(value);
    }
  };
  MergeMapSubscriber.prototype._tryNext = function (value) {
    var result;
    var index = this.index++;
    try {
      result = this.project(value, index);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.active++;
    this._innerSub(result);
  };
  MergeMapSubscriber.prototype._innerSub = function (ish) {
    var innerSubscriber = new innerSubscribe_1$k.SimpleInnerSubscriber(this);
    var destination = this.destination;
    destination.add(innerSubscriber);
    var innerSubscription = innerSubscribe_1$k.innerSubscribe(ish, innerSubscriber);
    if (innerSubscription !== innerSubscriber) {
      destination.add(innerSubscription);
    }
  };
  MergeMapSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (this.active === 0 && this.buffer.length === 0) {
      this.destination.complete();
    }
    this.unsubscribe();
  };
  MergeMapSubscriber.prototype.notifyNext = function (innerValue) {
    this.destination.next(innerValue);
  };
  MergeMapSubscriber.prototype.notifyComplete = function () {
    var buffer = this.buffer;
    this.active--;
    if (buffer.length > 0) {
      this._next(buffer.shift());
    } else if (this.active === 0 && this.hasCompleted) {
      this.destination.complete();
    }
  };
  return MergeMapSubscriber;
}(innerSubscribe_1$k.SimpleOuterSubscriber);
mergeMap$1.MergeMapSubscriber = MergeMapSubscriber;
mergeMap$1.flatMap = mergeMap;

Object.defineProperty(mergeAll$1, "__esModule", {
  value: true
});
var mergeMap_1$3 = mergeMap$1;
var identity_1$5 = identity$1;
function mergeAll(concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  return mergeMap_1$3.mergeMap(identity_1$5.identity, concurrent);
}
mergeAll$1.mergeAll = mergeAll;

Object.defineProperty(concatAll$1, "__esModule", {
  value: true
});
var mergeAll_1$2 = mergeAll$1;
function concatAll() {
  return mergeAll_1$2.mergeAll(1);
}
concatAll$1.concatAll = concatAll;

Object.defineProperty(concat$3, "__esModule", {
  value: true
});
var of_1$2 = of$1;
var concatAll_1$1 = concatAll$1;
function concat$2() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  return concatAll_1$1.concatAll()(of_1$2.of.apply(void 0, observables));
}
concat$3.concat = concat$2;

var defer$1 = {};

Object.defineProperty(defer$1, "__esModule", {
  value: true
});
var Observable_1$f = Observable$1;
var from_1$8 = from$1;
var empty_1$7 = empty;
function defer(observableFactory) {
  return new Observable_1$f.Observable(function (subscriber) {
    var input;
    try {
      input = observableFactory();
    } catch (err) {
      subscriber.error(err);
      return undefined;
    }
    var source = input ? from_1$8.from(input) : empty_1$7.empty();
    return source.subscribe(subscriber);
  });
}
defer$1.defer = defer;

var forkJoin$1 = {};

Object.defineProperty(forkJoin$1, "__esModule", {
  value: true
});
var Observable_1$e = Observable$1;
var isArray_1$9 = isArray;
var map_1$8 = map$1;
var isObject_1 = isObject$1;
var from_1$7 = from$1;
function forkJoin() {
  var sources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    sources[_i] = arguments[_i];
  }
  if (sources.length === 1) {
    var first_1 = sources[0];
    if (isArray_1$9.isArray(first_1)) {
      return forkJoinInternal(first_1, null);
    }
    if (isObject_1.isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {
      var keys = Object.keys(first_1);
      return forkJoinInternal(keys.map(function (key) {
        return first_1[key];
      }), keys);
    }
  }
  if (typeof sources[sources.length - 1] === 'function') {
    var resultSelector_1 = sources.pop();
    sources = sources.length === 1 && isArray_1$9.isArray(sources[0]) ? sources[0] : sources;
    return forkJoinInternal(sources, null).pipe(map_1$8.map(function (args) {
      return resultSelector_1.apply(void 0, args);
    }));
  }
  return forkJoinInternal(sources, null);
}
forkJoin$1.forkJoin = forkJoin;
function forkJoinInternal(sources, keys) {
  return new Observable_1$e.Observable(function (subscriber) {
    var len = sources.length;
    if (len === 0) {
      subscriber.complete();
      return;
    }
    var values = new Array(len);
    var completed = 0;
    var emitted = 0;
    var _loop_1 = function _loop_1(i) {
      var source = from_1$7.from(sources[i]);
      var hasValue = false;
      subscriber.add(source.subscribe({
        next: function next(value) {
          if (!hasValue) {
            hasValue = true;
            emitted++;
          }
          values[i] = value;
        },
        error: function error(err) {
          return subscriber.error(err);
        },
        complete: function complete() {
          completed++;
          if (completed === len || !hasValue) {
            if (emitted === len) {
              subscriber.next(keys ? keys.reduce(function (result, key, i) {
                return result[key] = values[i], result;
              }, {}) : values);
            }
            subscriber.complete();
          }
        }
      }));
    };
    for (var i = 0; i < len; i++) {
      _loop_1(i);
    }
  });
}

var fromEvent$1 = {};

Object.defineProperty(fromEvent$1, "__esModule", {
  value: true
});
var Observable_1$d = Observable$1;
var isArray_1$8 = isArray;
var isFunction_1$2 = isFunction$1;
var map_1$7 = map$1;
function fromEvent(target, eventName, options, resultSelector) {
  if (isFunction_1$2.isFunction(options)) {
    resultSelector = options;
    options = undefined;
  }
  if (resultSelector) {
    return fromEvent(target, eventName, options).pipe(map_1$7.map(function (args) {
      return isArray_1$8.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args);
    }));
  }
  return new Observable_1$d.Observable(function (subscriber) {
    function handler(e) {
      if (arguments.length > 1) {
        subscriber.next(Array.prototype.slice.call(arguments));
      } else {
        subscriber.next(e);
      }
    }
    setupSubscription(target, eventName, handler, subscriber, options);
  });
}
fromEvent$1.fromEvent = fromEvent;
function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
  var unsubscribe;
  if (isEventTarget(sourceObj)) {
    var source_1 = sourceObj;
    sourceObj.addEventListener(eventName, handler, options);
    unsubscribe = function unsubscribe() {
      return source_1.removeEventListener(eventName, handler, options);
    };
  } else if (isJQueryStyleEventEmitter(sourceObj)) {
    var source_2 = sourceObj;
    sourceObj.on(eventName, handler);
    unsubscribe = function unsubscribe() {
      return source_2.off(eventName, handler);
    };
  } else if (isNodeStyleEventEmitter(sourceObj)) {
    var source_3 = sourceObj;
    sourceObj.addListener(eventName, handler);
    unsubscribe = function unsubscribe() {
      return source_3.removeListener(eventName, handler);
    };
  } else if (sourceObj && sourceObj.length) {
    for (var i = 0, len = sourceObj.length; i < len; i++) {
      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
    }
  } else {
    throw new TypeError('Invalid event target');
  }
  subscriber.add(unsubscribe);
}
function isNodeStyleEventEmitter(sourceObj) {
  return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
  return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isEventTarget(sourceObj) {
  return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}

var fromEventPattern$1 = {};

Object.defineProperty(fromEventPattern$1, "__esModule", {
  value: true
});
var Observable_1$c = Observable$1;
var isArray_1$7 = isArray;
var isFunction_1$1 = isFunction$1;
var map_1$6 = map$1;
function fromEventPattern(addHandler, removeHandler, resultSelector) {
  if (resultSelector) {
    return fromEventPattern(addHandler, removeHandler).pipe(map_1$6.map(function (args) {
      return isArray_1$7.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args);
    }));
  }
  return new Observable_1$c.Observable(function (subscriber) {
    var handler = function handler() {
      var e = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        e[_i] = arguments[_i];
      }
      return subscriber.next(e.length === 1 ? e[0] : e);
    };
    var retValue;
    try {
      retValue = addHandler(handler);
    } catch (err) {
      subscriber.error(err);
      return undefined;
    }
    if (!isFunction_1$1.isFunction(removeHandler)) {
      return undefined;
    }
    return function () {
      return removeHandler(handler, retValue);
    };
  });
}
fromEventPattern$1.fromEventPattern = fromEventPattern;

var generate$1 = {};

Object.defineProperty(generate$1, "__esModule", {
  value: true
});
var Observable_1$b = Observable$1;
var identity_1$4 = identity$1;
var isScheduler_1$5 = isScheduler$1;
function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
  var resultSelector;
  var initialState;
  if (arguments.length == 1) {
    var options = initialStateOrOptions;
    initialState = options.initialState;
    condition = options.condition;
    iterate = options.iterate;
    resultSelector = options.resultSelector || identity_1$4.identity;
    scheduler = options.scheduler;
  } else if (resultSelectorOrObservable === undefined || isScheduler_1$5.isScheduler(resultSelectorOrObservable)) {
    initialState = initialStateOrOptions;
    resultSelector = identity_1$4.identity;
    scheduler = resultSelectorOrObservable;
  } else {
    initialState = initialStateOrOptions;
    resultSelector = resultSelectorOrObservable;
  }
  return new Observable_1$b.Observable(function (subscriber) {
    var state = initialState;
    if (scheduler) {
      return scheduler.schedule(dispatch$4, 0, {
        subscriber: subscriber,
        iterate: iterate,
        condition: condition,
        resultSelector: resultSelector,
        state: state
      });
    }
    do {
      if (condition) {
        var conditionResult = void 0;
        try {
          conditionResult = condition(state);
        } catch (err) {
          subscriber.error(err);
          return undefined;
        }
        if (!conditionResult) {
          subscriber.complete();
          break;
        }
      }
      var value = void 0;
      try {
        value = resultSelector(state);
      } catch (err) {
        subscriber.error(err);
        return undefined;
      }
      subscriber.next(value);
      if (subscriber.closed) {
        break;
      }
      try {
        state = iterate(state);
      } catch (err) {
        subscriber.error(err);
        return undefined;
      }
    } while (true);
    return undefined;
  });
}
generate$1.generate = generate;
function dispatch$4(state) {
  var subscriber = state.subscriber,
    condition = state.condition;
  if (subscriber.closed) {
    return undefined;
  }
  if (state.needIterate) {
    try {
      state.state = state.iterate(state.state);
    } catch (err) {
      subscriber.error(err);
      return undefined;
    }
  } else {
    state.needIterate = true;
  }
  if (condition) {
    var conditionResult = void 0;
    try {
      conditionResult = condition(state.state);
    } catch (err) {
      subscriber.error(err);
      return undefined;
    }
    if (!conditionResult) {
      subscriber.complete();
      return undefined;
    }
    if (subscriber.closed) {
      return undefined;
    }
  }
  var value;
  try {
    value = state.resultSelector(state.state);
  } catch (err) {
    subscriber.error(err);
    return undefined;
  }
  if (subscriber.closed) {
    return undefined;
  }
  subscriber.next(value);
  if (subscriber.closed) {
    return undefined;
  }
  return this.schedule(state);
}

var iif$1 = {};

Object.defineProperty(iif$1, "__esModule", {
  value: true
});
var defer_1$2 = defer$1;
var empty_1$6 = empty;
function iif(condition, trueResult, falseResult) {
  if (trueResult === void 0) {
    trueResult = empty_1$6.EMPTY;
  }
  if (falseResult === void 0) {
    falseResult = empty_1$6.EMPTY;
  }
  return defer_1$2.defer(function () {
    return condition() ? trueResult : falseResult;
  });
}
iif$1.iif = iif;

var interval$1 = {};

var isNumeric$1 = {};

Object.defineProperty(isNumeric$1, "__esModule", {
  value: true
});
var isArray_1$6 = isArray;
function isNumeric(val) {
  return !isArray_1$6.isArray(val) && val - parseFloat(val) + 1 >= 0;
}
isNumeric$1.isNumeric = isNumeric;

Object.defineProperty(interval$1, "__esModule", {
  value: true
});
var Observable_1$a = Observable$1;
var async_1$d = async;
var isNumeric_1$3 = isNumeric$1;
function interval(period, scheduler) {
  if (period === void 0) {
    period = 0;
  }
  if (scheduler === void 0) {
    scheduler = async_1$d.async;
  }
  if (!isNumeric_1$3.isNumeric(period) || period < 0) {
    period = 0;
  }
  if (!scheduler || typeof scheduler.schedule !== 'function') {
    scheduler = async_1$d.async;
  }
  return new Observable_1$a.Observable(function (subscriber) {
    subscriber.add(scheduler.schedule(dispatch$3, period, {
      subscriber: subscriber,
      counter: 0,
      period: period
    }));
    return subscriber;
  });
}
interval$1.interval = interval;
function dispatch$3(state) {
  var subscriber = state.subscriber,
    counter = state.counter,
    period = state.period;
  subscriber.next(counter);
  this.schedule({
    subscriber: subscriber,
    counter: counter + 1,
    period: period
  }, period);
}

var merge$3 = {};

Object.defineProperty(merge$3, "__esModule", {
  value: true
});
var Observable_1$9 = Observable$1;
var isScheduler_1$4 = isScheduler$1;
var mergeAll_1$1 = mergeAll$1;
var fromArray_1$2 = fromArray$1;
function merge$2() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  var concurrent = Number.POSITIVE_INFINITY;
  var scheduler = null;
  var last = observables[observables.length - 1];
  if (isScheduler_1$4.isScheduler(last)) {
    scheduler = observables.pop();
    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
      concurrent = observables.pop();
    }
  } else if (typeof last === 'number') {
    concurrent = observables.pop();
  }
  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1$9.Observable) {
    return observables[0];
  }
  return mergeAll_1$1.mergeAll(concurrent)(fromArray_1$2.fromArray(observables, scheduler));
}
merge$3.merge = merge$2;

var never = {};

(function (exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var Observable_1 = Observable$1;
  var noop_1 = noop$1;
  exports.NEVER = new Observable_1.Observable(noop_1.noop);
  function never() {
    return exports.NEVER;
  }
  exports.never = never;
})(never);

var onErrorResumeNext$3 = {};

Object.defineProperty(onErrorResumeNext$3, "__esModule", {
  value: true
});
var Observable_1$8 = Observable$1;
var from_1$6 = from$1;
var isArray_1$5 = isArray;
var empty_1$5 = empty;
function onErrorResumeNext$2() {
  var sources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    sources[_i] = arguments[_i];
  }
  if (sources.length === 0) {
    return empty_1$5.EMPTY;
  }
  var first = sources[0],
    remainder = sources.slice(1);
  if (sources.length === 1 && isArray_1$5.isArray(first)) {
    return onErrorResumeNext$2.apply(void 0, first);
  }
  return new Observable_1$8.Observable(function (subscriber) {
    var subNext = function subNext() {
      return subscriber.add(onErrorResumeNext$2.apply(void 0, remainder).subscribe(subscriber));
    };
    return from_1$6.from(first).subscribe({
      next: function next(value) {
        subscriber.next(value);
      },
      error: subNext,
      complete: subNext
    });
  });
}
onErrorResumeNext$3.onErrorResumeNext = onErrorResumeNext$2;

var pairs$1 = {};

Object.defineProperty(pairs$1, "__esModule", {
  value: true
});
var Observable_1$7 = Observable$1;
var Subscription_1$5 = Subscription$1;
function pairs(obj, scheduler) {
  if (!scheduler) {
    return new Observable_1$7.Observable(function (subscriber) {
      var keys = Object.keys(obj);
      for (var i = 0; i < keys.length && !subscriber.closed; i++) {
        var key = keys[i];
        if (obj.hasOwnProperty(key)) {
          subscriber.next([key, obj[key]]);
        }
      }
      subscriber.complete();
    });
  } else {
    return new Observable_1$7.Observable(function (subscriber) {
      var keys = Object.keys(obj);
      var subscription = new Subscription_1$5.Subscription();
      subscription.add(scheduler.schedule(dispatch$2, 0, {
        keys: keys,
        index: 0,
        subscriber: subscriber,
        subscription: subscription,
        obj: obj
      }));
      return subscription;
    });
  }
}
pairs$1.pairs = pairs;
function dispatch$2(state) {
  var keys = state.keys,
    index = state.index,
    subscriber = state.subscriber,
    subscription = state.subscription,
    obj = state.obj;
  if (!subscriber.closed) {
    if (index < keys.length) {
      var key = keys[index];
      subscriber.next([key, obj[key]]);
      subscription.add(this.schedule({
        keys: keys,
        index: index + 1,
        subscriber: subscriber,
        subscription: subscription,
        obj: obj
      }));
    } else {
      subscriber.complete();
    }
  }
}
pairs$1.dispatch = dispatch$2;

var partition$3 = {};

var not$1 = {};

Object.defineProperty(not$1, "__esModule", {
  value: true
});
function not(pred, thisArg) {
  function notPred() {
    return !notPred.pred.apply(notPred.thisArg, arguments);
  }
  notPred.pred = pred;
  notPred.thisArg = thisArg;
  return notPred;
}
not$1.not = not;

var filter$1 = {};

var __extends$Y = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(filter$1, "__esModule", {
  value: true
});
var Subscriber_1$A = Subscriber$1;
function filter(predicate, thisArg) {
  return function filterOperatorFunction(source) {
    return source.lift(new FilterOperator(predicate, thisArg));
  };
}
filter$1.filter = filter;
var FilterOperator = function () {
  function FilterOperator(predicate, thisArg) {
    this.predicate = predicate;
    this.thisArg = thisArg;
  }
  FilterOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
  };
  return FilterOperator;
}();
var FilterSubscriber = function (_super) {
  __extends$Y(FilterSubscriber, _super);
  function FilterSubscriber(destination, predicate, thisArg) {
    var _this = _super.call(this, destination) || this;
    _this.predicate = predicate;
    _this.thisArg = thisArg;
    _this.count = 0;
    return _this;
  }
  FilterSubscriber.prototype._next = function (value) {
    var result;
    try {
      result = this.predicate.call(this.thisArg, value, this.count++);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    if (result) {
      this.destination.next(value);
    }
  };
  return FilterSubscriber;
}(Subscriber_1$A.Subscriber);

Object.defineProperty(partition$3, "__esModule", {
  value: true
});
var not_1$1 = not$1;
var subscribeTo_1 = subscribeTo;
var filter_1$5 = filter$1;
var Observable_1$6 = Observable$1;
function partition$2(source, predicate, thisArg) {
  return [filter_1$5.filter(predicate, thisArg)(new Observable_1$6.Observable(subscribeTo_1.subscribeTo(source))), filter_1$5.filter(not_1$1.not(predicate, thisArg))(new Observable_1$6.Observable(subscribeTo_1.subscribeTo(source)))];
}
partition$3.partition = partition$2;

var race$3 = {};

var __extends$X = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(race$3, "__esModule", {
  value: true
});
var isArray_1$4 = isArray;
var fromArray_1$1 = fromArray$1;
var OuterSubscriber_1$5 = OuterSubscriber$1;
var subscribeToResult_1$5 = subscribeToResult$1;
function race$2() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  if (observables.length === 1) {
    if (isArray_1$4.isArray(observables[0])) {
      observables = observables[0];
    } else {
      return observables[0];
    }
  }
  return fromArray_1$1.fromArray(observables, undefined).lift(new RaceOperator());
}
race$3.race = race$2;
var RaceOperator = function () {
  function RaceOperator() {}
  RaceOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RaceSubscriber(subscriber));
  };
  return RaceOperator;
}();
race$3.RaceOperator = RaceOperator;
var RaceSubscriber = function (_super) {
  __extends$X(RaceSubscriber, _super);
  function RaceSubscriber(destination) {
    var _this = _super.call(this, destination) || this;
    _this.hasFirst = false;
    _this.observables = [];
    _this.subscriptions = [];
    return _this;
  }
  RaceSubscriber.prototype._next = function (observable) {
    this.observables.push(observable);
  };
  RaceSubscriber.prototype._complete = function () {
    var observables = this.observables;
    var len = observables.length;
    if (len === 0) {
      this.destination.complete();
    } else {
      for (var i = 0; i < len && !this.hasFirst; i++) {
        var observable = observables[i];
        var subscription = subscribeToResult_1$5.subscribeToResult(this, observable, undefined, i);
        if (this.subscriptions) {
          this.subscriptions.push(subscription);
        }
        this.add(subscription);
      }
      this.observables = null;
    }
  };
  RaceSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
    if (!this.hasFirst) {
      this.hasFirst = true;
      for (var i = 0; i < this.subscriptions.length; i++) {
        if (i !== outerIndex) {
          var subscription = this.subscriptions[i];
          subscription.unsubscribe();
          this.remove(subscription);
        }
      }
      this.subscriptions = null;
    }
    this.destination.next(innerValue);
  };
  return RaceSubscriber;
}(OuterSubscriber_1$5.OuterSubscriber);
race$3.RaceSubscriber = RaceSubscriber;

var range$1 = {};

Object.defineProperty(range$1, "__esModule", {
  value: true
});
var Observable_1$5 = Observable$1;
function range(start, count, scheduler) {
  if (start === void 0) {
    start = 0;
  }
  return new Observable_1$5.Observable(function (subscriber) {
    if (count === undefined) {
      count = start;
      start = 0;
    }
    var index = 0;
    var current = start;
    if (scheduler) {
      return scheduler.schedule(dispatch$1, 0, {
        index: index,
        count: count,
        start: start,
        subscriber: subscriber
      });
    } else {
      do {
        if (index++ >= count) {
          subscriber.complete();
          break;
        }
        subscriber.next(current++);
        if (subscriber.closed) {
          break;
        }
      } while (true);
    }
    return undefined;
  });
}
range$1.range = range;
function dispatch$1(state) {
  var start = state.start,
    index = state.index,
    count = state.count,
    subscriber = state.subscriber;
  if (index >= count) {
    subscriber.complete();
    return;
  }
  subscriber.next(start);
  if (subscriber.closed) {
    return;
  }
  state.index = index + 1;
  state.start = start + 1;
  this.schedule(state);
}
range$1.dispatch = dispatch$1;

var timer$1 = {};

Object.defineProperty(timer$1, "__esModule", {
  value: true
});
var Observable_1$4 = Observable$1;
var async_1$c = async;
var isNumeric_1$2 = isNumeric$1;
var isScheduler_1$3 = isScheduler$1;
function timer(dueTime, periodOrScheduler, scheduler) {
  if (dueTime === void 0) {
    dueTime = 0;
  }
  var period = -1;
  if (isNumeric_1$2.isNumeric(periodOrScheduler)) {
    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
  } else if (isScheduler_1$3.isScheduler(periodOrScheduler)) {
    scheduler = periodOrScheduler;
  }
  if (!isScheduler_1$3.isScheduler(scheduler)) {
    scheduler = async_1$c.async;
  }
  return new Observable_1$4.Observable(function (subscriber) {
    var due = isNumeric_1$2.isNumeric(dueTime) ? dueTime : +dueTime - scheduler.now();
    return scheduler.schedule(dispatch, due, {
      index: 0,
      period: period,
      subscriber: subscriber
    });
  });
}
timer$1.timer = timer;
function dispatch(state) {
  var index = state.index,
    period = state.period,
    subscriber = state.subscriber;
  subscriber.next(index);
  if (subscriber.closed) {
    return;
  } else if (period === -1) {
    return subscriber.complete();
  }
  state.index = index + 1;
  this.schedule(state, period);
}

var using$1 = {};

Object.defineProperty(using$1, "__esModule", {
  value: true
});
var Observable_1$3 = Observable$1;
var from_1$5 = from$1;
var empty_1$4 = empty;
function using(resourceFactory, observableFactory) {
  return new Observable_1$3.Observable(function (subscriber) {
    var resource;
    try {
      resource = resourceFactory();
    } catch (err) {
      subscriber.error(err);
      return undefined;
    }
    var result;
    try {
      result = observableFactory(resource);
    } catch (err) {
      subscriber.error(err);
      return undefined;
    }
    var source = result ? from_1$5.from(result) : empty_1$4.EMPTY;
    var subscription = source.subscribe(subscriber);
    return function () {
      subscription.unsubscribe();
      if (resource) {
        resource.unsubscribe();
      }
    };
  });
}
using$1.using = using;

var zip$3 = {};

var __extends$W = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(zip$3, "__esModule", {
  value: true
});
var fromArray_1 = fromArray$1;
var isArray_1$3 = isArray;
var Subscriber_1$z = Subscriber$1;
var iterator_1 = iterator;
var innerSubscribe_1$j = innerSubscribe$1;
function zip$2() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  var resultSelector = observables[observables.length - 1];
  if (typeof resultSelector === 'function') {
    observables.pop();
  }
  return fromArray_1.fromArray(observables, undefined).lift(new ZipOperator(resultSelector));
}
zip$3.zip = zip$2;
var ZipOperator = function () {
  function ZipOperator(resultSelector) {
    this.resultSelector = resultSelector;
  }
  ZipOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
  };
  return ZipOperator;
}();
zip$3.ZipOperator = ZipOperator;
var ZipSubscriber = function (_super) {
  __extends$W(ZipSubscriber, _super);
  function ZipSubscriber(destination, resultSelector, values) {
    var _this = _super.call(this, destination) || this;
    _this.resultSelector = resultSelector;
    _this.iterators = [];
    _this.active = 0;
    _this.resultSelector = typeof resultSelector === 'function' ? resultSelector : undefined;
    return _this;
  }
  ZipSubscriber.prototype._next = function (value) {
    var iterators = this.iterators;
    if (isArray_1$3.isArray(value)) {
      iterators.push(new StaticArrayIterator(value));
    } else if (typeof value[iterator_1.iterator] === 'function') {
      iterators.push(new StaticIterator(value[iterator_1.iterator]()));
    } else {
      iterators.push(new ZipBufferIterator(this.destination, this, value));
    }
  };
  ZipSubscriber.prototype._complete = function () {
    var iterators = this.iterators;
    var len = iterators.length;
    this.unsubscribe();
    if (len === 0) {
      this.destination.complete();
      return;
    }
    this.active = len;
    for (var i = 0; i < len; i++) {
      var iterator = iterators[i];
      if (iterator.stillUnsubscribed) {
        var destination = this.destination;
        destination.add(iterator.subscribe());
      } else {
        this.active--;
      }
    }
  };
  ZipSubscriber.prototype.notifyInactive = function () {
    this.active--;
    if (this.active === 0) {
      this.destination.complete();
    }
  };
  ZipSubscriber.prototype.checkIterators = function () {
    var iterators = this.iterators;
    var len = iterators.length;
    var destination = this.destination;
    for (var i = 0; i < len; i++) {
      var iterator = iterators[i];
      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
        return;
      }
    }
    var shouldComplete = false;
    var args = [];
    for (var i = 0; i < len; i++) {
      var iterator = iterators[i];
      var result = iterator.next();
      if (iterator.hasCompleted()) {
        shouldComplete = true;
      }
      if (result.done) {
        destination.complete();
        return;
      }
      args.push(result.value);
    }
    if (this.resultSelector) {
      this._tryresultSelector(args);
    } else {
      destination.next(args);
    }
    if (shouldComplete) {
      destination.complete();
    }
  };
  ZipSubscriber.prototype._tryresultSelector = function (args) {
    var result;
    try {
      result = this.resultSelector.apply(this, args);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(result);
  };
  return ZipSubscriber;
}(Subscriber_1$z.Subscriber);
zip$3.ZipSubscriber = ZipSubscriber;
var StaticIterator = function () {
  function StaticIterator(iterator) {
    this.iterator = iterator;
    this.nextResult = iterator.next();
  }
  StaticIterator.prototype.hasValue = function () {
    return true;
  };
  StaticIterator.prototype.next = function () {
    var result = this.nextResult;
    this.nextResult = this.iterator.next();
    return result;
  };
  StaticIterator.prototype.hasCompleted = function () {
    var nextResult = this.nextResult;
    return Boolean(nextResult && nextResult.done);
  };
  return StaticIterator;
}();
var StaticArrayIterator = function () {
  function StaticArrayIterator(array) {
    this.array = array;
    this.index = 0;
    this.length = 0;
    this.length = array.length;
  }
  StaticArrayIterator.prototype[iterator_1.iterator] = function () {
    return this;
  };
  StaticArrayIterator.prototype.next = function (value) {
    var i = this.index++;
    var array = this.array;
    return i < this.length ? {
      value: array[i],
      done: false
    } : {
      value: null,
      done: true
    };
  };
  StaticArrayIterator.prototype.hasValue = function () {
    return this.array.length > this.index;
  };
  StaticArrayIterator.prototype.hasCompleted = function () {
    return this.array.length === this.index;
  };
  return StaticArrayIterator;
}();
var ZipBufferIterator = function (_super) {
  __extends$W(ZipBufferIterator, _super);
  function ZipBufferIterator(destination, parent, observable) {
    var _this = _super.call(this, destination) || this;
    _this.parent = parent;
    _this.observable = observable;
    _this.stillUnsubscribed = true;
    _this.buffer = [];
    _this.isComplete = false;
    return _this;
  }
  ZipBufferIterator.prototype[iterator_1.iterator] = function () {
    return this;
  };
  ZipBufferIterator.prototype.next = function () {
    var buffer = this.buffer;
    if (buffer.length === 0 && this.isComplete) {
      return {
        value: null,
        done: true
      };
    } else {
      return {
        value: buffer.shift(),
        done: false
      };
    }
  };
  ZipBufferIterator.prototype.hasValue = function () {
    return this.buffer.length > 0;
  };
  ZipBufferIterator.prototype.hasCompleted = function () {
    return this.buffer.length === 0 && this.isComplete;
  };
  ZipBufferIterator.prototype.notifyComplete = function () {
    if (this.buffer.length > 0) {
      this.isComplete = true;
      this.parent.notifyInactive();
    } else {
      this.destination.complete();
    }
  };
  ZipBufferIterator.prototype.notifyNext = function (innerValue) {
    this.buffer.push(innerValue);
    this.parent.checkIterators();
  };
  ZipBufferIterator.prototype.subscribe = function () {
    return innerSubscribe_1$j.innerSubscribe(this.observable, new innerSubscribe_1$j.SimpleInnerSubscriber(this));
  };
  return ZipBufferIterator;
}(innerSubscribe_1$j.SimpleOuterSubscriber);

Object.defineProperty(rxjs, "__esModule", {
  value: true
});
var Observable_1$2 = Observable$1;
rxjs.Observable = Observable_1$2.Observable;
var ConnectableObservable_1$1 = ConnectableObservable$1;
rxjs.ConnectableObservable = ConnectableObservable_1$1.ConnectableObservable;
var groupBy_1$1 = groupBy$1;
rxjs.GroupedObservable = groupBy_1$1.GroupedObservable;
var observable_1 = observable;
rxjs.observable = observable_1.observable;
var Subject_1$9 = Subject$1;
rxjs.Subject = Subject_1$9.Subject;
var BehaviorSubject_1$1 = BehaviorSubject$1;
rxjs.BehaviorSubject = BehaviorSubject_1$1.BehaviorSubject;
var ReplaySubject_1$2 = ReplaySubject$1;
rxjs.ReplaySubject = ReplaySubject_1$2.ReplaySubject;
var AsyncSubject_1$1 = AsyncSubject$1;
rxjs.AsyncSubject = AsyncSubject_1$1.AsyncSubject;
var asap_1$1 = asap;
rxjs.asap = asap_1$1.asap;
rxjs.asapScheduler = asap_1$1.asapScheduler;
var async_1$b = async;
rxjs.async = async_1$b.async;
rxjs.asyncScheduler = async_1$b.asyncScheduler;
var queue_1 = queue;
rxjs.queue = queue_1.queue;
rxjs.queueScheduler = queue_1.queueScheduler;
var animationFrame_1 = animationFrame;
rxjs.animationFrame = animationFrame_1.animationFrame;
rxjs.animationFrameScheduler = animationFrame_1.animationFrameScheduler;
var VirtualTimeScheduler_1 = VirtualTimeScheduler$1;
rxjs.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;
rxjs.VirtualAction = VirtualTimeScheduler_1.VirtualAction;
var Scheduler_1 = Scheduler$1;
rxjs.Scheduler = Scheduler_1.Scheduler;
var Subscription_1$4 = Subscription$1;
rxjs.Subscription = Subscription_1$4.Subscription;
var Subscriber_1$y = Subscriber$1;
rxjs.Subscriber = Subscriber_1$y.Subscriber;
var Notification_1$2 = Notification;
rxjs.Notification = Notification_1$2.Notification;
rxjs.NotificationKind = Notification_1$2.NotificationKind;
var pipe_1$1 = pipe$1;
rxjs.pipe = pipe_1$1.pipe;
var noop_1$1 = noop$1;
rxjs.noop = noop_1$1.noop;
var identity_1$3 = identity$1;
rxjs.identity = identity_1$3.identity;
var isObservable_1 = isObservable$1;
rxjs.isObservable = isObservable_1.isObservable;
var ArgumentOutOfRangeError_1$4 = ArgumentOutOfRangeError;
rxjs.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1$4.ArgumentOutOfRangeError;
var EmptyError_1$4 = EmptyError;
rxjs.EmptyError = EmptyError_1$4.EmptyError;
var ObjectUnsubscribedError_1 = ObjectUnsubscribedError;
rxjs.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;
var UnsubscriptionError_1 = UnsubscriptionError;
rxjs.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;
var TimeoutError_1$1 = TimeoutError;
rxjs.TimeoutError = TimeoutError_1$1.TimeoutError;
var bindCallback_1 = bindCallback$1;
rxjs.bindCallback = bindCallback_1.bindCallback;
var bindNodeCallback_1 = bindNodeCallback$1;
rxjs.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;
var combineLatest_1$3 = combineLatest$3;
rxjs.combineLatest = combineLatest_1$3.combineLatest;
var concat_1$4 = concat$3;
rxjs.concat = concat_1$4.concat;
var defer_1$1 = defer$1;
rxjs.defer = defer_1$1.defer;
var empty_1$3 = empty;
rxjs.empty = empty_1$3.empty;
var forkJoin_1 = forkJoin$1;
rxjs.forkJoin = forkJoin_1.forkJoin;
var from_1$4 = from$1;
rxjs.from = from_1$4.from;
var fromEvent_1 = fromEvent$1;
rxjs.fromEvent = fromEvent_1.fromEvent;
var fromEventPattern_1 = fromEventPattern$1;
rxjs.fromEventPattern = fromEventPattern_1.fromEventPattern;
var generate_1 = generate$1;
rxjs.generate = generate_1.generate;
var iif_1 = iif$1;
rxjs.iif = iif_1.iif;
var interval_1 = interval$1;
rxjs.interval = interval_1.interval;
var merge_1$2 = merge$3;
rxjs.merge = merge_1$2.merge;
var never_1 = never;
rxjs.never = never_1.never;
var of_1$1 = of$1;
rxjs.of = of_1$1.of;
var onErrorResumeNext_1$1 = onErrorResumeNext$3;
rxjs.onErrorResumeNext = onErrorResumeNext_1$1.onErrorResumeNext;
var pairs_1 = pairs$1;
rxjs.pairs = pairs_1.pairs;
var partition_1$1 = partition$3;
rxjs.partition = partition_1$1.partition;
var race_1$2 = race$3;
rxjs.race = race_1$2.race;
var range_1 = range$1;
rxjs.range = range_1.range;
var throwError_1$1 = throwError$1;
rxjs.throwError = throwError_1$1.throwError;
var timer_1$1 = timer$1;
rxjs.timer = timer_1$1.timer;
var using_1 = using$1;
rxjs.using = using_1.using;
var zip_1$3 = zip$3;
rxjs.zip = zip_1$3.zip;
var scheduled_1 = scheduled$1;
rxjs.scheduled = scheduled_1.scheduled;
var empty_2 = empty;
rxjs.EMPTY = empty_2.EMPTY;
var never_2 = never;
rxjs.NEVER = never_2.NEVER;
var config_1 = config;
rxjs.config = config_1.config;

Object.defineProperty(sendAPDU$1, "__esModule", {
  value: true
});
sendAPDU$1.sendAPDU = void 0;
var _rxjs$3 = rxjs;
var _logs$3 = lib;
var TagId$1 = 0x05;
function chunkBuffer(buffer, sizeForIndex) {
  var chunks = [];
  for (var i = 0, size = sizeForIndex(0); i < buffer.length; i += size, size = sizeForIndex(i)) {
    chunks.push(buffer.slice(i, i + size));
  }
  return chunks;
}
var sendAPDU = function sendAPDU(write, apdu, mtuSize) {
  var chunks = chunkBuffer(apdu, function (i) {
    return mtuSize - (i === 0 ? 5 : 3);
  }).map(function (buffer, i) {
    var head = Buffer.alloc(i === 0 ? 5 : 3);
    head.writeUInt8(TagId$1, 0);
    head.writeUInt16BE(i, 1);
    if (i === 0) {
      head.writeUInt16BE(apdu.length, 3);
    }
    return Buffer.concat([head, buffer]);
  });
  return _rxjs$3.Observable.create(function (o) {
    var terminated = false;
    function main() {
      return _main.apply(this, arguments);
    }
    function _main() {
      _main = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _iterator, _step, chunk;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _iterator = _createForOfIteratorHelper(chunks);
              _context.prev = 1;
              _iterator.s();
            case 3:
              if ((_step = _iterator.n()).done) {
                _context.next = 11;
                break;
              }
              chunk = _step.value;
              if (!terminated) {
                _context.next = 7;
                break;
              }
              return _context.abrupt("return");
            case 7:
              _context.next = 9;
              return write(chunk);
            case 9:
              _context.next = 3;
              break;
            case 11:
              _context.next = 16;
              break;
            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](1);
              _iterator.e(_context.t0);
            case 16:
              _context.prev = 16;
              _iterator.f();
              return _context.finish(16);
            case 19:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[1, 13, 16, 19]]);
      }));
      return _main.apply(this, arguments);
    }
    main().then(function () {
      terminated = true;
      o.complete();
    }, function (e) {
      terminated = true;
      (0, _logs$3.log)("ble-error", "sendAPDU failure " + String(e));
      o.error(e);
    });
    var unsubscribe = function unsubscribe() {
      if (!terminated) {
        (0, _logs$3.log)("ble-verbose", "sendAPDU interruption");
        terminated = true;
      }
    };
    return unsubscribe;
  });
};
sendAPDU$1.sendAPDU = sendAPDU;

var receiveAPDU$1 = {};

Object.defineProperty(receiveAPDU$1, "__esModule", {
  value: true
});
receiveAPDU$1.receiveAPDU = void 0;
var _errors$1 = index_cjs;
var _rxjs$2 = rxjs;
var _logs$2 = lib;
var TagId = 0x05; // operator that transform the input raw stream into one apdu response and finishes

var receiveAPDU = function receiveAPDU(rawStream) {
  return _rxjs$2.Observable.create(function (o) {
    var notifiedIndex = 0;
    var notifiedDataLength = 0;
    var notifiedData = Buffer.alloc(0);
    var sub = rawStream.subscribe({
      complete: function complete() {
        o.error(new _errors$1.DisconnectedDevice());
        sub.unsubscribe();
      },
      error: function error(e) {
        (0, _logs$2.log)("ble-error", "in receiveAPDU " + String(e));
        o.error(e);
        sub.unsubscribe();
      },
      next: function next(value) {
        var tag = value.readUInt8(0);
        var index = value.readUInt16BE(1);
        var data = value.slice(3);
        if (tag !== TagId) {
          o.error(new _errors$1.TransportError("Invalid tag " + tag.toString(16), "InvalidTag"));
          return;
        }
        if (notifiedIndex !== index) {
          o.error(new _errors$1.TransportError("BLE: Invalid sequence number. discontinued chunk. Received " + index + " but expected " + notifiedIndex, "InvalidSequence"));
          return;
        }
        if (index === 0) {
          notifiedDataLength = data.readUInt16BE(0);
          data = data.slice(2);
        }
        notifiedIndex++;
        notifiedData = Buffer.concat([notifiedData, data]);
        if (notifiedData.length > notifiedDataLength) {
          o.error(new _errors$1.TransportError("BLE: received too much data. discontinued chunk. Received " + notifiedData.length + " but expected " + notifiedDataLength, "BLETooMuchData"));
          return;
        }
        if (notifiedData.length === notifiedDataLength) {
          o.next(notifiedData);
          o.complete();
          sub.unsubscribe();
        }
      }
    });
    return function () {
      sub.unsubscribe();
    };
  });
};
receiveAPDU$1.receiveAPDU = receiveAPDU;

var operators = {};

var audit$1 = {};

var __extends$V = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(audit$1, "__esModule", {
  value: true
});
var innerSubscribe_1$i = innerSubscribe$1;
function audit(durationSelector) {
  return function auditOperatorFunction(source) {
    return source.lift(new AuditOperator(durationSelector));
  };
}
audit$1.audit = audit;
var AuditOperator = function () {
  function AuditOperator(durationSelector) {
    this.durationSelector = durationSelector;
  }
  AuditOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
  };
  return AuditOperator;
}();
var AuditSubscriber = function (_super) {
  __extends$V(AuditSubscriber, _super);
  function AuditSubscriber(destination, durationSelector) {
    var _this = _super.call(this, destination) || this;
    _this.durationSelector = durationSelector;
    _this.hasValue = false;
    return _this;
  }
  AuditSubscriber.prototype._next = function (value) {
    this.value = value;
    this.hasValue = true;
    if (!this.throttled) {
      var duration = void 0;
      try {
        var durationSelector = this.durationSelector;
        duration = durationSelector(value);
      } catch (err) {
        return this.destination.error(err);
      }
      var innerSubscription = innerSubscribe_1$i.innerSubscribe(duration, new innerSubscribe_1$i.SimpleInnerSubscriber(this));
      if (!innerSubscription || innerSubscription.closed) {
        this.clearThrottle();
      } else {
        this.add(this.throttled = innerSubscription);
      }
    }
  };
  AuditSubscriber.prototype.clearThrottle = function () {
    var _a = this,
      value = _a.value,
      hasValue = _a.hasValue,
      throttled = _a.throttled;
    if (throttled) {
      this.remove(throttled);
      this.throttled = undefined;
      throttled.unsubscribe();
    }
    if (hasValue) {
      this.value = undefined;
      this.hasValue = false;
      this.destination.next(value);
    }
  };
  AuditSubscriber.prototype.notifyNext = function () {
    this.clearThrottle();
  };
  AuditSubscriber.prototype.notifyComplete = function () {
    this.clearThrottle();
  };
  return AuditSubscriber;
}(innerSubscribe_1$i.SimpleOuterSubscriber);

var auditTime$1 = {};

Object.defineProperty(auditTime$1, "__esModule", {
  value: true
});
var async_1$a = async;
var audit_1$1 = audit$1;
var timer_1 = timer$1;
function auditTime(duration, scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1$a.async;
  }
  return audit_1$1.audit(function () {
    return timer_1.timer(duration, scheduler);
  });
}
auditTime$1.auditTime = auditTime;

var buffer$1 = {};

var __extends$U = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(buffer$1, "__esModule", {
  value: true
});
var innerSubscribe_1$h = innerSubscribe$1;
function buffer(closingNotifier) {
  return function bufferOperatorFunction(source) {
    return source.lift(new BufferOperator(closingNotifier));
  };
}
buffer$1.buffer = buffer;
var BufferOperator = function () {
  function BufferOperator(closingNotifier) {
    this.closingNotifier = closingNotifier;
  }
  BufferOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
  };
  return BufferOperator;
}();
var BufferSubscriber = function (_super) {
  __extends$U(BufferSubscriber, _super);
  function BufferSubscriber(destination, closingNotifier) {
    var _this = _super.call(this, destination) || this;
    _this.buffer = [];
    _this.add(innerSubscribe_1$h.innerSubscribe(closingNotifier, new innerSubscribe_1$h.SimpleInnerSubscriber(_this)));
    return _this;
  }
  BufferSubscriber.prototype._next = function (value) {
    this.buffer.push(value);
  };
  BufferSubscriber.prototype.notifyNext = function () {
    var buffer = this.buffer;
    this.buffer = [];
    this.destination.next(buffer);
  };
  return BufferSubscriber;
}(innerSubscribe_1$h.SimpleOuterSubscriber);

var bufferCount$1 = {};

var __extends$T = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(bufferCount$1, "__esModule", {
  value: true
});
var Subscriber_1$x = Subscriber$1;
function bufferCount(bufferSize, startBufferEvery) {
  if (startBufferEvery === void 0) {
    startBufferEvery = null;
  }
  return function bufferCountOperatorFunction(source) {
    return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
  };
}
bufferCount$1.bufferCount = bufferCount;
var BufferCountOperator = function () {
  function BufferCountOperator(bufferSize, startBufferEvery) {
    this.bufferSize = bufferSize;
    this.startBufferEvery = startBufferEvery;
    if (!startBufferEvery || bufferSize === startBufferEvery) {
      this.subscriberClass = BufferCountSubscriber;
    } else {
      this.subscriberClass = BufferSkipCountSubscriber;
    }
  }
  BufferCountOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
  };
  return BufferCountOperator;
}();
var BufferCountSubscriber = function (_super) {
  __extends$T(BufferCountSubscriber, _super);
  function BufferCountSubscriber(destination, bufferSize) {
    var _this = _super.call(this, destination) || this;
    _this.bufferSize = bufferSize;
    _this.buffer = [];
    return _this;
  }
  BufferCountSubscriber.prototype._next = function (value) {
    var buffer = this.buffer;
    buffer.push(value);
    if (buffer.length == this.bufferSize) {
      this.destination.next(buffer);
      this.buffer = [];
    }
  };
  BufferCountSubscriber.prototype._complete = function () {
    var buffer = this.buffer;
    if (buffer.length > 0) {
      this.destination.next(buffer);
    }
    _super.prototype._complete.call(this);
  };
  return BufferCountSubscriber;
}(Subscriber_1$x.Subscriber);
var BufferSkipCountSubscriber = function (_super) {
  __extends$T(BufferSkipCountSubscriber, _super);
  function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
    var _this = _super.call(this, destination) || this;
    _this.bufferSize = bufferSize;
    _this.startBufferEvery = startBufferEvery;
    _this.buffers = [];
    _this.count = 0;
    return _this;
  }
  BufferSkipCountSubscriber.prototype._next = function (value) {
    var _a = this,
      bufferSize = _a.bufferSize,
      startBufferEvery = _a.startBufferEvery,
      buffers = _a.buffers,
      count = _a.count;
    this.count++;
    if (count % startBufferEvery === 0) {
      buffers.push([]);
    }
    for (var i = buffers.length; i--;) {
      var buffer = buffers[i];
      buffer.push(value);
      if (buffer.length === bufferSize) {
        buffers.splice(i, 1);
        this.destination.next(buffer);
      }
    }
  };
  BufferSkipCountSubscriber.prototype._complete = function () {
    var _a = this,
      buffers = _a.buffers,
      destination = _a.destination;
    while (buffers.length > 0) {
      var buffer = buffers.shift();
      if (buffer.length > 0) {
        destination.next(buffer);
      }
    }
    _super.prototype._complete.call(this);
  };
  return BufferSkipCountSubscriber;
}(Subscriber_1$x.Subscriber);

var bufferTime$1 = {};

var __extends$S = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(bufferTime$1, "__esModule", {
  value: true
});
var async_1$9 = async;
var Subscriber_1$w = Subscriber$1;
var isScheduler_1$2 = isScheduler$1;
function bufferTime(bufferTimeSpan) {
  var length = arguments.length;
  var scheduler = async_1$9.async;
  if (isScheduler_1$2.isScheduler(arguments[arguments.length - 1])) {
    scheduler = arguments[arguments.length - 1];
    length--;
  }
  var bufferCreationInterval = null;
  if (length >= 2) {
    bufferCreationInterval = arguments[1];
  }
  var maxBufferSize = Number.POSITIVE_INFINITY;
  if (length >= 3) {
    maxBufferSize = arguments[2];
  }
  return function bufferTimeOperatorFunction(source) {
    return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
  };
}
bufferTime$1.bufferTime = bufferTime;
var BufferTimeOperator = function () {
  function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
    this.bufferTimeSpan = bufferTimeSpan;
    this.bufferCreationInterval = bufferCreationInterval;
    this.maxBufferSize = maxBufferSize;
    this.scheduler = scheduler;
  }
  BufferTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
  };
  return BufferTimeOperator;
}();
var Context = function () {
  function Context() {
    this.buffer = [];
  }
  return Context;
}();
var BufferTimeSubscriber = function (_super) {
  __extends$S(BufferTimeSubscriber, _super);
  function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
    var _this = _super.call(this, destination) || this;
    _this.bufferTimeSpan = bufferTimeSpan;
    _this.bufferCreationInterval = bufferCreationInterval;
    _this.maxBufferSize = maxBufferSize;
    _this.scheduler = scheduler;
    _this.contexts = [];
    var context = _this.openContext();
    _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
    if (_this.timespanOnly) {
      var timeSpanOnlyState = {
        subscriber: _this,
        context: context,
        bufferTimeSpan: bufferTimeSpan
      };
      _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
    } else {
      var closeState = {
        subscriber: _this,
        context: context
      };
      var creationState = {
        bufferTimeSpan: bufferTimeSpan,
        bufferCreationInterval: bufferCreationInterval,
        subscriber: _this,
        scheduler: scheduler
      };
      _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
      _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
    }
    return _this;
  }
  BufferTimeSubscriber.prototype._next = function (value) {
    var contexts = this.contexts;
    var len = contexts.length;
    var filledBufferContext;
    for (var i = 0; i < len; i++) {
      var context_1 = contexts[i];
      var buffer = context_1.buffer;
      buffer.push(value);
      if (buffer.length == this.maxBufferSize) {
        filledBufferContext = context_1;
      }
    }
    if (filledBufferContext) {
      this.onBufferFull(filledBufferContext);
    }
  };
  BufferTimeSubscriber.prototype._error = function (err) {
    this.contexts.length = 0;
    _super.prototype._error.call(this, err);
  };
  BufferTimeSubscriber.prototype._complete = function () {
    var _a = this,
      contexts = _a.contexts,
      destination = _a.destination;
    while (contexts.length > 0) {
      var context_2 = contexts.shift();
      destination.next(context_2.buffer);
    }
    _super.prototype._complete.call(this);
  };
  BufferTimeSubscriber.prototype._unsubscribe = function () {
    this.contexts = null;
  };
  BufferTimeSubscriber.prototype.onBufferFull = function (context) {
    this.closeContext(context);
    var closeAction = context.closeAction;
    closeAction.unsubscribe();
    this.remove(closeAction);
    if (!this.closed && this.timespanOnly) {
      context = this.openContext();
      var bufferTimeSpan = this.bufferTimeSpan;
      var timeSpanOnlyState = {
        subscriber: this,
        context: context,
        bufferTimeSpan: bufferTimeSpan
      };
      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
    }
  };
  BufferTimeSubscriber.prototype.openContext = function () {
    var context = new Context();
    this.contexts.push(context);
    return context;
  };
  BufferTimeSubscriber.prototype.closeContext = function (context) {
    this.destination.next(context.buffer);
    var contexts = this.contexts;
    var spliceIndex = contexts ? contexts.indexOf(context) : -1;
    if (spliceIndex >= 0) {
      contexts.splice(contexts.indexOf(context), 1);
    }
  };
  return BufferTimeSubscriber;
}(Subscriber_1$w.Subscriber);
function dispatchBufferTimeSpanOnly(state) {
  var subscriber = state.subscriber;
  var prevContext = state.context;
  if (prevContext) {
    subscriber.closeContext(prevContext);
  }
  if (!subscriber.closed) {
    state.context = subscriber.openContext();
    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
  }
}
function dispatchBufferCreation(state) {
  var bufferCreationInterval = state.bufferCreationInterval,
    bufferTimeSpan = state.bufferTimeSpan,
    subscriber = state.subscriber,
    scheduler = state.scheduler;
  var context = subscriber.openContext();
  var action = this;
  if (!subscriber.closed) {
    subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, {
      subscriber: subscriber,
      context: context
    }));
    action.schedule(state, bufferCreationInterval);
  }
}
function dispatchBufferClose(arg) {
  var subscriber = arg.subscriber,
    context = arg.context;
  subscriber.closeContext(context);
}

var bufferToggle$1 = {};

var __extends$R = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(bufferToggle$1, "__esModule", {
  value: true
});
var Subscription_1$3 = Subscription$1;
var subscribeToResult_1$4 = subscribeToResult$1;
var OuterSubscriber_1$4 = OuterSubscriber$1;
function bufferToggle(openings, closingSelector) {
  return function bufferToggleOperatorFunction(source) {
    return source.lift(new BufferToggleOperator(openings, closingSelector));
  };
}
bufferToggle$1.bufferToggle = bufferToggle;
var BufferToggleOperator = function () {
  function BufferToggleOperator(openings, closingSelector) {
    this.openings = openings;
    this.closingSelector = closingSelector;
  }
  BufferToggleOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
  };
  return BufferToggleOperator;
}();
var BufferToggleSubscriber = function (_super) {
  __extends$R(BufferToggleSubscriber, _super);
  function BufferToggleSubscriber(destination, openings, closingSelector) {
    var _this = _super.call(this, destination) || this;
    _this.closingSelector = closingSelector;
    _this.contexts = [];
    _this.add(subscribeToResult_1$4.subscribeToResult(_this, openings));
    return _this;
  }
  BufferToggleSubscriber.prototype._next = function (value) {
    var contexts = this.contexts;
    var len = contexts.length;
    for (var i = 0; i < len; i++) {
      contexts[i].buffer.push(value);
    }
  };
  BufferToggleSubscriber.prototype._error = function (err) {
    var contexts = this.contexts;
    while (contexts.length > 0) {
      var context_1 = contexts.shift();
      context_1.subscription.unsubscribe();
      context_1.buffer = null;
      context_1.subscription = null;
    }
    this.contexts = null;
    _super.prototype._error.call(this, err);
  };
  BufferToggleSubscriber.prototype._complete = function () {
    var contexts = this.contexts;
    while (contexts.length > 0) {
      var context_2 = contexts.shift();
      this.destination.next(context_2.buffer);
      context_2.subscription.unsubscribe();
      context_2.buffer = null;
      context_2.subscription = null;
    }
    this.contexts = null;
    _super.prototype._complete.call(this);
  };
  BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue) {
    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
  };
  BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
    this.closeBuffer(innerSub.context);
  };
  BufferToggleSubscriber.prototype.openBuffer = function (value) {
    try {
      var closingSelector = this.closingSelector;
      var closingNotifier = closingSelector.call(this, value);
      if (closingNotifier) {
        this.trySubscribe(closingNotifier);
      }
    } catch (err) {
      this._error(err);
    }
  };
  BufferToggleSubscriber.prototype.closeBuffer = function (context) {
    var contexts = this.contexts;
    if (contexts && context) {
      var buffer = context.buffer,
        subscription = context.subscription;
      this.destination.next(buffer);
      contexts.splice(contexts.indexOf(context), 1);
      this.remove(subscription);
      subscription.unsubscribe();
    }
  };
  BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
    var contexts = this.contexts;
    var buffer = [];
    var subscription = new Subscription_1$3.Subscription();
    var context = {
      buffer: buffer,
      subscription: subscription
    };
    contexts.push(context);
    var innerSubscription = subscribeToResult_1$4.subscribeToResult(this, closingNotifier, context);
    if (!innerSubscription || innerSubscription.closed) {
      this.closeBuffer(context);
    } else {
      innerSubscription.context = context;
      this.add(innerSubscription);
      subscription.add(innerSubscription);
    }
  };
  return BufferToggleSubscriber;
}(OuterSubscriber_1$4.OuterSubscriber);

var bufferWhen$1 = {};

var __extends$Q = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(bufferWhen$1, "__esModule", {
  value: true
});
var Subscription_1$2 = Subscription$1;
var innerSubscribe_1$g = innerSubscribe$1;
function bufferWhen(closingSelector) {
  return function (source) {
    return source.lift(new BufferWhenOperator(closingSelector));
  };
}
bufferWhen$1.bufferWhen = bufferWhen;
var BufferWhenOperator = function () {
  function BufferWhenOperator(closingSelector) {
    this.closingSelector = closingSelector;
  }
  BufferWhenOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
  };
  return BufferWhenOperator;
}();
var BufferWhenSubscriber = function (_super) {
  __extends$Q(BufferWhenSubscriber, _super);
  function BufferWhenSubscriber(destination, closingSelector) {
    var _this = _super.call(this, destination) || this;
    _this.closingSelector = closingSelector;
    _this.subscribing = false;
    _this.openBuffer();
    return _this;
  }
  BufferWhenSubscriber.prototype._next = function (value) {
    this.buffer.push(value);
  };
  BufferWhenSubscriber.prototype._complete = function () {
    var buffer = this.buffer;
    if (buffer) {
      this.destination.next(buffer);
    }
    _super.prototype._complete.call(this);
  };
  BufferWhenSubscriber.prototype._unsubscribe = function () {
    this.buffer = undefined;
    this.subscribing = false;
  };
  BufferWhenSubscriber.prototype.notifyNext = function () {
    this.openBuffer();
  };
  BufferWhenSubscriber.prototype.notifyComplete = function () {
    if (this.subscribing) {
      this.complete();
    } else {
      this.openBuffer();
    }
  };
  BufferWhenSubscriber.prototype.openBuffer = function () {
    var closingSubscription = this.closingSubscription;
    if (closingSubscription) {
      this.remove(closingSubscription);
      closingSubscription.unsubscribe();
    }
    var buffer = this.buffer;
    if (this.buffer) {
      this.destination.next(buffer);
    }
    this.buffer = [];
    var closingNotifier;
    try {
      var closingSelector = this.closingSelector;
      closingNotifier = closingSelector();
    } catch (err) {
      return this.error(err);
    }
    closingSubscription = new Subscription_1$2.Subscription();
    this.closingSubscription = closingSubscription;
    this.add(closingSubscription);
    this.subscribing = true;
    closingSubscription.add(innerSubscribe_1$g.innerSubscribe(closingNotifier, new innerSubscribe_1$g.SimpleInnerSubscriber(this)));
    this.subscribing = false;
  };
  return BufferWhenSubscriber;
}(innerSubscribe_1$g.SimpleOuterSubscriber);

var catchError$1 = {};

var __extends$P = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(catchError$1, "__esModule", {
  value: true
});
var innerSubscribe_1$f = innerSubscribe$1;
function catchError(selector) {
  return function catchErrorOperatorFunction(source) {
    var operator = new CatchOperator(selector);
    var caught = source.lift(operator);
    return operator.caught = caught;
  };
}
catchError$1.catchError = catchError;
var CatchOperator = function () {
  function CatchOperator(selector) {
    this.selector = selector;
  }
  CatchOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
  };
  return CatchOperator;
}();
var CatchSubscriber = function (_super) {
  __extends$P(CatchSubscriber, _super);
  function CatchSubscriber(destination, selector, caught) {
    var _this = _super.call(this, destination) || this;
    _this.selector = selector;
    _this.caught = caught;
    return _this;
  }
  CatchSubscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      var result = void 0;
      try {
        result = this.selector(err, this.caught);
      } catch (err2) {
        _super.prototype.error.call(this, err2);
        return;
      }
      this._unsubscribeAndRecycle();
      var innerSubscriber = new innerSubscribe_1$f.SimpleInnerSubscriber(this);
      this.add(innerSubscriber);
      var innerSubscription = innerSubscribe_1$f.innerSubscribe(result, innerSubscriber);
      if (innerSubscription !== innerSubscriber) {
        this.add(innerSubscription);
      }
    }
  };
  return CatchSubscriber;
}(innerSubscribe_1$f.SimpleOuterSubscriber);

var combineAll$1 = {};

Object.defineProperty(combineAll$1, "__esModule", {
  value: true
});
var combineLatest_1$2 = combineLatest$3;
function combineAll(project) {
  return function (source) {
    return source.lift(new combineLatest_1$2.CombineLatestOperator(project));
  };
}
combineAll$1.combineAll = combineAll;

var combineLatest$1 = {};

Object.defineProperty(combineLatest$1, "__esModule", {
  value: true
});
var isArray_1$2 = isArray;
var combineLatest_1$1 = combineLatest$3;
var from_1$3 = from$1;
function combineLatest() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  var project = null;
  if (typeof observables[observables.length - 1] === 'function') {
    project = observables.pop();
  }
  if (observables.length === 1 && isArray_1$2.isArray(observables[0])) {
    observables = observables[0].slice();
  }
  return function (source) {
    return source.lift.call(from_1$3.from([source].concat(observables)), new combineLatest_1$1.CombineLatestOperator(project));
  };
}
combineLatest$1.combineLatest = combineLatest;

var concat$1 = {};

Object.defineProperty(concat$1, "__esModule", {
  value: true
});
var concat_1$3 = concat$3;
function concat() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  return function (source) {
    return source.lift.call(concat_1$3.concat.apply(void 0, [source].concat(observables)));
  };
}
concat$1.concat = concat;

var concatMap$1 = {};

Object.defineProperty(concatMap$1, "__esModule", {
  value: true
});
var mergeMap_1$2 = mergeMap$1;
function concatMap(project, resultSelector) {
  return mergeMap_1$2.mergeMap(project, resultSelector, 1);
}
concatMap$1.concatMap = concatMap;

var concatMapTo$1 = {};

Object.defineProperty(concatMapTo$1, "__esModule", {
  value: true
});
var concatMap_1$1 = concatMap$1;
function concatMapTo(innerObservable, resultSelector) {
  return concatMap_1$1.concatMap(function () {
    return innerObservable;
  }, resultSelector);
}
concatMapTo$1.concatMapTo = concatMapTo;

var count$1 = {};

var __extends$O = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(count$1, "__esModule", {
  value: true
});
var Subscriber_1$v = Subscriber$1;
function count(predicate) {
  return function (source) {
    return source.lift(new CountOperator(predicate, source));
  };
}
count$1.count = count;
var CountOperator = function () {
  function CountOperator(predicate, source) {
    this.predicate = predicate;
    this.source = source;
  }
  CountOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
  };
  return CountOperator;
}();
var CountSubscriber = function (_super) {
  __extends$O(CountSubscriber, _super);
  function CountSubscriber(destination, predicate, source) {
    var _this = _super.call(this, destination) || this;
    _this.predicate = predicate;
    _this.source = source;
    _this.count = 0;
    _this.index = 0;
    return _this;
  }
  CountSubscriber.prototype._next = function (value) {
    if (this.predicate) {
      this._tryPredicate(value);
    } else {
      this.count++;
    }
  };
  CountSubscriber.prototype._tryPredicate = function (value) {
    var result;
    try {
      result = this.predicate(value, this.index++, this.source);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    if (result) {
      this.count++;
    }
  };
  CountSubscriber.prototype._complete = function () {
    this.destination.next(this.count);
    this.destination.complete();
  };
  return CountSubscriber;
}(Subscriber_1$v.Subscriber);

var debounce$1 = {};

var __extends$N = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(debounce$1, "__esModule", {
  value: true
});
var innerSubscribe_1$e = innerSubscribe$1;
function debounce(durationSelector) {
  return function (source) {
    return source.lift(new DebounceOperator(durationSelector));
  };
}
debounce$1.debounce = debounce;
var DebounceOperator = function () {
  function DebounceOperator(durationSelector) {
    this.durationSelector = durationSelector;
  }
  DebounceOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
  };
  return DebounceOperator;
}();
var DebounceSubscriber = function (_super) {
  __extends$N(DebounceSubscriber, _super);
  function DebounceSubscriber(destination, durationSelector) {
    var _this = _super.call(this, destination) || this;
    _this.durationSelector = durationSelector;
    _this.hasValue = false;
    return _this;
  }
  DebounceSubscriber.prototype._next = function (value) {
    try {
      var result = this.durationSelector.call(this, value);
      if (result) {
        this._tryNext(value, result);
      }
    } catch (err) {
      this.destination.error(err);
    }
  };
  DebounceSubscriber.prototype._complete = function () {
    this.emitValue();
    this.destination.complete();
  };
  DebounceSubscriber.prototype._tryNext = function (value, duration) {
    var subscription = this.durationSubscription;
    this.value = value;
    this.hasValue = true;
    if (subscription) {
      subscription.unsubscribe();
      this.remove(subscription);
    }
    subscription = innerSubscribe_1$e.innerSubscribe(duration, new innerSubscribe_1$e.SimpleInnerSubscriber(this));
    if (subscription && !subscription.closed) {
      this.add(this.durationSubscription = subscription);
    }
  };
  DebounceSubscriber.prototype.notifyNext = function () {
    this.emitValue();
  };
  DebounceSubscriber.prototype.notifyComplete = function () {
    this.emitValue();
  };
  DebounceSubscriber.prototype.emitValue = function () {
    if (this.hasValue) {
      var value = this.value;
      var subscription = this.durationSubscription;
      if (subscription) {
        this.durationSubscription = undefined;
        subscription.unsubscribe();
        this.remove(subscription);
      }
      this.value = undefined;
      this.hasValue = false;
      _super.prototype._next.call(this, value);
    }
  };
  return DebounceSubscriber;
}(innerSubscribe_1$e.SimpleOuterSubscriber);

var debounceTime$1 = {};

var __extends$M = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(debounceTime$1, "__esModule", {
  value: true
});
var Subscriber_1$u = Subscriber$1;
var async_1$8 = async;
function debounceTime(dueTime, scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1$8.async;
  }
  return function (source) {
    return source.lift(new DebounceTimeOperator(dueTime, scheduler));
  };
}
debounceTime$1.debounceTime = debounceTime;
var DebounceTimeOperator = function () {
  function DebounceTimeOperator(dueTime, scheduler) {
    this.dueTime = dueTime;
    this.scheduler = scheduler;
  }
  DebounceTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
  };
  return DebounceTimeOperator;
}();
var DebounceTimeSubscriber = function (_super) {
  __extends$M(DebounceTimeSubscriber, _super);
  function DebounceTimeSubscriber(destination, dueTime, scheduler) {
    var _this = _super.call(this, destination) || this;
    _this.dueTime = dueTime;
    _this.scheduler = scheduler;
    _this.debouncedSubscription = null;
    _this.lastValue = null;
    _this.hasValue = false;
    return _this;
  }
  DebounceTimeSubscriber.prototype._next = function (value) {
    this.clearDebounce();
    this.lastValue = value;
    this.hasValue = true;
    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$1, this.dueTime, this));
  };
  DebounceTimeSubscriber.prototype._complete = function () {
    this.debouncedNext();
    this.destination.complete();
  };
  DebounceTimeSubscriber.prototype.debouncedNext = function () {
    this.clearDebounce();
    if (this.hasValue) {
      var lastValue = this.lastValue;
      this.lastValue = null;
      this.hasValue = false;
      this.destination.next(lastValue);
    }
  };
  DebounceTimeSubscriber.prototype.clearDebounce = function () {
    var debouncedSubscription = this.debouncedSubscription;
    if (debouncedSubscription !== null) {
      this.remove(debouncedSubscription);
      debouncedSubscription.unsubscribe();
      this.debouncedSubscription = null;
    }
  };
  return DebounceTimeSubscriber;
}(Subscriber_1$u.Subscriber);
function dispatchNext$1(subscriber) {
  subscriber.debouncedNext();
}

var defaultIfEmpty$1 = {};

var __extends$L = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(defaultIfEmpty$1, "__esModule", {
  value: true
});
var Subscriber_1$t = Subscriber$1;
function defaultIfEmpty(defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = null;
  }
  return function (source) {
    return source.lift(new DefaultIfEmptyOperator(defaultValue));
  };
}
defaultIfEmpty$1.defaultIfEmpty = defaultIfEmpty;
var DefaultIfEmptyOperator = function () {
  function DefaultIfEmptyOperator(defaultValue) {
    this.defaultValue = defaultValue;
  }
  DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
  };
  return DefaultIfEmptyOperator;
}();
var DefaultIfEmptySubscriber = function (_super) {
  __extends$L(DefaultIfEmptySubscriber, _super);
  function DefaultIfEmptySubscriber(destination, defaultValue) {
    var _this = _super.call(this, destination) || this;
    _this.defaultValue = defaultValue;
    _this.isEmpty = true;
    return _this;
  }
  DefaultIfEmptySubscriber.prototype._next = function (value) {
    this.isEmpty = false;
    this.destination.next(value);
  };
  DefaultIfEmptySubscriber.prototype._complete = function () {
    if (this.isEmpty) {
      this.destination.next(this.defaultValue);
    }
    this.destination.complete();
  };
  return DefaultIfEmptySubscriber;
}(Subscriber_1$t.Subscriber);

var delay$1 = {};

var isDate$1 = {};

Object.defineProperty(isDate$1, "__esModule", {
  value: true
});
function isDate(value) {
  return value instanceof Date && !isNaN(+value);
}
isDate$1.isDate = isDate;

var __extends$K = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(delay$1, "__esModule", {
  value: true
});
var async_1$7 = async;
var isDate_1$1 = isDate$1;
var Subscriber_1$s = Subscriber$1;
var Notification_1$1 = Notification;
function delay(delay, scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1$7.async;
  }
  var absoluteDelay = isDate_1$1.isDate(delay);
  var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);
  return function (source) {
    return source.lift(new DelayOperator(delayFor, scheduler));
  };
}
delay$1.delay = delay;
var DelayOperator = function () {
  function DelayOperator(delay, scheduler) {
    this.delay = delay;
    this.scheduler = scheduler;
  }
  DelayOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
  };
  return DelayOperator;
}();
var DelaySubscriber = function (_super) {
  __extends$K(DelaySubscriber, _super);
  function DelaySubscriber(destination, delay, scheduler) {
    var _this = _super.call(this, destination) || this;
    _this.delay = delay;
    _this.scheduler = scheduler;
    _this.queue = [];
    _this.active = false;
    _this.errored = false;
    return _this;
  }
  DelaySubscriber.dispatch = function (state) {
    var source = state.source;
    var queue = source.queue;
    var scheduler = state.scheduler;
    var destination = state.destination;
    while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {
      queue.shift().notification.observe(destination);
    }
    if (queue.length > 0) {
      var delay_1 = Math.max(0, queue[0].time - scheduler.now());
      this.schedule(state, delay_1);
    } else {
      this.unsubscribe();
      source.active = false;
    }
  };
  DelaySubscriber.prototype._schedule = function (scheduler) {
    this.active = true;
    var destination = this.destination;
    destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
      source: this,
      destination: this.destination,
      scheduler: scheduler
    }));
  };
  DelaySubscriber.prototype.scheduleNotification = function (notification) {
    if (this.errored === true) {
      return;
    }
    var scheduler = this.scheduler;
    var message = new DelayMessage(scheduler.now() + this.delay, notification);
    this.queue.push(message);
    if (this.active === false) {
      this._schedule(scheduler);
    }
  };
  DelaySubscriber.prototype._next = function (value) {
    this.scheduleNotification(Notification_1$1.Notification.createNext(value));
  };
  DelaySubscriber.prototype._error = function (err) {
    this.errored = true;
    this.queue = [];
    this.destination.error(err);
    this.unsubscribe();
  };
  DelaySubscriber.prototype._complete = function () {
    this.scheduleNotification(Notification_1$1.Notification.createComplete());
    this.unsubscribe();
  };
  return DelaySubscriber;
}(Subscriber_1$s.Subscriber);
var DelayMessage = function () {
  function DelayMessage(time, notification) {
    this.time = time;
    this.notification = notification;
  }
  return DelayMessage;
}();

var delayWhen$1 = {};

var __extends$J = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(delayWhen$1, "__esModule", {
  value: true
});
var Subscriber_1$r = Subscriber$1;
var Observable_1$1 = Observable$1;
var OuterSubscriber_1$3 = OuterSubscriber$1;
var subscribeToResult_1$3 = subscribeToResult$1;
function delayWhen(delayDurationSelector, subscriptionDelay) {
  if (subscriptionDelay) {
    return function (source) {
      return new SubscriptionDelayObservable(source, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));
    };
  }
  return function (source) {
    return source.lift(new DelayWhenOperator(delayDurationSelector));
  };
}
delayWhen$1.delayWhen = delayWhen;
var DelayWhenOperator = function () {
  function DelayWhenOperator(delayDurationSelector) {
    this.delayDurationSelector = delayDurationSelector;
  }
  DelayWhenOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
  };
  return DelayWhenOperator;
}();
var DelayWhenSubscriber = function (_super) {
  __extends$J(DelayWhenSubscriber, _super);
  function DelayWhenSubscriber(destination, delayDurationSelector) {
    var _this = _super.call(this, destination) || this;
    _this.delayDurationSelector = delayDurationSelector;
    _this.completed = false;
    _this.delayNotifierSubscriptions = [];
    _this.index = 0;
    return _this;
  }
  DelayWhenSubscriber.prototype.notifyNext = function (outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {
    this.destination.next(outerValue);
    this.removeSubscription(innerSub);
    this.tryComplete();
  };
  DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
    this._error(error);
  };
  DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
    var value = this.removeSubscription(innerSub);
    if (value) {
      this.destination.next(value);
    }
    this.tryComplete();
  };
  DelayWhenSubscriber.prototype._next = function (value) {
    var index = this.index++;
    try {
      var delayNotifier = this.delayDurationSelector(value, index);
      if (delayNotifier) {
        this.tryDelay(delayNotifier, value);
      }
    } catch (err) {
      this.destination.error(err);
    }
  };
  DelayWhenSubscriber.prototype._complete = function () {
    this.completed = true;
    this.tryComplete();
    this.unsubscribe();
  };
  DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
    subscription.unsubscribe();
    var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
    if (subscriptionIdx !== -1) {
      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
    }
    return subscription.outerValue;
  };
  DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
    var notifierSubscription = subscribeToResult_1$3.subscribeToResult(this, delayNotifier, value);
    if (notifierSubscription && !notifierSubscription.closed) {
      var destination = this.destination;
      destination.add(notifierSubscription);
      this.delayNotifierSubscriptions.push(notifierSubscription);
    }
  };
  DelayWhenSubscriber.prototype.tryComplete = function () {
    if (this.completed && this.delayNotifierSubscriptions.length === 0) {
      this.destination.complete();
    }
  };
  return DelayWhenSubscriber;
}(OuterSubscriber_1$3.OuterSubscriber);
var SubscriptionDelayObservable = function (_super) {
  __extends$J(SubscriptionDelayObservable, _super);
  function SubscriptionDelayObservable(source, subscriptionDelay) {
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.subscriptionDelay = subscriptionDelay;
    return _this;
  }
  SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
  };
  return SubscriptionDelayObservable;
}(Observable_1$1.Observable);
var SubscriptionDelaySubscriber = function (_super) {
  __extends$J(SubscriptionDelaySubscriber, _super);
  function SubscriptionDelaySubscriber(parent, source) {
    var _this = _super.call(this) || this;
    _this.parent = parent;
    _this.source = source;
    _this.sourceSubscribed = false;
    return _this;
  }
  SubscriptionDelaySubscriber.prototype._next = function (unused) {
    this.subscribeToSource();
  };
  SubscriptionDelaySubscriber.prototype._error = function (err) {
    this.unsubscribe();
    this.parent.error(err);
  };
  SubscriptionDelaySubscriber.prototype._complete = function () {
    this.unsubscribe();
    this.subscribeToSource();
  };
  SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
    if (!this.sourceSubscribed) {
      this.sourceSubscribed = true;
      this.unsubscribe();
      this.source.subscribe(this.parent);
    }
  };
  return SubscriptionDelaySubscriber;
}(Subscriber_1$r.Subscriber);

var dematerialize$1 = {};

var __extends$I = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(dematerialize$1, "__esModule", {
  value: true
});
var Subscriber_1$q = Subscriber$1;
function dematerialize() {
  return function dematerializeOperatorFunction(source) {
    return source.lift(new DeMaterializeOperator());
  };
}
dematerialize$1.dematerialize = dematerialize;
var DeMaterializeOperator = function () {
  function DeMaterializeOperator() {}
  DeMaterializeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DeMaterializeSubscriber(subscriber));
  };
  return DeMaterializeOperator;
}();
var DeMaterializeSubscriber = function (_super) {
  __extends$I(DeMaterializeSubscriber, _super);
  function DeMaterializeSubscriber(destination) {
    return _super.call(this, destination) || this;
  }
  DeMaterializeSubscriber.prototype._next = function (value) {
    value.observe(this.destination);
  };
  return DeMaterializeSubscriber;
}(Subscriber_1$q.Subscriber);

var distinct$1 = {};

var __extends$H = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(distinct$1, "__esModule", {
  value: true
});
var innerSubscribe_1$d = innerSubscribe$1;
function distinct(keySelector, flushes) {
  return function (source) {
    return source.lift(new DistinctOperator(keySelector, flushes));
  };
}
distinct$1.distinct = distinct;
var DistinctOperator = function () {
  function DistinctOperator(keySelector, flushes) {
    this.keySelector = keySelector;
    this.flushes = flushes;
  }
  DistinctOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
  };
  return DistinctOperator;
}();
var DistinctSubscriber = function (_super) {
  __extends$H(DistinctSubscriber, _super);
  function DistinctSubscriber(destination, keySelector, flushes) {
    var _this = _super.call(this, destination) || this;
    _this.keySelector = keySelector;
    _this.values = new Set();
    if (flushes) {
      _this.add(innerSubscribe_1$d.innerSubscribe(flushes, new innerSubscribe_1$d.SimpleInnerSubscriber(_this)));
    }
    return _this;
  }
  DistinctSubscriber.prototype.notifyNext = function () {
    this.values.clear();
  };
  DistinctSubscriber.prototype.notifyError = function (error) {
    this._error(error);
  };
  DistinctSubscriber.prototype._next = function (value) {
    if (this.keySelector) {
      this._useKeySelector(value);
    } else {
      this._finalizeNext(value, value);
    }
  };
  DistinctSubscriber.prototype._useKeySelector = function (value) {
    var key;
    var destination = this.destination;
    try {
      key = this.keySelector(value);
    } catch (err) {
      destination.error(err);
      return;
    }
    this._finalizeNext(key, value);
  };
  DistinctSubscriber.prototype._finalizeNext = function (key, value) {
    var values = this.values;
    if (!values.has(key)) {
      values.add(key);
      this.destination.next(value);
    }
  };
  return DistinctSubscriber;
}(innerSubscribe_1$d.SimpleOuterSubscriber);
distinct$1.DistinctSubscriber = DistinctSubscriber;

var distinctUntilChanged$1 = {};

var __extends$G = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(distinctUntilChanged$1, "__esModule", {
  value: true
});
var Subscriber_1$p = Subscriber$1;
function distinctUntilChanged(compare, keySelector) {
  return function (source) {
    return source.lift(new DistinctUntilChangedOperator(compare, keySelector));
  };
}
distinctUntilChanged$1.distinctUntilChanged = distinctUntilChanged;
var DistinctUntilChangedOperator = function () {
  function DistinctUntilChangedOperator(compare, keySelector) {
    this.compare = compare;
    this.keySelector = keySelector;
  }
  DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
  };
  return DistinctUntilChangedOperator;
}();
var DistinctUntilChangedSubscriber = function (_super) {
  __extends$G(DistinctUntilChangedSubscriber, _super);
  function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
    var _this = _super.call(this, destination) || this;
    _this.keySelector = keySelector;
    _this.hasKey = false;
    if (typeof compare === 'function') {
      _this.compare = compare;
    }
    return _this;
  }
  DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
    return x === y;
  };
  DistinctUntilChangedSubscriber.prototype._next = function (value) {
    var key;
    try {
      var keySelector = this.keySelector;
      key = keySelector ? keySelector(value) : value;
    } catch (err) {
      return this.destination.error(err);
    }
    var result = false;
    if (this.hasKey) {
      try {
        var compare = this.compare;
        result = compare(this.key, key);
      } catch (err) {
        return this.destination.error(err);
      }
    } else {
      this.hasKey = true;
    }
    if (!result) {
      this.key = key;
      this.destination.next(value);
    }
  };
  return DistinctUntilChangedSubscriber;
}(Subscriber_1$p.Subscriber);

var distinctUntilKeyChanged$1 = {};

Object.defineProperty(distinctUntilKeyChanged$1, "__esModule", {
  value: true
});
var distinctUntilChanged_1$1 = distinctUntilChanged$1;
function distinctUntilKeyChanged(key, compare) {
  return distinctUntilChanged_1$1.distinctUntilChanged(function (x, y) {
    return compare ? compare(x[key], y[key]) : x[key] === y[key];
  });
}
distinctUntilKeyChanged$1.distinctUntilKeyChanged = distinctUntilKeyChanged;

var elementAt$1 = {};

var throwIfEmpty$1 = {};

var __extends$F = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(throwIfEmpty$1, "__esModule", {
  value: true
});
var EmptyError_1$3 = EmptyError;
var Subscriber_1$o = Subscriber$1;
function throwIfEmpty(errorFactory) {
  if (errorFactory === void 0) {
    errorFactory = defaultErrorFactory;
  }
  return function (source) {
    return source.lift(new ThrowIfEmptyOperator(errorFactory));
  };
}
throwIfEmpty$1.throwIfEmpty = throwIfEmpty;
var ThrowIfEmptyOperator = function () {
  function ThrowIfEmptyOperator(errorFactory) {
    this.errorFactory = errorFactory;
  }
  ThrowIfEmptyOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
  };
  return ThrowIfEmptyOperator;
}();
var ThrowIfEmptySubscriber = function (_super) {
  __extends$F(ThrowIfEmptySubscriber, _super);
  function ThrowIfEmptySubscriber(destination, errorFactory) {
    var _this = _super.call(this, destination) || this;
    _this.errorFactory = errorFactory;
    _this.hasValue = false;
    return _this;
  }
  ThrowIfEmptySubscriber.prototype._next = function (value) {
    this.hasValue = true;
    this.destination.next(value);
  };
  ThrowIfEmptySubscriber.prototype._complete = function () {
    if (!this.hasValue) {
      var err = void 0;
      try {
        err = this.errorFactory();
      } catch (e) {
        err = e;
      }
      this.destination.error(err);
    } else {
      return this.destination.complete();
    }
  };
  return ThrowIfEmptySubscriber;
}(Subscriber_1$o.Subscriber);
function defaultErrorFactory() {
  return new EmptyError_1$3.EmptyError();
}

var take$1 = {};

var __extends$E = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(take$1, "__esModule", {
  value: true
});
var Subscriber_1$n = Subscriber$1;
var ArgumentOutOfRangeError_1$3 = ArgumentOutOfRangeError;
var empty_1$2 = empty;
function take(count) {
  return function (source) {
    if (count === 0) {
      return empty_1$2.empty();
    } else {
      return source.lift(new TakeOperator(count));
    }
  };
}
take$1.take = take;
var TakeOperator = function () {
  function TakeOperator(total) {
    this.total = total;
    if (this.total < 0) {
      throw new ArgumentOutOfRangeError_1$3.ArgumentOutOfRangeError();
    }
  }
  TakeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TakeSubscriber(subscriber, this.total));
  };
  return TakeOperator;
}();
var TakeSubscriber = function (_super) {
  __extends$E(TakeSubscriber, _super);
  function TakeSubscriber(destination, total) {
    var _this = _super.call(this, destination) || this;
    _this.total = total;
    _this.count = 0;
    return _this;
  }
  TakeSubscriber.prototype._next = function (value) {
    var total = this.total;
    var count = ++this.count;
    if (count <= total) {
      this.destination.next(value);
      if (count === total) {
        this.destination.complete();
        this.unsubscribe();
      }
    }
  };
  return TakeSubscriber;
}(Subscriber_1$n.Subscriber);

Object.defineProperty(elementAt$1, "__esModule", {
  value: true
});
var ArgumentOutOfRangeError_1$2 = ArgumentOutOfRangeError;
var filter_1$4 = filter$1;
var throwIfEmpty_1$3 = throwIfEmpty$1;
var defaultIfEmpty_1$4 = defaultIfEmpty$1;
var take_1$2 = take$1;
function elementAt(index, defaultValue) {
  if (index < 0) {
    throw new ArgumentOutOfRangeError_1$2.ArgumentOutOfRangeError();
  }
  var hasDefaultValue = arguments.length >= 2;
  return function (source) {
    return source.pipe(filter_1$4.filter(function (v, i) {
      return i === index;
    }), take_1$2.take(1), hasDefaultValue ? defaultIfEmpty_1$4.defaultIfEmpty(defaultValue) : throwIfEmpty_1$3.throwIfEmpty(function () {
      return new ArgumentOutOfRangeError_1$2.ArgumentOutOfRangeError();
    }));
  };
}
elementAt$1.elementAt = elementAt;

var endWith$1 = {};

Object.defineProperty(endWith$1, "__esModule", {
  value: true
});
var concat_1$2 = concat$3;
var of_1 = of$1;
function endWith() {
  var array = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    array[_i] = arguments[_i];
  }
  return function (source) {
    return concat_1$2.concat(source, of_1.of.apply(void 0, array));
  };
}
endWith$1.endWith = endWith;

var every$1 = {};

var __extends$D = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(every$1, "__esModule", {
  value: true
});
var Subscriber_1$m = Subscriber$1;
function every(predicate, thisArg) {
  return function (source) {
    return source.lift(new EveryOperator(predicate, thisArg, source));
  };
}
every$1.every = every;
var EveryOperator = function () {
  function EveryOperator(predicate, thisArg, source) {
    this.predicate = predicate;
    this.thisArg = thisArg;
    this.source = source;
  }
  EveryOperator.prototype.call = function (observer, source) {
    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
  };
  return EveryOperator;
}();
var EverySubscriber = function (_super) {
  __extends$D(EverySubscriber, _super);
  function EverySubscriber(destination, predicate, thisArg, source) {
    var _this = _super.call(this, destination) || this;
    _this.predicate = predicate;
    _this.thisArg = thisArg;
    _this.source = source;
    _this.index = 0;
    _this.thisArg = thisArg || _this;
    return _this;
  }
  EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
    this.destination.next(everyValueMatch);
    this.destination.complete();
  };
  EverySubscriber.prototype._next = function (value) {
    var result = false;
    try {
      result = this.predicate.call(this.thisArg, value, this.index++, this.source);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    if (!result) {
      this.notifyComplete(false);
    }
  };
  EverySubscriber.prototype._complete = function () {
    this.notifyComplete(true);
  };
  return EverySubscriber;
}(Subscriber_1$m.Subscriber);

var exhaust$1 = {};

var __extends$C = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(exhaust$1, "__esModule", {
  value: true
});
var innerSubscribe_1$c = innerSubscribe$1;
function exhaust() {
  return function (source) {
    return source.lift(new SwitchFirstOperator());
  };
}
exhaust$1.exhaust = exhaust;
var SwitchFirstOperator = function () {
  function SwitchFirstOperator() {}
  SwitchFirstOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SwitchFirstSubscriber(subscriber));
  };
  return SwitchFirstOperator;
}();
var SwitchFirstSubscriber = function (_super) {
  __extends$C(SwitchFirstSubscriber, _super);
  function SwitchFirstSubscriber(destination) {
    var _this = _super.call(this, destination) || this;
    _this.hasCompleted = false;
    _this.hasSubscription = false;
    return _this;
  }
  SwitchFirstSubscriber.prototype._next = function (value) {
    if (!this.hasSubscription) {
      this.hasSubscription = true;
      this.add(innerSubscribe_1$c.innerSubscribe(value, new innerSubscribe_1$c.SimpleInnerSubscriber(this)));
    }
  };
  SwitchFirstSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (!this.hasSubscription) {
      this.destination.complete();
    }
  };
  SwitchFirstSubscriber.prototype.notifyComplete = function () {
    this.hasSubscription = false;
    if (this.hasCompleted) {
      this.destination.complete();
    }
  };
  return SwitchFirstSubscriber;
}(innerSubscribe_1$c.SimpleOuterSubscriber);

var exhaustMap$1 = {};

var __extends$B = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(exhaustMap$1, "__esModule", {
  value: true
});
var map_1$5 = map$1;
var from_1$2 = from$1;
var innerSubscribe_1$b = innerSubscribe$1;
function exhaustMap(project, resultSelector) {
  if (resultSelector) {
    return function (source) {
      return source.pipe(exhaustMap(function (a, i) {
        return from_1$2.from(project(a, i)).pipe(map_1$5.map(function (b, ii) {
          return resultSelector(a, b, i, ii);
        }));
      }));
    };
  }
  return function (source) {
    return source.lift(new ExhaustMapOperator(project));
  };
}
exhaustMap$1.exhaustMap = exhaustMap;
var ExhaustMapOperator = function () {
  function ExhaustMapOperator(project) {
    this.project = project;
  }
  ExhaustMapOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
  };
  return ExhaustMapOperator;
}();
var ExhaustMapSubscriber = function (_super) {
  __extends$B(ExhaustMapSubscriber, _super);
  function ExhaustMapSubscriber(destination, project) {
    var _this = _super.call(this, destination) || this;
    _this.project = project;
    _this.hasSubscription = false;
    _this.hasCompleted = false;
    _this.index = 0;
    return _this;
  }
  ExhaustMapSubscriber.prototype._next = function (value) {
    if (!this.hasSubscription) {
      this.tryNext(value);
    }
  };
  ExhaustMapSubscriber.prototype.tryNext = function (value) {
    var result;
    var index = this.index++;
    try {
      result = this.project(value, index);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.hasSubscription = true;
    this._innerSub(result);
  };
  ExhaustMapSubscriber.prototype._innerSub = function (result) {
    var innerSubscriber = new innerSubscribe_1$b.SimpleInnerSubscriber(this);
    var destination = this.destination;
    destination.add(innerSubscriber);
    var innerSubscription = innerSubscribe_1$b.innerSubscribe(result, innerSubscriber);
    if (innerSubscription !== innerSubscriber) {
      destination.add(innerSubscription);
    }
  };
  ExhaustMapSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (!this.hasSubscription) {
      this.destination.complete();
    }
    this.unsubscribe();
  };
  ExhaustMapSubscriber.prototype.notifyNext = function (innerValue) {
    this.destination.next(innerValue);
  };
  ExhaustMapSubscriber.prototype.notifyError = function (err) {
    this.destination.error(err);
  };
  ExhaustMapSubscriber.prototype.notifyComplete = function () {
    this.hasSubscription = false;
    if (this.hasCompleted) {
      this.destination.complete();
    }
  };
  return ExhaustMapSubscriber;
}(innerSubscribe_1$b.SimpleOuterSubscriber);

var expand$1 = {};

var __extends$A = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(expand$1, "__esModule", {
  value: true
});
var innerSubscribe_1$a = innerSubscribe$1;
function expand(project, concurrent, scheduler) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
  return function (source) {
    return source.lift(new ExpandOperator(project, concurrent, scheduler));
  };
}
expand$1.expand = expand;
var ExpandOperator = function () {
  function ExpandOperator(project, concurrent, scheduler) {
    this.project = project;
    this.concurrent = concurrent;
    this.scheduler = scheduler;
  }
  ExpandOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
  };
  return ExpandOperator;
}();
expand$1.ExpandOperator = ExpandOperator;
var ExpandSubscriber = function (_super) {
  __extends$A(ExpandSubscriber, _super);
  function ExpandSubscriber(destination, project, concurrent, scheduler) {
    var _this = _super.call(this, destination) || this;
    _this.project = project;
    _this.concurrent = concurrent;
    _this.scheduler = scheduler;
    _this.index = 0;
    _this.active = 0;
    _this.hasCompleted = false;
    if (concurrent < Number.POSITIVE_INFINITY) {
      _this.buffer = [];
    }
    return _this;
  }
  ExpandSubscriber.dispatch = function (arg) {
    var subscriber = arg.subscriber,
      result = arg.result,
      value = arg.value,
      index = arg.index;
    subscriber.subscribeToProjection(result, value, index);
  };
  ExpandSubscriber.prototype._next = function (value) {
    var destination = this.destination;
    if (destination.closed) {
      this._complete();
      return;
    }
    var index = this.index++;
    if (this.active < this.concurrent) {
      destination.next(value);
      try {
        var project = this.project;
        var result = project(value, index);
        if (!this.scheduler) {
          this.subscribeToProjection(result, value, index);
        } else {
          var state = {
            subscriber: this,
            result: result,
            value: value,
            index: index
          };
          var destination_1 = this.destination;
          destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
        }
      } catch (e) {
        destination.error(e);
      }
    } else {
      this.buffer.push(value);
    }
  };
  ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
    this.active++;
    var destination = this.destination;
    destination.add(innerSubscribe_1$a.innerSubscribe(result, new innerSubscribe_1$a.SimpleInnerSubscriber(this)));
  };
  ExpandSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (this.hasCompleted && this.active === 0) {
      this.destination.complete();
    }
    this.unsubscribe();
  };
  ExpandSubscriber.prototype.notifyNext = function (innerValue) {
    this._next(innerValue);
  };
  ExpandSubscriber.prototype.notifyComplete = function () {
    var buffer = this.buffer;
    this.active--;
    if (buffer && buffer.length > 0) {
      this._next(buffer.shift());
    }
    if (this.hasCompleted && this.active === 0) {
      this.destination.complete();
    }
  };
  return ExpandSubscriber;
}(innerSubscribe_1$a.SimpleOuterSubscriber);
expand$1.ExpandSubscriber = ExpandSubscriber;

var finalize$1 = {};

var __extends$z = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(finalize$1, "__esModule", {
  value: true
});
var Subscriber_1$l = Subscriber$1;
var Subscription_1$1 = Subscription$1;
function finalize(callback) {
  return function (source) {
    return source.lift(new FinallyOperator(callback));
  };
}
finalize$1.finalize = finalize;
var FinallyOperator = function () {
  function FinallyOperator(callback) {
    this.callback = callback;
  }
  FinallyOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new FinallySubscriber(subscriber, this.callback));
  };
  return FinallyOperator;
}();
var FinallySubscriber = function (_super) {
  __extends$z(FinallySubscriber, _super);
  function FinallySubscriber(destination, callback) {
    var _this = _super.call(this, destination) || this;
    _this.add(new Subscription_1$1.Subscription(callback));
    return _this;
  }
  return FinallySubscriber;
}(Subscriber_1$l.Subscriber);

var find$1 = {};

var __extends$y = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(find$1, "__esModule", {
  value: true
});
var Subscriber_1$k = Subscriber$1;
function find(predicate, thisArg) {
  if (typeof predicate !== 'function') {
    throw new TypeError('predicate is not a function');
  }
  return function (source) {
    return source.lift(new FindValueOperator(predicate, source, false, thisArg));
  };
}
find$1.find = find;
var FindValueOperator = function () {
  function FindValueOperator(predicate, source, yieldIndex, thisArg) {
    this.predicate = predicate;
    this.source = source;
    this.yieldIndex = yieldIndex;
    this.thisArg = thisArg;
  }
  FindValueOperator.prototype.call = function (observer, source) {
    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
  };
  return FindValueOperator;
}();
find$1.FindValueOperator = FindValueOperator;
var FindValueSubscriber = function (_super) {
  __extends$y(FindValueSubscriber, _super);
  function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
    var _this = _super.call(this, destination) || this;
    _this.predicate = predicate;
    _this.source = source;
    _this.yieldIndex = yieldIndex;
    _this.thisArg = thisArg;
    _this.index = 0;
    return _this;
  }
  FindValueSubscriber.prototype.notifyComplete = function (value) {
    var destination = this.destination;
    destination.next(value);
    destination.complete();
    this.unsubscribe();
  };
  FindValueSubscriber.prototype._next = function (value) {
    var _a = this,
      predicate = _a.predicate,
      thisArg = _a.thisArg;
    var index = this.index++;
    try {
      var result = predicate.call(thisArg || this, value, index, this.source);
      if (result) {
        this.notifyComplete(this.yieldIndex ? index : value);
      }
    } catch (err) {
      this.destination.error(err);
    }
  };
  FindValueSubscriber.prototype._complete = function () {
    this.notifyComplete(this.yieldIndex ? -1 : undefined);
  };
  return FindValueSubscriber;
}(Subscriber_1$k.Subscriber);
find$1.FindValueSubscriber = FindValueSubscriber;

var findIndex$1 = {};

Object.defineProperty(findIndex$1, "__esModule", {
  value: true
});
var find_1$1 = find$1;
function findIndex(predicate, thisArg) {
  return function (source) {
    return source.lift(new find_1$1.FindValueOperator(predicate, source, true, thisArg));
  };
}
findIndex$1.findIndex = findIndex;

var first$1 = {};

Object.defineProperty(first$1, "__esModule", {
  value: true
});
var EmptyError_1$2 = EmptyError;
var filter_1$3 = filter$1;
var take_1$1 = take$1;
var defaultIfEmpty_1$3 = defaultIfEmpty$1;
var throwIfEmpty_1$2 = throwIfEmpty$1;
var identity_1$2 = identity$1;
function first(predicate, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function (source) {
    return source.pipe(predicate ? filter_1$3.filter(function (v, i) {
      return predicate(v, i, source);
    }) : identity_1$2.identity, take_1$1.take(1), hasDefaultValue ? defaultIfEmpty_1$3.defaultIfEmpty(defaultValue) : throwIfEmpty_1$2.throwIfEmpty(function () {
      return new EmptyError_1$2.EmptyError();
    }));
  };
}
first$1.first = first;

var ignoreElements$1 = {};

var __extends$x = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(ignoreElements$1, "__esModule", {
  value: true
});
var Subscriber_1$j = Subscriber$1;
function ignoreElements() {
  return function ignoreElementsOperatorFunction(source) {
    return source.lift(new IgnoreElementsOperator());
  };
}
ignoreElements$1.ignoreElements = ignoreElements;
var IgnoreElementsOperator = function () {
  function IgnoreElementsOperator() {}
  IgnoreElementsOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new IgnoreElementsSubscriber(subscriber));
  };
  return IgnoreElementsOperator;
}();
var IgnoreElementsSubscriber = function (_super) {
  __extends$x(IgnoreElementsSubscriber, _super);
  function IgnoreElementsSubscriber() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  IgnoreElementsSubscriber.prototype._next = function (unused) {};
  return IgnoreElementsSubscriber;
}(Subscriber_1$j.Subscriber);

var isEmpty$1 = {};

var __extends$w = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(isEmpty$1, "__esModule", {
  value: true
});
var Subscriber_1$i = Subscriber$1;
function isEmpty() {
  return function (source) {
    return source.lift(new IsEmptyOperator());
  };
}
isEmpty$1.isEmpty = isEmpty;
var IsEmptyOperator = function () {
  function IsEmptyOperator() {}
  IsEmptyOperator.prototype.call = function (observer, source) {
    return source.subscribe(new IsEmptySubscriber(observer));
  };
  return IsEmptyOperator;
}();
var IsEmptySubscriber = function (_super) {
  __extends$w(IsEmptySubscriber, _super);
  function IsEmptySubscriber(destination) {
    return _super.call(this, destination) || this;
  }
  IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
    var destination = this.destination;
    destination.next(isEmpty);
    destination.complete();
  };
  IsEmptySubscriber.prototype._next = function (value) {
    this.notifyComplete(false);
  };
  IsEmptySubscriber.prototype._complete = function () {
    this.notifyComplete(true);
  };
  return IsEmptySubscriber;
}(Subscriber_1$i.Subscriber);

var last$1 = {};

var takeLast$1 = {};

var __extends$v = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(takeLast$1, "__esModule", {
  value: true
});
var Subscriber_1$h = Subscriber$1;
var ArgumentOutOfRangeError_1$1 = ArgumentOutOfRangeError;
var empty_1$1 = empty;
function takeLast(count) {
  return function takeLastOperatorFunction(source) {
    if (count === 0) {
      return empty_1$1.empty();
    } else {
      return source.lift(new TakeLastOperator(count));
    }
  };
}
takeLast$1.takeLast = takeLast;
var TakeLastOperator = function () {
  function TakeLastOperator(total) {
    this.total = total;
    if (this.total < 0) {
      throw new ArgumentOutOfRangeError_1$1.ArgumentOutOfRangeError();
    }
  }
  TakeLastOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
  };
  return TakeLastOperator;
}();
var TakeLastSubscriber = function (_super) {
  __extends$v(TakeLastSubscriber, _super);
  function TakeLastSubscriber(destination, total) {
    var _this = _super.call(this, destination) || this;
    _this.total = total;
    _this.ring = new Array();
    _this.count = 0;
    return _this;
  }
  TakeLastSubscriber.prototype._next = function (value) {
    var ring = this.ring;
    var total = this.total;
    var count = this.count++;
    if (ring.length < total) {
      ring.push(value);
    } else {
      var index = count % total;
      ring[index] = value;
    }
  };
  TakeLastSubscriber.prototype._complete = function () {
    var destination = this.destination;
    var count = this.count;
    if (count > 0) {
      var total = this.count >= this.total ? this.total : this.count;
      var ring = this.ring;
      for (var i = 0; i < total; i++) {
        var idx = count++ % total;
        destination.next(ring[idx]);
      }
    }
    destination.complete();
  };
  return TakeLastSubscriber;
}(Subscriber_1$h.Subscriber);

Object.defineProperty(last$1, "__esModule", {
  value: true
});
var EmptyError_1$1 = EmptyError;
var filter_1$2 = filter$1;
var takeLast_1$2 = takeLast$1;
var throwIfEmpty_1$1 = throwIfEmpty$1;
var defaultIfEmpty_1$2 = defaultIfEmpty$1;
var identity_1$1 = identity$1;
function last(predicate, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function (source) {
    return source.pipe(predicate ? filter_1$2.filter(function (v, i) {
      return predicate(v, i, source);
    }) : identity_1$1.identity, takeLast_1$2.takeLast(1), hasDefaultValue ? defaultIfEmpty_1$2.defaultIfEmpty(defaultValue) : throwIfEmpty_1$1.throwIfEmpty(function () {
      return new EmptyError_1$1.EmptyError();
    }));
  };
}
last$1.last = last;

var mapTo$1 = {};

var __extends$u = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(mapTo$1, "__esModule", {
  value: true
});
var Subscriber_1$g = Subscriber$1;
function mapTo(value) {
  return function (source) {
    return source.lift(new MapToOperator(value));
  };
}
mapTo$1.mapTo = mapTo;
var MapToOperator = function () {
  function MapToOperator(value) {
    this.value = value;
  }
  MapToOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new MapToSubscriber(subscriber, this.value));
  };
  return MapToOperator;
}();
var MapToSubscriber = function (_super) {
  __extends$u(MapToSubscriber, _super);
  function MapToSubscriber(destination, value) {
    var _this = _super.call(this, destination) || this;
    _this.value = value;
    return _this;
  }
  MapToSubscriber.prototype._next = function (x) {
    this.destination.next(this.value);
  };
  return MapToSubscriber;
}(Subscriber_1$g.Subscriber);

var materialize$1 = {};

var __extends$t = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(materialize$1, "__esModule", {
  value: true
});
var Subscriber_1$f = Subscriber$1;
var Notification_1 = Notification;
function materialize() {
  return function materializeOperatorFunction(source) {
    return source.lift(new MaterializeOperator());
  };
}
materialize$1.materialize = materialize;
var MaterializeOperator = function () {
  function MaterializeOperator() {}
  MaterializeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new MaterializeSubscriber(subscriber));
  };
  return MaterializeOperator;
}();
var MaterializeSubscriber = function (_super) {
  __extends$t(MaterializeSubscriber, _super);
  function MaterializeSubscriber(destination) {
    return _super.call(this, destination) || this;
  }
  MaterializeSubscriber.prototype._next = function (value) {
    this.destination.next(Notification_1.Notification.createNext(value));
  };
  MaterializeSubscriber.prototype._error = function (err) {
    var destination = this.destination;
    destination.next(Notification_1.Notification.createError(err));
    destination.complete();
  };
  MaterializeSubscriber.prototype._complete = function () {
    var destination = this.destination;
    destination.next(Notification_1.Notification.createComplete());
    destination.complete();
  };
  return MaterializeSubscriber;
}(Subscriber_1$f.Subscriber);

var max$1 = {};

var reduce$1 = {};

var scan$1 = {};

var __extends$s = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(scan$1, "__esModule", {
  value: true
});
var Subscriber_1$e = Subscriber$1;
function scan(accumulator, seed) {
  var hasSeed = false;
  if (arguments.length >= 2) {
    hasSeed = true;
  }
  return function scanOperatorFunction(source) {
    return source.lift(new ScanOperator(accumulator, seed, hasSeed));
  };
}
scan$1.scan = scan;
var ScanOperator = function () {
  function ScanOperator(accumulator, seed, hasSeed) {
    if (hasSeed === void 0) {
      hasSeed = false;
    }
    this.accumulator = accumulator;
    this.seed = seed;
    this.hasSeed = hasSeed;
  }
  ScanOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
  };
  return ScanOperator;
}();
var ScanSubscriber = function (_super) {
  __extends$s(ScanSubscriber, _super);
  function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
    var _this = _super.call(this, destination) || this;
    _this.accumulator = accumulator;
    _this._seed = _seed;
    _this.hasSeed = hasSeed;
    _this.index = 0;
    return _this;
  }
  Object.defineProperty(ScanSubscriber.prototype, "seed", {
    get: function get() {
      return this._seed;
    },
    set: function set(value) {
      this.hasSeed = true;
      this._seed = value;
    },
    enumerable: true,
    configurable: true
  });
  ScanSubscriber.prototype._next = function (value) {
    if (!this.hasSeed) {
      this.seed = value;
      this.destination.next(value);
    } else {
      return this._tryNext(value);
    }
  };
  ScanSubscriber.prototype._tryNext = function (value) {
    var index = this.index++;
    var result;
    try {
      result = this.accumulator(this.seed, value, index);
    } catch (err) {
      this.destination.error(err);
    }
    this.seed = result;
    this.destination.next(result);
  };
  return ScanSubscriber;
}(Subscriber_1$e.Subscriber);

Object.defineProperty(reduce$1, "__esModule", {
  value: true
});
var scan_1$2 = scan$1;
var takeLast_1$1 = takeLast$1;
var defaultIfEmpty_1$1 = defaultIfEmpty$1;
var pipe_1 = pipe$1;
function reduce(accumulator, seed) {
  if (arguments.length >= 2) {
    return function reduceOperatorFunctionWithSeed(source) {
      return pipe_1.pipe(scan_1$2.scan(accumulator, seed), takeLast_1$1.takeLast(1), defaultIfEmpty_1$1.defaultIfEmpty(seed))(source);
    };
  }
  return function reduceOperatorFunction(source) {
    return pipe_1.pipe(scan_1$2.scan(function (acc, value, index) {
      return accumulator(acc, value, index + 1);
    }), takeLast_1$1.takeLast(1))(source);
  };
}
reduce$1.reduce = reduce;

Object.defineProperty(max$1, "__esModule", {
  value: true
});
var reduce_1$3 = reduce$1;
function max(comparer) {
  var max = typeof comparer === 'function' ? function (x, y) {
    return comparer(x, y) > 0 ? x : y;
  } : function (x, y) {
    return x > y ? x : y;
  };
  return reduce_1$3.reduce(max);
}
max$1.max = max;

var merge$1 = {};

Object.defineProperty(merge$1, "__esModule", {
  value: true
});
var merge_1$1 = merge$3;
function merge() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  return function (source) {
    return source.lift.call(merge_1$1.merge.apply(void 0, [source].concat(observables)));
  };
}
merge$1.merge = merge;

var mergeMapTo$1 = {};

Object.defineProperty(mergeMapTo$1, "__esModule", {
  value: true
});
var mergeMap_1$1 = mergeMap$1;
function mergeMapTo(innerObservable, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  if (typeof resultSelector === 'function') {
    return mergeMap_1$1.mergeMap(function () {
      return innerObservable;
    }, resultSelector, concurrent);
  }
  if (typeof resultSelector === 'number') {
    concurrent = resultSelector;
  }
  return mergeMap_1$1.mergeMap(function () {
    return innerObservable;
  }, concurrent);
}
mergeMapTo$1.mergeMapTo = mergeMapTo;

var mergeScan$1 = {};

var __extends$r = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(mergeScan$1, "__esModule", {
  value: true
});
var innerSubscribe_1$9 = innerSubscribe$1;
function mergeScan(accumulator, seed, concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  return function (source) {
    return source.lift(new MergeScanOperator(accumulator, seed, concurrent));
  };
}
mergeScan$1.mergeScan = mergeScan;
var MergeScanOperator = function () {
  function MergeScanOperator(accumulator, seed, concurrent) {
    this.accumulator = accumulator;
    this.seed = seed;
    this.concurrent = concurrent;
  }
  MergeScanOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
  };
  return MergeScanOperator;
}();
mergeScan$1.MergeScanOperator = MergeScanOperator;
var MergeScanSubscriber = function (_super) {
  __extends$r(MergeScanSubscriber, _super);
  function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
    var _this = _super.call(this, destination) || this;
    _this.accumulator = accumulator;
    _this.acc = acc;
    _this.concurrent = concurrent;
    _this.hasValue = false;
    _this.hasCompleted = false;
    _this.buffer = [];
    _this.active = 0;
    _this.index = 0;
    return _this;
  }
  MergeScanSubscriber.prototype._next = function (value) {
    if (this.active < this.concurrent) {
      var index = this.index++;
      var destination = this.destination;
      var ish = void 0;
      try {
        var accumulator = this.accumulator;
        ish = accumulator(this.acc, value, index);
      } catch (e) {
        return destination.error(e);
      }
      this.active++;
      this._innerSub(ish);
    } else {
      this.buffer.push(value);
    }
  };
  MergeScanSubscriber.prototype._innerSub = function (ish) {
    var innerSubscriber = new innerSubscribe_1$9.SimpleInnerSubscriber(this);
    var destination = this.destination;
    destination.add(innerSubscriber);
    var innerSubscription = innerSubscribe_1$9.innerSubscribe(ish, innerSubscriber);
    if (innerSubscription !== innerSubscriber) {
      destination.add(innerSubscription);
    }
  };
  MergeScanSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (this.active === 0 && this.buffer.length === 0) {
      if (this.hasValue === false) {
        this.destination.next(this.acc);
      }
      this.destination.complete();
    }
    this.unsubscribe();
  };
  MergeScanSubscriber.prototype.notifyNext = function (innerValue) {
    var destination = this.destination;
    this.acc = innerValue;
    this.hasValue = true;
    destination.next(innerValue);
  };
  MergeScanSubscriber.prototype.notifyComplete = function () {
    var buffer = this.buffer;
    this.active--;
    if (buffer.length > 0) {
      this._next(buffer.shift());
    } else if (this.active === 0 && this.hasCompleted) {
      if (this.hasValue === false) {
        this.destination.next(this.acc);
      }
      this.destination.complete();
    }
  };
  return MergeScanSubscriber;
}(innerSubscribe_1$9.SimpleOuterSubscriber);
mergeScan$1.MergeScanSubscriber = MergeScanSubscriber;

var min$1 = {};

Object.defineProperty(min$1, "__esModule", {
  value: true
});
var reduce_1$2 = reduce$1;
function min(comparer) {
  var min = typeof comparer === 'function' ? function (x, y) {
    return comparer(x, y) < 0 ? x : y;
  } : function (x, y) {
    return x < y ? x : y;
  };
  return reduce_1$2.reduce(min);
}
min$1.min = min;

var multicast$1 = {};

Object.defineProperty(multicast$1, "__esModule", {
  value: true
});
var ConnectableObservable_1 = ConnectableObservable$1;
function multicast(subjectOrSubjectFactory, selector) {
  return function multicastOperatorFunction(source) {
    var subjectFactory;
    if (typeof subjectOrSubjectFactory === 'function') {
      subjectFactory = subjectOrSubjectFactory;
    } else {
      subjectFactory = function subjectFactory() {
        return subjectOrSubjectFactory;
      };
    }
    if (typeof selector === 'function') {
      return source.lift(new MulticastOperator(subjectFactory, selector));
    }
    var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);
    connectable.source = source;
    connectable.subjectFactory = subjectFactory;
    return connectable;
  };
}
multicast$1.multicast = multicast;
var MulticastOperator = function () {
  function MulticastOperator(subjectFactory, selector) {
    this.subjectFactory = subjectFactory;
    this.selector = selector;
  }
  MulticastOperator.prototype.call = function (subscriber, source) {
    var selector = this.selector;
    var subject = this.subjectFactory();
    var subscription = selector(subject).subscribe(subscriber);
    subscription.add(source.subscribe(subject));
    return subscription;
  };
  return MulticastOperator;
}();
multicast$1.MulticastOperator = MulticastOperator;

var onErrorResumeNext$1 = {};

var __extends$q = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(onErrorResumeNext$1, "__esModule", {
  value: true
});
var from_1$1 = from$1;
var isArray_1$1 = isArray;
var innerSubscribe_1$8 = innerSubscribe$1;
function onErrorResumeNext() {
  var nextSources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    nextSources[_i] = arguments[_i];
  }
  if (nextSources.length === 1 && isArray_1$1.isArray(nextSources[0])) {
    nextSources = nextSources[0];
  }
  return function (source) {
    return source.lift(new OnErrorResumeNextOperator(nextSources));
  };
}
onErrorResumeNext$1.onErrorResumeNext = onErrorResumeNext;
function onErrorResumeNextStatic() {
  var nextSources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    nextSources[_i] = arguments[_i];
  }
  var source = undefined;
  if (nextSources.length === 1 && isArray_1$1.isArray(nextSources[0])) {
    nextSources = nextSources[0];
  }
  source = nextSources.shift();
  return from_1$1.from(source).lift(new OnErrorResumeNextOperator(nextSources));
}
onErrorResumeNext$1.onErrorResumeNextStatic = onErrorResumeNextStatic;
var OnErrorResumeNextOperator = function () {
  function OnErrorResumeNextOperator(nextSources) {
    this.nextSources = nextSources;
  }
  OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
  };
  return OnErrorResumeNextOperator;
}();
var OnErrorResumeNextSubscriber = function (_super) {
  __extends$q(OnErrorResumeNextSubscriber, _super);
  function OnErrorResumeNextSubscriber(destination, nextSources) {
    var _this = _super.call(this, destination) || this;
    _this.destination = destination;
    _this.nextSources = nextSources;
    return _this;
  }
  OnErrorResumeNextSubscriber.prototype.notifyError = function () {
    this.subscribeToNextSource();
  };
  OnErrorResumeNextSubscriber.prototype.notifyComplete = function () {
    this.subscribeToNextSource();
  };
  OnErrorResumeNextSubscriber.prototype._error = function (err) {
    this.subscribeToNextSource();
    this.unsubscribe();
  };
  OnErrorResumeNextSubscriber.prototype._complete = function () {
    this.subscribeToNextSource();
    this.unsubscribe();
  };
  OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
    var next = this.nextSources.shift();
    if (!!next) {
      var innerSubscriber = new innerSubscribe_1$8.SimpleInnerSubscriber(this);
      var destination = this.destination;
      destination.add(innerSubscriber);
      var innerSubscription = innerSubscribe_1$8.innerSubscribe(next, innerSubscriber);
      if (innerSubscription !== innerSubscriber) {
        destination.add(innerSubscription);
      }
    } else {
      this.destination.complete();
    }
  };
  return OnErrorResumeNextSubscriber;
}(innerSubscribe_1$8.SimpleOuterSubscriber);

var pairwise$1 = {};

var __extends$p = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(pairwise$1, "__esModule", {
  value: true
});
var Subscriber_1$d = Subscriber$1;
function pairwise() {
  return function (source) {
    return source.lift(new PairwiseOperator());
  };
}
pairwise$1.pairwise = pairwise;
var PairwiseOperator = function () {
  function PairwiseOperator() {}
  PairwiseOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new PairwiseSubscriber(subscriber));
  };
  return PairwiseOperator;
}();
var PairwiseSubscriber = function (_super) {
  __extends$p(PairwiseSubscriber, _super);
  function PairwiseSubscriber(destination) {
    var _this = _super.call(this, destination) || this;
    _this.hasPrev = false;
    return _this;
  }
  PairwiseSubscriber.prototype._next = function (value) {
    var pair;
    if (this.hasPrev) {
      pair = [this.prev, value];
    } else {
      this.hasPrev = true;
    }
    this.prev = value;
    if (pair) {
      this.destination.next(pair);
    }
  };
  return PairwiseSubscriber;
}(Subscriber_1$d.Subscriber);

var partition$1 = {};

Object.defineProperty(partition$1, "__esModule", {
  value: true
});
var not_1 = not$1;
var filter_1$1 = filter$1;
function partition(predicate, thisArg) {
  return function (source) {
    return [filter_1$1.filter(predicate, thisArg)(source), filter_1$1.filter(not_1.not(predicate, thisArg))(source)];
  };
}
partition$1.partition = partition;

var pluck$1 = {};

Object.defineProperty(pluck$1, "__esModule", {
  value: true
});
var map_1$4 = map$1;
function pluck() {
  var properties = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    properties[_i] = arguments[_i];
  }
  var length = properties.length;
  if (length === 0) {
    throw new Error('list of properties cannot be empty.');
  }
  return function (source) {
    return map_1$4.map(plucker(properties, length))(source);
  };
}
pluck$1.pluck = pluck;
function plucker(props, length) {
  var mapper = function mapper(x) {
    var currentProp = x;
    for (var i = 0; i < length; i++) {
      var p = currentProp != null ? currentProp[props[i]] : undefined;
      if (p !== void 0) {
        currentProp = p;
      } else {
        return undefined;
      }
    }
    return currentProp;
  };
  return mapper;
}

var publish$1 = {};

Object.defineProperty(publish$1, "__esModule", {
  value: true
});
var Subject_1$8 = Subject$1;
var multicast_1$5 = multicast$1;
function publish(selector) {
  return selector ? multicast_1$5.multicast(function () {
    return new Subject_1$8.Subject();
  }, selector) : multicast_1$5.multicast(new Subject_1$8.Subject());
}
publish$1.publish = publish;

var publishBehavior$1 = {};

Object.defineProperty(publishBehavior$1, "__esModule", {
  value: true
});
var BehaviorSubject_1 = BehaviorSubject$1;
var multicast_1$4 = multicast$1;
function publishBehavior(value) {
  return function (source) {
    return multicast_1$4.multicast(new BehaviorSubject_1.BehaviorSubject(value))(source);
  };
}
publishBehavior$1.publishBehavior = publishBehavior;

var publishLast$1 = {};

Object.defineProperty(publishLast$1, "__esModule", {
  value: true
});
var AsyncSubject_1 = AsyncSubject$1;
var multicast_1$3 = multicast$1;
function publishLast() {
  return function (source) {
    return multicast_1$3.multicast(new AsyncSubject_1.AsyncSubject())(source);
  };
}
publishLast$1.publishLast = publishLast;

var publishReplay$1 = {};

Object.defineProperty(publishReplay$1, "__esModule", {
  value: true
});
var ReplaySubject_1$1 = ReplaySubject$1;
var multicast_1$2 = multicast$1;
function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
    scheduler = selectorOrScheduler;
  }
  var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;
  var subject = new ReplaySubject_1$1.ReplaySubject(bufferSize, windowTime, scheduler);
  return function (source) {
    return multicast_1$2.multicast(function () {
      return subject;
    }, selector)(source);
  };
}
publishReplay$1.publishReplay = publishReplay;

var race$1 = {};

Object.defineProperty(race$1, "__esModule", {
  value: true
});
var isArray_1 = isArray;
var race_1$1 = race$3;
function race() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  return function raceOperatorFunction(source) {
    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
      observables = observables[0];
    }
    return source.lift.call(race_1$1.race.apply(void 0, [source].concat(observables)));
  };
}
race$1.race = race;

var repeat$1 = {};

var __extends$o = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(repeat$1, "__esModule", {
  value: true
});
var Subscriber_1$c = Subscriber$1;
var empty_1 = empty;
function repeat(count) {
  if (count === void 0) {
    count = -1;
  }
  return function (source) {
    if (count === 0) {
      return empty_1.empty();
    } else if (count < 0) {
      return source.lift(new RepeatOperator(-1, source));
    } else {
      return source.lift(new RepeatOperator(count - 1, source));
    }
  };
}
repeat$1.repeat = repeat;
var RepeatOperator = function () {
  function RepeatOperator(count, source) {
    this.count = count;
    this.source = source;
  }
  RepeatOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
  };
  return RepeatOperator;
}();
var RepeatSubscriber = function (_super) {
  __extends$o(RepeatSubscriber, _super);
  function RepeatSubscriber(destination, count, source) {
    var _this = _super.call(this, destination) || this;
    _this.count = count;
    _this.source = source;
    return _this;
  }
  RepeatSubscriber.prototype.complete = function () {
    if (!this.isStopped) {
      var _a = this,
        source = _a.source,
        count = _a.count;
      if (count === 0) {
        return _super.prototype.complete.call(this);
      } else if (count > -1) {
        this.count = count - 1;
      }
      source.subscribe(this._unsubscribeAndRecycle());
    }
  };
  return RepeatSubscriber;
}(Subscriber_1$c.Subscriber);

var repeatWhen$1 = {};

var __extends$n = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(repeatWhen$1, "__esModule", {
  value: true
});
var Subject_1$7 = Subject$1;
var innerSubscribe_1$7 = innerSubscribe$1;
function repeatWhen(notifier) {
  return function (source) {
    return source.lift(new RepeatWhenOperator(notifier));
  };
}
repeatWhen$1.repeatWhen = repeatWhen;
var RepeatWhenOperator = function () {
  function RepeatWhenOperator(notifier) {
    this.notifier = notifier;
  }
  RepeatWhenOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
  };
  return RepeatWhenOperator;
}();
var RepeatWhenSubscriber = function (_super) {
  __extends$n(RepeatWhenSubscriber, _super);
  function RepeatWhenSubscriber(destination, notifier, source) {
    var _this = _super.call(this, destination) || this;
    _this.notifier = notifier;
    _this.source = source;
    _this.sourceIsBeingSubscribedTo = true;
    return _this;
  }
  RepeatWhenSubscriber.prototype.notifyNext = function () {
    this.sourceIsBeingSubscribedTo = true;
    this.source.subscribe(this);
  };
  RepeatWhenSubscriber.prototype.notifyComplete = function () {
    if (this.sourceIsBeingSubscribedTo === false) {
      return _super.prototype.complete.call(this);
    }
  };
  RepeatWhenSubscriber.prototype.complete = function () {
    this.sourceIsBeingSubscribedTo = false;
    if (!this.isStopped) {
      if (!this.retries) {
        this.subscribeToRetries();
      }
      if (!this.retriesSubscription || this.retriesSubscription.closed) {
        return _super.prototype.complete.call(this);
      }
      this._unsubscribeAndRecycle();
      this.notifications.next(undefined);
    }
  };
  RepeatWhenSubscriber.prototype._unsubscribe = function () {
    var _a = this,
      notifications = _a.notifications,
      retriesSubscription = _a.retriesSubscription;
    if (notifications) {
      notifications.unsubscribe();
      this.notifications = undefined;
    }
    if (retriesSubscription) {
      retriesSubscription.unsubscribe();
      this.retriesSubscription = undefined;
    }
    this.retries = undefined;
  };
  RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
    var _unsubscribe = this._unsubscribe;
    this._unsubscribe = null;
    _super.prototype._unsubscribeAndRecycle.call(this);
    this._unsubscribe = _unsubscribe;
    return this;
  };
  RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
    this.notifications = new Subject_1$7.Subject();
    var retries;
    try {
      var notifier = this.notifier;
      retries = notifier(this.notifications);
    } catch (e) {
      return _super.prototype.complete.call(this);
    }
    this.retries = retries;
    this.retriesSubscription = innerSubscribe_1$7.innerSubscribe(retries, new innerSubscribe_1$7.SimpleInnerSubscriber(this));
  };
  return RepeatWhenSubscriber;
}(innerSubscribe_1$7.SimpleOuterSubscriber);

var retry$1 = {};

var __extends$m = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(retry$1, "__esModule", {
  value: true
});
var Subscriber_1$b = Subscriber$1;
function retry(count) {
  if (count === void 0) {
    count = -1;
  }
  return function (source) {
    return source.lift(new RetryOperator(count, source));
  };
}
retry$1.retry = retry;
var RetryOperator = function () {
  function RetryOperator(count, source) {
    this.count = count;
    this.source = source;
  }
  RetryOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
  };
  return RetryOperator;
}();
var RetrySubscriber = function (_super) {
  __extends$m(RetrySubscriber, _super);
  function RetrySubscriber(destination, count, source) {
    var _this = _super.call(this, destination) || this;
    _this.count = count;
    _this.source = source;
    return _this;
  }
  RetrySubscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      var _a = this,
        source = _a.source,
        count = _a.count;
      if (count === 0) {
        return _super.prototype.error.call(this, err);
      } else if (count > -1) {
        this.count = count - 1;
      }
      source.subscribe(this._unsubscribeAndRecycle());
    }
  };
  return RetrySubscriber;
}(Subscriber_1$b.Subscriber);

var retryWhen$1 = {};

var __extends$l = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(retryWhen$1, "__esModule", {
  value: true
});
var Subject_1$6 = Subject$1;
var innerSubscribe_1$6 = innerSubscribe$1;
function retryWhen(notifier) {
  return function (source) {
    return source.lift(new RetryWhenOperator(notifier, source));
  };
}
retryWhen$1.retryWhen = retryWhen;
var RetryWhenOperator = function () {
  function RetryWhenOperator(notifier, source) {
    this.notifier = notifier;
    this.source = source;
  }
  RetryWhenOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
  };
  return RetryWhenOperator;
}();
var RetryWhenSubscriber = function (_super) {
  __extends$l(RetryWhenSubscriber, _super);
  function RetryWhenSubscriber(destination, notifier, source) {
    var _this = _super.call(this, destination) || this;
    _this.notifier = notifier;
    _this.source = source;
    return _this;
  }
  RetryWhenSubscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      var errors = this.errors;
      var retries = this.retries;
      var retriesSubscription = this.retriesSubscription;
      if (!retries) {
        errors = new Subject_1$6.Subject();
        try {
          var notifier = this.notifier;
          retries = notifier(errors);
        } catch (e) {
          return _super.prototype.error.call(this, e);
        }
        retriesSubscription = innerSubscribe_1$6.innerSubscribe(retries, new innerSubscribe_1$6.SimpleInnerSubscriber(this));
      } else {
        this.errors = undefined;
        this.retriesSubscription = undefined;
      }
      this._unsubscribeAndRecycle();
      this.errors = errors;
      this.retries = retries;
      this.retriesSubscription = retriesSubscription;
      errors.next(err);
    }
  };
  RetryWhenSubscriber.prototype._unsubscribe = function () {
    var _a = this,
      errors = _a.errors,
      retriesSubscription = _a.retriesSubscription;
    if (errors) {
      errors.unsubscribe();
      this.errors = undefined;
    }
    if (retriesSubscription) {
      retriesSubscription.unsubscribe();
      this.retriesSubscription = undefined;
    }
    this.retries = undefined;
  };
  RetryWhenSubscriber.prototype.notifyNext = function () {
    var _unsubscribe = this._unsubscribe;
    this._unsubscribe = null;
    this._unsubscribeAndRecycle();
    this._unsubscribe = _unsubscribe;
    this.source.subscribe(this);
  };
  return RetryWhenSubscriber;
}(innerSubscribe_1$6.SimpleOuterSubscriber);

var sample$1 = {};

var __extends$k = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(sample$1, "__esModule", {
  value: true
});
var innerSubscribe_1$5 = innerSubscribe$1;
function sample(notifier) {
  return function (source) {
    return source.lift(new SampleOperator(notifier));
  };
}
sample$1.sample = sample;
var SampleOperator = function () {
  function SampleOperator(notifier) {
    this.notifier = notifier;
  }
  SampleOperator.prototype.call = function (subscriber, source) {
    var sampleSubscriber = new SampleSubscriber(subscriber);
    var subscription = source.subscribe(sampleSubscriber);
    subscription.add(innerSubscribe_1$5.innerSubscribe(this.notifier, new innerSubscribe_1$5.SimpleInnerSubscriber(sampleSubscriber)));
    return subscription;
  };
  return SampleOperator;
}();
var SampleSubscriber = function (_super) {
  __extends$k(SampleSubscriber, _super);
  function SampleSubscriber() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.hasValue = false;
    return _this;
  }
  SampleSubscriber.prototype._next = function (value) {
    this.value = value;
    this.hasValue = true;
  };
  SampleSubscriber.prototype.notifyNext = function () {
    this.emitValue();
  };
  SampleSubscriber.prototype.notifyComplete = function () {
    this.emitValue();
  };
  SampleSubscriber.prototype.emitValue = function () {
    if (this.hasValue) {
      this.hasValue = false;
      this.destination.next(this.value);
    }
  };
  return SampleSubscriber;
}(innerSubscribe_1$5.SimpleOuterSubscriber);

var sampleTime$1 = {};

var __extends$j = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(sampleTime$1, "__esModule", {
  value: true
});
var Subscriber_1$a = Subscriber$1;
var async_1$6 = async;
function sampleTime(period, scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1$6.async;
  }
  return function (source) {
    return source.lift(new SampleTimeOperator(period, scheduler));
  };
}
sampleTime$1.sampleTime = sampleTime;
var SampleTimeOperator = function () {
  function SampleTimeOperator(period, scheduler) {
    this.period = period;
    this.scheduler = scheduler;
  }
  SampleTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
  };
  return SampleTimeOperator;
}();
var SampleTimeSubscriber = function (_super) {
  __extends$j(SampleTimeSubscriber, _super);
  function SampleTimeSubscriber(destination, period, scheduler) {
    var _this = _super.call(this, destination) || this;
    _this.period = period;
    _this.scheduler = scheduler;
    _this.hasValue = false;
    _this.add(scheduler.schedule(dispatchNotification, period, {
      subscriber: _this,
      period: period
    }));
    return _this;
  }
  SampleTimeSubscriber.prototype._next = function (value) {
    this.lastValue = value;
    this.hasValue = true;
  };
  SampleTimeSubscriber.prototype.notifyNext = function () {
    if (this.hasValue) {
      this.hasValue = false;
      this.destination.next(this.lastValue);
    }
  };
  return SampleTimeSubscriber;
}(Subscriber_1$a.Subscriber);
function dispatchNotification(state) {
  var subscriber = state.subscriber,
    period = state.period;
  subscriber.notifyNext();
  this.schedule(state, period);
}

var sequenceEqual$1 = {};

var __extends$i = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(sequenceEqual$1, "__esModule", {
  value: true
});
var Subscriber_1$9 = Subscriber$1;
function sequenceEqual(compareTo, comparator) {
  return function (source) {
    return source.lift(new SequenceEqualOperator(compareTo, comparator));
  };
}
sequenceEqual$1.sequenceEqual = sequenceEqual;
var SequenceEqualOperator = function () {
  function SequenceEqualOperator(compareTo, comparator) {
    this.compareTo = compareTo;
    this.comparator = comparator;
  }
  SequenceEqualOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));
  };
  return SequenceEqualOperator;
}();
sequenceEqual$1.SequenceEqualOperator = SequenceEqualOperator;
var SequenceEqualSubscriber = function (_super) {
  __extends$i(SequenceEqualSubscriber, _super);
  function SequenceEqualSubscriber(destination, compareTo, comparator) {
    var _this = _super.call(this, destination) || this;
    _this.compareTo = compareTo;
    _this.comparator = comparator;
    _this._a = [];
    _this._b = [];
    _this._oneComplete = false;
    _this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));
    return _this;
  }
  SequenceEqualSubscriber.prototype._next = function (value) {
    if (this._oneComplete && this._b.length === 0) {
      this.emit(false);
    } else {
      this._a.push(value);
      this.checkValues();
    }
  };
  SequenceEqualSubscriber.prototype._complete = function () {
    if (this._oneComplete) {
      this.emit(this._a.length === 0 && this._b.length === 0);
    } else {
      this._oneComplete = true;
    }
    this.unsubscribe();
  };
  SequenceEqualSubscriber.prototype.checkValues = function () {
    var _c = this,
      _a = _c._a,
      _b = _c._b,
      comparator = _c.comparator;
    while (_a.length > 0 && _b.length > 0) {
      var a = _a.shift();
      var b = _b.shift();
      var areEqual = false;
      try {
        areEqual = comparator ? comparator(a, b) : a === b;
      } catch (e) {
        this.destination.error(e);
      }
      if (!areEqual) {
        this.emit(false);
      }
    }
  };
  SequenceEqualSubscriber.prototype.emit = function (value) {
    var destination = this.destination;
    destination.next(value);
    destination.complete();
  };
  SequenceEqualSubscriber.prototype.nextB = function (value) {
    if (this._oneComplete && this._a.length === 0) {
      this.emit(false);
    } else {
      this._b.push(value);
      this.checkValues();
    }
  };
  SequenceEqualSubscriber.prototype.completeB = function () {
    if (this._oneComplete) {
      this.emit(this._a.length === 0 && this._b.length === 0);
    } else {
      this._oneComplete = true;
    }
  };
  return SequenceEqualSubscriber;
}(Subscriber_1$9.Subscriber);
sequenceEqual$1.SequenceEqualSubscriber = SequenceEqualSubscriber;
var SequenceEqualCompareToSubscriber = function (_super) {
  __extends$i(SequenceEqualCompareToSubscriber, _super);
  function SequenceEqualCompareToSubscriber(destination, parent) {
    var _this = _super.call(this, destination) || this;
    _this.parent = parent;
    return _this;
  }
  SequenceEqualCompareToSubscriber.prototype._next = function (value) {
    this.parent.nextB(value);
  };
  SequenceEqualCompareToSubscriber.prototype._error = function (err) {
    this.parent.error(err);
    this.unsubscribe();
  };
  SequenceEqualCompareToSubscriber.prototype._complete = function () {
    this.parent.completeB();
    this.unsubscribe();
  };
  return SequenceEqualCompareToSubscriber;
}(Subscriber_1$9.Subscriber);

var share$1 = {};

Object.defineProperty(share$1, "__esModule", {
  value: true
});
var multicast_1$1 = multicast$1;
var refCount_1$1 = refCount$1;
var Subject_1$5 = Subject$1;
function shareSubjectFactory() {
  return new Subject_1$5.Subject();
}
function share() {
  return function (source) {
    return refCount_1$1.refCount()(multicast_1$1.multicast(shareSubjectFactory)(source));
  };
}
share$1.share = share;

var shareReplay$1 = {};

Object.defineProperty(shareReplay$1, "__esModule", {
  value: true
});
var ReplaySubject_1 = ReplaySubject$1;
function shareReplay(configOrBufferSize, windowTime, scheduler) {
  var config;
  if (configOrBufferSize && _typeof(configOrBufferSize) === 'object') {
    config = configOrBufferSize;
  } else {
    config = {
      bufferSize: configOrBufferSize,
      windowTime: windowTime,
      refCount: false,
      scheduler: scheduler
    };
  }
  return function (source) {
    return source.lift(shareReplayOperator(config));
  };
}
shareReplay$1.shareReplay = shareReplay;
function shareReplayOperator(_a) {
  var _b = _a.bufferSize,
    bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b,
    _c = _a.windowTime,
    windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c,
    useRefCount = _a.refCount,
    scheduler = _a.scheduler;
  var subject;
  var refCount = 0;
  var subscription;
  var hasError = false;
  var isComplete = false;
  return function shareReplayOperation(source) {
    refCount++;
    var innerSub;
    if (!subject || hasError) {
      hasError = false;
      subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);
      innerSub = subject.subscribe(this);
      subscription = source.subscribe({
        next: function next(value) {
          subject.next(value);
        },
        error: function error(err) {
          hasError = true;
          subject.error(err);
        },
        complete: function complete() {
          isComplete = true;
          subscription = undefined;
          subject.complete();
        }
      });
      if (isComplete) {
        subscription = undefined;
      }
    } else {
      innerSub = subject.subscribe(this);
    }
    this.add(function () {
      refCount--;
      innerSub.unsubscribe();
      innerSub = undefined;
      if (subscription && !isComplete && useRefCount && refCount === 0) {
        subscription.unsubscribe();
        subscription = undefined;
        subject = undefined;
      }
    });
  };
}

var single$1 = {};

var __extends$h = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(single$1, "__esModule", {
  value: true
});
var Subscriber_1$8 = Subscriber$1;
var EmptyError_1 = EmptyError;
function single(predicate) {
  return function (source) {
    return source.lift(new SingleOperator(predicate, source));
  };
}
single$1.single = single;
var SingleOperator = function () {
  function SingleOperator(predicate, source) {
    this.predicate = predicate;
    this.source = source;
  }
  SingleOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
  };
  return SingleOperator;
}();
var SingleSubscriber = function (_super) {
  __extends$h(SingleSubscriber, _super);
  function SingleSubscriber(destination, predicate, source) {
    var _this = _super.call(this, destination) || this;
    _this.predicate = predicate;
    _this.source = source;
    _this.seenValue = false;
    _this.index = 0;
    return _this;
  }
  SingleSubscriber.prototype.applySingleValue = function (value) {
    if (this.seenValue) {
      this.destination.error('Sequence contains more than one element');
    } else {
      this.seenValue = true;
      this.singleValue = value;
    }
  };
  SingleSubscriber.prototype._next = function (value) {
    var index = this.index++;
    if (this.predicate) {
      this.tryNext(value, index);
    } else {
      this.applySingleValue(value);
    }
  };
  SingleSubscriber.prototype.tryNext = function (value, index) {
    try {
      if (this.predicate(value, index, this.source)) {
        this.applySingleValue(value);
      }
    } catch (err) {
      this.destination.error(err);
    }
  };
  SingleSubscriber.prototype._complete = function () {
    var destination = this.destination;
    if (this.index > 0) {
      destination.next(this.seenValue ? this.singleValue : undefined);
      destination.complete();
    } else {
      destination.error(new EmptyError_1.EmptyError());
    }
  };
  return SingleSubscriber;
}(Subscriber_1$8.Subscriber);

var skip$1 = {};

var __extends$g = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(skip$1, "__esModule", {
  value: true
});
var Subscriber_1$7 = Subscriber$1;
function skip(count) {
  return function (source) {
    return source.lift(new SkipOperator(count));
  };
}
skip$1.skip = skip;
var SkipOperator = function () {
  function SkipOperator(total) {
    this.total = total;
  }
  SkipOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SkipSubscriber(subscriber, this.total));
  };
  return SkipOperator;
}();
var SkipSubscriber = function (_super) {
  __extends$g(SkipSubscriber, _super);
  function SkipSubscriber(destination, total) {
    var _this = _super.call(this, destination) || this;
    _this.total = total;
    _this.count = 0;
    return _this;
  }
  SkipSubscriber.prototype._next = function (x) {
    if (++this.count > this.total) {
      this.destination.next(x);
    }
  };
  return SkipSubscriber;
}(Subscriber_1$7.Subscriber);

var skipLast$1 = {};

var __extends$f = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(skipLast$1, "__esModule", {
  value: true
});
var Subscriber_1$6 = Subscriber$1;
var ArgumentOutOfRangeError_1 = ArgumentOutOfRangeError;
function skipLast(count) {
  return function (source) {
    return source.lift(new SkipLastOperator(count));
  };
}
skipLast$1.skipLast = skipLast;
var SkipLastOperator = function () {
  function SkipLastOperator(_skipCount) {
    this._skipCount = _skipCount;
    if (this._skipCount < 0) {
      throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
    }
  }
  SkipLastOperator.prototype.call = function (subscriber, source) {
    if (this._skipCount === 0) {
      return source.subscribe(new Subscriber_1$6.Subscriber(subscriber));
    } else {
      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
    }
  };
  return SkipLastOperator;
}();
var SkipLastSubscriber = function (_super) {
  __extends$f(SkipLastSubscriber, _super);
  function SkipLastSubscriber(destination, _skipCount) {
    var _this = _super.call(this, destination) || this;
    _this._skipCount = _skipCount;
    _this._count = 0;
    _this._ring = new Array(_skipCount);
    return _this;
  }
  SkipLastSubscriber.prototype._next = function (value) {
    var skipCount = this._skipCount;
    var count = this._count++;
    if (count < skipCount) {
      this._ring[count] = value;
    } else {
      var currentIndex = count % skipCount;
      var ring = this._ring;
      var oldValue = ring[currentIndex];
      ring[currentIndex] = value;
      this.destination.next(oldValue);
    }
  };
  return SkipLastSubscriber;
}(Subscriber_1$6.Subscriber);

var skipUntil$1 = {};

var __extends$e = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(skipUntil$1, "__esModule", {
  value: true
});
var innerSubscribe_1$4 = innerSubscribe$1;
function skipUntil(notifier) {
  return function (source) {
    return source.lift(new SkipUntilOperator(notifier));
  };
}
skipUntil$1.skipUntil = skipUntil;
var SkipUntilOperator = function () {
  function SkipUntilOperator(notifier) {
    this.notifier = notifier;
  }
  SkipUntilOperator.prototype.call = function (destination, source) {
    return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
  };
  return SkipUntilOperator;
}();
var SkipUntilSubscriber = function (_super) {
  __extends$e(SkipUntilSubscriber, _super);
  function SkipUntilSubscriber(destination, notifier) {
    var _this = _super.call(this, destination) || this;
    _this.hasValue = false;
    var innerSubscriber = new innerSubscribe_1$4.SimpleInnerSubscriber(_this);
    _this.add(innerSubscriber);
    _this.innerSubscription = innerSubscriber;
    var innerSubscription = innerSubscribe_1$4.innerSubscribe(notifier, innerSubscriber);
    if (innerSubscription !== innerSubscriber) {
      _this.add(innerSubscription);
      _this.innerSubscription = innerSubscription;
    }
    return _this;
  }
  SkipUntilSubscriber.prototype._next = function (value) {
    if (this.hasValue) {
      _super.prototype._next.call(this, value);
    }
  };
  SkipUntilSubscriber.prototype.notifyNext = function () {
    this.hasValue = true;
    if (this.innerSubscription) {
      this.innerSubscription.unsubscribe();
    }
  };
  SkipUntilSubscriber.prototype.notifyComplete = function () {};
  return SkipUntilSubscriber;
}(innerSubscribe_1$4.SimpleOuterSubscriber);

var skipWhile$1 = {};

var __extends$d = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(skipWhile$1, "__esModule", {
  value: true
});
var Subscriber_1$5 = Subscriber$1;
function skipWhile(predicate) {
  return function (source) {
    return source.lift(new SkipWhileOperator(predicate));
  };
}
skipWhile$1.skipWhile = skipWhile;
var SkipWhileOperator = function () {
  function SkipWhileOperator(predicate) {
    this.predicate = predicate;
  }
  SkipWhileOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
  };
  return SkipWhileOperator;
}();
var SkipWhileSubscriber = function (_super) {
  __extends$d(SkipWhileSubscriber, _super);
  function SkipWhileSubscriber(destination, predicate) {
    var _this = _super.call(this, destination) || this;
    _this.predicate = predicate;
    _this.skipping = true;
    _this.index = 0;
    return _this;
  }
  SkipWhileSubscriber.prototype._next = function (value) {
    var destination = this.destination;
    if (this.skipping) {
      this.tryCallPredicate(value);
    }
    if (!this.skipping) {
      destination.next(value);
    }
  };
  SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
    try {
      var result = this.predicate(value, this.index++);
      this.skipping = Boolean(result);
    } catch (err) {
      this.destination.error(err);
    }
  };
  return SkipWhileSubscriber;
}(Subscriber_1$5.Subscriber);

var startWith$1 = {};

Object.defineProperty(startWith$1, "__esModule", {
  value: true
});
var concat_1$1 = concat$3;
var isScheduler_1$1 = isScheduler$1;
function startWith() {
  var array = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    array[_i] = arguments[_i];
  }
  var scheduler = array[array.length - 1];
  if (isScheduler_1$1.isScheduler(scheduler)) {
    array.pop();
    return function (source) {
      return concat_1$1.concat(array, source, scheduler);
    };
  } else {
    return function (source) {
      return concat_1$1.concat(array, source);
    };
  }
}
startWith$1.startWith = startWith;

var subscribeOn$1 = {};

var SubscribeOnObservable$1 = {};

var __extends$c = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(SubscribeOnObservable$1, "__esModule", {
  value: true
});
var Observable_1 = Observable$1;
var asap_1 = asap;
var isNumeric_1$1 = isNumeric$1;
var SubscribeOnObservable = function (_super) {
  __extends$c(SubscribeOnObservable, _super);
  function SubscribeOnObservable(source, delayTime, scheduler) {
    if (delayTime === void 0) {
      delayTime = 0;
    }
    if (scheduler === void 0) {
      scheduler = asap_1.asap;
    }
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.delayTime = delayTime;
    _this.scheduler = scheduler;
    if (!isNumeric_1$1.isNumeric(delayTime) || delayTime < 0) {
      _this.delayTime = 0;
    }
    if (!scheduler || typeof scheduler.schedule !== 'function') {
      _this.scheduler = asap_1.asap;
    }
    return _this;
  }
  SubscribeOnObservable.create = function (source, delay, scheduler) {
    if (delay === void 0) {
      delay = 0;
    }
    if (scheduler === void 0) {
      scheduler = asap_1.asap;
    }
    return new SubscribeOnObservable(source, delay, scheduler);
  };
  SubscribeOnObservable.dispatch = function (arg) {
    var source = arg.source,
      subscriber = arg.subscriber;
    return this.add(source.subscribe(subscriber));
  };
  SubscribeOnObservable.prototype._subscribe = function (subscriber) {
    var delay = this.delayTime;
    var source = this.source;
    var scheduler = this.scheduler;
    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
      source: source,
      subscriber: subscriber
    });
  };
  return SubscribeOnObservable;
}(Observable_1.Observable);
SubscribeOnObservable$1.SubscribeOnObservable = SubscribeOnObservable;

Object.defineProperty(subscribeOn$1, "__esModule", {
  value: true
});
var SubscribeOnObservable_1 = SubscribeOnObservable$1;
function subscribeOn(scheduler, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return function subscribeOnOperatorFunction(source) {
    return source.lift(new SubscribeOnOperator(scheduler, delay));
  };
}
subscribeOn$1.subscribeOn = subscribeOn;
var SubscribeOnOperator = function () {
  function SubscribeOnOperator(scheduler, delay) {
    this.scheduler = scheduler;
    this.delay = delay;
  }
  SubscribeOnOperator.prototype.call = function (subscriber, source) {
    return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
  };
  return SubscribeOnOperator;
}();

var switchAll$1 = {};

var switchMap$1 = {};

var __extends$b = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(switchMap$1, "__esModule", {
  value: true
});
var map_1$3 = map$1;
var from_1 = from$1;
var innerSubscribe_1$3 = innerSubscribe$1;
function switchMap(project, resultSelector) {
  if (typeof resultSelector === 'function') {
    return function (source) {
      return source.pipe(switchMap(function (a, i) {
        return from_1.from(project(a, i)).pipe(map_1$3.map(function (b, ii) {
          return resultSelector(a, b, i, ii);
        }));
      }));
    };
  }
  return function (source) {
    return source.lift(new SwitchMapOperator(project));
  };
}
switchMap$1.switchMap = switchMap;
var SwitchMapOperator = function () {
  function SwitchMapOperator(project) {
    this.project = project;
  }
  SwitchMapOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
  };
  return SwitchMapOperator;
}();
var SwitchMapSubscriber = function (_super) {
  __extends$b(SwitchMapSubscriber, _super);
  function SwitchMapSubscriber(destination, project) {
    var _this = _super.call(this, destination) || this;
    _this.project = project;
    _this.index = 0;
    return _this;
  }
  SwitchMapSubscriber.prototype._next = function (value) {
    var result;
    var index = this.index++;
    try {
      result = this.project(value, index);
    } catch (error) {
      this.destination.error(error);
      return;
    }
    this._innerSub(result);
  };
  SwitchMapSubscriber.prototype._innerSub = function (result) {
    var innerSubscription = this.innerSubscription;
    if (innerSubscription) {
      innerSubscription.unsubscribe();
    }
    var innerSubscriber = new innerSubscribe_1$3.SimpleInnerSubscriber(this);
    var destination = this.destination;
    destination.add(innerSubscriber);
    this.innerSubscription = innerSubscribe_1$3.innerSubscribe(result, innerSubscriber);
    if (this.innerSubscription !== innerSubscriber) {
      destination.add(this.innerSubscription);
    }
  };
  SwitchMapSubscriber.prototype._complete = function () {
    var innerSubscription = this.innerSubscription;
    if (!innerSubscription || innerSubscription.closed) {
      _super.prototype._complete.call(this);
    }
    this.unsubscribe();
  };
  SwitchMapSubscriber.prototype._unsubscribe = function () {
    this.innerSubscription = undefined;
  };
  SwitchMapSubscriber.prototype.notifyComplete = function () {
    this.innerSubscription = undefined;
    if (this.isStopped) {
      _super.prototype._complete.call(this);
    }
  };
  SwitchMapSubscriber.prototype.notifyNext = function (innerValue) {
    this.destination.next(innerValue);
  };
  return SwitchMapSubscriber;
}(innerSubscribe_1$3.SimpleOuterSubscriber);

Object.defineProperty(switchAll$1, "__esModule", {
  value: true
});
var switchMap_1$2 = switchMap$1;
var identity_1 = identity$1;
function switchAll() {
  return switchMap_1$2.switchMap(identity_1.identity);
}
switchAll$1.switchAll = switchAll;

var switchMapTo$1 = {};

Object.defineProperty(switchMapTo$1, "__esModule", {
  value: true
});
var switchMap_1$1 = switchMap$1;
function switchMapTo(innerObservable, resultSelector) {
  return resultSelector ? switchMap_1$1.switchMap(function () {
    return innerObservable;
  }, resultSelector) : switchMap_1$1.switchMap(function () {
    return innerObservable;
  });
}
switchMapTo$1.switchMapTo = switchMapTo;

var takeUntil$1 = {};

var __extends$a = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(takeUntil$1, "__esModule", {
  value: true
});
var innerSubscribe_1$2 = innerSubscribe$1;
function takeUntil(notifier) {
  return function (source) {
    return source.lift(new TakeUntilOperator(notifier));
  };
}
takeUntil$1.takeUntil = takeUntil;
var TakeUntilOperator = function () {
  function TakeUntilOperator(notifier) {
    this.notifier = notifier;
  }
  TakeUntilOperator.prototype.call = function (subscriber, source) {
    var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
    var notifierSubscription = innerSubscribe_1$2.innerSubscribe(this.notifier, new innerSubscribe_1$2.SimpleInnerSubscriber(takeUntilSubscriber));
    if (notifierSubscription && !takeUntilSubscriber.seenValue) {
      takeUntilSubscriber.add(notifierSubscription);
      return source.subscribe(takeUntilSubscriber);
    }
    return takeUntilSubscriber;
  };
  return TakeUntilOperator;
}();
var TakeUntilSubscriber = function (_super) {
  __extends$a(TakeUntilSubscriber, _super);
  function TakeUntilSubscriber(destination) {
    var _this = _super.call(this, destination) || this;
    _this.seenValue = false;
    return _this;
  }
  TakeUntilSubscriber.prototype.notifyNext = function () {
    this.seenValue = true;
    this.complete();
  };
  TakeUntilSubscriber.prototype.notifyComplete = function () {};
  return TakeUntilSubscriber;
}(innerSubscribe_1$2.SimpleOuterSubscriber);

var takeWhile$1 = {};

var __extends$9 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(takeWhile$1, "__esModule", {
  value: true
});
var Subscriber_1$4 = Subscriber$1;
function takeWhile(predicate, inclusive) {
  if (inclusive === void 0) {
    inclusive = false;
  }
  return function (source) {
    return source.lift(new TakeWhileOperator(predicate, inclusive));
  };
}
takeWhile$1.takeWhile = takeWhile;
var TakeWhileOperator = function () {
  function TakeWhileOperator(predicate, inclusive) {
    this.predicate = predicate;
    this.inclusive = inclusive;
  }
  TakeWhileOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
  };
  return TakeWhileOperator;
}();
var TakeWhileSubscriber = function (_super) {
  __extends$9(TakeWhileSubscriber, _super);
  function TakeWhileSubscriber(destination, predicate, inclusive) {
    var _this = _super.call(this, destination) || this;
    _this.predicate = predicate;
    _this.inclusive = inclusive;
    _this.index = 0;
    return _this;
  }
  TakeWhileSubscriber.prototype._next = function (value) {
    var destination = this.destination;
    var result;
    try {
      result = this.predicate(value, this.index++);
    } catch (err) {
      destination.error(err);
      return;
    }
    this.nextOrComplete(value, result);
  };
  TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
    var destination = this.destination;
    if (Boolean(predicateResult)) {
      destination.next(value);
    } else {
      if (this.inclusive) {
        destination.next(value);
      }
      destination.complete();
    }
  };
  return TakeWhileSubscriber;
}(Subscriber_1$4.Subscriber);

var tap$1 = {};

var __extends$8 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(tap$1, "__esModule", {
  value: true
});
var Subscriber_1$3 = Subscriber$1;
var noop_1 = noop$1;
var isFunction_1 = isFunction$1;
function tap(nextOrObserver, error, complete) {
  return function tapOperatorFunction(source) {
    return source.lift(new DoOperator(nextOrObserver, error, complete));
  };
}
tap$1.tap = tap;
var DoOperator = function () {
  function DoOperator(nextOrObserver, error, complete) {
    this.nextOrObserver = nextOrObserver;
    this.error = error;
    this.complete = complete;
  }
  DoOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
  };
  return DoOperator;
}();
var TapSubscriber = function (_super) {
  __extends$8(TapSubscriber, _super);
  function TapSubscriber(destination, observerOrNext, error, complete) {
    var _this = _super.call(this, destination) || this;
    _this._tapNext = noop_1.noop;
    _this._tapError = noop_1.noop;
    _this._tapComplete = noop_1.noop;
    _this._tapError = error || noop_1.noop;
    _this._tapComplete = complete || noop_1.noop;
    if (isFunction_1.isFunction(observerOrNext)) {
      _this._context = _this;
      _this._tapNext = observerOrNext;
    } else if (observerOrNext) {
      _this._context = observerOrNext;
      _this._tapNext = observerOrNext.next || noop_1.noop;
      _this._tapError = observerOrNext.error || noop_1.noop;
      _this._tapComplete = observerOrNext.complete || noop_1.noop;
    }
    return _this;
  }
  TapSubscriber.prototype._next = function (value) {
    try {
      this._tapNext.call(this._context, value);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(value);
  };
  TapSubscriber.prototype._error = function (err) {
    try {
      this._tapError.call(this._context, err);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.error(err);
  };
  TapSubscriber.prototype._complete = function () {
    try {
      this._tapComplete.call(this._context);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    return this.destination.complete();
  };
  return TapSubscriber;
}(Subscriber_1$3.Subscriber);

var throttle = {};

(function (exports) {

  var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };
      return _extendStatics(d, b);
    };
    return function (d, b) {
      _extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var innerSubscribe_1 = innerSubscribe$1;
  exports.defaultThrottleConfig = {
    leading: true,
    trailing: false
  };
  function throttle(durationSelector, config) {
    if (config === void 0) {
      config = exports.defaultThrottleConfig;
    }
    return function (source) {
      return source.lift(new ThrottleOperator(durationSelector, !!config.leading, !!config.trailing));
    };
  }
  exports.throttle = throttle;
  var ThrottleOperator = function () {
    function ThrottleOperator(durationSelector, leading, trailing) {
      this.durationSelector = durationSelector;
      this.leading = leading;
      this.trailing = trailing;
    }
    ThrottleOperator.prototype.call = function (subscriber, source) {
      return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
    };
    return ThrottleOperator;
  }();
  var ThrottleSubscriber = function (_super) {
    __extends(ThrottleSubscriber, _super);
    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
      var _this = _super.call(this, destination) || this;
      _this.destination = destination;
      _this.durationSelector = durationSelector;
      _this._leading = _leading;
      _this._trailing = _trailing;
      _this._hasValue = false;
      return _this;
    }
    ThrottleSubscriber.prototype._next = function (value) {
      this._hasValue = true;
      this._sendValue = value;
      if (!this._throttled) {
        if (this._leading) {
          this.send();
        } else {
          this.throttle(value);
        }
      }
    };
    ThrottleSubscriber.prototype.send = function () {
      var _a = this,
        _hasValue = _a._hasValue,
        _sendValue = _a._sendValue;
      if (_hasValue) {
        this.destination.next(_sendValue);
        this.throttle(_sendValue);
      }
      this._hasValue = false;
      this._sendValue = undefined;
    };
    ThrottleSubscriber.prototype.throttle = function (value) {
      var duration = this.tryDurationSelector(value);
      if (!!duration) {
        this.add(this._throttled = innerSubscribe_1.innerSubscribe(duration, new innerSubscribe_1.SimpleInnerSubscriber(this)));
      }
    };
    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
      try {
        return this.durationSelector(value);
      } catch (err) {
        this.destination.error(err);
        return null;
      }
    };
    ThrottleSubscriber.prototype.throttlingDone = function () {
      var _a = this,
        _throttled = _a._throttled,
        _trailing = _a._trailing;
      if (_throttled) {
        _throttled.unsubscribe();
      }
      this._throttled = undefined;
      if (_trailing) {
        this.send();
      }
    };
    ThrottleSubscriber.prototype.notifyNext = function () {
      this.throttlingDone();
    };
    ThrottleSubscriber.prototype.notifyComplete = function () {
      this.throttlingDone();
    };
    return ThrottleSubscriber;
  }(innerSubscribe_1.SimpleOuterSubscriber);
})(throttle);

var throttleTime$1 = {};

var __extends$7 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(throttleTime$1, "__esModule", {
  value: true
});
var Subscriber_1$2 = Subscriber$1;
var async_1$5 = async;
var throttle_1$1 = throttle;
function throttleTime(duration, scheduler, config) {
  if (scheduler === void 0) {
    scheduler = async_1$5.async;
  }
  if (config === void 0) {
    config = throttle_1$1.defaultThrottleConfig;
  }
  return function (source) {
    return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));
  };
}
throttleTime$1.throttleTime = throttleTime;
var ThrottleTimeOperator = function () {
  function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
    this.duration = duration;
    this.scheduler = scheduler;
    this.leading = leading;
    this.trailing = trailing;
  }
  ThrottleTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
  };
  return ThrottleTimeOperator;
}();
var ThrottleTimeSubscriber = function (_super) {
  __extends$7(ThrottleTimeSubscriber, _super);
  function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
    var _this = _super.call(this, destination) || this;
    _this.duration = duration;
    _this.scheduler = scheduler;
    _this.leading = leading;
    _this.trailing = trailing;
    _this._hasTrailingValue = false;
    _this._trailingValue = null;
    return _this;
  }
  ThrottleTimeSubscriber.prototype._next = function (value) {
    if (this.throttled) {
      if (this.trailing) {
        this._trailingValue = value;
        this._hasTrailingValue = true;
      }
    } else {
      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, {
        subscriber: this
      }));
      if (this.leading) {
        this.destination.next(value);
      } else if (this.trailing) {
        this._trailingValue = value;
        this._hasTrailingValue = true;
      }
    }
  };
  ThrottleTimeSubscriber.prototype._complete = function () {
    if (this._hasTrailingValue) {
      this.destination.next(this._trailingValue);
      this.destination.complete();
    } else {
      this.destination.complete();
    }
  };
  ThrottleTimeSubscriber.prototype.clearThrottle = function () {
    var throttled = this.throttled;
    if (throttled) {
      if (this.trailing && this._hasTrailingValue) {
        this.destination.next(this._trailingValue);
        this._trailingValue = null;
        this._hasTrailingValue = false;
      }
      throttled.unsubscribe();
      this.remove(throttled);
      this.throttled = null;
    }
  };
  return ThrottleTimeSubscriber;
}(Subscriber_1$2.Subscriber);
function dispatchNext(arg) {
  var subscriber = arg.subscriber;
  subscriber.clearThrottle();
}

var timeInterval$1 = {};

Object.defineProperty(timeInterval$1, "__esModule", {
  value: true
});
var async_1$4 = async;
var scan_1$1 = scan$1;
var defer_1 = defer$1;
var map_1$2 = map$1;
function timeInterval(scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1$4.async;
  }
  return function (source) {
    return defer_1.defer(function () {
      return source.pipe(scan_1$1.scan(function (_a, value) {
        var current = _a.current;
        return {
          value: value,
          current: scheduler.now(),
          last: current
        };
      }, {
        current: scheduler.now(),
        value: undefined,
        last: undefined
      }), map_1$2.map(function (_a) {
        var current = _a.current,
          last = _a.last,
          value = _a.value;
        return new TimeInterval(value, current - last);
      }));
    });
  };
}
timeInterval$1.timeInterval = timeInterval;
var TimeInterval = function () {
  function TimeInterval(value, interval) {
    this.value = value;
    this.interval = interval;
  }
  return TimeInterval;
}();
timeInterval$1.TimeInterval = TimeInterval;

var timeout$1 = {};

var timeoutWith$1 = {};

var __extends$6 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(timeoutWith$1, "__esModule", {
  value: true
});
var async_1$3 = async;
var isDate_1 = isDate$1;
var innerSubscribe_1$1 = innerSubscribe$1;
function timeoutWith(due, withObservable, scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1$3.async;
  }
  return function (source) {
    var absoluteTimeout = isDate_1.isDate(due);
    var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);
    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
  };
}
timeoutWith$1.timeoutWith = timeoutWith;
var TimeoutWithOperator = function () {
  function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
    this.waitFor = waitFor;
    this.absoluteTimeout = absoluteTimeout;
    this.withObservable = withObservable;
    this.scheduler = scheduler;
  }
  TimeoutWithOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
  };
  return TimeoutWithOperator;
}();
var TimeoutWithSubscriber = function (_super) {
  __extends$6(TimeoutWithSubscriber, _super);
  function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
    var _this = _super.call(this, destination) || this;
    _this.absoluteTimeout = absoluteTimeout;
    _this.waitFor = waitFor;
    _this.withObservable = withObservable;
    _this.scheduler = scheduler;
    _this.scheduleTimeout();
    return _this;
  }
  TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
    var withObservable = subscriber.withObservable;
    subscriber._unsubscribeAndRecycle();
    subscriber.add(innerSubscribe_1$1.innerSubscribe(withObservable, new innerSubscribe_1$1.SimpleInnerSubscriber(subscriber)));
  };
  TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
    var action = this.action;
    if (action) {
      this.action = action.schedule(this, this.waitFor);
    } else {
      this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
    }
  };
  TimeoutWithSubscriber.prototype._next = function (value) {
    if (!this.absoluteTimeout) {
      this.scheduleTimeout();
    }
    _super.prototype._next.call(this, value);
  };
  TimeoutWithSubscriber.prototype._unsubscribe = function () {
    this.action = undefined;
    this.scheduler = null;
    this.withObservable = null;
  };
  return TimeoutWithSubscriber;
}(innerSubscribe_1$1.SimpleOuterSubscriber);

Object.defineProperty(timeout$1, "__esModule", {
  value: true
});
var async_1$2 = async;
var TimeoutError_1 = TimeoutError;
var timeoutWith_1$1 = timeoutWith$1;
var throwError_1 = throwError$1;
function timeout(due, scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1$2.async;
  }
  return timeoutWith_1$1.timeoutWith(due, throwError_1.throwError(new TimeoutError_1.TimeoutError()), scheduler);
}
timeout$1.timeout = timeout;

var timestamp$1 = {};

Object.defineProperty(timestamp$1, "__esModule", {
  value: true
});
var async_1$1 = async;
var map_1$1 = map$1;
function timestamp(scheduler) {
  if (scheduler === void 0) {
    scheduler = async_1$1.async;
  }
  return map_1$1.map(function (value) {
    return new Timestamp(value, scheduler.now());
  });
}
timestamp$1.timestamp = timestamp;
var Timestamp = function () {
  function Timestamp(value, timestamp) {
    this.value = value;
    this.timestamp = timestamp;
  }
  return Timestamp;
}();
timestamp$1.Timestamp = Timestamp;

var toArray$1 = {};

Object.defineProperty(toArray$1, "__esModule", {
  value: true
});
var reduce_1$1 = reduce$1;
function toArrayReducer(arr, item, index) {
  if (index === 0) {
    return [item];
  }
  arr.push(item);
  return arr;
}
function toArray() {
  return reduce_1$1.reduce(toArrayReducer, []);
}
toArray$1.toArray = toArray;

var window$2 = {};

var __extends$5 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(window$2, "__esModule", {
  value: true
});
var Subject_1$4 = Subject$1;
var innerSubscribe_1 = innerSubscribe$1;
function window$1(windowBoundaries) {
  return function windowOperatorFunction(source) {
    return source.lift(new WindowOperator$1(windowBoundaries));
  };
}
window$2.window = window$1;
var WindowOperator$1 = function () {
  function WindowOperator(windowBoundaries) {
    this.windowBoundaries = windowBoundaries;
  }
  WindowOperator.prototype.call = function (subscriber, source) {
    var windowSubscriber = new WindowSubscriber$1(subscriber);
    var sourceSubscription = source.subscribe(windowSubscriber);
    if (!sourceSubscription.closed) {
      windowSubscriber.add(innerSubscribe_1.innerSubscribe(this.windowBoundaries, new innerSubscribe_1.SimpleInnerSubscriber(windowSubscriber)));
    }
    return sourceSubscription;
  };
  return WindowOperator;
}();
var WindowSubscriber$1 = function (_super) {
  __extends$5(WindowSubscriber, _super);
  function WindowSubscriber(destination) {
    var _this = _super.call(this, destination) || this;
    _this.window = new Subject_1$4.Subject();
    destination.next(_this.window);
    return _this;
  }
  WindowSubscriber.prototype.notifyNext = function () {
    this.openWindow();
  };
  WindowSubscriber.prototype.notifyError = function (error) {
    this._error(error);
  };
  WindowSubscriber.prototype.notifyComplete = function () {
    this._complete();
  };
  WindowSubscriber.prototype._next = function (value) {
    this.window.next(value);
  };
  WindowSubscriber.prototype._error = function (err) {
    this.window.error(err);
    this.destination.error(err);
  };
  WindowSubscriber.prototype._complete = function () {
    this.window.complete();
    this.destination.complete();
  };
  WindowSubscriber.prototype._unsubscribe = function () {
    this.window = null;
  };
  WindowSubscriber.prototype.openWindow = function () {
    var prevWindow = this.window;
    if (prevWindow) {
      prevWindow.complete();
    }
    var destination = this.destination;
    var newWindow = this.window = new Subject_1$4.Subject();
    destination.next(newWindow);
  };
  return WindowSubscriber;
}(innerSubscribe_1.SimpleOuterSubscriber);

var windowCount$1 = {};

var __extends$4 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(windowCount$1, "__esModule", {
  value: true
});
var Subscriber_1$1 = Subscriber$1;
var Subject_1$3 = Subject$1;
function windowCount(windowSize, startWindowEvery) {
  if (startWindowEvery === void 0) {
    startWindowEvery = 0;
  }
  return function windowCountOperatorFunction(source) {
    return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
  };
}
windowCount$1.windowCount = windowCount;
var WindowCountOperator = function () {
  function WindowCountOperator(windowSize, startWindowEvery) {
    this.windowSize = windowSize;
    this.startWindowEvery = startWindowEvery;
  }
  WindowCountOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
  };
  return WindowCountOperator;
}();
var WindowCountSubscriber = function (_super) {
  __extends$4(WindowCountSubscriber, _super);
  function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
    var _this = _super.call(this, destination) || this;
    _this.destination = destination;
    _this.windowSize = windowSize;
    _this.startWindowEvery = startWindowEvery;
    _this.windows = [new Subject_1$3.Subject()];
    _this.count = 0;
    destination.next(_this.windows[0]);
    return _this;
  }
  WindowCountSubscriber.prototype._next = function (value) {
    var startWindowEvery = this.startWindowEvery > 0 ? this.startWindowEvery : this.windowSize;
    var destination = this.destination;
    var windowSize = this.windowSize;
    var windows = this.windows;
    var len = windows.length;
    for (var i = 0; i < len && !this.closed; i++) {
      windows[i].next(value);
    }
    var c = this.count - windowSize + 1;
    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
      windows.shift().complete();
    }
    if (++this.count % startWindowEvery === 0 && !this.closed) {
      var window_1 = new Subject_1$3.Subject();
      windows.push(window_1);
      destination.next(window_1);
    }
  };
  WindowCountSubscriber.prototype._error = function (err) {
    var windows = this.windows;
    if (windows) {
      while (windows.length > 0 && !this.closed) {
        windows.shift().error(err);
      }
    }
    this.destination.error(err);
  };
  WindowCountSubscriber.prototype._complete = function () {
    var windows = this.windows;
    if (windows) {
      while (windows.length > 0 && !this.closed) {
        windows.shift().complete();
      }
    }
    this.destination.complete();
  };
  WindowCountSubscriber.prototype._unsubscribe = function () {
    this.count = 0;
    this.windows = null;
  };
  return WindowCountSubscriber;
}(Subscriber_1$1.Subscriber);

var windowTime$1 = {};

var __extends$3 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(windowTime$1, "__esModule", {
  value: true
});
var Subject_1$2 = Subject$1;
var async_1 = async;
var Subscriber_1 = Subscriber$1;
var isNumeric_1 = isNumeric$1;
var isScheduler_1 = isScheduler$1;
function windowTime(windowTimeSpan) {
  var scheduler = async_1.async;
  var windowCreationInterval = null;
  var maxWindowSize = Number.POSITIVE_INFINITY;
  if (isScheduler_1.isScheduler(arguments[3])) {
    scheduler = arguments[3];
  }
  if (isScheduler_1.isScheduler(arguments[2])) {
    scheduler = arguments[2];
  } else if (isNumeric_1.isNumeric(arguments[2])) {
    maxWindowSize = Number(arguments[2]);
  }
  if (isScheduler_1.isScheduler(arguments[1])) {
    scheduler = arguments[1];
  } else if (isNumeric_1.isNumeric(arguments[1])) {
    windowCreationInterval = Number(arguments[1]);
  }
  return function windowTimeOperatorFunction(source) {
    return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
  };
}
windowTime$1.windowTime = windowTime;
var WindowTimeOperator = function () {
  function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
    this.windowTimeSpan = windowTimeSpan;
    this.windowCreationInterval = windowCreationInterval;
    this.maxWindowSize = maxWindowSize;
    this.scheduler = scheduler;
  }
  WindowTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
  };
  return WindowTimeOperator;
}();
var CountedSubject = function (_super) {
  __extends$3(CountedSubject, _super);
  function CountedSubject() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._numberOfNextedValues = 0;
    return _this;
  }
  CountedSubject.prototype.next = function (value) {
    this._numberOfNextedValues++;
    _super.prototype.next.call(this, value);
  };
  Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
    get: function get() {
      return this._numberOfNextedValues;
    },
    enumerable: true,
    configurable: true
  });
  return CountedSubject;
}(Subject_1$2.Subject);
var WindowTimeSubscriber = function (_super) {
  __extends$3(WindowTimeSubscriber, _super);
  function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
    var _this = _super.call(this, destination) || this;
    _this.destination = destination;
    _this.windowTimeSpan = windowTimeSpan;
    _this.windowCreationInterval = windowCreationInterval;
    _this.maxWindowSize = maxWindowSize;
    _this.scheduler = scheduler;
    _this.windows = [];
    var window = _this.openWindow();
    if (windowCreationInterval !== null && windowCreationInterval >= 0) {
      var closeState = {
        subscriber: _this,
        window: window,
        context: null
      };
      var creationState = {
        windowTimeSpan: windowTimeSpan,
        windowCreationInterval: windowCreationInterval,
        subscriber: _this,
        scheduler: scheduler
      };
      _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
      _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
    } else {
      var timeSpanOnlyState = {
        subscriber: _this,
        window: window,
        windowTimeSpan: windowTimeSpan
      };
      _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
    }
    return _this;
  }
  WindowTimeSubscriber.prototype._next = function (value) {
    var windows = this.windows;
    var len = windows.length;
    for (var i = 0; i < len; i++) {
      var window_1 = windows[i];
      if (!window_1.closed) {
        window_1.next(value);
        if (window_1.numberOfNextedValues >= this.maxWindowSize) {
          this.closeWindow(window_1);
        }
      }
    }
  };
  WindowTimeSubscriber.prototype._error = function (err) {
    var windows = this.windows;
    while (windows.length > 0) {
      windows.shift().error(err);
    }
    this.destination.error(err);
  };
  WindowTimeSubscriber.prototype._complete = function () {
    var windows = this.windows;
    while (windows.length > 0) {
      var window_2 = windows.shift();
      if (!window_2.closed) {
        window_2.complete();
      }
    }
    this.destination.complete();
  };
  WindowTimeSubscriber.prototype.openWindow = function () {
    var window = new CountedSubject();
    this.windows.push(window);
    var destination = this.destination;
    destination.next(window);
    return window;
  };
  WindowTimeSubscriber.prototype.closeWindow = function (window) {
    window.complete();
    var windows = this.windows;
    windows.splice(windows.indexOf(window), 1);
  };
  return WindowTimeSubscriber;
}(Subscriber_1.Subscriber);
function dispatchWindowTimeSpanOnly(state) {
  var subscriber = state.subscriber,
    windowTimeSpan = state.windowTimeSpan,
    window = state.window;
  if (window) {
    subscriber.closeWindow(window);
  }
  state.window = subscriber.openWindow();
  this.schedule(state, windowTimeSpan);
}
function dispatchWindowCreation(state) {
  var windowTimeSpan = state.windowTimeSpan,
    subscriber = state.subscriber,
    scheduler = state.scheduler,
    windowCreationInterval = state.windowCreationInterval;
  var window = subscriber.openWindow();
  var action = this;
  var context = {
    action: action,
    subscription: null
  };
  var timeSpanState = {
    subscriber: subscriber,
    window: window,
    context: context
  };
  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
  action.add(context.subscription);
  action.schedule(state, windowCreationInterval);
}
function dispatchWindowClose(state) {
  var subscriber = state.subscriber,
    window = state.window,
    context = state.context;
  if (context && context.action && context.subscription) {
    context.action.remove(context.subscription);
  }
  subscriber.closeWindow(window);
}

var windowToggle$1 = {};

var __extends$2 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(windowToggle$1, "__esModule", {
  value: true
});
var Subject_1$1 = Subject$1;
var Subscription_1 = Subscription$1;
var OuterSubscriber_1$2 = OuterSubscriber$1;
var subscribeToResult_1$2 = subscribeToResult$1;
function windowToggle(openings, closingSelector) {
  return function (source) {
    return source.lift(new WindowToggleOperator(openings, closingSelector));
  };
}
windowToggle$1.windowToggle = windowToggle;
var WindowToggleOperator = function () {
  function WindowToggleOperator(openings, closingSelector) {
    this.openings = openings;
    this.closingSelector = closingSelector;
  }
  WindowToggleOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
  };
  return WindowToggleOperator;
}();
var WindowToggleSubscriber = function (_super) {
  __extends$2(WindowToggleSubscriber, _super);
  function WindowToggleSubscriber(destination, openings, closingSelector) {
    var _this = _super.call(this, destination) || this;
    _this.openings = openings;
    _this.closingSelector = closingSelector;
    _this.contexts = [];
    _this.add(_this.openSubscription = subscribeToResult_1$2.subscribeToResult(_this, openings, openings));
    return _this;
  }
  WindowToggleSubscriber.prototype._next = function (value) {
    var contexts = this.contexts;
    if (contexts) {
      var len = contexts.length;
      for (var i = 0; i < len; i++) {
        contexts[i].window.next(value);
      }
    }
  };
  WindowToggleSubscriber.prototype._error = function (err) {
    var contexts = this.contexts;
    this.contexts = null;
    if (contexts) {
      var len = contexts.length;
      var index = -1;
      while (++index < len) {
        var context_1 = contexts[index];
        context_1.window.error(err);
        context_1.subscription.unsubscribe();
      }
    }
    _super.prototype._error.call(this, err);
  };
  WindowToggleSubscriber.prototype._complete = function () {
    var contexts = this.contexts;
    this.contexts = null;
    if (contexts) {
      var len = contexts.length;
      var index = -1;
      while (++index < len) {
        var context_2 = contexts[index];
        context_2.window.complete();
        context_2.subscription.unsubscribe();
      }
    }
    _super.prototype._complete.call(this);
  };
  WindowToggleSubscriber.prototype._unsubscribe = function () {
    var contexts = this.contexts;
    this.contexts = null;
    if (contexts) {
      var len = contexts.length;
      var index = -1;
      while (++index < len) {
        var context_3 = contexts[index];
        context_3.window.unsubscribe();
        context_3.subscription.unsubscribe();
      }
    }
  };
  WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    if (outerValue === this.openings) {
      var closingNotifier = void 0;
      try {
        var closingSelector = this.closingSelector;
        closingNotifier = closingSelector(innerValue);
      } catch (e) {
        return this.error(e);
      }
      var window_1 = new Subject_1$1.Subject();
      var subscription = new Subscription_1.Subscription();
      var context_4 = {
        window: window_1,
        subscription: subscription
      };
      this.contexts.push(context_4);
      var innerSubscription = subscribeToResult_1$2.subscribeToResult(this, closingNotifier, context_4);
      if (innerSubscription.closed) {
        this.closeWindow(this.contexts.length - 1);
      } else {
        innerSubscription.context = context_4;
        subscription.add(innerSubscription);
      }
      this.destination.next(window_1);
    } else {
      this.closeWindow(this.contexts.indexOf(outerValue));
    }
  };
  WindowToggleSubscriber.prototype.notifyError = function (err) {
    this.error(err);
  };
  WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
    if (inner !== this.openSubscription) {
      this.closeWindow(this.contexts.indexOf(inner.context));
    }
  };
  WindowToggleSubscriber.prototype.closeWindow = function (index) {
    if (index === -1) {
      return;
    }
    var contexts = this.contexts;
    var context = contexts[index];
    var window = context.window,
      subscription = context.subscription;
    contexts.splice(index, 1);
    window.complete();
    subscription.unsubscribe();
  };
  return WindowToggleSubscriber;
}(OuterSubscriber_1$2.OuterSubscriber);

var windowWhen$1 = {};

var __extends$1 = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(windowWhen$1, "__esModule", {
  value: true
});
var Subject_1 = Subject$1;
var OuterSubscriber_1$1 = OuterSubscriber$1;
var subscribeToResult_1$1 = subscribeToResult$1;
function windowWhen(closingSelector) {
  return function windowWhenOperatorFunction(source) {
    return source.lift(new WindowOperator(closingSelector));
  };
}
windowWhen$1.windowWhen = windowWhen;
var WindowOperator = function () {
  function WindowOperator(closingSelector) {
    this.closingSelector = closingSelector;
  }
  WindowOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
  };
  return WindowOperator;
}();
var WindowSubscriber = function (_super) {
  __extends$1(WindowSubscriber, _super);
  function WindowSubscriber(destination, closingSelector) {
    var _this = _super.call(this, destination) || this;
    _this.destination = destination;
    _this.closingSelector = closingSelector;
    _this.openWindow();
    return _this;
  }
  WindowSubscriber.prototype.notifyNext = function (_outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {
    this.openWindow(innerSub);
  };
  WindowSubscriber.prototype.notifyError = function (error) {
    this._error(error);
  };
  WindowSubscriber.prototype.notifyComplete = function (innerSub) {
    this.openWindow(innerSub);
  };
  WindowSubscriber.prototype._next = function (value) {
    this.window.next(value);
  };
  WindowSubscriber.prototype._error = function (err) {
    this.window.error(err);
    this.destination.error(err);
    this.unsubscribeClosingNotification();
  };
  WindowSubscriber.prototype._complete = function () {
    this.window.complete();
    this.destination.complete();
    this.unsubscribeClosingNotification();
  };
  WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
    if (this.closingNotification) {
      this.closingNotification.unsubscribe();
    }
  };
  WindowSubscriber.prototype.openWindow = function (innerSub) {
    if (innerSub === void 0) {
      innerSub = null;
    }
    if (innerSub) {
      this.remove(innerSub);
      innerSub.unsubscribe();
    }
    var prevWindow = this.window;
    if (prevWindow) {
      prevWindow.complete();
    }
    var window = this.window = new Subject_1.Subject();
    this.destination.next(window);
    var closingNotifier;
    try {
      var closingSelector = this.closingSelector;
      closingNotifier = closingSelector();
    } catch (e) {
      this.destination.error(e);
      this.window.error(e);
      return;
    }
    this.add(this.closingNotification = subscribeToResult_1$1.subscribeToResult(this, closingNotifier));
  };
  return WindowSubscriber;
}(OuterSubscriber_1$1.OuterSubscriber);

var withLatestFrom$1 = {};

var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(withLatestFrom$1, "__esModule", {
  value: true
});
var OuterSubscriber_1 = OuterSubscriber$1;
var subscribeToResult_1 = subscribeToResult$1;
function withLatestFrom() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return function (source) {
    var project;
    if (typeof args[args.length - 1] === 'function') {
      project = args.pop();
    }
    var observables = args;
    return source.lift(new WithLatestFromOperator(observables, project));
  };
}
withLatestFrom$1.withLatestFrom = withLatestFrom;
var WithLatestFromOperator = function () {
  function WithLatestFromOperator(observables, project) {
    this.observables = observables;
    this.project = project;
  }
  WithLatestFromOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
  };
  return WithLatestFromOperator;
}();
var WithLatestFromSubscriber = function (_super) {
  __extends(WithLatestFromSubscriber, _super);
  function WithLatestFromSubscriber(destination, observables, project) {
    var _this = _super.call(this, destination) || this;
    _this.observables = observables;
    _this.project = project;
    _this.toRespond = [];
    var len = observables.length;
    _this.values = new Array(len);
    for (var i = 0; i < len; i++) {
      _this.toRespond.push(i);
    }
    for (var i = 0; i < len; i++) {
      var observable = observables[i];
      _this.add(subscribeToResult_1.subscribeToResult(_this, observable, undefined, i));
    }
    return _this;
  }
  WithLatestFromSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
    this.values[outerIndex] = innerValue;
    var toRespond = this.toRespond;
    if (toRespond.length > 0) {
      var found = toRespond.indexOf(outerIndex);
      if (found !== -1) {
        toRespond.splice(found, 1);
      }
    }
  };
  WithLatestFromSubscriber.prototype.notifyComplete = function () {};
  WithLatestFromSubscriber.prototype._next = function (value) {
    if (this.toRespond.length === 0) {
      var args = [value].concat(this.values);
      if (this.project) {
        this._tryProject(args);
      } else {
        this.destination.next(args);
      }
    }
  };
  WithLatestFromSubscriber.prototype._tryProject = function (args) {
    var result;
    try {
      result = this.project.apply(this, args);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(result);
  };
  return WithLatestFromSubscriber;
}(OuterSubscriber_1.OuterSubscriber);

var zip$1 = {};

Object.defineProperty(zip$1, "__esModule", {
  value: true
});
var zip_1$2 = zip$3;
function zip() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  return function zipOperatorFunction(source) {
    return source.lift.call(zip_1$2.zip.apply(void 0, [source].concat(observables)));
  };
}
zip$1.zip = zip;

var zipAll$1 = {};

Object.defineProperty(zipAll$1, "__esModule", {
  value: true
});
var zip_1$1 = zip$3;
function zipAll(project) {
  return function (source) {
    return source.lift(new zip_1$1.ZipOperator(project));
  };
}
zipAll$1.zipAll = zipAll;

Object.defineProperty(operators, "__esModule", {
  value: true
});
var audit_1 = audit$1;
operators.audit = audit_1.audit;
var auditTime_1 = auditTime$1;
operators.auditTime = auditTime_1.auditTime;
var buffer_1 = buffer$1;
operators.buffer = buffer_1.buffer;
var bufferCount_1 = bufferCount$1;
operators.bufferCount = bufferCount_1.bufferCount;
var bufferTime_1 = bufferTime$1;
operators.bufferTime = bufferTime_1.bufferTime;
var bufferToggle_1 = bufferToggle$1;
operators.bufferToggle = bufferToggle_1.bufferToggle;
var bufferWhen_1 = bufferWhen$1;
operators.bufferWhen = bufferWhen_1.bufferWhen;
var catchError_1 = catchError$1;
operators.catchError = catchError_1.catchError;
var combineAll_1 = combineAll$1;
operators.combineAll = combineAll_1.combineAll;
var combineLatest_1 = combineLatest$1;
operators.combineLatest = combineLatest_1.combineLatest;
var concat_1 = concat$1;
operators.concat = concat_1.concat;
var concatAll_1 = concatAll$1;
operators.concatAll = concatAll_1.concatAll;
var concatMap_1 = concatMap$1;
operators.concatMap = concatMap_1.concatMap;
var concatMapTo_1 = concatMapTo$1;
operators.concatMapTo = concatMapTo_1.concatMapTo;
var count_1 = count$1;
operators.count = count_1.count;
var debounce_1 = debounce$1;
operators.debounce = debounce_1.debounce;
var debounceTime_1 = debounceTime$1;
operators.debounceTime = debounceTime_1.debounceTime;
var defaultIfEmpty_1 = defaultIfEmpty$1;
operators.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
var delay_1 = delay$1;
operators.delay = delay_1.delay;
var delayWhen_1 = delayWhen$1;
operators.delayWhen = delayWhen_1.delayWhen;
var dematerialize_1 = dematerialize$1;
operators.dematerialize = dematerialize_1.dematerialize;
var distinct_1 = distinct$1;
operators.distinct = distinct_1.distinct;
var distinctUntilChanged_1 = distinctUntilChanged$1;
operators.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
var distinctUntilKeyChanged_1 = distinctUntilKeyChanged$1;
operators.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;
var elementAt_1 = elementAt$1;
operators.elementAt = elementAt_1.elementAt;
var endWith_1 = endWith$1;
operators.endWith = endWith_1.endWith;
var every_1 = every$1;
operators.every = every_1.every;
var exhaust_1 = exhaust$1;
operators.exhaust = exhaust_1.exhaust;
var exhaustMap_1 = exhaustMap$1;
operators.exhaustMap = exhaustMap_1.exhaustMap;
var expand_1 = expand$1;
operators.expand = expand_1.expand;
var filter_1 = filter$1;
operators.filter = filter_1.filter;
var finalize_1 = finalize$1;
operators.finalize = finalize_1.finalize;
var find_1 = find$1;
operators.find = find_1.find;
var findIndex_1 = findIndex$1;
operators.findIndex = findIndex_1.findIndex;
var first_1 = first$1;
operators.first = first_1.first;
var groupBy_1 = groupBy$1;
operators.groupBy = groupBy_1.groupBy;
var ignoreElements_1 = ignoreElements$1;
operators.ignoreElements = ignoreElements_1.ignoreElements;
var isEmpty_1 = isEmpty$1;
operators.isEmpty = isEmpty_1.isEmpty;
var last_1 = last$1;
operators.last = last_1.last;
var map_1 = map$1;
operators.map = map_1.map;
var mapTo_1 = mapTo$1;
operators.mapTo = mapTo_1.mapTo;
var materialize_1 = materialize$1;
operators.materialize = materialize_1.materialize;
var max_1 = max$1;
operators.max = max_1.max;
var merge_1 = merge$1;
operators.merge = merge_1.merge;
var mergeAll_1 = mergeAll$1;
operators.mergeAll = mergeAll_1.mergeAll;
var mergeMap_1 = mergeMap$1;
operators.mergeMap = mergeMap_1.mergeMap;
operators.flatMap = mergeMap_1.flatMap;
var mergeMapTo_1 = mergeMapTo$1;
operators.mergeMapTo = mergeMapTo_1.mergeMapTo;
var mergeScan_1 = mergeScan$1;
operators.mergeScan = mergeScan_1.mergeScan;
var min_1 = min$1;
operators.min = min_1.min;
var multicast_1 = multicast$1;
operators.multicast = multicast_1.multicast;
var observeOn_1 = observeOn$1;
operators.observeOn = observeOn_1.observeOn;
var onErrorResumeNext_1 = onErrorResumeNext$1;
operators.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
var pairwise_1 = pairwise$1;
operators.pairwise = pairwise_1.pairwise;
var partition_1 = partition$1;
operators.partition = partition_1.partition;
var pluck_1 = pluck$1;
operators.pluck = pluck_1.pluck;
var publish_1 = publish$1;
operators.publish = publish_1.publish;
var publishBehavior_1 = publishBehavior$1;
operators.publishBehavior = publishBehavior_1.publishBehavior;
var publishLast_1 = publishLast$1;
operators.publishLast = publishLast_1.publishLast;
var publishReplay_1 = publishReplay$1;
operators.publishReplay = publishReplay_1.publishReplay;
var race_1 = race$1;
operators.race = race_1.race;
var reduce_1 = reduce$1;
operators.reduce = reduce_1.reduce;
var repeat_1 = repeat$1;
operators.repeat = repeat_1.repeat;
var repeatWhen_1 = repeatWhen$1;
operators.repeatWhen = repeatWhen_1.repeatWhen;
var retry_1 = retry$1;
operators.retry = retry_1.retry;
var retryWhen_1 = retryWhen$1;
operators.retryWhen = retryWhen_1.retryWhen;
var refCount_1 = refCount$1;
operators.refCount = refCount_1.refCount;
var sample_1 = sample$1;
operators.sample = sample_1.sample;
var sampleTime_1 = sampleTime$1;
operators.sampleTime = sampleTime_1.sampleTime;
var scan_1 = scan$1;
operators.scan = scan_1.scan;
var sequenceEqual_1 = sequenceEqual$1;
operators.sequenceEqual = sequenceEqual_1.sequenceEqual;
var share_1 = share$1;
operators.share = share_1.share;
var shareReplay_1 = shareReplay$1;
operators.shareReplay = shareReplay_1.shareReplay;
var single_1 = single$1;
operators.single = single_1.single;
var skip_1 = skip$1;
operators.skip = skip_1.skip;
var skipLast_1 = skipLast$1;
operators.skipLast = skipLast_1.skipLast;
var skipUntil_1 = skipUntil$1;
operators.skipUntil = skipUntil_1.skipUntil;
var skipWhile_1 = skipWhile$1;
operators.skipWhile = skipWhile_1.skipWhile;
var startWith_1 = startWith$1;
operators.startWith = startWith_1.startWith;
var subscribeOn_1 = subscribeOn$1;
operators.subscribeOn = subscribeOn_1.subscribeOn;
var switchAll_1 = switchAll$1;
operators.switchAll = switchAll_1.switchAll;
var switchMap_1 = switchMap$1;
operators.switchMap = switchMap_1.switchMap;
var switchMapTo_1 = switchMapTo$1;
operators.switchMapTo = switchMapTo_1.switchMapTo;
var take_1 = take$1;
operators.take = take_1.take;
var takeLast_1 = takeLast$1;
operators.takeLast = takeLast_1.takeLast;
var takeUntil_1 = takeUntil$1;
operators.takeUntil = takeUntil_1.takeUntil;
var takeWhile_1 = takeWhile$1;
operators.takeWhile = takeWhile_1.takeWhile;
var tap_1 = tap$1;
operators.tap = tap_1.tap;
var throttle_1 = throttle;
operators.throttle = throttle_1.throttle;
var throttleTime_1 = throttleTime$1;
operators.throttleTime = throttleTime_1.throttleTime;
var throwIfEmpty_1 = throwIfEmpty$1;
operators.throwIfEmpty = throwIfEmpty_1.throwIfEmpty;
var timeInterval_1 = timeInterval$1;
operators.timeInterval = timeInterval_1.timeInterval;
var timeout_1 = timeout$1;
operators.timeout = timeout_1.timeout;
var timeoutWith_1 = timeoutWith$1;
operators.timeoutWith = timeoutWith_1.timeoutWith;
var timestamp_1 = timestamp$1;
operators.timestamp = timestamp_1.timestamp;
var toArray_1 = toArray$1;
operators.toArray = toArray_1.toArray;
var window_1 = window$2;
operators.window = window_1.window;
var windowCount_1 = windowCount$1;
operators.windowCount = windowCount_1.windowCount;
var windowTime_1 = windowTime$1;
operators.windowTime = windowTime_1.windowTime;
var windowToggle_1 = windowToggle$1;
operators.windowToggle = windowToggle_1.windowToggle;
var windowWhen_1 = windowWhen$1;
operators.windowWhen = windowWhen_1.windowWhen;
var withLatestFrom_1 = withLatestFrom$1;
operators.withLatestFrom = withLatestFrom_1.withLatestFrom;
var zip_1 = zip$1;
operators.zip = zip_1.zip;
var zipAll_1 = zipAll$1;
operators.zipAll = zipAll_1.zipAll;

var monitorCharacteristic$1 = {};

Object.defineProperty(monitorCharacteristic$1, "__esModule", {
  value: true
});
monitorCharacteristic$1.monitorCharacteristic = void 0;
var _rxjs$1 = rxjs;
var _logs$1 = lib;
var monitorCharacteristic = function monitorCharacteristic(characteristic) {
  return _rxjs$1.Observable.create(function (o) {
    (0, _logs$1.log)("ble-verbose", "start monitor " + characteristic.uuid);
    function onCharacteristicValueChanged(event) {
      var characteristic = event.target;
      if (characteristic.value) {
        o.next(Buffer.from(characteristic.value.buffer));
      }
    }
    characteristic.startNotifications().then(function () {
      characteristic.addEventListener("characteristicvaluechanged", onCharacteristicValueChanged);
    });
    return function () {
      (0, _logs$1.log)("ble-verbose", "end monitor " + characteristic.uuid);
      characteristic.stopNotifications();
    };
  });
};
monitorCharacteristic$1.monitorCharacteristic = monitorCharacteristic;

Object.defineProperty(TransportWebBLE, "__esModule", {
  value: true
});
TransportWebBLE["default"] = void 0;
var _hwTransport = _interopRequireDefault(Transport);
var _errors = index_cjs;
var _devices = lib$1;
var _sendAPDU = sendAPDU$1;
var _receiveAPDU = receiveAPDU$1;
var _logs = lib;
var _rxjs = rxjs;
var _operators = operators;
var _monitorCharacteristic = monitorCharacteristic$1;
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

/* eslint-disable prefer-template */
var requiresBluetooth = function requiresBluetooth() {
  // $FlowFixMe
  var _navigator = navigator,
    bluetooth = _navigator.bluetooth;
  if (typeof bluetooth === "undefined") {
    throw new Error("web bluetooth not supported");
  }
  return bluetooth;
};
var availability = function availability() {
  return _rxjs.Observable.create(function (observer) {
    var bluetooth = requiresBluetooth();
    var onAvailabilityChanged = function onAvailabilityChanged(e) {
      observer.next(e.value);
    };
    bluetooth.addEventListener("availabilitychanged", onAvailabilityChanged);
    var unsubscribed = false;
    bluetooth.getAvailability().then(function (available) {
      if (!unsubscribed) {
        observer.next(available);
      }
    });
    return function () {
      unsubscribed = true;
      bluetooth.removeEventListener("availabilitychanged", onAvailabilityChanged);
    };
  });
};
var transportsCache = {};
var requestDeviceParam = function requestDeviceParam() {
  return {
    filters: (0, _devices.getBluetoothServiceUuids)().map(function (uuid) {
      return {
        services: [uuid]
      };
    })
  };
};
var retrieveService = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(device) {
    var _yield$device$gatt$ge, _yield$device$gatt$ge2, service, infos;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (device.gatt) {
            _context.next = 2;
            break;
          }
          throw new Error("bluetooth gatt not found");
        case 2:
          _context.next = 4;
          return device.gatt.getPrimaryServices();
        case 4:
          _yield$device$gatt$ge = _context.sent;
          _yield$device$gatt$ge2 = _slicedToArray(_yield$device$gatt$ge, 1);
          service = _yield$device$gatt$ge2[0];
          if (service) {
            _context.next = 9;
            break;
          }
          throw new Error("bluetooth service not found");
        case 9:
          infos = (0, _devices.getInfosForServiceUuid)(service.uuid);
          if (infos) {
            _context.next = 12;
            break;
          }
          throw new Error("bluetooth service infos not found");
        case 12:
          return _context.abrupt("return", [service, infos]);
        case 13:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function retrieveService(_x) {
    return _ref.apply(this, arguments);
  };
}();
function _open2(_x2, _x3) {
  return _open.apply(this, arguments);
}
/**
 * react-native bluetooth BLE implementation
 * @example
 * import BluetoothTransport from "@ledgerhq/hw-transport-web-ble";
 */
function _open() {
  _open = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(deviceOrId, needsReconnect) {
    var device, bluetooth, _yield$retrieveServic, _yield$retrieveServic2, service, infos, deviceModel, writeUuid, notifyUuid, _yield$Promise$all, _yield$Promise$all2, writeC, notifyC, notifyObservable, notif, transport, _onDisconnect, beforeMTUTime, afterMTUTime;
    return _regeneratorRuntime().wrap(function _callee10$(_context10) {
      while (1) switch (_context10.prev = _context10.next) {
        case 0:
          if (!(typeof deviceOrId === "string")) {
            _context10.next = 10;
            break;
          }
          if (!transportsCache[deviceOrId]) {
            _context10.next = 4;
            break;
          }
          (0, _logs.log)("ble-verbose", "Transport in cache, using that.");
          return _context10.abrupt("return", transportsCache[deviceOrId]);
        case 4:
          bluetooth = requiresBluetooth(); // TODO instead we should "query" the device by its ID
          _context10.next = 7;
          return bluetooth.requestDevice(requestDeviceParam());
        case 7:
          device = _context10.sent;
          _context10.next = 11;
          break;
        case 10:
          device = deviceOrId;
        case 11:
          if (device.gatt.connected) {
            _context10.next = 15;
            break;
          }
          (0, _logs.log)("ble-verbose", "not connected. connecting...");
          _context10.next = 15;
          return device.gatt.connect();
        case 15:
          _context10.next = 17;
          return retrieveService(device);
        case 17:
          _yield$retrieveServic = _context10.sent;
          _yield$retrieveServic2 = _slicedToArray(_yield$retrieveServic, 2);
          service = _yield$retrieveServic2[0];
          infos = _yield$retrieveServic2[1];
          deviceModel = infos.deviceModel, writeUuid = infos.writeUuid, notifyUuid = infos.notifyUuid;
          _context10.next = 24;
          return Promise.all([service.getCharacteristic(writeUuid), service.getCharacteristic(notifyUuid)]);
        case 24:
          _yield$Promise$all = _context10.sent;
          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);
          writeC = _yield$Promise$all2[0];
          notifyC = _yield$Promise$all2[1];
          notifyObservable = (0, _monitorCharacteristic.monitorCharacteristic)(notifyC).pipe((0, _operators.tap)(function (value) {
            (0, _logs.log)("ble-frame", "<= " + value.toString("hex"));
          }), (0, _operators.share)());
          notif = notifyObservable.subscribe();
          transport = new BluetoothTransport$1(device, writeC, notifyObservable, deviceModel);
          if (device.gatt.connected) {
            _context10.next = 33;
            break;
          }
          throw new _errors.DisconnectedDevice();
        case 33:
          // eslint-disable-next-line require-atomic-updates

          transportsCache[transport.id] = transport;
          _onDisconnect = function onDisconnect(e) {
            console.log("onDisconnect!", e);
            delete transportsCache[transport.id];
            transport.notYetDisconnected = false;
            notif.unsubscribe();
            device.removeEventListener("gattserverdisconnected", _onDisconnect);
            (0, _logs.log)("ble-verbose", "BleTransport(".concat(transport.id, ") disconnected"));
            transport.emit("disconnect", e);
          };
          device.addEventListener("gattserverdisconnected", _onDisconnect);
          beforeMTUTime = Date.now();
          _context10.prev = 37;
          _context10.next = 40;
          return transport.inferMTU();
        case 40:
          _context10.prev = 40;
          afterMTUTime = Date.now(); // workaround for #279: we need to open() again if we come the first time here,
          // to make sure we do a disconnect() after the first pairing time
          // because of a firmware bug
          if (afterMTUTime - beforeMTUTime < 1000) {
            needsReconnect = false; // (optim) there is likely no new pairing done because mtu answer was fast.
          }
          if (!needsReconnect) {
            _context10.next = 48;
            break;
          }
          _context10.next = 46;
          return device.gatt.disconnect();
        case 46:
          _context10.next = 48;
          return new Promise(function (s) {
            return setTimeout(s, 4000);
          });
        case 48:
          return _context10.finish(40);
        case 49:
          if (!needsReconnect) {
            _context10.next = 51;
            break;
          }
          return _context10.abrupt("return", _open2(device, false));
        case 51:
          return _context10.abrupt("return", transport);
        case 52:
        case "end":
          return _context10.stop();
      }
    }, _callee10, null, [[37,, 40, 49]]);
  }));
  return _open.apply(this, arguments);
}
var BluetoothTransport$1 = /*#__PURE__*/function (_hwTransport$default) {
  /**
   * globally disconnect a bluetooth device by its id.
   */

  function BluetoothTransport(device, writeCharacteristic, notifyObservable, deviceModel) {
    var _this;
    _classCallCheck(this, BluetoothTransport);
    _this = _callSuper(this, BluetoothTransport);
    _this.id = void 0;
    _this.device = void 0;
    _this.mtuSize = 20;
    _this.writeCharacteristic = void 0;
    _this.notifyObservable = void 0;
    _this.notYetDisconnected = true;
    _this.deviceModel = void 0;
    _this.exchange = function (apdu) {
      return _this.exchangeAtomicImpl(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var msgIn, data, msgOut;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              msgIn = apdu.toString("hex");
              (0, _logs.log)("apdu", "=> ".concat(msgIn));
              _context2.next = 5;
              return (0, _rxjs.merge)(_this.notifyObservable.pipe(_receiveAPDU.receiveAPDU), (0, _sendAPDU.sendAPDU)(_this.write, apdu, _this.mtuSize)).toPromise();
            case 5:
              data = _context2.sent;
              msgOut = data.toString("hex");
              (0, _logs.log)("apdu", "<= ".concat(msgOut));
              return _context2.abrupt("return", data);
            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2["catch"](0);
              (0, _logs.log)("ble-error", "exchange got " + String(_context2.t0));
              if (_this.notYetDisconnected) {
                // in such case we will always disconnect because something is bad.
                _this.device.gatt.disconnect();
              }
              throw _context2.t0;
            case 16:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[0, 11]]);
      })));
    };
    _this.write = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(buffer) {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              (0, _logs.log)("ble-frame", "=> " + buffer.toString("hex"));
              _context3.next = 3;
              return _this.writeCharacteristic.writeValue(buffer);
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      return function (_x4) {
        return _ref3.apply(this, arguments);
      };
    }();
    _this.id = device.id;
    _this.device = device;
    _this.writeCharacteristic = writeCharacteristic;
    _this.notifyObservable = notifyObservable;
    _this.deviceModel = deviceModel;
    (0, _logs.log)("ble-verbose", "BleTransport(".concat(String(_this.id), ") new instance"));
    return _this;
  }
  _inherits(BluetoothTransport, _hwTransport$default);
  return _createClass(BluetoothTransport, [{
    key: "inferMTU",
    value: function () {
      var _inferMTU = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        var _this2 = this;
        var mtu, mtuSize;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              mtu = 23;
              _context5.next = 3;
              return this.exchangeAtomicImpl(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
                return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                  while (1) switch (_context4.prev = _context4.next) {
                    case 0:
                      _context4.prev = 0;
                      _context4.next = 3;
                      return (0, _rxjs.merge)(_this2.notifyObservable.pipe((0, _operators.first)(function (buffer) {
                        return buffer.readUInt8(0) === 0x08;
                      }), (0, _operators.map)(function (buffer) {
                        return buffer.readUInt8(5);
                      })), (0, _rxjs.defer)(function () {
                        return (0, _rxjs.from)(_this2.write(Buffer.from([0x08, 0, 0, 0, 0])));
                      }).pipe((0, _operators.ignoreElements)())).toPromise();
                    case 3:
                      _context4.t0 = _context4.sent;
                      mtu = _context4.t0 + 3;
                      _context4.next = 12;
                      break;
                    case 7:
                      _context4.prev = 7;
                      _context4.t1 = _context4["catch"](0);
                      (0, _logs.log)("ble-error", "inferMTU got " + String(_context4.t1));
                      _this2.device.gatt.disconnect();
                      throw _context4.t1;
                    case 12:
                    case "end":
                      return _context4.stop();
                  }
                }, _callee4, null, [[0, 7]]);
              })));
            case 3:
              if (mtu > 23) {
                mtuSize = mtu - 3;
                (0, _logs.log)("ble-verbose", "BleTransport(".concat(String(this.id), ") mtu set to ").concat(String(mtuSize)));
                this.mtuSize = mtuSize;
              }
              return _context5.abrupt("return", this.mtuSize);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function inferMTU() {
        return _inferMTU.apply(this, arguments);
      }
      return inferMTU;
    }()
    /**
     * Exchange with the device using APDU protocol.
     * @param apdu
     * @returns a promise of apdu response
     */
  }, {
    key: "setScrambleKey",
    value: function setScrambleKey() {}
  }, {
    key: "close",
    value: function () {
      var _close = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!this.exchangeBusyPromise) {
                _context6.next = 3;
                break;
              }
              _context6.next = 3;
              return this.exchangeBusyPromise;
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function close() {
        return _close.apply(this, arguments);
      }
      return close;
    }()
  }], [{
    key: "listen",
    value:
    /**
     * observe event with { available: bool, type: string }
     * (available is generic, type is specific)
     * an event is emit once and then each time it changes
     */

    /**
     * Scan for Ledger Bluetooth devices.
     * On this web implementation, it only emits ONE device, the one that was selected in the UI (if any).
     */
    function listen(observer) {
      (0, _logs.log)("ble-verbose", "listen...");
      var unsubscribed;
      var bluetooth = requiresBluetooth();
      bluetooth.requestDevice(requestDeviceParam()).then(/*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(device) {
          return _regeneratorRuntime().wrap(function _callee7$(_context7) {
            while (1) switch (_context7.prev = _context7.next) {
              case 0:
                if (!unsubscribed) {
                  observer.next({
                    type: "add",
                    descriptor: device
                  });
                  observer.complete();
                }
              case 1:
              case "end":
                return _context7.stop();
            }
          }, _callee7);
        }));
        return function (_x5) {
          return _ref5.apply(this, arguments);
        };
      }(), function (error) {
        observer.error(new _errors.TransportOpenUserCancelled(error.message));
      });
      function unsubscribe() {
        unsubscribed = true;
      }
      return {
        unsubscribe: unsubscribe
      };
    }
    /**
     * open a bluetooth device.
     */
  }, {
    key: "open",
    value: (function () {
      var _open3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(deviceOrId) {
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", _open2(deviceOrId, true));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function open(_x6) {
        return _open3.apply(this, arguments);
      }
      return open;
    }())
  }]);
}(_hwTransport["default"]);
TransportWebBLE["default"] = BluetoothTransport$1;
BluetoothTransport$1.isSupported = function () {
  return Promise.resolve().then(requiresBluetooth).then(function () {
    return true;
  }, function () {
    return false;
  });
};
BluetoothTransport$1.observeAvailability = function (observer) {
  return availability.subscribe(observer);
};
BluetoothTransport$1.list = function () {
  return Promise.resolve([]);
};
BluetoothTransport$1.disconnect = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(id) {
    var transport;
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          (0, _logs.log)("ble-verbose", "user disconnect(".concat(id, ")"));
          transport = transportsCache[id];
          if (transport) {
            transport.device.gatt.disconnect();
          }
        case 3:
        case "end":
          return _context9.stop();
      }
    }, _callee9);
  }));
  return function (_x7) {
    return _ref6.apply(this, arguments);
  };
}();

var dns = {};

var Dns$3 = {};

var parseAddress$2 = NftUtils.parseAddress;
var AdnlAddress = utils$1.AdnlAddress,
  StorageBagId = utils$1.StorageBagId,
  BN$1 = utils$1.BN,
  sha256 = utils$1.sha256,
  bytesToHex$1 = utils$1.bytesToHex,
  bytesToBase64 = utils$1.bytesToBase64;
var Cell$2 = boc$1.Cell;
var DNS_CATEGORY_NEXT_RESOLVER$1 = 'dns_next_resolver'; // Smart Contract address
var DNS_CATEGORY_WALLET$1 = 'wallet'; // Smart Contract address
var DNS_CATEGORY_SITE$1 = 'site'; // ADNL address or Bag ID
var DNS_CATEGORY_STORAGE$1 = 'storage'; // Bag ID

/**
 * @param category  {string | undefined}
 * @return  {BN}
 */
var categoryToBN$1 = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(category) {
    var categoryBytes, categoryHash;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (category) {
            _context.next = 2;
            break;
          }
          return _context.abrupt("return", new BN$1(0));
        case 2:
          // all categories
          categoryBytes = new TextEncoder().encode(category);
          _context.t0 = Uint8Array;
          _context.next = 6;
          return sha256(categoryBytes);
        case 6:
          _context.t1 = _context.sent;
          categoryHash = new _context.t0(_context.t1);
          return _context.abrupt("return", new BN$1(bytesToHex$1(categoryHash), 16));
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function categoryToBN(_x) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * @param smartContractAddress   {Address}
 * @return {Cell}
 */
var createSmartContractAddressRecord$1 = function createSmartContractAddressRecord(smartContractAddress) {
  var cell = new Cell$2();
  cell.bits.writeUint(0x9fd3, 16); // https://github.com/ton-blockchain/ton/blob/7e3df93ca2ab336716a230fceb1726d81bac0a06/crypto/block/block.tlb#L827
  cell.bits.writeAddress(smartContractAddress);
  cell.bits.writeUint(0, 8); // flags
  return cell;
};

/**
 * @param adnlAddress   {AdnlAddress}
 * @return {Cell}
 */
var createAdnlAddressRecord$1 = function createAdnlAddressRecord(adnlAddress) {
  var cell = new Cell$2();
  cell.bits.writeUint(0xad01, 16); // https://github.com/ton-blockchain/ton/blob/7e3df93ca2ab336716a230fceb1726d81bac0a06/crypto/block/block.tlb#L821
  cell.bits.writeBytes(adnlAddress.bytes);
  cell.bits.writeUint(0, 8); // flags
  return cell;
};

/**
 * @param storageBagId   {StorageBagId}
 * @return {Cell}
 */
var createStorageBagIdRecord$1 = function createStorageBagIdRecord(storageBagId) {
  var cell = new Cell$2();
  cell.bits.writeUint(0x7473, 16);
  cell.bits.writeBytes(storageBagId.bytes);
  return cell;
};

/**
 * @param smartContractAddress   {Address}
 * @return {Cell}
 */
var createNextResolverRecord$1 = function createNextResolverRecord(smartContractAddress) {
  var cell = new Cell$2();
  cell.bits.writeUint(0xba93, 16); // https://github.com/ton-blockchain/ton/blob/7e3df93ca2ab336716a230fceb1726d81bac0a06/crypto/block/block.tlb#L819
  cell.bits.writeAddress(smartContractAddress);
  return cell;
};

/**
 * @private
 * @param cell  {Cell}
 * @param prefix0 {number}
 * @param prefix1 {number}
 * @return {Address|null}
 */
var parseSmartContractAddressImpl = function parseSmartContractAddressImpl(cell, prefix0, prefix1) {
  if (cell.bits.array[0] !== prefix0 || cell.bits.array[1] !== prefix1) throw new Error('Invalid dns record value prefix');
  cell.bits.array = cell.bits.array.slice(2); // skip prefix - first 16 bits
  return parseAddress$2(cell);
};

/**
 * @param cell  {Cell}
 * @return {Address|null}
 */
var parseSmartContractAddressRecord$1 = function parseSmartContractAddressRecord(cell) {
  return parseSmartContractAddressImpl(cell, 0x9f, 0xd3);
};

/**
 * @param cell  {Cell}
 * @return {Address|null}
 */
var parseNextResolverRecord$1 = function parseNextResolverRecord(cell) {
  return parseSmartContractAddressImpl(cell, 0xba, 0x93);
};

/**
 * @param cell  {Cell}
 * @return {AdnlAddress}
 */
var parseAdnlAddressRecord$1 = function parseAdnlAddressRecord(cell) {
  if (cell.bits.array[0] !== 0xad || cell.bits.array[1] !== 0x01) throw new Error('Invalid dns record value prefix');
  var bytes = cell.bits.array.slice(2, 2 + 32); // skip prefix - first 16 bits
  return new AdnlAddress(bytes);
};

/**
 * @param cell  {Cell}
 * @return {StorageBagId}
 */
var parseStorageBagIdRecord$1 = function parseStorageBagIdRecord(cell) {
  if (cell.bits.array[0] !== 0x74 || cell.bits.array[1] !== 0x73) throw new Error('Invalid dns record value prefix');
  var bytes = cell.bits.array.slice(2, 2 + 32); // skip prefix - first 16 bits
  return new StorageBagId(bytes);
};

/**
 * @param cell  {Cell}
 * @return {AdnlAddress|StorageBagId|null}
 */
var parseSiteRecord$1 = function parseSiteRecord(cell) {
  if (!cell) return null;
  if (cell.bits.array[0] === 0xad || cell.bits.array[1] === 0x01) {
    return parseAdnlAddressRecord$1(cell);
  } else {
    return parseStorageBagIdRecord$1(cell);
  }
};

/**
 * @private
 * @param provider  {HttpProvider}
 * @param dnsAddress   {string} address of dns smart contract
 * @param rawDomainBytes {Uint8Array}
 * @param category  {string | undefined} category of requested DNS record
 * @param oneStep {boolean | undefined} non-recursive
 * @returns {Promise<Cell | Address | AdnlAddress | StorageBagId | null>}
 */
var _dnsResolveImpl = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(provider, dnsAddress, rawDomainBytes, category, oneStep) {
    var len, domainCell, categoryBN, result, resultLen, cell, nextAddress;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          len = rawDomainBytes.length * 8;
          domainCell = new Cell$2();
          domainCell.bits.writeBytes(rawDomainBytes);
          _context2.next = 5;
          return categoryToBN$1(category);
        case 5:
          categoryBN = _context2.sent;
          _context2.t0 = provider;
          _context2.t1 = dnsAddress;
          _context2.t2 = bytesToBase64;
          _context2.next = 11;
          return domainCell.toBoc(false);
        case 11:
          _context2.t3 = _context2.sent;
          _context2.t4 = (0, _context2.t2)(_context2.t3);
          _context2.t5 = ['tvm.Slice', _context2.t4];
          _context2.t6 = ['num', categoryBN.toString()];
          _context2.t7 = [_context2.t5, _context2.t6];
          _context2.next = 18;
          return _context2.t0.call2.call(_context2.t0, _context2.t1, 'dnsresolve', _context2.t7);
        case 18:
          result = _context2.sent;
          if (!(result.length !== 2)) {
            _context2.next = 21;
            break;
          }
          throw new Error('Invalid dnsresolve response');
        case 21:
          resultLen = result[0].toNumber();
          cell = result[1];
          if (cell instanceof Array && cell.length === 0) {
            cell = null;
          }
          if (!(cell && !cell.bits)) {
            _context2.next = 26;
            break;
          }
          throw new Error('Invalid dnsresolve response');
        case 26:
          if (!(resultLen === 0)) {
            _context2.next = 28;
            break;
          }
          return _context2.abrupt("return", null);
        case 28:
          if (!(resultLen % 8 !== 0)) {
            _context2.next = 30;
            break;
          }
          throw new Error('domain split not at a component boundary');
        case 30:
          if (!(resultLen > len)) {
            _context2.next = 34;
            break;
          }
          throw new Error('invalid response ' + resultLen + '/' + len);
        case 34:
          if (!(resultLen === len)) {
            _context2.next = 54;
            break;
          }
          if (!(category === DNS_CATEGORY_NEXT_RESOLVER$1)) {
            _context2.next = 39;
            break;
          }
          return _context2.abrupt("return", cell ? parseNextResolverRecord$1(cell) : null);
        case 39:
          if (!(category === DNS_CATEGORY_WALLET$1)) {
            _context2.next = 43;
            break;
          }
          return _context2.abrupt("return", cell ? parseSmartContractAddressRecord$1(cell) : null);
        case 43:
          if (!(category === DNS_CATEGORY_SITE$1)) {
            _context2.next = 47;
            break;
          }
          return _context2.abrupt("return", cell ? parseSiteRecord$1(cell) : null);
        case 47:
          if (!(category === DNS_CATEGORY_STORAGE$1)) {
            _context2.next = 51;
            break;
          }
          return _context2.abrupt("return", cell ? parseStorageBagIdRecord$1(cell) : null);
        case 51:
          return _context2.abrupt("return", cell);
        case 52:
          _context2.next = 70;
          break;
        case 54:
          if (cell) {
            _context2.next = 58;
            break;
          }
          return _context2.abrupt("return", null);
        case 58:
          nextAddress = parseNextResolverRecord$1(cell);
          if (!oneStep) {
            _context2.next = 67;
            break;
          }
          if (!(category === DNS_CATEGORY_NEXT_RESOLVER$1)) {
            _context2.next = 64;
            break;
          }
          return _context2.abrupt("return", nextAddress);
        case 64:
          return _context2.abrupt("return", null);
        case 65:
          _context2.next = 70;
          break;
        case 67:
          _context2.next = 69;
          return _dnsResolveImpl(provider, nextAddress.toString(), rawDomainBytes.slice(resultLen / 8), category, false);
        case 69:
          return _context2.abrupt("return", _context2.sent);
        case 70:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function dnsResolveImpl(_x2, _x3, _x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * Verify and convert domain
 * @param domain    {string}
 * @return {Uint8Array}
 */
var domainToBytes = function domainToBytes(domain) {
  if (!domain || !domain.length) {
    throw new Error('empty domain');
  }
  if (domain === '.') {
    return new Uint8Array([0]);
  }
  domain = domain.toLowerCase();
  for (var i = 0; i < domain.length; i++) {
    if (domain.charCodeAt(i) <= 32) {
      throw new Error('bytes in range 0..32 are not allowed in domain names');
    }
  }
  for (var _i = 0; _i < domain.length; _i++) {
    var s = domain.substring(_i, _i + 1);
    for (var c = 127; c <= 159; c++) {
      // another control codes range
      if (s === String.fromCharCode(c)) {
        throw new Error('bytes in range 127..159 are not allowed in domain names');
      }
    }
  }
  var arr = domain.split('.');
  arr.forEach(function (part) {
    if (!part.length) {
      throw new Error('domain name cannot have an empty component');
    }
  });
  var rawDomain = arr.reverse().join('\0') + '\0';
  if (rawDomain.length < 126) {
    rawDomain = '\0' + rawDomain;
  }
  return new TextEncoder().encode(rawDomain);
};

/**
 * @param provider  {HttpProvider}
 * @param rootDnsAddress {string} address of root DNS smart contract
 * @param domain    {string} e.g "sub.alice.ton"
 * @param category  {string | undefined} category of requested DNS record
 * @param oneStep {boolean | undefined} non-recursive
 * @returns {Promise<Cell | Address | AdnlAddress | StorageBagId | null>}
 */
var dnsResolve$3 = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(provider, rootDnsAddress, domain, category, oneStep) {
    var rawDomainBytes;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          rawDomainBytes = domainToBytes(domain);
          return _context3.abrupt("return", _dnsResolveImpl(provider, rootDnsAddress, rawDomainBytes, category, oneStep));
        case 2:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function dnsResolve(_x7, _x8, _x9, _x10, _x11) {
    return _ref3.apply(this, arguments);
  };
}();
var DnsUtils = {
  DNS_CATEGORY_NEXT_RESOLVER: DNS_CATEGORY_NEXT_RESOLVER$1,
  DNS_CATEGORY_SITE: DNS_CATEGORY_SITE$1,
  DNS_CATEGORY_WALLET: DNS_CATEGORY_WALLET$1,
  DNS_CATEGORY_STORAGE: DNS_CATEGORY_STORAGE$1,
  categoryToBN: categoryToBN$1,
  domainToBytes: domainToBytes,
  createSmartContractAddressRecord: createSmartContractAddressRecord$1,
  createAdnlAddressRecord: createAdnlAddressRecord$1,
  createNextResolverRecord: createNextResolverRecord$1,
  parseSmartContractAddressRecord: parseSmartContractAddressRecord$1,
  parseAdnlAddressRecord: parseAdnlAddressRecord$1,
  parseStorageBagIdRecord: parseStorageBagIdRecord$1,
  parseSiteRecord: parseSiteRecord$1,
  parseNextResolverRecord: parseNextResolverRecord$1,
  createStorageBagIdRecord: createStorageBagIdRecord$1,
  dnsResolve: dnsResolve$3
};

boc$1.Cell;
var Address$1 = utils$1.Address,
  bytesToHex = utils$1.bytesToHex;
var DNS_CATEGORY_NEXT_RESOLVER = DnsUtils.DNS_CATEGORY_NEXT_RESOLVER,
  DNS_CATEGORY_SITE = DnsUtils.DNS_CATEGORY_SITE,
  DNS_CATEGORY_WALLET = DnsUtils.DNS_CATEGORY_WALLET,
  DNS_CATEGORY_STORAGE = DnsUtils.DNS_CATEGORY_STORAGE,
  createSmartContractAddressRecord = DnsUtils.createSmartContractAddressRecord,
  createAdnlAddressRecord = DnsUtils.createAdnlAddressRecord,
  createStorageBagIdRecord = DnsUtils.createStorageBagIdRecord,
  createNextResolverRecord = DnsUtils.createNextResolverRecord,
  parseSmartContractAddressRecord = DnsUtils.parseSmartContractAddressRecord,
  parseAdnlAddressRecord = DnsUtils.parseAdnlAddressRecord,
  parseStorageBagIdRecord = DnsUtils.parseStorageBagIdRecord,
  parseSiteRecord = DnsUtils.parseSiteRecord,
  parseNextResolverRecord = DnsUtils.parseNextResolverRecord,
  dnsResolve$2 = DnsUtils.dnsResolve;
var Dns$2 = /*#__PURE__*/function () {
  /**
   * @param provider  {HttpProvider}
   */
  function Dns(provider) {
    _classCallCheck(this, Dns);
    this.provider = provider;
  }

  /**
   * @returns {Promise<Address>}
   */
  return _createClass(Dns, [{
    key: "getRootDnsAddress",
    value: (function () {
      var _getRootDnsAddress = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var cell, byteArray, hex;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.provider.getConfigParam(4);
            case 2:
              cell = _context.sent;
              byteArray = cell.bits.array;
              if (!(byteArray.length !== 256 / 8)) {
                _context.next = 6;
                break;
              }
              throw new Error('Invalid ConfigParam 4 length ' + byteArray.length);
            case 6:
              hex = bytesToHex(byteArray);
              return _context.abrupt("return", new Address$1('-1:' + hex));
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getRootDnsAddress() {
        return _getRootDnsAddress.apply(this, arguments);
      }
      return getRootDnsAddress;
    }()
    /**
     * @param domain    {string} e.g "sub.alice.ton"
     * @param category  {string | undefined} category of requested DNS record, null for all categories
     * @param oneStep {boolean | undefined}  non-recursive
     * @returns {Promise<Cell | Address | AdnlAddress | StorageBagId | null>}
     */
    )
  }, {
    key: "resolve",
    value: (function () {
      var _resolve = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(domain, category, oneStep) {
        var rootDnsAddress;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.getRootDnsAddress();
            case 2:
              rootDnsAddress = _context2.sent;
              return _context2.abrupt("return", dnsResolve$2(this.provider, rootDnsAddress.toString(), domain, category, oneStep));
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function resolve(_x, _x2, _x3) {
        return _resolve.apply(this, arguments);
      }
      return resolve;
    }()
    /**
     * @param domain    {string} e.g "sub.alice.ton"
     * @returns {Promise<Address | null>}
     */
    )
  }, {
    key: "getWalletAddress",
    value: function getWalletAddress(domain) {
      return this.resolve(domain, DNS_CATEGORY_WALLET);
    }

    /**
     * @param domain    {string} e.g "sub.alice.ton"
     * @returns {Promise<AdnlAddress | StorageBagId | null>}
     */
  }, {
    key: "getSiteAddress",
    value: function getSiteAddress(domain) {
      return this.resolve(domain, DNS_CATEGORY_SITE);
    }
  }]);
}();
Dns$2.resolve = dnsResolve$2;
Dns$2.createSmartContractAddressRecord = createSmartContractAddressRecord;
Dns$2.createAdnlAddressRecord = createAdnlAddressRecord;
Dns$2.createStorageBagIdRecord = createStorageBagIdRecord;
Dns$2.createNextResolverRecord = createNextResolverRecord;
Dns$2.parseNextResolverRecord = parseNextResolverRecord;
Dns$2.parseAdnlAddressRecord = parseAdnlAddressRecord;
Dns$2.parseStorageBagIdRecord = parseStorageBagIdRecord;
Dns$2.parseSiteRecord = parseSiteRecord;
Dns$2.parseSmartContractAddressRecord = parseSmartContractAddressRecord;
Dns$2.DNS_CATEGORY_NEXT_RESOLVER = DNS_CATEGORY_NEXT_RESOLVER;
Dns$2.DNS_CATEGORY_WALLET = DNS_CATEGORY_WALLET;
Dns$2.DNS_CATEGORY_SITE = DNS_CATEGORY_SITE;
Dns$2.DNS_CATEGORY_STORAGE = DNS_CATEGORY_STORAGE;
Dns$3["default"] = Dns$2;

var Contract$2 = contract.Contract;
var Cell$1 = boc$1.Cell;
utils$1.Address;
var parseAddress$1 = NftUtils.parseAddress;
var dnsResolve$1 = DnsUtils.dnsResolve;
var parseOffchainUriCell = NftUtils.parseOffchainUriCell;
var DnsCollection$2 = /*#__PURE__*/function (_Contract) {
  /**
   * @param provider
   * @param options   {{collectionContent: Cell, dnsItemCodeHex: string, address?: Address | string, code?: Cell}}
   */
  function DnsCollection(provider, options) {
    var _this;
    _classCallCheck(this, DnsCollection);
    options.wc = 0;
    options.code = options.code;
    _this = _callSuper(this, DnsCollection, [provider, options]);
    if (!options.collectionContent && !options.address) throw new Error('required collectionContent cell');
    _this.methods.getCollectionData = _this.getCollectionData.bind(_this);
    _this.methods.getNftItemAddressByIndex = _this.getNftItemAddressByIndex.bind(_this);
    _this.methods.getNftItemContent = _this.getNftItemContent.bind(_this);
    _this.methods.resolve = _this.resolve.bind(_this);
    return _this;
  }

  /**
   * @override
   * @private
   * @return {Cell} cell contains dns collection data
   */
  _inherits(DnsCollection, _Contract);
  return _createClass(DnsCollection, [{
    key: "createDataCell",
    value: function createDataCell() {
      var cell = new Cell$1();
      cell.refs[0] = this.options.collectionContent;
      cell.refs[1] = Cell$1.oneFromBoc(this.options.dnsItemCodeHex);
      return cell;
    }

    /**
     * @return {Promise<{collectionContent: Cell}>}
     */
  }, {
    key: "getCollectionData",
    value: (function () {
      var _getCollectionData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var myAddress, result, nextItemIndex, collectionContent, collectionContentUri;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context.sent;
              _context.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_collection_data');
            case 5:
              result = _context.sent;
              nextItemIndex = result[0].toNumber();
              collectionContent = result[1];
              collectionContentUri = parseOffchainUriCell(collectionContent);
              return _context.abrupt("return", {
                collectionContentUri: collectionContentUri,
                collectionContent: collectionContent,
                ownerAddress: null,
                nextItemIndex: nextItemIndex
              });
            case 10:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getCollectionData() {
        return _getCollectionData.apply(this, arguments);
      }
      return getCollectionData;
    }()
    /**
     * @param nftItem   {DnsItem}
     * @return {Promise<{isInitialized: boolean, index: BN, collectionAddress: Address|null, ownerAddress: Address|null, contentCell: Cell}>}
     */
    )
  }, {
    key: "getNftItemContent",
    value: (function () {
      var _getNftItemContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(nftItem) {
        var nftData;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return nftItem.getData();
            case 2:
              nftData = _context2.sent;
              return _context2.abrupt("return", nftData);
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function getNftItemContent(_x) {
        return _getNftItemContent.apply(this, arguments);
      }
      return getNftItemContent;
    }()
    /**
     * @param index {BN}
     * @return {Promise<Address>}
     */
    )
  }, {
    key: "getNftItemAddressByIndex",
    value: (function () {
      var _getNftItemAddressByIndex = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(index) {
        var myAddress, result;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context3.sent;
              _context3.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_nft_address_by_index', [['num', index.toString()]]);
            case 5:
              result = _context3.sent;
              return _context3.abrupt("return", parseAddress$1(result));
            case 7:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getNftItemAddressByIndex(_x2) {
        return _getNftItemAddressByIndex.apply(this, arguments);
      }
      return getNftItemAddressByIndex;
    }()
    /**
     * @param domain    {string} e.g "sub.alice.ton"
     * @param category?  {string} category of requested DNS record, null for all categories
     * @param oneStep? {boolean} non-recursive
     * @returns {Promise<Cell | Address | AdnlAddress | StorageBagId | null>}
     */
    )
  }, {
    key: "resolve",
    value: (function () {
      var _resolve = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(domain, category, oneStep) {
        var myAddress;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context4.sent;
              return _context4.abrupt("return", dnsResolve$1(this.provider, myAddress.toString(), domain, category, oneStep));
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function resolve(_x3, _x4, _x5) {
        return _resolve.apply(this, arguments);
      }
      return resolve;
    }())
  }]);
}(Contract$2);
var DnsCollection_1 = {
  DnsCollection: DnsCollection$2
};

var Contract$1 = contract.Contract;
var Cell = boc$1.Cell;
utils$1.Address;
  var BN = utils$1.BN;
var parseAddress = NftUtils.parseAddress;
var dnsResolve = DnsUtils.dnsResolve,
  categoryToBN = DnsUtils.categoryToBN;
var DnsItem$2 = /*#__PURE__*/function (_Contract) {
  /**
   * @param provider
   * @param options   {{index: BN, collectionAddress: Address, address?: Address | string, code?: Cell}}
   */
  function DnsItem(provider, options) {
    var _this;
    _classCallCheck(this, DnsItem);
    options.wc = 0;
    options.code = options.code;
    _this = _callSuper(this, DnsItem, [provider, options]);
    _this.methods.getData = _this.getData.bind(_this);
    _this.methods.getDomain = _this.getDomain.bind(_this);
    _this.methods.getAuctionInfo = _this.getAuctionInfo.bind(_this);
    _this.methods.getLastFillUpTime = _this.getLastFillUpTime.bind(_this);
    _this.methods.resolve = _this.resolve.bind(_this);
    return _this;
  }

  /**
   * @override
   * @private
   * @return {Cell} cell contains nft data
   */
  _inherits(DnsItem, _Contract);
  return _createClass(DnsItem, [{
    key: "createDataCell",
    value: function createDataCell() {
      var cell = new Cell();
      cell.bits.writeUint(this.options.index, 256);
      cell.bits.writeAddress(this.options.collectionAddress);
      return cell;
    }

    /**
     * @return {Promise<{isInitialized: boolean, index: BN, collectionAddress: Address|null, ownerAddress: Address|null, contentCell: Cell}>}
     */
  }, {
    key: "getData",
    value: (function () {
      var _getData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var myAddress, result, isInitialized, index, collectionAddress, ownerAddress, contentCell;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context.sent;
              _context.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_nft_data');
            case 5:
              result = _context.sent;
              isInitialized = result[0].toNumber() === -1;
              index = result[1];
              collectionAddress = parseAddress(result[2]);
              ownerAddress = isInitialized ? parseAddress(result[3]) : null;
              contentCell = result[4];
              return _context.abrupt("return", {
                isInitialized: isInitialized,
                index: index,
                collectionAddress: collectionAddress,
                ownerAddress: ownerAddress,
                contentCell: contentCell
              });
            case 12:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getData() {
        return _getData.apply(this, arguments);
      }
      return getData;
    }()
    /**
     * @param params    {{queryId?: number, newOwnerAddress: Address, forwardAmount?: BN, forwardPayload?: Uint8Array, responseAddress: Address}}
     */
    )
  }, {
    key: "createTransferBody",
    value: (function () {
      var _createTransferBody = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {
        var cell;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              cell = new Cell();
              cell.bits.writeUint(0x5fcc3d14, 32); // transfer op
              cell.bits.writeUint(params.queryId || 0, 64);
              cell.bits.writeAddress(params.newOwnerAddress);
              cell.bits.writeAddress(params.responseAddress);
              cell.bits.writeBit(false); // null custom_payload
              cell.bits.writeCoins(params.forwardAmount || new BN(0));
              cell.bits.writeBit(false); // forward_payload in this slice, not separate cell

              if (params.forwardPayload) {
                cell.bits.writeBytes(params.forwardPayload);
              }
              return _context2.abrupt("return", cell);
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function createTransferBody(_x) {
        return _createTransferBody.apply(this, arguments);
      }
      return createTransferBody;
    }()
    /**
     * params   {{queryId?: number}}
     * @return {Cell}
     */
    )
  }, {
    key: "createGetStaticDataBody",
    value: function createGetStaticDataBody(params) {
      var body = new Cell();
      body.bits.writeUint(0x2fcb26a2, 32); // OP
      body.bits.writeUint(params.queryId || 0, 64); // query_id
      return body;
    }

    /**
     * @return {Promise<string>}
     */
  }, {
    key: "getDomain",
    value: (function () {
      var _getDomain = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var myAddress, result;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context3.sent;
              _context3.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_domain');
            case 5:
              result = _context3.sent;
              return _context3.abrupt("return", new TextDecoder().decode(result.bits.array.buffer));
            case 7:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getDomain() {
        return _getDomain.apply(this, arguments);
      }
      return getDomain;
    }()
    /**
     * @return {Promise<{maxBidAddress: Address|null, maxBidAmount: BN, auctionEndTime: number}>}
     */
    )
  }, {
    key: "getAuctionInfo",
    value: (function () {
      var _getAuctionInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var myAddress, result, maxBidAddress, maxBidAmount, auctionEndTime;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context4.sent;
              _context4.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_auction_info');
            case 5:
              result = _context4.sent;
              maxBidAddress = parseAddress(result[0]);
              maxBidAmount = result[1];
              auctionEndTime = result[2].toNumber();
              return _context4.abrupt("return", {
                maxBidAddress: maxBidAddress,
                maxBidAmount: maxBidAmount,
                auctionEndTime: auctionEndTime
              });
            case 10:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function getAuctionInfo() {
        return _getAuctionInfo.apply(this, arguments);
      }
      return getAuctionInfo;
    }()
    /**
     * @return {Promise<number>}
     */
    )
  }, {
    key: "getLastFillUpTime",
    value: (function () {
      var _getLastFillUpTime = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        var myAddress, result;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context5.sent;
              _context5.next = 5;
              return this.provider.call2(myAddress.toString(), 'get_last_fill_up_time');
            case 5:
              result = _context5.sent;
              return _context5.abrupt("return", result.toNumber());
            case 7:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getLastFillUpTime() {
        return _getLastFillUpTime.apply(this, arguments);
      }
      return getLastFillUpTime;
    }()
    /**
     * @param domain    {string} e.g "sub.alice.ton"
     * @param category?  {string} category of requested DNS record, null for all categories
     * @param oneStep? {boolean} non-recursive
     * @returns {Promise<Cell | Address | AdnlAddress | StorageBagId | null>}
     */
    )
  }, {
    key: "resolve",
    value: (function () {
      var _resolve = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(domain, category, oneStep) {
        var myAddress;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.getAddress();
            case 2:
              myAddress = _context6.sent;
              return _context6.abrupt("return", dnsResolve(this.provider, myAddress.toString(), domain, category, oneStep));
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function resolve(_x2, _x3, _x4) {
        return _resolve.apply(this, arguments);
      }
      return resolve;
    }())
  }]);
}(Contract$1);
/**
 * params   {{category: string, value: Cell|null, queryId?: number}}
 * @return {Cell}
 */
DnsItem$2.createChangeContentEntryBody = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(params) {
    var body;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          body = new Cell();
          body.bits.writeUint(0x4eb1f0f9, 32); // OP
          body.bits.writeUint(params.queryId || 0, 64); // query_id
          _context7.t0 = body.bits;
          _context7.next = 6;
          return categoryToBN(params.category);
        case 6:
          _context7.t1 = _context7.sent;
          _context7.t0.writeUint.call(_context7.t0, _context7.t1, 256);
          if (params.value) {
            body.refs[0] = params.value;
          }
          return _context7.abrupt("return", body);
        case 10:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  }));
  return function (_x5) {
    return _ref.apply(this, arguments);
  };
}();
var DnsItem_1 = {
  DnsItem: DnsItem$2
};

var Dns$1 = Dns$3["default"];
var DnsCollection$1 = DnsCollection_1.DnsCollection;
var DnsItem$1 = DnsItem_1.DnsItem;
dns["default"] = {
  Dns: Dns$1,
  DnsCollection: DnsCollection$1,
  DnsItem: DnsItem$1
};

var utils = utils$1;
var Address = utils.Address;
var boc = boc$1;
var AppTon = AppTon_1;
var HttpProvider = providers["default"];
var Contract = contract.Contract;
var Wallets = wallet["default"];
var LockupWallets = lockup["default"];
var HighloadWallets = highloadWallet["default"];
var NFT = nft["default"];
var JETTON = ft["default"];
var BlockSubscription = blockSubscription.BlockSubscription,
  InMemoryBlockStorage = blockSubscription.InMemoryBlockStorage;
var SubscriptionContract = subscription.SubscriptionContract;
var Payments = payments.Payments,
  PaymentChannel = payments.PaymentChannel;
var TransportWebUSB = TransportWebUSB$2["default"];
var TransportWebHID = TransportWebHID$2["default"];
var BluetoothTransport = TransportWebBLE["default"];
var _require$$16$default = dns["default"],
  Dns = _require$$16$default.Dns,
  DnsCollection = _require$$16$default.DnsCollection,
  DnsItem = _require$$16$default.DnsItem;
var version = '0.0.66';
var TonWeb = /*#__PURE__*/function () {
  function TonWeb(provider) {
    _classCallCheck(this, TonWeb);
    this.version = version;
    this.utils = utils;
    this.Address = Address;
    this.boc = boc;
    this.Contract = Contract;
    this.BlockSubscription = BlockSubscription;
    this.InMemoryBlockStorage = InMemoryBlockStorage;
    this.provider = provider || new HttpProvider();
    this.dns = new Dns(this.provider);
    this.wallet = new Wallets(this.provider);
    this.payments = new Payments(this.provider);
    this.lockupWallet = LockupWallets;
  }

  /**
   * Use this method to get transaction history of a given address.
   * @param address   {Address | string}
   * @param limit?    {number}
   * @param lt?    {number}
   * @param txhash?    {string}   in HEX
   * @param to_lt?    {number}
   * @return array of transaction objects
   */
  return _createClass(TonWeb, [{
    key: "getTransactions",
    value: (function () {
      var _getTransactions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(address) {
        var limit,
          lt,
          txhash,
          to_lt,
          _args = arguments;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              limit = _args.length > 1 && _args[1] !== undefined ? _args[1] : 20;
              lt = _args.length > 2 && _args[2] !== undefined ? _args[2] : undefined;
              txhash = _args.length > 3 && _args[3] !== undefined ? _args[3] : undefined;
              to_lt = _args.length > 4 && _args[4] !== undefined ? _args[4] : undefined;
              return _context.abrupt("return", this.provider.getTransactions(address.toString(), limit, lt, txhash, to_lt));
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getTransactions(_x) {
        return _getTransactions.apply(this, arguments);
      }
      return getTransactions;
    }())
  }, {
    key: "getBalance",
    value: (
    /**
     * @param address   {Address | string}
     * @return {Promise<string>} - The current balance for the given address in nanograms.
     */
    function () {
      var _getBalance = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(address) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.provider.getBalance(address.toString()));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getBalance(_x2) {
        return _getBalance.apply(this, arguments);
      }
      return getBalance;
    }()
    /**
     * Use this method to send serialized boc file: fully packed and serialized external message.
     * @param bytes {Uint8Array}
     */
    )
  }, {
    key: "sendBoc",
    value: (function () {
      var _sendBoc = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(bytes) {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this.provider.sendBoc(utils.bytesToBase64(bytes)));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function sendBoc(_x3) {
        return _sendBoc.apply(this, arguments);
      }
      return sendBoc;
    }()
    /**
     * Invoke get-method of smart contract
     * @param address   {Address | string}    contract address
     * @param method   {string | number}        method name or method id
     * @param params?   Array of stack elements: [['num',3], ['cell', cell_object], ['slice', slice_object]]
     */
    )
  }, {
    key: "call",
    value: (function () {
      var _call = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(address, method) {
        var params,
          _args4 = arguments;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              params = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : [];
              return _context4.abrupt("return", this.provider.call(address.toString(), method, params));
            case 2:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function call(_x4, _x5) {
        return _call.apply(this, arguments);
      }
      return call;
    }())
  }]);
}();
TonWeb.version = version;
TonWeb.utils = utils;
TonWeb.Address = Address;
TonWeb.boc = boc;
TonWeb.HttpProvider = HttpProvider;
TonWeb.Contract = Contract;
TonWeb.Wallets = Wallets;
TonWeb.LockupWallets = LockupWallets;
TonWeb.SubscriptionContract = SubscriptionContract;
TonWeb.BlockSubscription = BlockSubscription;
TonWeb.InMemoryBlockStorage = InMemoryBlockStorage;
TonWeb.ledger = {
  TransportWebUSB: TransportWebUSB,
  TransportWebHID: TransportWebHID,
  BluetoothTransport: BluetoothTransport,
  AppTon: AppTon
};
TonWeb.token = {
  nft: NFT,
  ft: JETTON,
  jetton: JETTON
};
TonWeb.HighloadWallets = HighloadWallets;
TonWeb.dns = Dns;
TonWeb.dns.DnsCollection = DnsCollection;
TonWeb.dns.DnsItem = DnsItem;
TonWeb.payments = Payments;
TonWeb.payments.PaymentChannel = PaymentChannel;
var src = TonWeb;
var TonWeb$1 = /*@__PURE__*/getDefaultExportFromCjs(src);

var Akedo2Chain = /** @class */ (function () {
    function Akedo2Chain(manifestUrl) {
        var _this = this;
        this.init = function (onConnect, onError) {
            _this.tonconnectUi.onStatusChange(function (wallet) {
                if (!wallet) {
                    onConnect("");
                    return;
                }
                onConnect(_this.getWalletAddress());
            }, function (err) {
                if (onError) {
                    onError(err.message);
                }
            });
        };
        this.connectWallet = function () {
            _this.tonconnectUi.openModal();
        };
        this.disconnectWallet = function () {
            if (!_this.tonconnectUi.connected) {
                _this.tonconnectUi.disconnect();
            }
        };
        this.payTon = function (payto, amount, payload) {
            var comment = new TonWeb$1.boc.Cell();
            comment.bits.writeUint(0, 32);
            comment.bits.writeString(payload);
            return _this.sendtoChain(payto, amount, comment);
        };
        this.getWalletAddress = function () {
            if (!_this.tonconnectUi.connected) {
                console.log("tonconnectUi not connected");
                return "";
            }
            var address = new TonWeb$1.utils.Address(_this.tonconnectUi.account.address);
            return address.toString(true, true);
        };
        this.checkin = function (checkInAddress, tgid) {
            var cell = new TonWeb$1.boc.Cell();
            cell.bits.writeUint(3391503513, 32);
            var tgidCell = new TonWeb$1.boc.Cell();
            tgidCell.bits.writeString(tgid);
            cell.refs.push(tgidCell);
            return _this.sendtoChain(checkInAddress, "0.008", cell);
        };
        this.sendtoChain = function (to, amount, payloadCell) {
            return new Promise(function (resolve, reject) { return __awaiter$1(_this, void 0, void 0, function () {
                var transaction, _a, _b;
                var _c, _d;
                var _this = this;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            _c = {
                                validUntil: Math.floor(Date.now() / 1000) + 60
                            };
                            _d = {
                                address: to,
                                amount: TonWeb$1.utils.toNano(amount).toString()
                            };
                            _b = (_a = TonWeb$1.utils).bytesToBase64;
                            return [4 /*yield*/, payloadCell.toBoc()];
                        case 1:
                            transaction = (_c.messages = [
                                (_d.payload = _b.apply(_a, [_e.sent()]),
                                    _d)
                            ],
                                _c);
                            this.tonconnectUi.sendTransaction(transaction).then(function (response) { return __awaiter$1(_this, void 0, void 0, function () {
                                var cell, retStr, _a, _b;
                                return __generator(this, function (_d) {
                                    switch (_d.label) {
                                        case 0:
                                            cell = TonWeb$1.boc.Cell.oneFromBoc(TonWeb$1.utils.base64ToBytes(response.boc));
                                            retStr = "broswer not support crypto";
                                            _d.label = 1;
                                        case 1:
                                            _d.trys.push([1, 3, , 4]);
                                            _b = (_a = TonWeb$1.utils).bytesToHex;
                                            return [4 /*yield*/, cell.hash()];
                                        case 2:
                                            retStr = _b.apply(_a, [_d.sent()]);
                                            return [3 /*break*/, 4];
                                        case 3:
                                            _d.sent();
                                            return [3 /*break*/, 4];
                                        case 4: return [2 /*return*/, resolve(retStr)];
                                    }
                                });
                            }); }).catch(function (er) {
                                return reject(er);
                            });
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        this.tonconnectUi = new TonConnectUI({
            manifestUrl: manifestUrl
        });
        this.tonconnectUi.uiOptions = {
            actionsConfiguration: {
                modals: ['before', 'error'],
                notifications: ['before', 'success', 'error']
            }
        };
    }
    return Akedo2Chain;
}());

export { Akedo2Chain };
